/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef switch_sai_rpc_H
#define switch_sai_rpc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "switch_sai_types.h"

namespace switch_sai {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class switch_sai_rpcIf {
 public:
  virtual ~switch_sai_rpcIf() {}
  virtual sai_thrift_status_t sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_id) = 0;
  virtual void sai_thrift_get_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual void sai_thrift_get_port_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_id, const int32_t number_of_counters, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids) = 0;
  virtual sai_thrift_status_t sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& thrift_fdb_entry) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid) = 0;
  virtual void sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual void sai_thrift_get_vlan_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_status_t sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_id) = 0;
  virtual void sai_thrift_get_vlan_id(sai_thrift_result_t& _return, const sai_thrift_object_id_t vlan_id) = 0;
  virtual void sai_thrift_create_vlan_members(sai_thrift_results_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode) = 0;
  virtual void sai_thrift_remove_vlan_members(sai_thrift_status_list_t& _return, const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vr_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& thrift_route_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_create_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode) = 0;
  virtual sai_thrift_status_t sai_thrift_set_routes_attribute(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const int8_t mode) = 0;
  virtual void sai_thrift_get_routes_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rif_id) = 0;
  virtual void sai_thrift_router_interface_get_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters) = 0;
  virtual void sai_thrift_router_interface_get_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_router_interface_clear_stats(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id) = 0;
  virtual void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid) = 0;
  virtual void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_member_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id) = 0;
  virtual void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_id) = 0;
  virtual void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_port_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state) = 0;
  virtual sai_thrift_port_stp_port_state_t sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id) = 0;
  virtual void sai_thrift_create_stp_ports(sai_thrift_results_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode) = 0;
  virtual void sai_thrift_remove_stp_ports(sai_thrift_status_list_t& _return, const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode) = 0;
  virtual sai_thrift_status_t sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_all_neighbor_entry() = 0;
  virtual sai_thrift_status_t sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& thrift_neighbor_entry) = 0;
  virtual void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual void sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return) = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_cpu_port_id() = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_default_trap_group() = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_default_router_id() = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_default_1q_bridge_id() = 0;
  virtual void sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return) = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_port_id_by_front_port(const std::string& port_name) = 0;
  virtual sai_thrift_status_t sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_switch() = 0;
  virtual sai_thrift_status_t sai_thrift_remove_switch() = 0;
  virtual void sai_thrift_get_switch_stats(std::vector<int64_t> & _return, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual void sai_thrift_get_switch_stats_ext(std::vector<int64_t> & _return, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_switch_stats(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual void sai_thrift_create_bridge_port(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id) = 0;
  virtual void sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return, const sai_thrift_object_id_t bridge_id) = 0;
  virtual void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_create_bridge(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id) = 0;
  virtual void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_bridge_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual void sai_thrift_get_bridge_port_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id) = 0;
  virtual void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hif_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id) = 0;
  virtual void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_table_entry_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id) = 0;
  virtual void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_group_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id) = 0;
  virtual void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_status_t sai_thrift_send_hostif_packet(const sai_thrift_object_id_t thrift_hif_id, const std::string& packet_data, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id) = 0;
  virtual void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id) = 0;
  virtual void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id) = 0;
  virtual void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id) = 0;
  virtual void sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hash_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id) = 0;
  virtual void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_group_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id) = 0;
  virtual void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_match_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_twamp_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_twamp_session(const sai_thrift_object_id_t session_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_twamp_attribute(const sai_thrift_object_id_t thrift_twamp_session_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_mirror_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& thrift_inseg_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_dump_log(const std::string& dump_file_name) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id) = 0;
  virtual void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_policer_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id) = 0;
  virtual void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_scheduler_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id) = 0;
  virtual void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id) = 0;
  virtual void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id) = 0;
  virtual void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id) = 0;
  virtual void sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t priority_group_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id) = 0;
  virtual void sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id) = 0;
  virtual void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id) = 0;
  virtual void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& thrift_l2mc_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id) = 0;
  virtual void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id) = 0;
  virtual void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& thrift_ipmc_entry) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id) = 0;
  virtual void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id) = 0;
  virtual void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id) = 0;
  virtual void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id) = 0;
  virtual void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_status_t sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id) = 0;
  virtual void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_status_t sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_id) = 0;
  virtual void sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return) = 0;
  virtual void sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return) = 0;
  virtual sai_thrift_status_t sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_isolation_group(const sai_thrift_object_id_t iso_group_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t member_oid) = 0;
  virtual void sai_thrift_get_isolation_group_attributes(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t iso_group_oid) = 0;
  virtual void sai_thrift_get_isolation_group_member_attributes(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_counter_attribute(const sai_thrift_object_id_t thrift_counter_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_counter_id) = 0;
  virtual void sai_thrift_get_counter_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual void sai_thrift_get_counter_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int8_t mode, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & thrift_counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t thrift_debug_counter_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_debug_counter_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_nat(const sai_thrift_nat_entry_t& thrift_nat_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_nat(const sai_thrift_nat_entry_t& thrift_nat_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_nat_attribute(const sai_thrift_nat_entry_t& thrift_nat_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_nat_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_nat_entry_t& thrift_nat_entry) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_bfd(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_bfd(const sai_thrift_object_id_t bfd_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_bfd_attribute(const sai_thrift_object_id_t bfd_oid, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_bfd_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bfd_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_y1731_meg(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_y1731_meg(const sai_thrift_object_id_t y1731_meg_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_y1731_meg_attribute(const sai_thrift_object_id_t y1731_meg_oid, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_y1731_meg_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_meg_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_y1731_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_y1731_session(const sai_thrift_object_id_t y1731_session_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_y1731_session_attribute(const sai_thrift_object_id_t y1731_session_oid, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_y1731_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_session_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_y1731_rmep(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_y1731_rmep(const sai_thrift_object_id_t y1731_rmep_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_y1731_rmep_attribute(const sai_thrift_object_id_t y1731_rmep_oid, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_y1731_rmep_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_rmep_oid) = 0;
  virtual void sai_thrift_get_y1731_session_lm_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t y1731_session_oid, const std::vector<sai_thrift_stat_id_t> & lm_stats_ids, const int32_t number_of_stats) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_port(const std::string& port_name, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_port(const sai_thrift_object_id_t port_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ptp_domain(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_ptp_domain(const sai_thrift_object_id_t ptp_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_ptp_domain_attribute(const sai_thrift_object_id_t ptp_oid, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_ptp_domain_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ptp_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_es(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_es(const sai_thrift_object_id_t es_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_es_attribute(const sai_thrift_object_id_t es_oid, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_es_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t es_oid) = 0;
};

class switch_sai_rpcIfFactory {
 public:
  typedef switch_sai_rpcIf Handler;

  virtual ~switch_sai_rpcIfFactory() {}

  virtual switch_sai_rpcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(switch_sai_rpcIf* /* handler */) = 0;
};

class switch_sai_rpcIfSingletonFactory : virtual public switch_sai_rpcIfFactory {
 public:
  switch_sai_rpcIfSingletonFactory(const ::std::shared_ptr<switch_sai_rpcIf>& iface) : iface_(iface) {}
  virtual ~switch_sai_rpcIfSingletonFactory() {}

  virtual switch_sai_rpcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(switch_sai_rpcIf* /* handler */) {}

 protected:
  ::std::shared_ptr<switch_sai_rpcIf> iface_;
};

class switch_sai_rpcNull : virtual public switch_sai_rpcIf {
 public:
  virtual ~switch_sai_rpcNull() {}
  sai_thrift_status_t sai_thrift_set_port_attribute(const sai_thrift_object_id_t /* port_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* port_id */) {
    return;
  }
  void sai_thrift_get_port_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* port_id */, const std::vector<sai_thrift_port_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  void sai_thrift_get_port_stats_ext(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* port_id */, const std::vector<sai_thrift_port_stat_counter_t> & /* counter_ids */, const int8_t /* mode */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t /* port_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_clear_port_stats(const sai_thrift_object_id_t /* port_id */, const int32_t /* number_of_counters */, const std::vector<sai_thrift_port_stat_counter_t> & /* counter_ids */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& /* thrift_fdb_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& /* thrift_fdb_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& /* thrift_fdb_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_fdb_entry_t& /* thrift_fdb_entry */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_vlan(const sai_thrift_object_id_t /* vlan_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_vlan_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* vlan_id */, const std::vector<sai_thrift_vlan_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  void sai_thrift_get_vlan_stats_ext(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* vlan_id */, const std::vector<sai_thrift_vlan_stat_counter_t> & /* thrift_counter_ids */, const int8_t /* mode */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t /* vlan_id */, const std::vector<sai_thrift_vlan_stat_counter_t> & /* thrift_counter_ids */, const int32_t /* number_of_counters */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* vlan_member_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_remove_vlan_member(const sai_thrift_object_id_t /* vlan_member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t /* vlan_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t /* vlan_member_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* vlan_id */) {
    return;
  }
  void sai_thrift_get_vlan_id(sai_thrift_result_t& /* _return */, const sai_thrift_object_id_t /* vlan_id */) {
    return;
  }
  void sai_thrift_create_vlan_members(sai_thrift_results_t& /* _return */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_lists */, const std::vector<int32_t> & /* thrift_attr_count_lists */, const int8_t /* mode */) {
    return;
  }
  void sai_thrift_remove_vlan_members(sai_thrift_status_list_t& /* _return */, const std::vector<sai_thrift_object_id_t> & /* thrift_object_id_list */, const int8_t /* mode */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_virtual_router(const sai_thrift_object_id_t /* vr_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t /* vr_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* vr_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_route(const sai_thrift_route_entry_t& /* thrift_route_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_route(const sai_thrift_route_entry_t& /* thrift_route_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& /* thrift_route_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_route_entry_t& /* thrift_route_entry */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_routes(const std::vector<sai_thrift_route_entry_t> & /* thrift_route_entry_list */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */, const std::vector<int32_t> & /* thrift_attr_count_lists */, const int8_t /* mode */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_routes(const std::vector<sai_thrift_route_entry_t> & /* thrift_route_entry_list */, const int8_t /* mode */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_routes_attribute(const std::vector<sai_thrift_route_entry_t> & /* thrift_route_entry_list */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */, const int8_t /* mode */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_routes_attribute(sai_thrift_attribute_list_t& /* _return */, const std::vector<sai_thrift_route_entry_t> & /* thrift_route_entry_list */, const int8_t /* mode */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_router_interface(const sai_thrift_object_id_t /* rif_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t /* rif_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* rif_id */) {
    return;
  }
  void sai_thrift_router_interface_get_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* rif_id */, const std::vector<sai_thrift_router_interface_stat_counter_t> & /* thrift_counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  void sai_thrift_router_interface_get_stats_ext(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* rif_id */, const std::vector<sai_thrift_router_interface_stat_counter_t> & /* thrift_counter_ids */, const int8_t /* mode */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_router_interface_clear_stats(const sai_thrift_object_id_t /* rif_id */, const std::vector<sai_thrift_router_interface_stat_counter_t> & /* thrift_counter_ids */, const int32_t /* number_of_counters */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_next_hop(const sai_thrift_object_id_t /* next_hop_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* next_hop_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t /* nhop_group_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t /* nhop_group_oid */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* nhop_group_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t /* nhop_group_member_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* nhop_group_member_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_lag(const sai_thrift_object_id_t /* lag_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_lag_attribute(const sai_thrift_object_id_t /* lag_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* lag_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_lag_member(const sai_thrift_object_id_t /* lag_member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t /* lag_member_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* lag_member_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_stp_entry(const sai_thrift_object_id_t /* stp_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* stp_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_stp_port(const sai_thrift_object_id_t /* stp_port_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* stp_port_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_stp_port_state(const sai_thrift_object_id_t /* stp_id */, const sai_thrift_object_id_t /* port_id */, const sai_thrift_port_stp_port_state_t /* stp_port_state */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_port_stp_port_state_t sai_thrift_get_stp_port_state(const sai_thrift_object_id_t /* stp_id */, const sai_thrift_object_id_t /* port_id */) {
    sai_thrift_port_stp_port_state_t _return = 0;
    return _return;
  }
  void sai_thrift_create_stp_ports(sai_thrift_results_t& /* _return */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_lists */, const std::vector<int32_t> & /* thrift_attr_count_lists */, const int8_t /* mode */) {
    return;
  }
  void sai_thrift_remove_stp_ports(sai_thrift_status_list_t& /* _return */, const std::vector<sai_thrift_object_id_t> & /* thrift_object_id_list */, const int8_t /* mode */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& /* thrift_neighbor_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& /* thrift_neighbor_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_all_neighbor_entry() {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& /* thrift_neighbor_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_neighbor_entry_t& /* thrift_neighbor_entry */) {
    return;
  }
  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& /* _return */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  void sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& /* _return */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_get_cpu_port_id() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_get_default_trap_group() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_get_default_router_id() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_get_default_1q_bridge_id() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_get_default_vlan_id(sai_thrift_result_t& /* _return */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_get_port_id_by_front_port(const std::string& /* port_name */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& /* attribute */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_switch() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_switch() {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_switch_stats(std::vector<int64_t> & /* _return */, const std::vector<sai_thrift_port_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  void sai_thrift_get_switch_stats_ext(std::vector<int64_t> & /* _return */, const std::vector<sai_thrift_port_stat_counter_t> & /* counter_ids */, const int8_t /* mode */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_switch_stats(const std::vector<sai_thrift_port_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_create_bridge_port(sai_thrift_result_t& /* _return */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    return;
  }
  sai_thrift_status_t sai_thrift_remove_bridge_port(const sai_thrift_object_id_t /* bridge_port_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_bridge_port_list(sai_thrift_result_t& /* _return */, const sai_thrift_object_id_t /* bridge_id */) {
    return;
  }
  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* bridge_port_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t /* bridge_port_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_create_bridge(sai_thrift_result_t& /* _return */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    return;
  }
  sai_thrift_status_t sai_thrift_remove_bridge(const sai_thrift_object_id_t /* bridge_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* bridge_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t /* bridge_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_bridge_port_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* bridge_port_id */, const std::vector<sai_thrift_bridge_port_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  void sai_thrift_get_bridge_port_stats_ext(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* bridge_port_id */, const std::vector<sai_thrift_bridge_port_stat_counter_t> & /* thrift_counter_ids */, const int8_t /* mode */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t /* bridge_port_id */, const std::vector<sai_thrift_bridge_port_stat_counter_t> & /* thrift_counter_ids */, const int32_t /* number_of_counters */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hostif(const sai_thrift_object_id_t /* thrift_hif_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hif_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t /* thrift_hif_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t /* thrift_hostif_table_entry_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hostif_table_entry_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t /* thrift_hostif_table_entry_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t /* thrift_hostif_trap_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hostif_trap_group_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t /* thrift_hostif_trap_group_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t /* thrift_hostif_trap_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hostif_trap_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t /* thrift_hostif_trap_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_send_hostif_packet(const sai_thrift_object_id_t /* thrift_hif_id */, const std::string& /* packet_data */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_table(const sai_thrift_object_id_t /* acl_table_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_entry(const sai_thrift_object_id_t /* acl_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t /* acl_entry_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_entry_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t /* acl_table_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_group_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t /* acl_table_group_member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_group_member_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_counter(const sai_thrift_object_id_t /* acl_counter_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & /* _return */, const sai_thrift_object_id_t /* acl_counter_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_range(const sai_thrift_object_id_t /* acl_range_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hash(const sai_thrift_object_id_t /* hash_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_hash_attribute(const sai_thrift_object_id_t /* thrift_hash_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hash_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_udf_group(const sai_thrift_object_id_t /* udf_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_udf_group_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_udf_match(const sai_thrift_object_id_t /* udf_match_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_udf_match_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_udf(const sai_thrift_object_id_t /* udf_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_udf_attribute(const sai_thrift_object_id_t /* thrift_udf_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_udf_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_twamp_session(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_twamp_session(const sai_thrift_object_id_t /* session_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_twamp_attribute(const sai_thrift_object_id_t /* thrift_twamp_session_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_mirror_session(const sai_thrift_object_id_t /* session_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t /* thrift_mirror_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_mirror_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& /* thrift_inseg_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& /* thrift_inseg_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& /* thrift_inseg_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_inseg_entry_t& /* thrift_inseg_entry */) {
    return;
  }
  sai_thrift_status_t sai_thrift_dump_log(const std::string& /* dump_file_name */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_policer(const sai_thrift_object_id_t /* thrift_policer_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_policer_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_policer_attribute(const sai_thrift_object_id_t /* thrift_policer_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* thrift_policer_id */, const std::vector<sai_thrift_policer_stat_t> & /* thrift_counter_ids */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_policer_stats(const sai_thrift_object_id_t /* thrift_policer_id */, const std::vector<sai_thrift_policer_stat_t> & /* thrift_counter_ids */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t /* scheduler_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_scheduler_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t /* thrift_scheduler_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t /* scheduler_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* scheduler_group_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t /* scheduler_group_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_queue_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* queue_id */, const std::vector<sai_thrift_queue_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_queue_stats(const sai_thrift_object_id_t /* queue_id */, const std::vector<sai_thrift_queue_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_queue(const sai_thrift_object_id_t /* queue_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* queue_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_queue_attribute(const sai_thrift_object_id_t /* queue_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t /* buffer_profile_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* buffer_profile_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t /* buffer_profile_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_priority_group(const sai_thrift_object_id_t /* priority_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* priority_group_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t /* pg_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_pg_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* pg_id */, const std::vector<sai_thrift_pg_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_wred_profile(const sai_thrift_object_id_t /* wred_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* wred_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t /* wred_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_qos_map(const sai_thrift_object_id_t /* qos_map_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* qos_map_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t /* qos_map_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t /* grp_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* grp_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t /* member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t /* member_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* member_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& /* thrift_l2mc_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& /* thrift_l2mc_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& /* thrift_l2mc_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_l2mc_entry_t& /* thrift_l2mc_entry */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& /* thrift_mcast_fdb_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& /* thrift_mcast_fdb_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& /* thrift_mcast_fdb_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_mcast_fdb_entry_t& /* thrift_mcast_fdb_entry */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t /* grp_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* grp_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t /* member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t /* member_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* member_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_rpf_group(const sai_thrift_object_id_t /* grp_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* grp_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t /* member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t /* member_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* member_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& /* thrift_ipmc_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& /* thrift_ipmc_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& /* thrift_ipmc_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_ipmc_entry_t& /* thrift_ipmc_entry */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_samplepacket(const sai_thrift_object_id_t /* samplepacket_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* samplepacket_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t /* samplepacket_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t /* tunnel_map_entry_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_map_entry_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t /* tunnel_map_entry_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t /* tunnel_map_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_map_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t /* tunnel_map_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_tunnel(const sai_thrift_object_id_t /* tunnel_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t /* tunnel_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* tunnel_id */, const std::vector<sai_thrift_queue_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t /* tunnel_id */, const std::vector<sai_thrift_queue_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t /* tunnel_term_table_entry_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_term_table_entry_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t /* tunnel_term_table_entry_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* switch_id */) {
    return;
  }
  void sai_thrift_get_cpu_packet_count(sai_thrift_result_t& /* _return */) {
    return;
  }
  void sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& /* _return */) {
    return;
  }
  sai_thrift_status_t sai_thrift_log_set(const int32_t /* sai_api_id */, const int32_t /* log_level */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_isolation_group(const sai_thrift_object_id_t /* iso_group_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t /* member_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_isolation_group_attributes(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* iso_group_oid */) {
    return;
  }
  void sai_thrift_get_isolation_group_member_attributes(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* member_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_counter(const sai_thrift_object_id_t /* counter_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_counter_attribute(const sai_thrift_object_id_t /* thrift_counter_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_counter_id */) {
    return;
  }
  void sai_thrift_get_counter_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* counter_id */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  void sai_thrift_get_counter_stats_ext(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* counter_id */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const int8_t /* mode */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_counter_stats(const sai_thrift_object_id_t /* counter_id */, const std::vector<sai_thrift_stat_id_t> & /* thrift_counter_ids */, const int32_t /* number_of_counters */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_debug_counter(const sai_thrift_object_id_t /* debug_counter_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t /* thrift_debug_counter_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_debug_counter_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_nat(const sai_thrift_nat_entry_t& /* thrift_nat_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_nat(const sai_thrift_nat_entry_t& /* thrift_nat_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_nat_attribute(const sai_thrift_nat_entry_t& /* thrift_nat_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_nat_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_nat_entry_t& /* thrift_nat_entry */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_bfd(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_bfd(const sai_thrift_object_id_t /* bfd_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_bfd_attribute(const sai_thrift_object_id_t /* bfd_oid */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_bfd_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* bfd_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_y1731_meg(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_y1731_meg(const sai_thrift_object_id_t /* y1731_meg_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_y1731_meg_attribute(const sai_thrift_object_id_t /* y1731_meg_oid */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_y1731_meg_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* y1731_meg_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_y1731_session(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_y1731_session(const sai_thrift_object_id_t /* y1731_session_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_y1731_session_attribute(const sai_thrift_object_id_t /* y1731_session_oid */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_y1731_session_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* y1731_session_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_y1731_rmep(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_y1731_rmep(const sai_thrift_object_id_t /* y1731_rmep_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_y1731_rmep_attribute(const sai_thrift_object_id_t /* y1731_rmep_oid */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_y1731_rmep_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* y1731_rmep_oid */) {
    return;
  }
  void sai_thrift_get_y1731_session_lm_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* y1731_session_oid */, const std::vector<sai_thrift_stat_id_t> & /* lm_stats_ids */, const int32_t /* number_of_stats */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_port(const std::string& /* port_name */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_port(const sai_thrift_object_id_t /* port_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_ptp_domain(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_ptp_domain(const sai_thrift_object_id_t /* ptp_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_ptp_domain_attribute(const sai_thrift_object_id_t /* ptp_oid */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_ptp_domain_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* ptp_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_es(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_es(const sai_thrift_object_id_t /* es_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_es_attribute(const sai_thrift_object_id_t /* es_oid */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_es_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* es_oid */) {
    return;
  }
};

typedef struct _switch_sai_rpc_sai_thrift_set_port_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_port_attribute_args__isset() : port_id(false), thrift_attr(false) {}
  bool port_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_port_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_port_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_port_attribute_args(const switch_sai_rpc_sai_thrift_set_port_attribute_args&);
  switch_sai_rpc_sai_thrift_set_port_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_port_attribute_args&);
  switch_sai_rpc_sai_thrift_set_port_attribute_args() : port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_port_attribute_args() noexcept;
  sai_thrift_object_id_t port_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_port_attribute_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_port_attribute_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_port_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_port_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* port_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_port_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_port_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_port_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_port_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_port_attribute_result(const switch_sai_rpc_sai_thrift_set_port_attribute_result&);
  switch_sai_rpc_sai_thrift_set_port_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_port_attribute_result&);
  switch_sai_rpc_sai_thrift_set_port_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_port_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_port_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_port_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_port_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_port_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_port_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_port_attribute_args__isset() : port_id(false) {}
  bool port_id :1;
} _switch_sai_rpc_sai_thrift_get_port_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_port_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_port_attribute_args(const switch_sai_rpc_sai_thrift_get_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_port_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_port_attribute_args() : port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_attribute_args() noexcept;
  sai_thrift_object_id_t port_id;

  _switch_sai_rpc_sai_thrift_get_port_attribute_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_attribute_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_port_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_port_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_port_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_port_attribute_result(const switch_sai_rpc_sai_thrift_get_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_port_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_port_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_port_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_port_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_port_stats_args__isset() : port_id(false), counter_ids(false), number_of_counters(false) {}
  bool port_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_port_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_port_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_port_stats_args(const switch_sai_rpc_sai_thrift_get_port_stats_args&);
  switch_sai_rpc_sai_thrift_get_port_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_port_stats_args&);
  switch_sai_rpc_sai_thrift_get_port_stats_args() : port_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_args() noexcept;
  sai_thrift_object_id_t port_id;
  std::vector<sai_thrift_port_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_port_stats_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_port_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_stats_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_port_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_pargs() noexcept;
  const sai_thrift_object_id_t* port_id;
  const std::vector<sai_thrift_port_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_port_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_port_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_port_stats_result(const switch_sai_rpc_sai_thrift_get_port_stats_result&);
  switch_sai_rpc_sai_thrift_get_port_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_port_stats_result&);
  switch_sai_rpc_sai_thrift_get_port_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_port_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_port_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_port_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_stats_ext_args__isset {
  _switch_sai_rpc_sai_thrift_get_port_stats_ext_args__isset() : port_id(false), counter_ids(false), mode(false), number_of_counters(false) {}
  bool port_id :1;
  bool counter_ids :1;
  bool mode :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_port_stats_ext_args__isset;

class switch_sai_rpc_sai_thrift_get_port_stats_ext_args {
 public:

  switch_sai_rpc_sai_thrift_get_port_stats_ext_args(const switch_sai_rpc_sai_thrift_get_port_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_port_stats_ext_args& operator=(const switch_sai_rpc_sai_thrift_get_port_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_port_stats_ext_args() : port_id(0), mode(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_ext_args() noexcept;
  sai_thrift_object_id_t port_id;
  std::vector<sai_thrift_port_stat_counter_t>  counter_ids;
  int8_t mode;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_port_stats_ext_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_port_stat_counter_t> & val);

  void __set_mode(const int8_t val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_stats_ext_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_port_stats_ext_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_ext_pargs() noexcept;
  const sai_thrift_object_id_t* port_id;
  const std::vector<sai_thrift_port_stat_counter_t> * counter_ids;
  const int8_t* mode;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_stats_ext_result__isset {
  _switch_sai_rpc_sai_thrift_get_port_stats_ext_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_stats_ext_result__isset;

class switch_sai_rpc_sai_thrift_get_port_stats_ext_result {
 public:

  switch_sai_rpc_sai_thrift_get_port_stats_ext_result(const switch_sai_rpc_sai_thrift_get_port_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_port_stats_ext_result& operator=(const switch_sai_rpc_sai_thrift_get_port_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_port_stats_ext_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_ext_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_port_stats_ext_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_stats_ext_presult__isset {
  _switch_sai_rpc_sai_thrift_get_port_stats_ext_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_stats_ext_presult__isset;

class switch_sai_rpc_sai_thrift_get_port_stats_ext_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_ext_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_port_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_clear_port_all_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_port_all_stats_args__isset() : port_id(false) {}
  bool port_id :1;
} _switch_sai_rpc_sai_thrift_clear_port_all_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_port_all_stats_args {
 public:

  switch_sai_rpc_sai_thrift_clear_port_all_stats_args(const switch_sai_rpc_sai_thrift_clear_port_all_stats_args&);
  switch_sai_rpc_sai_thrift_clear_port_all_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_port_all_stats_args&);
  switch_sai_rpc_sai_thrift_clear_port_all_stats_args() : port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_port_all_stats_args() noexcept;
  sai_thrift_object_id_t port_id;

  _switch_sai_rpc_sai_thrift_clear_port_all_stats_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_port_all_stats_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_port_all_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_port_all_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs() noexcept;
  const sai_thrift_object_id_t* port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_port_all_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_port_all_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_port_all_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_port_all_stats_result {
 public:

  switch_sai_rpc_sai_thrift_clear_port_all_stats_result(const switch_sai_rpc_sai_thrift_clear_port_all_stats_result&);
  switch_sai_rpc_sai_thrift_clear_port_all_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_port_all_stats_result&);
  switch_sai_rpc_sai_thrift_clear_port_all_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_port_all_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_port_all_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_port_all_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_port_all_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_port_all_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_port_all_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_port_all_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_port_all_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_port_all_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_port_all_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_port_all_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_clear_port_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_port_stats_args__isset() : port_id(false), number_of_counters(false), counter_ids(false) {}
  bool port_id :1;
  bool number_of_counters :1;
  bool counter_ids :1;
} _switch_sai_rpc_sai_thrift_clear_port_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_port_stats_args {
 public:

  switch_sai_rpc_sai_thrift_clear_port_stats_args(const switch_sai_rpc_sai_thrift_clear_port_stats_args&);
  switch_sai_rpc_sai_thrift_clear_port_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_port_stats_args&);
  switch_sai_rpc_sai_thrift_clear_port_stats_args() : port_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_port_stats_args() noexcept;
  sai_thrift_object_id_t port_id;
  int32_t number_of_counters;
  std::vector<sai_thrift_port_stat_counter_t>  counter_ids;

  _switch_sai_rpc_sai_thrift_clear_port_stats_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_number_of_counters(const int32_t val);

  void __set_counter_ids(const std::vector<sai_thrift_port_stat_counter_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_port_stats_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_port_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_port_stats_pargs() noexcept;
  const sai_thrift_object_id_t* port_id;
  const int32_t* number_of_counters;
  const std::vector<sai_thrift_port_stat_counter_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_port_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_port_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_port_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_port_stats_result {
 public:

  switch_sai_rpc_sai_thrift_clear_port_stats_result(const switch_sai_rpc_sai_thrift_clear_port_stats_result&);
  switch_sai_rpc_sai_thrift_clear_port_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_port_stats_result&);
  switch_sai_rpc_sai_thrift_clear_port_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_port_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_port_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_port_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_port_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_port_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_port_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_port_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_port_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_fdb_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_fdb_entry_args__isset() : thrift_fdb_entry(false), thrift_attr_list(false) {}
  bool thrift_fdb_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_fdb_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_fdb_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_fdb_entry_args(const switch_sai_rpc_sai_thrift_create_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_create_fdb_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_create_fdb_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_fdb_entry_args() noexcept;
  sai_thrift_fdb_entry_t thrift_fdb_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_fdb_entry_args__isset __isset;

  void __set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_fdb_entry_args & rhs) const
  {
    if (!(thrift_fdb_entry == rhs.thrift_fdb_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_fdb_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_fdb_entry_pargs() noexcept;
  const sai_thrift_fdb_entry_t* thrift_fdb_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_fdb_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_fdb_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_fdb_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_fdb_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_fdb_entry_result(const switch_sai_rpc_sai_thrift_create_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_create_fdb_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_create_fdb_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_fdb_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_fdb_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_fdb_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_fdb_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_fdb_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_fdb_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_fdb_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_delete_fdb_entry_args__isset {
  _switch_sai_rpc_sai_thrift_delete_fdb_entry_args__isset() : thrift_fdb_entry(false) {}
  bool thrift_fdb_entry :1;
} _switch_sai_rpc_sai_thrift_delete_fdb_entry_args__isset;

class switch_sai_rpc_sai_thrift_delete_fdb_entry_args {
 public:

  switch_sai_rpc_sai_thrift_delete_fdb_entry_args(const switch_sai_rpc_sai_thrift_delete_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_delete_fdb_entry_args& operator=(const switch_sai_rpc_sai_thrift_delete_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_delete_fdb_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_delete_fdb_entry_args() noexcept;
  sai_thrift_fdb_entry_t thrift_fdb_entry;

  _switch_sai_rpc_sai_thrift_delete_fdb_entry_args__isset __isset;

  void __set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_delete_fdb_entry_args & rhs) const
  {
    if (!(thrift_fdb_entry == rhs.thrift_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_delete_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_delete_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs() noexcept;
  const sai_thrift_fdb_entry_t* thrift_fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_delete_fdb_entry_result__isset {
  _switch_sai_rpc_sai_thrift_delete_fdb_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_delete_fdb_entry_result__isset;

class switch_sai_rpc_sai_thrift_delete_fdb_entry_result {
 public:

  switch_sai_rpc_sai_thrift_delete_fdb_entry_result(const switch_sai_rpc_sai_thrift_delete_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_delete_fdb_entry_result& operator=(const switch_sai_rpc_sai_thrift_delete_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_delete_fdb_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_delete_fdb_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_delete_fdb_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_delete_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_delete_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_delete_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_delete_fdb_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_delete_fdb_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_delete_fdb_entry_presult__isset;

class switch_sai_rpc_sai_thrift_delete_fdb_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_delete_fdb_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_delete_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_flush_fdb_entries_args__isset {
  _switch_sai_rpc_sai_thrift_flush_fdb_entries_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_flush_fdb_entries_args__isset;

class switch_sai_rpc_sai_thrift_flush_fdb_entries_args {
 public:

  switch_sai_rpc_sai_thrift_flush_fdb_entries_args(const switch_sai_rpc_sai_thrift_flush_fdb_entries_args&);
  switch_sai_rpc_sai_thrift_flush_fdb_entries_args& operator=(const switch_sai_rpc_sai_thrift_flush_fdb_entries_args&);
  switch_sai_rpc_sai_thrift_flush_fdb_entries_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_flush_fdb_entries_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_flush_fdb_entries_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_flush_fdb_entries_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_flush_fdb_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_flush_fdb_entries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_flush_fdb_entries_result__isset {
  _switch_sai_rpc_sai_thrift_flush_fdb_entries_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_flush_fdb_entries_result__isset;

class switch_sai_rpc_sai_thrift_flush_fdb_entries_result {
 public:

  switch_sai_rpc_sai_thrift_flush_fdb_entries_result(const switch_sai_rpc_sai_thrift_flush_fdb_entries_result&);
  switch_sai_rpc_sai_thrift_flush_fdb_entries_result& operator=(const switch_sai_rpc_sai_thrift_flush_fdb_entries_result&);
  switch_sai_rpc_sai_thrift_flush_fdb_entries_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_flush_fdb_entries_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_flush_fdb_entries_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_flush_fdb_entries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_flush_fdb_entries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_flush_fdb_entries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_flush_fdb_entries_presult__isset {
  _switch_sai_rpc_sai_thrift_flush_fdb_entries_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_flush_fdb_entries_presult__isset;

class switch_sai_rpc_sai_thrift_flush_fdb_entries_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_flush_fdb_entries_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_flush_fdb_entries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset() : thrift_fdb_entry(false), thrift_attr(false) {}
  bool thrift_fdb_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args() noexcept;
  sai_thrift_fdb_entry_t thrift_fdb_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset __isset;

  void __set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args & rhs) const
  {
    if (!(thrift_fdb_entry == rhs.thrift_fdb_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs() noexcept;
  const sai_thrift_fdb_entry_t* thrift_fdb_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset() : thrift_fdb_entry(false) {}
  bool thrift_fdb_entry :1;
} _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args() noexcept;
  sai_thrift_fdb_entry_t thrift_fdb_entry;

  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset __isset;

  void __set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args & rhs) const
  {
    if (!(thrift_fdb_entry == rhs.thrift_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs() noexcept;
  const sai_thrift_fdb_entry_t* thrift_fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_args__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_vlan_args__isset;

class switch_sai_rpc_sai_thrift_create_vlan_args {
 public:

  switch_sai_rpc_sai_thrift_create_vlan_args(const switch_sai_rpc_sai_thrift_create_vlan_args&);
  switch_sai_rpc_sai_thrift_create_vlan_args& operator=(const switch_sai_rpc_sai_thrift_create_vlan_args&);
  switch_sai_rpc_sai_thrift_create_vlan_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_vlan_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_vlan_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_result__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_result__isset;

class switch_sai_rpc_sai_thrift_create_vlan_result {
 public:

  switch_sai_rpc_sai_thrift_create_vlan_result(const switch_sai_rpc_sai_thrift_create_vlan_result&);
  switch_sai_rpc_sai_thrift_create_vlan_result& operator=(const switch_sai_rpc_sai_thrift_create_vlan_result&);
  switch_sai_rpc_sai_thrift_create_vlan_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_vlan_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_presult__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_presult__isset;

class switch_sai_rpc_sai_thrift_create_vlan_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_vlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_args__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_args__isset() : vlan_oid(false) {}
  bool vlan_oid :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_args__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_args {
 public:

  switch_sai_rpc_sai_thrift_remove_vlan_args(const switch_sai_rpc_sai_thrift_remove_vlan_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_args& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_args() : vlan_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_args() noexcept;
  sai_thrift_object_id_t vlan_oid;

  _switch_sai_rpc_sai_thrift_remove_vlan_args__isset __isset;

  void __set_vlan_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_args & rhs) const
  {
    if (!(vlan_oid == rhs.vlan_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_vlan_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_result__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_result__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_result {
 public:

  switch_sai_rpc_sai_thrift_remove_vlan_result(const switch_sai_rpc_sai_thrift_remove_vlan_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_result& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_vlan_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_presult__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_vlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_stats_args__isset() : vlan_id(false), counter_ids(false), number_of_counters(false) {}
  bool vlan_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_vlan_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_vlan_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_stats_args(const switch_sai_rpc_sai_thrift_get_vlan_stats_args&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_vlan_stats_args&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_args() : vlan_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_args() noexcept;
  sai_thrift_object_id_t vlan_id;
  std::vector<sai_thrift_vlan_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_vlan_stats_args__isset __isset;

  void __set_vlan_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_vlan_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_stats_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_vlan_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_id;
  const std::vector<sai_thrift_vlan_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_vlan_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_stats_result(const switch_sai_rpc_sai_thrift_get_vlan_stats_result&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_vlan_stats_result&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_vlan_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_vlan_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_vlan_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args__isset() : vlan_id(false), thrift_counter_ids(false), mode(false), number_of_counters(false) {}
  bool vlan_id :1;
  bool thrift_counter_ids :1;
  bool mode :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args__isset;

class switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args(const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args& operator=(const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args() : vlan_id(0), mode(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args() noexcept;
  sai_thrift_object_id_t vlan_id;
  std::vector<sai_thrift_vlan_stat_counter_t>  thrift_counter_ids;
  int8_t mode;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args__isset __isset;

  void __set_vlan_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_vlan_stat_counter_t> & val);

  void __set_mode(const int8_t val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_vlan_stats_ext_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_ext_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_id;
  const std::vector<sai_thrift_vlan_stat_counter_t> * thrift_counter_ids;
  const int8_t* mode;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result__isset;

class switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result(const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result& operator=(const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_presult__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_presult__isset;

class switch_sai_rpc_sai_thrift_get_vlan_stats_ext_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_ext_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_vlan_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_clear_vlan_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_vlan_stats_args__isset() : vlan_id(false), thrift_counter_ids(false), number_of_counters(false) {}
  bool vlan_id :1;
  bool thrift_counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_clear_vlan_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_vlan_stats_args {
 public:

  switch_sai_rpc_sai_thrift_clear_vlan_stats_args(const switch_sai_rpc_sai_thrift_clear_vlan_stats_args&);
  switch_sai_rpc_sai_thrift_clear_vlan_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_vlan_stats_args&);
  switch_sai_rpc_sai_thrift_clear_vlan_stats_args() : vlan_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_vlan_stats_args() noexcept;
  sai_thrift_object_id_t vlan_id;
  std::vector<sai_thrift_vlan_stat_counter_t>  thrift_counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_clear_vlan_stats_args__isset __isset;

  void __set_vlan_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_vlan_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_vlan_stats_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_vlan_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_vlan_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_vlan_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_vlan_stats_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_id;
  const std::vector<sai_thrift_vlan_stat_counter_t> * thrift_counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_vlan_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_vlan_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_vlan_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_vlan_stats_result {
 public:

  switch_sai_rpc_sai_thrift_clear_vlan_stats_result(const switch_sai_rpc_sai_thrift_clear_vlan_stats_result&);
  switch_sai_rpc_sai_thrift_clear_vlan_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_vlan_stats_result&);
  switch_sai_rpc_sai_thrift_clear_vlan_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_vlan_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_vlan_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_vlan_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_vlan_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_vlan_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_vlan_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_vlan_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_vlan_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_vlan_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_vlan_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_vlan_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_vlan_member_args__isset;

class switch_sai_rpc_sai_thrift_create_vlan_member_args {
 public:

  switch_sai_rpc_sai_thrift_create_vlan_member_args(const switch_sai_rpc_sai_thrift_create_vlan_member_args&);
  switch_sai_rpc_sai_thrift_create_vlan_member_args& operator=(const switch_sai_rpc_sai_thrift_create_vlan_member_args&);
  switch_sai_rpc_sai_thrift_create_vlan_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_member_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_vlan_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_vlan_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_member_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_member_result__isset;

class switch_sai_rpc_sai_thrift_create_vlan_member_result {
 public:

  switch_sai_rpc_sai_thrift_create_vlan_member_result(const switch_sai_rpc_sai_thrift_create_vlan_member_result&);
  switch_sai_rpc_sai_thrift_create_vlan_member_result& operator=(const switch_sai_rpc_sai_thrift_create_vlan_member_result&);
  switch_sai_rpc_sai_thrift_create_vlan_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_member_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_vlan_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_vlan_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_member_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_vlan_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset() : vlan_member_id(false) {}
  bool vlan_member_id :1;
} _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args(const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args() : vlan_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args() noexcept;
  sai_thrift_object_id_t vlan_member_id;

  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset __isset;

  void __set_vlan_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args & rhs) const
  {
    if (!(vlan_member_id == rhs.vlan_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result(const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_member_args__isset() : vlan_member_id(false) {}
  bool vlan_member_id :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_member_args {
 public:

  switch_sai_rpc_sai_thrift_remove_vlan_member_args(const switch_sai_rpc_sai_thrift_remove_vlan_member_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_member_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_member_args() : vlan_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_member_args() noexcept;
  sai_thrift_object_id_t vlan_member_id;

  _switch_sai_rpc_sai_thrift_remove_vlan_member_args__isset __isset;

  void __set_vlan_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_member_args & rhs) const
  {
    if (!(vlan_member_id == rhs.vlan_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_vlan_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_member_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_member_result {
 public:

  switch_sai_rpc_sai_thrift_remove_vlan_member_result(const switch_sai_rpc_sai_thrift_remove_vlan_member_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_member_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_member_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_vlan_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_member_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_vlan_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_vlan_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_vlan_attribute_args__isset() : vlan_id(false), thrift_attr(false) {}
  bool vlan_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_vlan_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_vlan_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_vlan_attribute_args(const switch_sai_rpc_sai_thrift_set_vlan_attribute_args&);
  switch_sai_rpc_sai_thrift_set_vlan_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_vlan_attribute_args&);
  switch_sai_rpc_sai_thrift_set_vlan_attribute_args() : vlan_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_vlan_attribute_args() noexcept;
  sai_thrift_object_id_t vlan_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_vlan_attribute_args__isset __isset;

  void __set_vlan_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_vlan_attribute_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_vlan_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_vlan_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_vlan_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_vlan_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_vlan_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_vlan_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_vlan_attribute_result(const switch_sai_rpc_sai_thrift_set_vlan_attribute_result&);
  switch_sai_rpc_sai_thrift_set_vlan_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_vlan_attribute_result&);
  switch_sai_rpc_sai_thrift_set_vlan_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_vlan_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_vlan_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_vlan_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_vlan_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_vlan_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_vlan_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_vlan_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_vlan_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_vlan_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_vlan_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_vlan_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args__isset() : vlan_member_id(false), thrift_attr(false) {}
  bool vlan_member_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args(const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args() : vlan_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args() noexcept;
  sai_thrift_object_id_t vlan_member_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args__isset __isset;

  void __set_vlan_member_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args & rhs) const
  {
    if (!(vlan_member_id == rhs.vlan_member_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_vlan_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_vlan_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_member_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result(const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_vlan_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_vlan_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_vlan_member_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_vlan_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_attribute_args__isset() : vlan_id(false) {}
  bool vlan_id :1;
} _switch_sai_rpc_sai_thrift_get_vlan_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_vlan_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_attribute_args(const switch_sai_rpc_sai_thrift_get_vlan_attribute_args&);
  switch_sai_rpc_sai_thrift_get_vlan_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_vlan_attribute_args&);
  switch_sai_rpc_sai_thrift_get_vlan_attribute_args() : vlan_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_attribute_args() noexcept;
  sai_thrift_object_id_t vlan_id;

  _switch_sai_rpc_sai_thrift_get_vlan_attribute_args__isset __isset;

  void __set_vlan_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_attribute_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_vlan_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_attribute_result(const switch_sai_rpc_sai_thrift_get_vlan_attribute_result&);
  switch_sai_rpc_sai_thrift_get_vlan_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_vlan_attribute_result&);
  switch_sai_rpc_sai_thrift_get_vlan_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_vlan_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_vlan_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_vlan_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_id_args__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_id_args__isset() : vlan_id(false) {}
  bool vlan_id :1;
} _switch_sai_rpc_sai_thrift_get_vlan_id_args__isset;

class switch_sai_rpc_sai_thrift_get_vlan_id_args {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_id_args(const switch_sai_rpc_sai_thrift_get_vlan_id_args&);
  switch_sai_rpc_sai_thrift_get_vlan_id_args& operator=(const switch_sai_rpc_sai_thrift_get_vlan_id_args&);
  switch_sai_rpc_sai_thrift_get_vlan_id_args() : vlan_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_id_args() noexcept;
  sai_thrift_object_id_t vlan_id;

  _switch_sai_rpc_sai_thrift_get_vlan_id_args__isset __isset;

  void __set_vlan_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_id_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_vlan_id_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_id_pargs() noexcept;
  const sai_thrift_object_id_t* vlan_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_id_result__isset;

class switch_sai_rpc_sai_thrift_get_vlan_id_result {
 public:

  switch_sai_rpc_sai_thrift_get_vlan_id_result(const switch_sai_rpc_sai_thrift_get_vlan_id_result&);
  switch_sai_rpc_sai_thrift_get_vlan_id_result& operator=(const switch_sai_rpc_sai_thrift_get_vlan_id_result&);
  switch_sai_rpc_sai_thrift_get_vlan_id_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_id_result() noexcept;
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_get_vlan_id_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_vlan_id_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_id_presult() noexcept;
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_get_vlan_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_members_args__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_members_args__isset() : thrift_attr_lists(false), thrift_attr_count_lists(false), mode(false) {}
  bool thrift_attr_lists :1;
  bool thrift_attr_count_lists :1;
  bool mode :1;
} _switch_sai_rpc_sai_thrift_create_vlan_members_args__isset;

class switch_sai_rpc_sai_thrift_create_vlan_members_args {
 public:

  switch_sai_rpc_sai_thrift_create_vlan_members_args(const switch_sai_rpc_sai_thrift_create_vlan_members_args&);
  switch_sai_rpc_sai_thrift_create_vlan_members_args& operator=(const switch_sai_rpc_sai_thrift_create_vlan_members_args&);
  switch_sai_rpc_sai_thrift_create_vlan_members_args() : mode(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_members_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_lists;
  std::vector<int32_t>  thrift_attr_count_lists;
  int8_t mode;

  _switch_sai_rpc_sai_thrift_create_vlan_members_args__isset __isset;

  void __set_thrift_attr_lists(const std::vector<sai_thrift_attribute_t> & val);

  void __set_thrift_attr_count_lists(const std::vector<int32_t> & val);

  void __set_mode(const int8_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_members_args & rhs) const
  {
    if (!(thrift_attr_lists == rhs.thrift_attr_lists))
      return false;
    if (!(thrift_attr_count_lists == rhs.thrift_attr_count_lists))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_members_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_members_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_vlan_members_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_members_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_lists;
  const std::vector<int32_t> * thrift_attr_count_lists;
  const int8_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_members_result__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_members_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_members_result__isset;

class switch_sai_rpc_sai_thrift_create_vlan_members_result {
 public:

  switch_sai_rpc_sai_thrift_create_vlan_members_result(const switch_sai_rpc_sai_thrift_create_vlan_members_result&);
  switch_sai_rpc_sai_thrift_create_vlan_members_result& operator=(const switch_sai_rpc_sai_thrift_create_vlan_members_result&);
  switch_sai_rpc_sai_thrift_create_vlan_members_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_members_result() noexcept;
  sai_thrift_results_t success;

  _switch_sai_rpc_sai_thrift_create_vlan_members_result__isset __isset;

  void __set_success(const sai_thrift_results_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_members_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_members_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_members_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_members_presult__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_members_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_members_presult__isset;

class switch_sai_rpc_sai_thrift_create_vlan_members_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_members_presult() noexcept;
  sai_thrift_results_t* success;

  _switch_sai_rpc_sai_thrift_create_vlan_members_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_members_args__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_members_args__isset() : thrift_object_id_list(false), mode(false) {}
  bool thrift_object_id_list :1;
  bool mode :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_members_args__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_members_args {
 public:

  switch_sai_rpc_sai_thrift_remove_vlan_members_args(const switch_sai_rpc_sai_thrift_remove_vlan_members_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_members_args& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_members_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_members_args() : mode(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_members_args() noexcept;
  std::vector<sai_thrift_object_id_t>  thrift_object_id_list;
  int8_t mode;

  _switch_sai_rpc_sai_thrift_remove_vlan_members_args__isset __isset;

  void __set_thrift_object_id_list(const std::vector<sai_thrift_object_id_t> & val);

  void __set_mode(const int8_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_members_args & rhs) const
  {
    if (!(thrift_object_id_list == rhs.thrift_object_id_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_members_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_members_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_vlan_members_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_members_pargs() noexcept;
  const std::vector<sai_thrift_object_id_t> * thrift_object_id_list;
  const int8_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_members_result__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_members_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_members_result__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_members_result {
 public:

  switch_sai_rpc_sai_thrift_remove_vlan_members_result(const switch_sai_rpc_sai_thrift_remove_vlan_members_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_members_result& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_members_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_members_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_members_result() noexcept;
  sai_thrift_status_list_t success;

  _switch_sai_rpc_sai_thrift_remove_vlan_members_result__isset __isset;

  void __set_success(const sai_thrift_status_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_members_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_members_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_members_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_members_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_members_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_members_presult__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_members_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_members_presult() noexcept;
  sai_thrift_status_list_t* success;

  _switch_sai_rpc_sai_thrift_remove_vlan_members_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_virtual_router_args__isset {
  _switch_sai_rpc_sai_thrift_create_virtual_router_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_virtual_router_args__isset;

class switch_sai_rpc_sai_thrift_create_virtual_router_args {
 public:

  switch_sai_rpc_sai_thrift_create_virtual_router_args(const switch_sai_rpc_sai_thrift_create_virtual_router_args&);
  switch_sai_rpc_sai_thrift_create_virtual_router_args& operator=(const switch_sai_rpc_sai_thrift_create_virtual_router_args&);
  switch_sai_rpc_sai_thrift_create_virtual_router_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_virtual_router_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_virtual_router_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_virtual_router_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_virtual_router_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_virtual_router_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_virtual_router_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_virtual_router_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_virtual_router_result__isset {
  _switch_sai_rpc_sai_thrift_create_virtual_router_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_virtual_router_result__isset;

class switch_sai_rpc_sai_thrift_create_virtual_router_result {
 public:

  switch_sai_rpc_sai_thrift_create_virtual_router_result(const switch_sai_rpc_sai_thrift_create_virtual_router_result&);
  switch_sai_rpc_sai_thrift_create_virtual_router_result& operator=(const switch_sai_rpc_sai_thrift_create_virtual_router_result&);
  switch_sai_rpc_sai_thrift_create_virtual_router_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_virtual_router_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_virtual_router_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_virtual_router_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_virtual_router_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_virtual_router_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_virtual_router_presult__isset {
  _switch_sai_rpc_sai_thrift_create_virtual_router_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_virtual_router_presult__isset;

class switch_sai_rpc_sai_thrift_create_virtual_router_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_virtual_router_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_virtual_router_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_virtual_router_args__isset {
  _switch_sai_rpc_sai_thrift_remove_virtual_router_args__isset() : vr_id(false) {}
  bool vr_id :1;
} _switch_sai_rpc_sai_thrift_remove_virtual_router_args__isset;

class switch_sai_rpc_sai_thrift_remove_virtual_router_args {
 public:

  switch_sai_rpc_sai_thrift_remove_virtual_router_args(const switch_sai_rpc_sai_thrift_remove_virtual_router_args&);
  switch_sai_rpc_sai_thrift_remove_virtual_router_args& operator=(const switch_sai_rpc_sai_thrift_remove_virtual_router_args&);
  switch_sai_rpc_sai_thrift_remove_virtual_router_args() : vr_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_virtual_router_args() noexcept;
  sai_thrift_object_id_t vr_id;

  _switch_sai_rpc_sai_thrift_remove_virtual_router_args__isset __isset;

  void __set_vr_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_virtual_router_args & rhs) const
  {
    if (!(vr_id == rhs.vr_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_virtual_router_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_virtual_router_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_virtual_router_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_virtual_router_pargs() noexcept;
  const sai_thrift_object_id_t* vr_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_virtual_router_result__isset {
  _switch_sai_rpc_sai_thrift_remove_virtual_router_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_virtual_router_result__isset;

class switch_sai_rpc_sai_thrift_remove_virtual_router_result {
 public:

  switch_sai_rpc_sai_thrift_remove_virtual_router_result(const switch_sai_rpc_sai_thrift_remove_virtual_router_result&);
  switch_sai_rpc_sai_thrift_remove_virtual_router_result& operator=(const switch_sai_rpc_sai_thrift_remove_virtual_router_result&);
  switch_sai_rpc_sai_thrift_remove_virtual_router_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_virtual_router_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_virtual_router_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_virtual_router_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_virtual_router_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_virtual_router_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_virtual_router_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_virtual_router_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_virtual_router_presult__isset;

class switch_sai_rpc_sai_thrift_remove_virtual_router_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_virtual_router_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_virtual_router_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset() : vr_id(false), thrift_attr(false) {}
  bool vr_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args(const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args&);
  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args&);
  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args() : vr_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args() noexcept;
  sai_thrift_object_id_t vr_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset __isset;

  void __set_vr_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args & rhs) const
  {
    if (!(vr_id == rhs.vr_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* vr_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result(const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result&);
  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result&);
  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset() : vr_id(false) {}
  bool vr_id :1;
} _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args(const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args&);
  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args&);
  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args() : vr_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args() noexcept;
  sai_thrift_object_id_t vr_id;

  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset __isset;

  void __set_vr_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args & rhs) const
  {
    if (!(vr_id == rhs.vr_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* vr_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result(const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result&);
  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result&);
  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_route_args__isset {
  _switch_sai_rpc_sai_thrift_create_route_args__isset() : thrift_route_entry(false), thrift_attr_list(false) {}
  bool thrift_route_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_route_args__isset;

class switch_sai_rpc_sai_thrift_create_route_args {
 public:

  switch_sai_rpc_sai_thrift_create_route_args(const switch_sai_rpc_sai_thrift_create_route_args&);
  switch_sai_rpc_sai_thrift_create_route_args& operator=(const switch_sai_rpc_sai_thrift_create_route_args&);
  switch_sai_rpc_sai_thrift_create_route_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_route_args() noexcept;
  sai_thrift_route_entry_t thrift_route_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_route_args__isset __isset;

  void __set_thrift_route_entry(const sai_thrift_route_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_route_args & rhs) const
  {
    if (!(thrift_route_entry == rhs.thrift_route_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_route_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_route_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_route_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_route_pargs() noexcept;
  const sai_thrift_route_entry_t* thrift_route_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_route_result__isset {
  _switch_sai_rpc_sai_thrift_create_route_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_route_result__isset;

class switch_sai_rpc_sai_thrift_create_route_result {
 public:

  switch_sai_rpc_sai_thrift_create_route_result(const switch_sai_rpc_sai_thrift_create_route_result&);
  switch_sai_rpc_sai_thrift_create_route_result& operator=(const switch_sai_rpc_sai_thrift_create_route_result&);
  switch_sai_rpc_sai_thrift_create_route_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_route_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_route_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_route_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_route_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_route_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_route_presult__isset {
  _switch_sai_rpc_sai_thrift_create_route_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_route_presult__isset;

class switch_sai_rpc_sai_thrift_create_route_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_route_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_route_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_route_args__isset {
  _switch_sai_rpc_sai_thrift_remove_route_args__isset() : thrift_route_entry(false) {}
  bool thrift_route_entry :1;
} _switch_sai_rpc_sai_thrift_remove_route_args__isset;

class switch_sai_rpc_sai_thrift_remove_route_args {
 public:

  switch_sai_rpc_sai_thrift_remove_route_args(const switch_sai_rpc_sai_thrift_remove_route_args&);
  switch_sai_rpc_sai_thrift_remove_route_args& operator=(const switch_sai_rpc_sai_thrift_remove_route_args&);
  switch_sai_rpc_sai_thrift_remove_route_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_route_args() noexcept;
  sai_thrift_route_entry_t thrift_route_entry;

  _switch_sai_rpc_sai_thrift_remove_route_args__isset __isset;

  void __set_thrift_route_entry(const sai_thrift_route_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_route_args & rhs) const
  {
    if (!(thrift_route_entry == rhs.thrift_route_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_route_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_route_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_route_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_route_pargs() noexcept;
  const sai_thrift_route_entry_t* thrift_route_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_route_result__isset {
  _switch_sai_rpc_sai_thrift_remove_route_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_route_result__isset;

class switch_sai_rpc_sai_thrift_remove_route_result {
 public:

  switch_sai_rpc_sai_thrift_remove_route_result(const switch_sai_rpc_sai_thrift_remove_route_result&);
  switch_sai_rpc_sai_thrift_remove_route_result& operator=(const switch_sai_rpc_sai_thrift_remove_route_result&);
  switch_sai_rpc_sai_thrift_remove_route_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_route_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_route_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_route_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_route_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_route_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_route_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_route_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_route_presult__isset;

class switch_sai_rpc_sai_thrift_remove_route_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_route_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_route_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_route_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_route_attribute_args__isset() : thrift_route_entry(false), thrift_attr(false) {}
  bool thrift_route_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_route_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_route_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_route_attribute_args(const switch_sai_rpc_sai_thrift_set_route_attribute_args&);
  switch_sai_rpc_sai_thrift_set_route_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_route_attribute_args&);
  switch_sai_rpc_sai_thrift_set_route_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_route_attribute_args() noexcept;
  sai_thrift_route_entry_t thrift_route_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_route_attribute_args__isset __isset;

  void __set_thrift_route_entry(const sai_thrift_route_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_route_attribute_args & rhs) const
  {
    if (!(thrift_route_entry == rhs.thrift_route_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_route_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_route_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_route_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_route_attribute_pargs() noexcept;
  const sai_thrift_route_entry_t* thrift_route_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_route_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_route_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_route_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_route_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_route_attribute_result(const switch_sai_rpc_sai_thrift_set_route_attribute_result&);
  switch_sai_rpc_sai_thrift_set_route_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_route_attribute_result&);
  switch_sai_rpc_sai_thrift_set_route_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_route_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_route_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_route_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_route_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_route_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_route_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_route_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_route_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_route_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_route_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_route_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_route_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_route_attribute_args__isset() : thrift_route_entry(false) {}
  bool thrift_route_entry :1;
} _switch_sai_rpc_sai_thrift_get_route_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_route_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_route_attribute_args(const switch_sai_rpc_sai_thrift_get_route_attribute_args&);
  switch_sai_rpc_sai_thrift_get_route_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_route_attribute_args&);
  switch_sai_rpc_sai_thrift_get_route_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_route_attribute_args() noexcept;
  sai_thrift_route_entry_t thrift_route_entry;

  _switch_sai_rpc_sai_thrift_get_route_attribute_args__isset __isset;

  void __set_thrift_route_entry(const sai_thrift_route_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_route_attribute_args & rhs) const
  {
    if (!(thrift_route_entry == rhs.thrift_route_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_route_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_route_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_route_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_route_attribute_pargs() noexcept;
  const sai_thrift_route_entry_t* thrift_route_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_route_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_route_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_route_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_route_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_route_attribute_result(const switch_sai_rpc_sai_thrift_get_route_attribute_result&);
  switch_sai_rpc_sai_thrift_get_route_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_route_attribute_result&);
  switch_sai_rpc_sai_thrift_get_route_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_route_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_route_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_route_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_route_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_route_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_route_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_route_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_route_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_route_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_route_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_route_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_routes_args__isset {
  _switch_sai_rpc_sai_thrift_create_routes_args__isset() : thrift_route_entry_list(false), thrift_attr_list(false), thrift_attr_count_lists(false), mode(false) {}
  bool thrift_route_entry_list :1;
  bool thrift_attr_list :1;
  bool thrift_attr_count_lists :1;
  bool mode :1;
} _switch_sai_rpc_sai_thrift_create_routes_args__isset;

class switch_sai_rpc_sai_thrift_create_routes_args {
 public:

  switch_sai_rpc_sai_thrift_create_routes_args(const switch_sai_rpc_sai_thrift_create_routes_args&);
  switch_sai_rpc_sai_thrift_create_routes_args& operator=(const switch_sai_rpc_sai_thrift_create_routes_args&);
  switch_sai_rpc_sai_thrift_create_routes_args() : mode(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_routes_args() noexcept;
  std::vector<sai_thrift_route_entry_t>  thrift_route_entry_list;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;
  std::vector<int32_t>  thrift_attr_count_lists;
  int8_t mode;

  _switch_sai_rpc_sai_thrift_create_routes_args__isset __isset;

  void __set_thrift_route_entry_list(const std::vector<sai_thrift_route_entry_t> & val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_thrift_attr_count_lists(const std::vector<int32_t> & val);

  void __set_mode(const int8_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_routes_args & rhs) const
  {
    if (!(thrift_route_entry_list == rhs.thrift_route_entry_list))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    if (!(thrift_attr_count_lists == rhs.thrift_attr_count_lists))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_routes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_routes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_routes_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_routes_pargs() noexcept;
  const std::vector<sai_thrift_route_entry_t> * thrift_route_entry_list;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;
  const std::vector<int32_t> * thrift_attr_count_lists;
  const int8_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_routes_result__isset {
  _switch_sai_rpc_sai_thrift_create_routes_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_routes_result__isset;

class switch_sai_rpc_sai_thrift_create_routes_result {
 public:

  switch_sai_rpc_sai_thrift_create_routes_result(const switch_sai_rpc_sai_thrift_create_routes_result&);
  switch_sai_rpc_sai_thrift_create_routes_result& operator=(const switch_sai_rpc_sai_thrift_create_routes_result&);
  switch_sai_rpc_sai_thrift_create_routes_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_routes_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_routes_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_routes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_routes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_routes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_routes_presult__isset {
  _switch_sai_rpc_sai_thrift_create_routes_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_routes_presult__isset;

class switch_sai_rpc_sai_thrift_create_routes_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_routes_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_routes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_routes_args__isset {
  _switch_sai_rpc_sai_thrift_remove_routes_args__isset() : thrift_route_entry_list(false), mode(false) {}
  bool thrift_route_entry_list :1;
  bool mode :1;
} _switch_sai_rpc_sai_thrift_remove_routes_args__isset;

class switch_sai_rpc_sai_thrift_remove_routes_args {
 public:

  switch_sai_rpc_sai_thrift_remove_routes_args(const switch_sai_rpc_sai_thrift_remove_routes_args&);
  switch_sai_rpc_sai_thrift_remove_routes_args& operator=(const switch_sai_rpc_sai_thrift_remove_routes_args&);
  switch_sai_rpc_sai_thrift_remove_routes_args() : mode(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_routes_args() noexcept;
  std::vector<sai_thrift_route_entry_t>  thrift_route_entry_list;
  int8_t mode;

  _switch_sai_rpc_sai_thrift_remove_routes_args__isset __isset;

  void __set_thrift_route_entry_list(const std::vector<sai_thrift_route_entry_t> & val);

  void __set_mode(const int8_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_routes_args & rhs) const
  {
    if (!(thrift_route_entry_list == rhs.thrift_route_entry_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_routes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_routes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_routes_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_routes_pargs() noexcept;
  const std::vector<sai_thrift_route_entry_t> * thrift_route_entry_list;
  const int8_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_routes_result__isset {
  _switch_sai_rpc_sai_thrift_remove_routes_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_routes_result__isset;

class switch_sai_rpc_sai_thrift_remove_routes_result {
 public:

  switch_sai_rpc_sai_thrift_remove_routes_result(const switch_sai_rpc_sai_thrift_remove_routes_result&);
  switch_sai_rpc_sai_thrift_remove_routes_result& operator=(const switch_sai_rpc_sai_thrift_remove_routes_result&);
  switch_sai_rpc_sai_thrift_remove_routes_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_routes_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_routes_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_routes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_routes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_routes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_routes_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_routes_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_routes_presult__isset;

class switch_sai_rpc_sai_thrift_remove_routes_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_routes_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_routes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_routes_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_routes_attribute_args__isset() : thrift_route_entry_list(false), thrift_attr_list(false), mode(false) {}
  bool thrift_route_entry_list :1;
  bool thrift_attr_list :1;
  bool mode :1;
} _switch_sai_rpc_sai_thrift_set_routes_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_routes_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_routes_attribute_args(const switch_sai_rpc_sai_thrift_set_routes_attribute_args&);
  switch_sai_rpc_sai_thrift_set_routes_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_routes_attribute_args&);
  switch_sai_rpc_sai_thrift_set_routes_attribute_args() : mode(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_routes_attribute_args() noexcept;
  std::vector<sai_thrift_route_entry_t>  thrift_route_entry_list;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;
  int8_t mode;

  _switch_sai_rpc_sai_thrift_set_routes_attribute_args__isset __isset;

  void __set_thrift_route_entry_list(const std::vector<sai_thrift_route_entry_t> & val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const int8_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_routes_attribute_args & rhs) const
  {
    if (!(thrift_route_entry_list == rhs.thrift_route_entry_list))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_routes_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_routes_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_routes_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_routes_attribute_pargs() noexcept;
  const std::vector<sai_thrift_route_entry_t> * thrift_route_entry_list;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;
  const int8_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_routes_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_routes_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_routes_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_routes_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_routes_attribute_result(const switch_sai_rpc_sai_thrift_set_routes_attribute_result&);
  switch_sai_rpc_sai_thrift_set_routes_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_routes_attribute_result&);
  switch_sai_rpc_sai_thrift_set_routes_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_routes_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_routes_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_routes_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_routes_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_routes_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_routes_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_routes_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_routes_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_routes_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_routes_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_routes_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_routes_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_routes_attribute_args__isset() : thrift_route_entry_list(false), mode(false) {}
  bool thrift_route_entry_list :1;
  bool mode :1;
} _switch_sai_rpc_sai_thrift_get_routes_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_routes_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_routes_attribute_args(const switch_sai_rpc_sai_thrift_get_routes_attribute_args&);
  switch_sai_rpc_sai_thrift_get_routes_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_routes_attribute_args&);
  switch_sai_rpc_sai_thrift_get_routes_attribute_args() : mode(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_routes_attribute_args() noexcept;
  std::vector<sai_thrift_route_entry_t>  thrift_route_entry_list;
  int8_t mode;

  _switch_sai_rpc_sai_thrift_get_routes_attribute_args__isset __isset;

  void __set_thrift_route_entry_list(const std::vector<sai_thrift_route_entry_t> & val);

  void __set_mode(const int8_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_routes_attribute_args & rhs) const
  {
    if (!(thrift_route_entry_list == rhs.thrift_route_entry_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_routes_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_routes_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_routes_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_routes_attribute_pargs() noexcept;
  const std::vector<sai_thrift_route_entry_t> * thrift_route_entry_list;
  const int8_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_routes_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_routes_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_routes_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_routes_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_routes_attribute_result(const switch_sai_rpc_sai_thrift_get_routes_attribute_result&);
  switch_sai_rpc_sai_thrift_get_routes_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_routes_attribute_result&);
  switch_sai_rpc_sai_thrift_get_routes_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_routes_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_routes_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_routes_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_routes_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_routes_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_routes_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_routes_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_routes_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_routes_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_routes_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_routes_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_router_interface_args__isset {
  _switch_sai_rpc_sai_thrift_create_router_interface_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_router_interface_args__isset;

class switch_sai_rpc_sai_thrift_create_router_interface_args {
 public:

  switch_sai_rpc_sai_thrift_create_router_interface_args(const switch_sai_rpc_sai_thrift_create_router_interface_args&);
  switch_sai_rpc_sai_thrift_create_router_interface_args& operator=(const switch_sai_rpc_sai_thrift_create_router_interface_args&);
  switch_sai_rpc_sai_thrift_create_router_interface_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_router_interface_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_router_interface_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_router_interface_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_router_interface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_router_interface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_router_interface_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_router_interface_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_router_interface_result__isset {
  _switch_sai_rpc_sai_thrift_create_router_interface_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_router_interface_result__isset;

class switch_sai_rpc_sai_thrift_create_router_interface_result {
 public:

  switch_sai_rpc_sai_thrift_create_router_interface_result(const switch_sai_rpc_sai_thrift_create_router_interface_result&);
  switch_sai_rpc_sai_thrift_create_router_interface_result& operator=(const switch_sai_rpc_sai_thrift_create_router_interface_result&);
  switch_sai_rpc_sai_thrift_create_router_interface_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_router_interface_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_router_interface_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_router_interface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_router_interface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_router_interface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_router_interface_presult__isset {
  _switch_sai_rpc_sai_thrift_create_router_interface_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_router_interface_presult__isset;

class switch_sai_rpc_sai_thrift_create_router_interface_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_router_interface_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_router_interface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_router_interface_args__isset {
  _switch_sai_rpc_sai_thrift_remove_router_interface_args__isset() : rif_id(false) {}
  bool rif_id :1;
} _switch_sai_rpc_sai_thrift_remove_router_interface_args__isset;

class switch_sai_rpc_sai_thrift_remove_router_interface_args {
 public:

  switch_sai_rpc_sai_thrift_remove_router_interface_args(const switch_sai_rpc_sai_thrift_remove_router_interface_args&);
  switch_sai_rpc_sai_thrift_remove_router_interface_args& operator=(const switch_sai_rpc_sai_thrift_remove_router_interface_args&);
  switch_sai_rpc_sai_thrift_remove_router_interface_args() : rif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_router_interface_args() noexcept;
  sai_thrift_object_id_t rif_id;

  _switch_sai_rpc_sai_thrift_remove_router_interface_args__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_router_interface_args & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_router_interface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_router_interface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_router_interface_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_router_interface_pargs() noexcept;
  const sai_thrift_object_id_t* rif_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_router_interface_result__isset {
  _switch_sai_rpc_sai_thrift_remove_router_interface_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_router_interface_result__isset;

class switch_sai_rpc_sai_thrift_remove_router_interface_result {
 public:

  switch_sai_rpc_sai_thrift_remove_router_interface_result(const switch_sai_rpc_sai_thrift_remove_router_interface_result&);
  switch_sai_rpc_sai_thrift_remove_router_interface_result& operator=(const switch_sai_rpc_sai_thrift_remove_router_interface_result&);
  switch_sai_rpc_sai_thrift_remove_router_interface_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_router_interface_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_router_interface_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_router_interface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_router_interface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_router_interface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_router_interface_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_router_interface_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_router_interface_presult__isset;

class switch_sai_rpc_sai_thrift_remove_router_interface_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_router_interface_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_router_interface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_router_interface_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_args__isset() : rif_id(false), thrift_attr(false) {}
  bool rif_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_router_interface_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_router_interface_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_router_interface_attribute_args(const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args&);
  switch_sai_rpc_sai_thrift_set_router_interface_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args&);
  switch_sai_rpc_sai_thrift_set_router_interface_attribute_args() : rif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_router_interface_attribute_args() noexcept;
  sai_thrift_object_id_t rif_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_args__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* rif_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_router_interface_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_router_interface_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_router_interface_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_router_interface_attribute_result(const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result&);
  switch_sai_rpc_sai_thrift_set_router_interface_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result&);
  switch_sai_rpc_sai_thrift_set_router_interface_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_router_interface_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_router_interface_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_args__isset() : rif_id(false) {}
  bool rif_id :1;
} _switch_sai_rpc_sai_thrift_get_router_interface_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_router_interface_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_router_interface_attribute_args(const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args&);
  switch_sai_rpc_sai_thrift_get_router_interface_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args&);
  switch_sai_rpc_sai_thrift_get_router_interface_attribute_args() : rif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_router_interface_attribute_args() noexcept;
  sai_thrift_object_id_t rif_id;

  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_args__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* rif_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_router_interface_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_router_interface_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_router_interface_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_router_interface_attribute_result(const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result&);
  switch_sai_rpc_sai_thrift_get_router_interface_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result&);
  switch_sai_rpc_sai_thrift_get_router_interface_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_router_interface_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_router_interface_get_stats_args__isset {
  _switch_sai_rpc_sai_thrift_router_interface_get_stats_args__isset() : rif_id(false), thrift_counter_ids(false), number_of_counters(false) {}
  bool rif_id :1;
  bool thrift_counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_router_interface_get_stats_args__isset;

class switch_sai_rpc_sai_thrift_router_interface_get_stats_args {
 public:

  switch_sai_rpc_sai_thrift_router_interface_get_stats_args(const switch_sai_rpc_sai_thrift_router_interface_get_stats_args&);
  switch_sai_rpc_sai_thrift_router_interface_get_stats_args& operator=(const switch_sai_rpc_sai_thrift_router_interface_get_stats_args&);
  switch_sai_rpc_sai_thrift_router_interface_get_stats_args() : rif_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_router_interface_get_stats_args() noexcept;
  sai_thrift_object_id_t rif_id;
  std::vector<sai_thrift_router_interface_stat_counter_t>  thrift_counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_router_interface_get_stats_args__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_router_interface_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_router_interface_get_stats_args & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_router_interface_get_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_router_interface_get_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_router_interface_get_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_router_interface_get_stats_pargs() noexcept;
  const sai_thrift_object_id_t* rif_id;
  const std::vector<sai_thrift_router_interface_stat_counter_t> * thrift_counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_router_interface_get_stats_result__isset {
  _switch_sai_rpc_sai_thrift_router_interface_get_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_router_interface_get_stats_result__isset;

class switch_sai_rpc_sai_thrift_router_interface_get_stats_result {
 public:

  switch_sai_rpc_sai_thrift_router_interface_get_stats_result(const switch_sai_rpc_sai_thrift_router_interface_get_stats_result&);
  switch_sai_rpc_sai_thrift_router_interface_get_stats_result& operator=(const switch_sai_rpc_sai_thrift_router_interface_get_stats_result&);
  switch_sai_rpc_sai_thrift_router_interface_get_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_router_interface_get_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_router_interface_get_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_router_interface_get_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_router_interface_get_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_router_interface_get_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_router_interface_get_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_router_interface_get_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_router_interface_get_stats_presult__isset;

class switch_sai_rpc_sai_thrift_router_interface_get_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_router_interface_get_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_router_interface_get_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args__isset {
  _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args__isset() : rif_id(false), thrift_counter_ids(false), mode(false), number_of_counters(false) {}
  bool rif_id :1;
  bool thrift_counter_ids :1;
  bool mode :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args__isset;

class switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args {
 public:

  switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args(const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args&);
  switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args& operator=(const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args&);
  switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args() : rif_id(0), mode(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args() noexcept;
  sai_thrift_object_id_t rif_id;
  std::vector<sai_thrift_router_interface_stat_counter_t>  thrift_counter_ids;
  int8_t mode;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_router_interface_stat_counter_t> & val);

  void __set_mode(const int8_t val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_pargs() noexcept;
  const sai_thrift_object_id_t* rif_id;
  const std::vector<sai_thrift_router_interface_stat_counter_t> * thrift_counter_ids;
  const int8_t* mode;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result__isset {
  _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result__isset;

class switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result {
 public:

  switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result(const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result&);
  switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result& operator=(const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result&);
  switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_presult__isset {
  _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_presult__isset;

class switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_router_interface_get_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_router_interface_clear_stats_args__isset {
  _switch_sai_rpc_sai_thrift_router_interface_clear_stats_args__isset() : rif_id(false), thrift_counter_ids(false), number_of_counters(false) {}
  bool rif_id :1;
  bool thrift_counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_router_interface_clear_stats_args__isset;

class switch_sai_rpc_sai_thrift_router_interface_clear_stats_args {
 public:

  switch_sai_rpc_sai_thrift_router_interface_clear_stats_args(const switch_sai_rpc_sai_thrift_router_interface_clear_stats_args&);
  switch_sai_rpc_sai_thrift_router_interface_clear_stats_args& operator=(const switch_sai_rpc_sai_thrift_router_interface_clear_stats_args&);
  switch_sai_rpc_sai_thrift_router_interface_clear_stats_args() : rif_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_router_interface_clear_stats_args() noexcept;
  sai_thrift_object_id_t rif_id;
  std::vector<sai_thrift_router_interface_stat_counter_t>  thrift_counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_router_interface_clear_stats_args__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_router_interface_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_router_interface_clear_stats_args & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_router_interface_clear_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_router_interface_clear_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_router_interface_clear_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_router_interface_clear_stats_pargs() noexcept;
  const sai_thrift_object_id_t* rif_id;
  const std::vector<sai_thrift_router_interface_stat_counter_t> * thrift_counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_router_interface_clear_stats_result__isset {
  _switch_sai_rpc_sai_thrift_router_interface_clear_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_router_interface_clear_stats_result__isset;

class switch_sai_rpc_sai_thrift_router_interface_clear_stats_result {
 public:

  switch_sai_rpc_sai_thrift_router_interface_clear_stats_result(const switch_sai_rpc_sai_thrift_router_interface_clear_stats_result&);
  switch_sai_rpc_sai_thrift_router_interface_clear_stats_result& operator=(const switch_sai_rpc_sai_thrift_router_interface_clear_stats_result&);
  switch_sai_rpc_sai_thrift_router_interface_clear_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_router_interface_clear_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_router_interface_clear_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_router_interface_clear_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_router_interface_clear_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_router_interface_clear_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_router_interface_clear_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_router_interface_clear_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_router_interface_clear_stats_presult__isset;

class switch_sai_rpc_sai_thrift_router_interface_clear_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_router_interface_clear_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_router_interface_clear_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_args__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_args__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_args {
 public:

  switch_sai_rpc_sai_thrift_create_next_hop_args(const switch_sai_rpc_sai_thrift_create_next_hop_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_args& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_next_hop_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_next_hop_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_result__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_result__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_result {
 public:

  switch_sai_rpc_sai_thrift_create_next_hop_result(const switch_sai_rpc_sai_thrift_create_next_hop_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_result& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_next_hop_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_presult__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_presult__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_next_hop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_args__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_args__isset() : next_hop_id(false) {}
  bool next_hop_id :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_args__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_args {
 public:

  switch_sai_rpc_sai_thrift_remove_next_hop_args(const switch_sai_rpc_sai_thrift_remove_next_hop_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_args& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_args() : next_hop_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_args() noexcept;
  sai_thrift_object_id_t next_hop_id;

  _switch_sai_rpc_sai_thrift_remove_next_hop_args__isset __isset;

  void __set_next_hop_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_args & rhs) const
  {
    if (!(next_hop_id == rhs.next_hop_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_next_hop_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_pargs() noexcept;
  const sai_thrift_object_id_t* next_hop_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_result__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_result__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_result {
 public:

  switch_sai_rpc_sai_thrift_remove_next_hop_result(const switch_sai_rpc_sai_thrift_remove_next_hop_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_result& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_presult__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_args__isset() : next_hop_id(false) {}
  bool next_hop_id :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_next_hop_attribute_args(const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_attribute_args() : next_hop_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_attribute_args() noexcept;
  sai_thrift_object_id_t next_hop_id;

  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_args__isset __isset;

  void __set_next_hop_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args & rhs) const
  {
    if (!(next_hop_id == rhs.next_hop_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* next_hop_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_next_hop_attribute_result(const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_args__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_next_hop_group_args(const switch_sai_rpc_sai_thrift_create_next_hop_group_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_args& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_group_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_next_hop_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_result__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_next_hop_group_result(const switch_sai_rpc_sai_thrift_create_next_hop_group_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_result& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_group_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_args__isset() : nhop_group_oid(false) {}
  bool nhop_group_oid :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_next_hop_group_args(const switch_sai_rpc_sai_thrift_remove_next_hop_group_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_group_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_args() : nhop_group_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_args() noexcept;
  sai_thrift_object_id_t nhop_group_oid;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_args__isset __isset;

  void __set_nhop_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_group_args & rhs) const
  {
    if (!(nhop_group_oid == rhs.nhop_group_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs() noexcept;
  const sai_thrift_object_id_t* nhop_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_next_hop_group_result(const switch_sai_rpc_sai_thrift_remove_next_hop_group_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_group_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset() : nhop_group_oid(false), thrift_attr(false) {}
  bool nhop_group_oid :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args(const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args() : nhop_group_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args() noexcept;
  sai_thrift_object_id_t nhop_group_oid;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset __isset;

  void __set_nhop_group_oid(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args & rhs) const
  {
    if (!(nhop_group_oid == rhs.nhop_group_oid))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* nhop_group_oid;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result(const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset() : nhop_group_oid(false) {}
  bool nhop_group_oid :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args(const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args() : nhop_group_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args() noexcept;
  sai_thrift_object_id_t nhop_group_oid;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset __isset;

  void __set_nhop_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args & rhs) const
  {
    if (!(nhop_group_oid == rhs.nhop_group_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* nhop_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result(const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_create_next_hop_group_member_args(const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_member_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_create_next_hop_group_member_result(const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_member_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset() : nhop_group_member_oid(false) {}
  bool nhop_group_member_oid :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args(const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args() : nhop_group_member_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args() noexcept;
  sai_thrift_object_id_t nhop_group_member_oid;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset __isset;

  void __set_nhop_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args & rhs) const
  {
    if (!(nhop_group_member_oid == rhs.nhop_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs() noexcept;
  const sai_thrift_object_id_t* nhop_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result(const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset() : nhop_group_member_oid(false) {}
  bool nhop_group_member_oid :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args() : nhop_group_member_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args() noexcept;
  sai_thrift_object_id_t nhop_group_member_oid;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset __isset;

  void __set_nhop_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args & rhs) const
  {
    if (!(nhop_group_member_oid == rhs.nhop_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* nhop_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_args__isset {
  _switch_sai_rpc_sai_thrift_create_lag_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_lag_args__isset;

class switch_sai_rpc_sai_thrift_create_lag_args {
 public:

  switch_sai_rpc_sai_thrift_create_lag_args(const switch_sai_rpc_sai_thrift_create_lag_args&);
  switch_sai_rpc_sai_thrift_create_lag_args& operator=(const switch_sai_rpc_sai_thrift_create_lag_args&);
  switch_sai_rpc_sai_thrift_create_lag_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_lag_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_lag_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_lag_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_lag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_lag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_lag_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_lag_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_result__isset {
  _switch_sai_rpc_sai_thrift_create_lag_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_lag_result__isset;

class switch_sai_rpc_sai_thrift_create_lag_result {
 public:

  switch_sai_rpc_sai_thrift_create_lag_result(const switch_sai_rpc_sai_thrift_create_lag_result&);
  switch_sai_rpc_sai_thrift_create_lag_result& operator=(const switch_sai_rpc_sai_thrift_create_lag_result&);
  switch_sai_rpc_sai_thrift_create_lag_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_lag_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_lag_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_lag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_lag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_lag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_presult__isset {
  _switch_sai_rpc_sai_thrift_create_lag_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_lag_presult__isset;

class switch_sai_rpc_sai_thrift_create_lag_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_lag_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_lag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_args__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_args__isset() : lag_id(false) {}
  bool lag_id :1;
} _switch_sai_rpc_sai_thrift_remove_lag_args__isset;

class switch_sai_rpc_sai_thrift_remove_lag_args {
 public:

  switch_sai_rpc_sai_thrift_remove_lag_args(const switch_sai_rpc_sai_thrift_remove_lag_args&);
  switch_sai_rpc_sai_thrift_remove_lag_args& operator=(const switch_sai_rpc_sai_thrift_remove_lag_args&);
  switch_sai_rpc_sai_thrift_remove_lag_args() : lag_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_lag_args() noexcept;
  sai_thrift_object_id_t lag_id;

  _switch_sai_rpc_sai_thrift_remove_lag_args__isset __isset;

  void __set_lag_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_lag_args & rhs) const
  {
    if (!(lag_id == rhs.lag_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_lag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_lag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_lag_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_lag_pargs() noexcept;
  const sai_thrift_object_id_t* lag_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_result__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_lag_result__isset;

class switch_sai_rpc_sai_thrift_remove_lag_result {
 public:

  switch_sai_rpc_sai_thrift_remove_lag_result(const switch_sai_rpc_sai_thrift_remove_lag_result&);
  switch_sai_rpc_sai_thrift_remove_lag_result& operator=(const switch_sai_rpc_sai_thrift_remove_lag_result&);
  switch_sai_rpc_sai_thrift_remove_lag_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_lag_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_lag_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_lag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_lag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_lag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_lag_presult__isset;

class switch_sai_rpc_sai_thrift_remove_lag_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_lag_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_lag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_lag_attribute_args__isset() : lag_id(false), thrift_attr(false) {}
  bool lag_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_lag_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_lag_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_lag_attribute_args(const switch_sai_rpc_sai_thrift_set_lag_attribute_args&);
  switch_sai_rpc_sai_thrift_set_lag_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_lag_attribute_args&);
  switch_sai_rpc_sai_thrift_set_lag_attribute_args() : lag_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_lag_attribute_args() noexcept;
  sai_thrift_object_id_t lag_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_lag_attribute_args__isset __isset;

  void __set_lag_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_lag_attribute_args & rhs) const
  {
    if (!(lag_id == rhs.lag_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_lag_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_lag_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_lag_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_lag_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* lag_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_lag_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_lag_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_lag_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_lag_attribute_result(const switch_sai_rpc_sai_thrift_set_lag_attribute_result&);
  switch_sai_rpc_sai_thrift_set_lag_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_lag_attribute_result&);
  switch_sai_rpc_sai_thrift_set_lag_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_lag_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_lag_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_lag_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_lag_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_lag_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_lag_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_lag_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_lag_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_lag_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_lag_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_lag_attribute_args__isset() : lag_id(false) {}
  bool lag_id :1;
} _switch_sai_rpc_sai_thrift_get_lag_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_lag_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_lag_attribute_args(const switch_sai_rpc_sai_thrift_get_lag_attribute_args&);
  switch_sai_rpc_sai_thrift_get_lag_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_lag_attribute_args&);
  switch_sai_rpc_sai_thrift_get_lag_attribute_args() : lag_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_lag_attribute_args() noexcept;
  sai_thrift_object_id_t lag_id;

  _switch_sai_rpc_sai_thrift_get_lag_attribute_args__isset __isset;

  void __set_lag_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_lag_attribute_args & rhs) const
  {
    if (!(lag_id == rhs.lag_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_lag_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_lag_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_lag_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_lag_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* lag_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_lag_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_lag_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_lag_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_lag_attribute_result(const switch_sai_rpc_sai_thrift_get_lag_attribute_result&);
  switch_sai_rpc_sai_thrift_get_lag_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_lag_attribute_result&);
  switch_sai_rpc_sai_thrift_get_lag_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_lag_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_lag_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_lag_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_lag_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_lag_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_lag_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_lag_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_lag_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_lag_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_lag_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_lag_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_lag_member_args__isset;

class switch_sai_rpc_sai_thrift_create_lag_member_args {
 public:

  switch_sai_rpc_sai_thrift_create_lag_member_args(const switch_sai_rpc_sai_thrift_create_lag_member_args&);
  switch_sai_rpc_sai_thrift_create_lag_member_args& operator=(const switch_sai_rpc_sai_thrift_create_lag_member_args&);
  switch_sai_rpc_sai_thrift_create_lag_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_lag_member_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_lag_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_lag_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_lag_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_lag_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_lag_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_lag_member_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_lag_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_lag_member_result__isset;

class switch_sai_rpc_sai_thrift_create_lag_member_result {
 public:

  switch_sai_rpc_sai_thrift_create_lag_member_result(const switch_sai_rpc_sai_thrift_create_lag_member_result&);
  switch_sai_rpc_sai_thrift_create_lag_member_result& operator=(const switch_sai_rpc_sai_thrift_create_lag_member_result&);
  switch_sai_rpc_sai_thrift_create_lag_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_lag_member_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_lag_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_lag_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_lag_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_lag_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_lag_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_lag_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_lag_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_lag_member_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_lag_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_member_args__isset() : lag_member_id(false) {}
  bool lag_member_id :1;
} _switch_sai_rpc_sai_thrift_remove_lag_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_lag_member_args {
 public:

  switch_sai_rpc_sai_thrift_remove_lag_member_args(const switch_sai_rpc_sai_thrift_remove_lag_member_args&);
  switch_sai_rpc_sai_thrift_remove_lag_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_lag_member_args&);
  switch_sai_rpc_sai_thrift_remove_lag_member_args() : lag_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_lag_member_args() noexcept;
  sai_thrift_object_id_t lag_member_id;

  _switch_sai_rpc_sai_thrift_remove_lag_member_args__isset __isset;

  void __set_lag_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_lag_member_args & rhs) const
  {
    if (!(lag_member_id == rhs.lag_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_lag_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_lag_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_lag_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_lag_member_pargs() noexcept;
  const sai_thrift_object_id_t* lag_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_lag_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_lag_member_result {
 public:

  switch_sai_rpc_sai_thrift_remove_lag_member_result(const switch_sai_rpc_sai_thrift_remove_lag_member_result&);
  switch_sai_rpc_sai_thrift_remove_lag_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_lag_member_result&);
  switch_sai_rpc_sai_thrift_remove_lag_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_lag_member_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_lag_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_lag_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_lag_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_lag_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_lag_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_lag_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_lag_member_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_lag_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_args__isset() : lag_member_id(false), thrift_attr(false) {}
  bool lag_member_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_lag_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_lag_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_lag_member_attribute_args(const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_lag_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_lag_member_attribute_args() : lag_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_lag_member_attribute_args() noexcept;
  sai_thrift_object_id_t lag_member_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_args__isset __isset;

  void __set_lag_member_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args & rhs) const
  {
    if (!(lag_member_id == rhs.lag_member_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* lag_member_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_lag_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_lag_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_lag_member_attribute_result(const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_lag_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_lag_member_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_lag_member_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_args__isset() : lag_member_id(false) {}
  bool lag_member_id :1;
} _switch_sai_rpc_sai_thrift_get_lag_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_lag_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_lag_member_attribute_args(const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_lag_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_lag_member_attribute_args() : lag_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_lag_member_attribute_args() noexcept;
  sai_thrift_object_id_t lag_member_id;

  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_args__isset __isset;

  void __set_lag_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args & rhs) const
  {
    if (!(lag_member_id == rhs.lag_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* lag_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_lag_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_lag_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_lag_member_attribute_result(const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_lag_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_lag_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_lag_member_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_stp_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_stp_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_stp_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_stp_entry_args(const switch_sai_rpc_sai_thrift_create_stp_entry_args&);
  switch_sai_rpc_sai_thrift_create_stp_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_stp_entry_args&);
  switch_sai_rpc_sai_thrift_create_stp_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_stp_entry_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_stp_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_stp_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_stp_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_stp_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_stp_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_stp_entry_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_stp_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_stp_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_stp_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_stp_entry_result(const switch_sai_rpc_sai_thrift_create_stp_entry_result&);
  switch_sai_rpc_sai_thrift_create_stp_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_stp_entry_result&);
  switch_sai_rpc_sai_thrift_create_stp_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_stp_entry_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_stp_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_stp_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_stp_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_stp_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_stp_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_stp_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_stp_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_stp_entry_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_stp_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_entry_args__isset() : stp_id(false) {}
  bool stp_id :1;
} _switch_sai_rpc_sai_thrift_remove_stp_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_stp_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_stp_entry_args(const switch_sai_rpc_sai_thrift_remove_stp_entry_args&);
  switch_sai_rpc_sai_thrift_remove_stp_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_stp_entry_args&);
  switch_sai_rpc_sai_thrift_remove_stp_entry_args() : stp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_stp_entry_args() noexcept;
  sai_thrift_object_id_t stp_id;

  _switch_sai_rpc_sai_thrift_remove_stp_entry_args__isset __isset;

  void __set_stp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_stp_entry_args & rhs) const
  {
    if (!(stp_id == rhs.stp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_stp_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_stp_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_stp_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_stp_entry_pargs() noexcept;
  const sai_thrift_object_id_t* stp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_stp_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_stp_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_stp_entry_result(const switch_sai_rpc_sai_thrift_remove_stp_entry_result&);
  switch_sai_rpc_sai_thrift_remove_stp_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_stp_entry_result&);
  switch_sai_rpc_sai_thrift_remove_stp_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_stp_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_stp_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_stp_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_stp_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_stp_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_stp_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_stp_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_stp_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_stp_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_stp_attribute_args__isset() : stp_id(false) {}
  bool stp_id :1;
} _switch_sai_rpc_sai_thrift_get_stp_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_stp_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_stp_attribute_args(const switch_sai_rpc_sai_thrift_get_stp_attribute_args&);
  switch_sai_rpc_sai_thrift_get_stp_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_stp_attribute_args&);
  switch_sai_rpc_sai_thrift_get_stp_attribute_args() : stp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_stp_attribute_args() noexcept;
  sai_thrift_object_id_t stp_id;

  _switch_sai_rpc_sai_thrift_get_stp_attribute_args__isset __isset;

  void __set_stp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_stp_attribute_args & rhs) const
  {
    if (!(stp_id == rhs.stp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_stp_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_stp_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_stp_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_stp_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* stp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_stp_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_stp_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_stp_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_stp_attribute_result(const switch_sai_rpc_sai_thrift_get_stp_attribute_result&);
  switch_sai_rpc_sai_thrift_get_stp_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_stp_attribute_result&);
  switch_sai_rpc_sai_thrift_get_stp_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_stp_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_stp_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_stp_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_stp_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_stp_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_stp_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_stp_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_stp_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_stp_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_stp_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_port_args__isset {
  _switch_sai_rpc_sai_thrift_create_stp_port_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_stp_port_args__isset;

class switch_sai_rpc_sai_thrift_create_stp_port_args {
 public:

  switch_sai_rpc_sai_thrift_create_stp_port_args(const switch_sai_rpc_sai_thrift_create_stp_port_args&);
  switch_sai_rpc_sai_thrift_create_stp_port_args& operator=(const switch_sai_rpc_sai_thrift_create_stp_port_args&);
  switch_sai_rpc_sai_thrift_create_stp_port_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_stp_port_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_stp_port_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_stp_port_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_stp_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_stp_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_stp_port_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_stp_port_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_port_result__isset {
  _switch_sai_rpc_sai_thrift_create_stp_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_stp_port_result__isset;

class switch_sai_rpc_sai_thrift_create_stp_port_result {
 public:

  switch_sai_rpc_sai_thrift_create_stp_port_result(const switch_sai_rpc_sai_thrift_create_stp_port_result&);
  switch_sai_rpc_sai_thrift_create_stp_port_result& operator=(const switch_sai_rpc_sai_thrift_create_stp_port_result&);
  switch_sai_rpc_sai_thrift_create_stp_port_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_stp_port_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_stp_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_stp_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_stp_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_stp_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_port_presult__isset {
  _switch_sai_rpc_sai_thrift_create_stp_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_stp_port_presult__isset;

class switch_sai_rpc_sai_thrift_create_stp_port_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_stp_port_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_stp_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_port_args__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_port_args__isset() : stp_port_id(false) {}
  bool stp_port_id :1;
} _switch_sai_rpc_sai_thrift_remove_stp_port_args__isset;

class switch_sai_rpc_sai_thrift_remove_stp_port_args {
 public:

  switch_sai_rpc_sai_thrift_remove_stp_port_args(const switch_sai_rpc_sai_thrift_remove_stp_port_args&);
  switch_sai_rpc_sai_thrift_remove_stp_port_args& operator=(const switch_sai_rpc_sai_thrift_remove_stp_port_args&);
  switch_sai_rpc_sai_thrift_remove_stp_port_args() : stp_port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_stp_port_args() noexcept;
  sai_thrift_object_id_t stp_port_id;

  _switch_sai_rpc_sai_thrift_remove_stp_port_args__isset __isset;

  void __set_stp_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_stp_port_args & rhs) const
  {
    if (!(stp_port_id == rhs.stp_port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_stp_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_stp_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_stp_port_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_stp_port_pargs() noexcept;
  const sai_thrift_object_id_t* stp_port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_port_result__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_stp_port_result__isset;

class switch_sai_rpc_sai_thrift_remove_stp_port_result {
 public:

  switch_sai_rpc_sai_thrift_remove_stp_port_result(const switch_sai_rpc_sai_thrift_remove_stp_port_result&);
  switch_sai_rpc_sai_thrift_remove_stp_port_result& operator=(const switch_sai_rpc_sai_thrift_remove_stp_port_result&);
  switch_sai_rpc_sai_thrift_remove_stp_port_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_stp_port_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_stp_port_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_stp_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_stp_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_stp_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_port_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_stp_port_presult__isset;

class switch_sai_rpc_sai_thrift_remove_stp_port_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_stp_port_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_stp_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_port_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_stp_port_attribute_args__isset() : stp_port_id(false) {}
  bool stp_port_id :1;
} _switch_sai_rpc_sai_thrift_get_stp_port_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_stp_port_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_stp_port_attribute_args(const switch_sai_rpc_sai_thrift_get_stp_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_stp_port_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_stp_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_stp_port_attribute_args() : stp_port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_attribute_args() noexcept;
  sai_thrift_object_id_t stp_port_id;

  _switch_sai_rpc_sai_thrift_get_stp_port_attribute_args__isset __isset;

  void __set_stp_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_stp_port_attribute_args & rhs) const
  {
    if (!(stp_port_id == rhs.stp_port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_stp_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_stp_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_stp_port_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* stp_port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_port_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_stp_port_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_stp_port_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_stp_port_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_stp_port_attribute_result(const switch_sai_rpc_sai_thrift_get_stp_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_stp_port_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_stp_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_stp_port_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_stp_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_stp_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_stp_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_stp_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_port_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_stp_port_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_stp_port_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_stp_port_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_stp_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_stp_port_state_args__isset {
  _switch_sai_rpc_sai_thrift_set_stp_port_state_args__isset() : stp_id(false), port_id(false), stp_port_state(false) {}
  bool stp_id :1;
  bool port_id :1;
  bool stp_port_state :1;
} _switch_sai_rpc_sai_thrift_set_stp_port_state_args__isset;

class switch_sai_rpc_sai_thrift_set_stp_port_state_args {
 public:

  switch_sai_rpc_sai_thrift_set_stp_port_state_args(const switch_sai_rpc_sai_thrift_set_stp_port_state_args&);
  switch_sai_rpc_sai_thrift_set_stp_port_state_args& operator=(const switch_sai_rpc_sai_thrift_set_stp_port_state_args&);
  switch_sai_rpc_sai_thrift_set_stp_port_state_args() : stp_id(0), port_id(0), stp_port_state(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_stp_port_state_args() noexcept;
  sai_thrift_object_id_t stp_id;
  sai_thrift_object_id_t port_id;
  sai_thrift_port_stp_port_state_t stp_port_state;

  _switch_sai_rpc_sai_thrift_set_stp_port_state_args__isset __isset;

  void __set_stp_id(const sai_thrift_object_id_t val);

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_stp_port_state(const sai_thrift_port_stp_port_state_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_stp_port_state_args & rhs) const
  {
    if (!(stp_id == rhs.stp_id))
      return false;
    if (!(port_id == rhs.port_id))
      return false;
    if (!(stp_port_state == rhs.stp_port_state))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_stp_port_state_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_stp_port_state_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_stp_port_state_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_stp_port_state_pargs() noexcept;
  const sai_thrift_object_id_t* stp_id;
  const sai_thrift_object_id_t* port_id;
  const sai_thrift_port_stp_port_state_t* stp_port_state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_stp_port_state_result__isset {
  _switch_sai_rpc_sai_thrift_set_stp_port_state_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_stp_port_state_result__isset;

class switch_sai_rpc_sai_thrift_set_stp_port_state_result {
 public:

  switch_sai_rpc_sai_thrift_set_stp_port_state_result(const switch_sai_rpc_sai_thrift_set_stp_port_state_result&);
  switch_sai_rpc_sai_thrift_set_stp_port_state_result& operator=(const switch_sai_rpc_sai_thrift_set_stp_port_state_result&);
  switch_sai_rpc_sai_thrift_set_stp_port_state_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_stp_port_state_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_stp_port_state_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_stp_port_state_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_stp_port_state_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_stp_port_state_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_stp_port_state_presult__isset {
  _switch_sai_rpc_sai_thrift_set_stp_port_state_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_stp_port_state_presult__isset;

class switch_sai_rpc_sai_thrift_set_stp_port_state_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_stp_port_state_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_stp_port_state_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_port_state_args__isset {
  _switch_sai_rpc_sai_thrift_get_stp_port_state_args__isset() : stp_id(false), port_id(false) {}
  bool stp_id :1;
  bool port_id :1;
} _switch_sai_rpc_sai_thrift_get_stp_port_state_args__isset;

class switch_sai_rpc_sai_thrift_get_stp_port_state_args {
 public:

  switch_sai_rpc_sai_thrift_get_stp_port_state_args(const switch_sai_rpc_sai_thrift_get_stp_port_state_args&);
  switch_sai_rpc_sai_thrift_get_stp_port_state_args& operator=(const switch_sai_rpc_sai_thrift_get_stp_port_state_args&);
  switch_sai_rpc_sai_thrift_get_stp_port_state_args() : stp_id(0), port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_state_args() noexcept;
  sai_thrift_object_id_t stp_id;
  sai_thrift_object_id_t port_id;

  _switch_sai_rpc_sai_thrift_get_stp_port_state_args__isset __isset;

  void __set_stp_id(const sai_thrift_object_id_t val);

  void __set_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_stp_port_state_args & rhs) const
  {
    if (!(stp_id == rhs.stp_id))
      return false;
    if (!(port_id == rhs.port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_stp_port_state_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_stp_port_state_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_stp_port_state_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_state_pargs() noexcept;
  const sai_thrift_object_id_t* stp_id;
  const sai_thrift_object_id_t* port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_port_state_result__isset {
  _switch_sai_rpc_sai_thrift_get_stp_port_state_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_stp_port_state_result__isset;

class switch_sai_rpc_sai_thrift_get_stp_port_state_result {
 public:

  switch_sai_rpc_sai_thrift_get_stp_port_state_result(const switch_sai_rpc_sai_thrift_get_stp_port_state_result&);
  switch_sai_rpc_sai_thrift_get_stp_port_state_result& operator=(const switch_sai_rpc_sai_thrift_get_stp_port_state_result&);
  switch_sai_rpc_sai_thrift_get_stp_port_state_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_state_result() noexcept;
  sai_thrift_port_stp_port_state_t success;

  _switch_sai_rpc_sai_thrift_get_stp_port_state_result__isset __isset;

  void __set_success(const sai_thrift_port_stp_port_state_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_stp_port_state_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_stp_port_state_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_stp_port_state_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_port_state_presult__isset {
  _switch_sai_rpc_sai_thrift_get_stp_port_state_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_stp_port_state_presult__isset;

class switch_sai_rpc_sai_thrift_get_stp_port_state_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_state_presult() noexcept;
  sai_thrift_port_stp_port_state_t* success;

  _switch_sai_rpc_sai_thrift_get_stp_port_state_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_ports_args__isset {
  _switch_sai_rpc_sai_thrift_create_stp_ports_args__isset() : thrift_attr_lists(false), thrift_attr_count_lists(false), mode(false) {}
  bool thrift_attr_lists :1;
  bool thrift_attr_count_lists :1;
  bool mode :1;
} _switch_sai_rpc_sai_thrift_create_stp_ports_args__isset;

class switch_sai_rpc_sai_thrift_create_stp_ports_args {
 public:

  switch_sai_rpc_sai_thrift_create_stp_ports_args(const switch_sai_rpc_sai_thrift_create_stp_ports_args&);
  switch_sai_rpc_sai_thrift_create_stp_ports_args& operator=(const switch_sai_rpc_sai_thrift_create_stp_ports_args&);
  switch_sai_rpc_sai_thrift_create_stp_ports_args() : mode(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_stp_ports_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_lists;
  std::vector<int32_t>  thrift_attr_count_lists;
  int8_t mode;

  _switch_sai_rpc_sai_thrift_create_stp_ports_args__isset __isset;

  void __set_thrift_attr_lists(const std::vector<sai_thrift_attribute_t> & val);

  void __set_thrift_attr_count_lists(const std::vector<int32_t> & val);

  void __set_mode(const int8_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_stp_ports_args & rhs) const
  {
    if (!(thrift_attr_lists == rhs.thrift_attr_lists))
      return false;
    if (!(thrift_attr_count_lists == rhs.thrift_attr_count_lists))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_stp_ports_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_stp_ports_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_stp_ports_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_stp_ports_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_lists;
  const std::vector<int32_t> * thrift_attr_count_lists;
  const int8_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_ports_result__isset {
  _switch_sai_rpc_sai_thrift_create_stp_ports_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_stp_ports_result__isset;

class switch_sai_rpc_sai_thrift_create_stp_ports_result {
 public:

  switch_sai_rpc_sai_thrift_create_stp_ports_result(const switch_sai_rpc_sai_thrift_create_stp_ports_result&);
  switch_sai_rpc_sai_thrift_create_stp_ports_result& operator=(const switch_sai_rpc_sai_thrift_create_stp_ports_result&);
  switch_sai_rpc_sai_thrift_create_stp_ports_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_stp_ports_result() noexcept;
  sai_thrift_results_t success;

  _switch_sai_rpc_sai_thrift_create_stp_ports_result__isset __isset;

  void __set_success(const sai_thrift_results_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_stp_ports_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_stp_ports_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_stp_ports_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_ports_presult__isset {
  _switch_sai_rpc_sai_thrift_create_stp_ports_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_stp_ports_presult__isset;

class switch_sai_rpc_sai_thrift_create_stp_ports_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_stp_ports_presult() noexcept;
  sai_thrift_results_t* success;

  _switch_sai_rpc_sai_thrift_create_stp_ports_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_ports_args__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_ports_args__isset() : thrift_object_id_list(false), mode(false) {}
  bool thrift_object_id_list :1;
  bool mode :1;
} _switch_sai_rpc_sai_thrift_remove_stp_ports_args__isset;

class switch_sai_rpc_sai_thrift_remove_stp_ports_args {
 public:

  switch_sai_rpc_sai_thrift_remove_stp_ports_args(const switch_sai_rpc_sai_thrift_remove_stp_ports_args&);
  switch_sai_rpc_sai_thrift_remove_stp_ports_args& operator=(const switch_sai_rpc_sai_thrift_remove_stp_ports_args&);
  switch_sai_rpc_sai_thrift_remove_stp_ports_args() : mode(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_stp_ports_args() noexcept;
  std::vector<sai_thrift_object_id_t>  thrift_object_id_list;
  int8_t mode;

  _switch_sai_rpc_sai_thrift_remove_stp_ports_args__isset __isset;

  void __set_thrift_object_id_list(const std::vector<sai_thrift_object_id_t> & val);

  void __set_mode(const int8_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_stp_ports_args & rhs) const
  {
    if (!(thrift_object_id_list == rhs.thrift_object_id_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_stp_ports_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_stp_ports_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_stp_ports_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_stp_ports_pargs() noexcept;
  const std::vector<sai_thrift_object_id_t> * thrift_object_id_list;
  const int8_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_ports_result__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_ports_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_stp_ports_result__isset;

class switch_sai_rpc_sai_thrift_remove_stp_ports_result {
 public:

  switch_sai_rpc_sai_thrift_remove_stp_ports_result(const switch_sai_rpc_sai_thrift_remove_stp_ports_result&);
  switch_sai_rpc_sai_thrift_remove_stp_ports_result& operator=(const switch_sai_rpc_sai_thrift_remove_stp_ports_result&);
  switch_sai_rpc_sai_thrift_remove_stp_ports_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_stp_ports_result() noexcept;
  sai_thrift_status_list_t success;

  _switch_sai_rpc_sai_thrift_remove_stp_ports_result__isset __isset;

  void __set_success(const sai_thrift_status_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_stp_ports_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_stp_ports_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_stp_ports_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_ports_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_ports_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_stp_ports_presult__isset;

class switch_sai_rpc_sai_thrift_remove_stp_ports_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_stp_ports_presult() noexcept;
  sai_thrift_status_list_t* success;

  _switch_sai_rpc_sai_thrift_remove_stp_ports_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_neighbor_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_neighbor_entry_args__isset() : thrift_neighbor_entry(false), thrift_attr_list(false) {}
  bool thrift_neighbor_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_neighbor_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_neighbor_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_neighbor_entry_args(const switch_sai_rpc_sai_thrift_create_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_create_neighbor_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_create_neighbor_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_neighbor_entry_args() noexcept;
  sai_thrift_neighbor_entry_t thrift_neighbor_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_neighbor_entry_args__isset __isset;

  void __set_thrift_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_neighbor_entry_args & rhs) const
  {
    if (!(thrift_neighbor_entry == rhs.thrift_neighbor_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs() noexcept;
  const sai_thrift_neighbor_entry_t* thrift_neighbor_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_neighbor_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_neighbor_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_neighbor_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_neighbor_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_neighbor_entry_result(const switch_sai_rpc_sai_thrift_create_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_create_neighbor_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_create_neighbor_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_neighbor_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_neighbor_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_neighbor_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_neighbor_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_neighbor_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_neighbor_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_neighbor_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_neighbor_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_neighbor_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_args__isset() : thrift_neighbor_entry(false) {}
  bool thrift_neighbor_entry :1;
} _switch_sai_rpc_sai_thrift_remove_neighbor_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_neighbor_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_args(const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_neighbor_entry_args() noexcept;
  sai_thrift_neighbor_entry_t thrift_neighbor_entry;

  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_args__isset __isset;

  void __set_thrift_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args & rhs) const
  {
    if (!(thrift_neighbor_entry == rhs.thrift_neighbor_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs() noexcept;
  const sai_thrift_neighbor_entry_t* thrift_neighbor_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_neighbor_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_neighbor_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_neighbor_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_result(const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_neighbor_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args(const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result(const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset() : thrift_neighbor_entry(false), thrift_attr(false) {}
  bool thrift_neighbor_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args() noexcept;
  sai_thrift_neighbor_entry_t thrift_neighbor_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset __isset;

  void __set_thrift_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args & rhs) const
  {
    if (!(thrift_neighbor_entry == rhs.thrift_neighbor_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs() noexcept;
  const sai_thrift_neighbor_entry_t* thrift_neighbor_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset() : thrift_neighbor_entry(false) {}
  bool thrift_neighbor_entry :1;
} _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args() noexcept;
  sai_thrift_neighbor_entry_t thrift_neighbor_entry;

  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset __isset;

  void __set_thrift_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args & rhs) const
  {
    if (!(thrift_neighbor_entry == rhs.thrift_neighbor_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs() noexcept;
  const sai_thrift_neighbor_entry_t* thrift_neighbor_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_switch_attribute_args__isset() : thrift_attr_ids(false) {}
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_switch_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_switch_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_switch_attribute_args(const switch_sai_rpc_sai_thrift_get_switch_attribute_args&);
  switch_sai_rpc_sai_thrift_get_switch_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_switch_attribute_args&);
  switch_sai_rpc_sai_thrift_get_switch_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_switch_attribute_args() noexcept;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_switch_attribute_args__isset __isset;

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_switch_attribute_args & rhs) const
  {
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_switch_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_switch_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_switch_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_switch_attribute_pargs() noexcept;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_switch_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_switch_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_switch_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_switch_attribute_result(const switch_sai_rpc_sai_thrift_get_switch_attribute_result&);
  switch_sai_rpc_sai_thrift_get_switch_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_switch_attribute_result&);
  switch_sai_rpc_sai_thrift_get_switch_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_switch_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_switch_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_switch_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_switch_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_switch_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_switch_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_switch_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_switch_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_switch_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_switch_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args {
 public:

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args(const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args&);
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args& operator=(const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args&);
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result__isset {
  _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result__isset;

class switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result {
 public:

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result(const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result&);
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result& operator=(const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result&);
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result() noexcept;
  sai_thrift_attribute_t success;

  _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result__isset __isset;

  void __set_success(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult__isset {
  _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult__isset;

class switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult() noexcept;
  sai_thrift_attribute_t* success;

  _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_get_cpu_port_id_args {
 public:

  switch_sai_rpc_sai_thrift_get_cpu_port_id_args(const switch_sai_rpc_sai_thrift_get_cpu_port_id_args&);
  switch_sai_rpc_sai_thrift_get_cpu_port_id_args& operator=(const switch_sai_rpc_sai_thrift_get_cpu_port_id_args&);
  switch_sai_rpc_sai_thrift_get_cpu_port_id_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_port_id_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_port_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_port_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_port_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_port_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_port_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_port_id_result__isset;

class switch_sai_rpc_sai_thrift_get_cpu_port_id_result {
 public:

  switch_sai_rpc_sai_thrift_get_cpu_port_id_result(const switch_sai_rpc_sai_thrift_get_cpu_port_id_result&);
  switch_sai_rpc_sai_thrift_get_cpu_port_id_result& operator=(const switch_sai_rpc_sai_thrift_get_cpu_port_id_result&);
  switch_sai_rpc_sai_thrift_get_cpu_port_id_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_port_id_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_cpu_port_id_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_port_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_port_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_port_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_port_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_port_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_port_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_cpu_port_id_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_port_id_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_cpu_port_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_get_default_trap_group_args {
 public:

  switch_sai_rpc_sai_thrift_get_default_trap_group_args(const switch_sai_rpc_sai_thrift_get_default_trap_group_args&);
  switch_sai_rpc_sai_thrift_get_default_trap_group_args& operator=(const switch_sai_rpc_sai_thrift_get_default_trap_group_args&);
  switch_sai_rpc_sai_thrift_get_default_trap_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_trap_group_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_trap_group_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_trap_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_trap_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_default_trap_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_default_trap_group_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_default_trap_group_result__isset {
  _switch_sai_rpc_sai_thrift_get_default_trap_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_trap_group_result__isset;

class switch_sai_rpc_sai_thrift_get_default_trap_group_result {
 public:

  switch_sai_rpc_sai_thrift_get_default_trap_group_result(const switch_sai_rpc_sai_thrift_get_default_trap_group_result&);
  switch_sai_rpc_sai_thrift_get_default_trap_group_result& operator=(const switch_sai_rpc_sai_thrift_get_default_trap_group_result&);
  switch_sai_rpc_sai_thrift_get_default_trap_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_trap_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_default_trap_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_trap_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_trap_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_trap_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_default_trap_group_presult__isset {
  _switch_sai_rpc_sai_thrift_get_default_trap_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_trap_group_presult__isset;

class switch_sai_rpc_sai_thrift_get_default_trap_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_default_trap_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_default_trap_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_get_default_router_id_args {
 public:

  switch_sai_rpc_sai_thrift_get_default_router_id_args(const switch_sai_rpc_sai_thrift_get_default_router_id_args&);
  switch_sai_rpc_sai_thrift_get_default_router_id_args& operator=(const switch_sai_rpc_sai_thrift_get_default_router_id_args&);
  switch_sai_rpc_sai_thrift_get_default_router_id_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_router_id_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_router_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_router_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_router_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_default_router_id_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_default_router_id_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_default_router_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_default_router_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_router_id_result__isset;

class switch_sai_rpc_sai_thrift_get_default_router_id_result {
 public:

  switch_sai_rpc_sai_thrift_get_default_router_id_result(const switch_sai_rpc_sai_thrift_get_default_router_id_result&);
  switch_sai_rpc_sai_thrift_get_default_router_id_result& operator=(const switch_sai_rpc_sai_thrift_get_default_router_id_result&);
  switch_sai_rpc_sai_thrift_get_default_router_id_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_router_id_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_default_router_id_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_router_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_router_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_router_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_default_router_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_default_router_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_router_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_default_router_id_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_default_router_id_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_default_router_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args {
 public:

  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args(const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args&);
  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args& operator=(const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args&);
  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result__isset;

class switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result {
 public:

  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result(const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result&);
  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result& operator=(const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result&);
  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_get_default_vlan_id_args {
 public:

  switch_sai_rpc_sai_thrift_get_default_vlan_id_args(const switch_sai_rpc_sai_thrift_get_default_vlan_id_args&);
  switch_sai_rpc_sai_thrift_get_default_vlan_id_args& operator=(const switch_sai_rpc_sai_thrift_get_default_vlan_id_args&);
  switch_sai_rpc_sai_thrift_get_default_vlan_id_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_vlan_id_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_vlan_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_vlan_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_vlan_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_default_vlan_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_default_vlan_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_vlan_id_result__isset;

class switch_sai_rpc_sai_thrift_get_default_vlan_id_result {
 public:

  switch_sai_rpc_sai_thrift_get_default_vlan_id_result(const switch_sai_rpc_sai_thrift_get_default_vlan_id_result&);
  switch_sai_rpc_sai_thrift_get_default_vlan_id_result& operator=(const switch_sai_rpc_sai_thrift_get_default_vlan_id_result&);
  switch_sai_rpc_sai_thrift_get_default_vlan_id_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_vlan_id_result() noexcept;
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_get_default_vlan_id_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_vlan_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_vlan_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_vlan_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_default_vlan_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_default_vlan_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_vlan_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_default_vlan_id_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_default_vlan_id_presult() noexcept;
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_get_default_vlan_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args__isset {
  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args__isset() : port_name(false) {}
  bool port_name :1;
} _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args__isset;

class switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args {
 public:

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args(const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args&);
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args& operator=(const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args&);
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args() : port_name() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args() noexcept;
  std::string port_name;

  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args__isset __isset;

  void __set_port_name(const std::string& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args & rhs) const
  {
    if (!(port_name == rhs.port_name))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs() noexcept;
  const std::string* port_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result__isset {
  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result__isset;

class switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result {
 public:

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result(const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result&);
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result& operator=(const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result&);
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult__isset {
  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult__isset;

class switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_switch_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_switch_attribute_args__isset() : attribute(false) {}
  bool attribute :1;
} _switch_sai_rpc_sai_thrift_set_switch_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_switch_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_switch_attribute_args(const switch_sai_rpc_sai_thrift_set_switch_attribute_args&);
  switch_sai_rpc_sai_thrift_set_switch_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_switch_attribute_args&);
  switch_sai_rpc_sai_thrift_set_switch_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_switch_attribute_args() noexcept;
  sai_thrift_attribute_t attribute;

  _switch_sai_rpc_sai_thrift_set_switch_attribute_args__isset __isset;

  void __set_attribute(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_switch_attribute_args & rhs) const
  {
    if (!(attribute == rhs.attribute))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_switch_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_switch_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_switch_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_switch_attribute_pargs() noexcept;
  const sai_thrift_attribute_t* attribute;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_switch_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_switch_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_switch_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_switch_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_switch_attribute_result(const switch_sai_rpc_sai_thrift_set_switch_attribute_result&);
  switch_sai_rpc_sai_thrift_set_switch_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_switch_attribute_result&);
  switch_sai_rpc_sai_thrift_set_switch_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_switch_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_switch_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_switch_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_switch_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_switch_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_switch_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_switch_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_switch_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_switch_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_switch_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_switch_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_create_switch_args {
 public:

  switch_sai_rpc_sai_thrift_create_switch_args(const switch_sai_rpc_sai_thrift_create_switch_args&);
  switch_sai_rpc_sai_thrift_create_switch_args& operator=(const switch_sai_rpc_sai_thrift_create_switch_args&);
  switch_sai_rpc_sai_thrift_create_switch_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_switch_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_create_switch_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_switch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_switch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_switch_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_switch_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_switch_result__isset {
  _switch_sai_rpc_sai_thrift_create_switch_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_switch_result__isset;

class switch_sai_rpc_sai_thrift_create_switch_result {
 public:

  switch_sai_rpc_sai_thrift_create_switch_result(const switch_sai_rpc_sai_thrift_create_switch_result&);
  switch_sai_rpc_sai_thrift_create_switch_result& operator=(const switch_sai_rpc_sai_thrift_create_switch_result&);
  switch_sai_rpc_sai_thrift_create_switch_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_switch_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_switch_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_switch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_switch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_switch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_switch_presult__isset {
  _switch_sai_rpc_sai_thrift_create_switch_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_switch_presult__isset;

class switch_sai_rpc_sai_thrift_create_switch_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_switch_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_switch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_remove_switch_args {
 public:

  switch_sai_rpc_sai_thrift_remove_switch_args(const switch_sai_rpc_sai_thrift_remove_switch_args&);
  switch_sai_rpc_sai_thrift_remove_switch_args& operator=(const switch_sai_rpc_sai_thrift_remove_switch_args&);
  switch_sai_rpc_sai_thrift_remove_switch_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_switch_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_remove_switch_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_switch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_switch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_switch_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_switch_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_switch_result__isset {
  _switch_sai_rpc_sai_thrift_remove_switch_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_switch_result__isset;

class switch_sai_rpc_sai_thrift_remove_switch_result {
 public:

  switch_sai_rpc_sai_thrift_remove_switch_result(const switch_sai_rpc_sai_thrift_remove_switch_result&);
  switch_sai_rpc_sai_thrift_remove_switch_result& operator=(const switch_sai_rpc_sai_thrift_remove_switch_result&);
  switch_sai_rpc_sai_thrift_remove_switch_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_switch_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_switch_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_switch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_switch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_switch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_switch_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_switch_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_switch_presult__isset;

class switch_sai_rpc_sai_thrift_remove_switch_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_switch_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_switch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_switch_stats_args__isset() : counter_ids(false), number_of_counters(false) {}
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_switch_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_switch_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_switch_stats_args(const switch_sai_rpc_sai_thrift_get_switch_stats_args&);
  switch_sai_rpc_sai_thrift_get_switch_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_switch_stats_args&);
  switch_sai_rpc_sai_thrift_get_switch_stats_args() : number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_switch_stats_args() noexcept;
  std::vector<sai_thrift_port_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_switch_stats_args__isset __isset;

  void __set_counter_ids(const std::vector<sai_thrift_port_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_switch_stats_args & rhs) const
  {
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_switch_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_switch_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_switch_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_switch_stats_pargs() noexcept;
  const std::vector<sai_thrift_port_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_switch_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_switch_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_switch_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_switch_stats_result(const switch_sai_rpc_sai_thrift_get_switch_stats_result&);
  switch_sai_rpc_sai_thrift_get_switch_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_switch_stats_result&);
  switch_sai_rpc_sai_thrift_get_switch_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_switch_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_switch_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_switch_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_switch_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_switch_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_switch_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_switch_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_switch_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_switch_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_switch_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_stats_ext_args__isset {
  _switch_sai_rpc_sai_thrift_get_switch_stats_ext_args__isset() : counter_ids(false), mode(false), number_of_counters(false) {}
  bool counter_ids :1;
  bool mode :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_switch_stats_ext_args__isset;

class switch_sai_rpc_sai_thrift_get_switch_stats_ext_args {
 public:

  switch_sai_rpc_sai_thrift_get_switch_stats_ext_args(const switch_sai_rpc_sai_thrift_get_switch_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_switch_stats_ext_args& operator=(const switch_sai_rpc_sai_thrift_get_switch_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_switch_stats_ext_args() : mode(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_switch_stats_ext_args() noexcept;
  std::vector<sai_thrift_port_stat_counter_t>  counter_ids;
  int8_t mode;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_switch_stats_ext_args__isset __isset;

  void __set_counter_ids(const std::vector<sai_thrift_port_stat_counter_t> & val);

  void __set_mode(const int8_t val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_switch_stats_ext_args & rhs) const
  {
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_switch_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_switch_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_switch_stats_ext_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_switch_stats_ext_pargs() noexcept;
  const std::vector<sai_thrift_port_stat_counter_t> * counter_ids;
  const int8_t* mode;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_stats_ext_result__isset {
  _switch_sai_rpc_sai_thrift_get_switch_stats_ext_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_switch_stats_ext_result__isset;

class switch_sai_rpc_sai_thrift_get_switch_stats_ext_result {
 public:

  switch_sai_rpc_sai_thrift_get_switch_stats_ext_result(const switch_sai_rpc_sai_thrift_get_switch_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_switch_stats_ext_result& operator=(const switch_sai_rpc_sai_thrift_get_switch_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_switch_stats_ext_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_switch_stats_ext_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_switch_stats_ext_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_switch_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_switch_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_switch_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_stats_ext_presult__isset {
  _switch_sai_rpc_sai_thrift_get_switch_stats_ext_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_switch_stats_ext_presult__isset;

class switch_sai_rpc_sai_thrift_get_switch_stats_ext_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_switch_stats_ext_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_switch_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_clear_switch_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_switch_stats_args__isset() : counter_ids(false), number_of_counters(false) {}
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_clear_switch_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_switch_stats_args {
 public:

  switch_sai_rpc_sai_thrift_clear_switch_stats_args(const switch_sai_rpc_sai_thrift_clear_switch_stats_args&);
  switch_sai_rpc_sai_thrift_clear_switch_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_switch_stats_args&);
  switch_sai_rpc_sai_thrift_clear_switch_stats_args() : number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_switch_stats_args() noexcept;
  std::vector<sai_thrift_port_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_clear_switch_stats_args__isset __isset;

  void __set_counter_ids(const std::vector<sai_thrift_port_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_switch_stats_args & rhs) const
  {
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_switch_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_switch_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_switch_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_switch_stats_pargs() noexcept;
  const std::vector<sai_thrift_port_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_switch_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_switch_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_switch_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_switch_stats_result {
 public:

  switch_sai_rpc_sai_thrift_clear_switch_stats_result(const switch_sai_rpc_sai_thrift_clear_switch_stats_result&);
  switch_sai_rpc_sai_thrift_clear_switch_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_switch_stats_result&);
  switch_sai_rpc_sai_thrift_clear_switch_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_switch_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_switch_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_switch_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_switch_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_switch_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_switch_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_switch_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_switch_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_switch_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_switch_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_switch_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_port_args__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_port_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_bridge_port_args__isset;

class switch_sai_rpc_sai_thrift_create_bridge_port_args {
 public:

  switch_sai_rpc_sai_thrift_create_bridge_port_args(const switch_sai_rpc_sai_thrift_create_bridge_port_args&);
  switch_sai_rpc_sai_thrift_create_bridge_port_args& operator=(const switch_sai_rpc_sai_thrift_create_bridge_port_args&);
  switch_sai_rpc_sai_thrift_create_bridge_port_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bridge_port_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_bridge_port_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bridge_port_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bridge_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bridge_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_bridge_port_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_bridge_port_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_port_result__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bridge_port_result__isset;

class switch_sai_rpc_sai_thrift_create_bridge_port_result {
 public:

  switch_sai_rpc_sai_thrift_create_bridge_port_result(const switch_sai_rpc_sai_thrift_create_bridge_port_result&);
  switch_sai_rpc_sai_thrift_create_bridge_port_result& operator=(const switch_sai_rpc_sai_thrift_create_bridge_port_result&);
  switch_sai_rpc_sai_thrift_create_bridge_port_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bridge_port_result() noexcept;
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_create_bridge_port_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bridge_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bridge_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bridge_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_port_presult__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bridge_port_presult__isset;

class switch_sai_rpc_sai_thrift_create_bridge_port_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_bridge_port_presult() noexcept;
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_create_bridge_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_port_args__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_port_args__isset() : bridge_port_id(false) {}
  bool bridge_port_id :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_port_args__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_port_args {
 public:

  switch_sai_rpc_sai_thrift_remove_bridge_port_args(const switch_sai_rpc_sai_thrift_remove_bridge_port_args&);
  switch_sai_rpc_sai_thrift_remove_bridge_port_args& operator=(const switch_sai_rpc_sai_thrift_remove_bridge_port_args&);
  switch_sai_rpc_sai_thrift_remove_bridge_port_args() : bridge_port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_port_args() noexcept;
  sai_thrift_object_id_t bridge_port_id;

  _switch_sai_rpc_sai_thrift_remove_bridge_port_args__isset __isset;

  void __set_bridge_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bridge_port_args & rhs) const
  {
    if (!(bridge_port_id == rhs.bridge_port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bridge_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bridge_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_bridge_port_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_port_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_port_result__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_port_result__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_port_result {
 public:

  switch_sai_rpc_sai_thrift_remove_bridge_port_result(const switch_sai_rpc_sai_thrift_remove_bridge_port_result&);
  switch_sai_rpc_sai_thrift_remove_bridge_port_result& operator=(const switch_sai_rpc_sai_thrift_remove_bridge_port_result&);
  switch_sai_rpc_sai_thrift_remove_bridge_port_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_port_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_bridge_port_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bridge_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bridge_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bridge_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_port_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_port_presult__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_port_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_port_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_bridge_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_list_args__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_list_args__isset() : bridge_id(false) {}
  bool bridge_id :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_list_args__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_list_args {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_port_list_args(const switch_sai_rpc_sai_thrift_get_bridge_port_list_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_list_args& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_list_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_list_args() : bridge_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_list_args() noexcept;
  sai_thrift_object_id_t bridge_id;

  _switch_sai_rpc_sai_thrift_get_bridge_port_list_args__isset __isset;

  void __set_bridge_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_list_args & rhs) const
  {
    if (!(bridge_id == rhs.bridge_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_list_result__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_list_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_list_result__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_list_result {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_port_list_result(const switch_sai_rpc_sai_thrift_get_bridge_port_list_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_list_result& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_list_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_list_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_list_result() noexcept;
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_list_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_list_presult__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_list_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_list_presult__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_list_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_list_presult() noexcept;
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset() : bridge_port_id(false) {}
  bool bridge_port_id :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args(const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args() : bridge_port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args() noexcept;
  sai_thrift_object_id_t bridge_port_id;

  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset __isset;

  void __set_bridge_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args & rhs) const
  {
    if (!(bridge_port_id == rhs.bridge_port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result(const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset() : bridge_port_id(false), thrift_attr(false) {}
  bool bridge_port_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args(const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args() : bridge_port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args() noexcept;
  sai_thrift_object_id_t bridge_port_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset __isset;

  void __set_bridge_port_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args & rhs) const
  {
    if (!(bridge_port_id == rhs.bridge_port_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_port_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result(const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_args__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_bridge_args__isset;

class switch_sai_rpc_sai_thrift_create_bridge_args {
 public:

  switch_sai_rpc_sai_thrift_create_bridge_args(const switch_sai_rpc_sai_thrift_create_bridge_args&);
  switch_sai_rpc_sai_thrift_create_bridge_args& operator=(const switch_sai_rpc_sai_thrift_create_bridge_args&);
  switch_sai_rpc_sai_thrift_create_bridge_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bridge_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_bridge_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bridge_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bridge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bridge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_bridge_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_bridge_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_result__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bridge_result__isset;

class switch_sai_rpc_sai_thrift_create_bridge_result {
 public:

  switch_sai_rpc_sai_thrift_create_bridge_result(const switch_sai_rpc_sai_thrift_create_bridge_result&);
  switch_sai_rpc_sai_thrift_create_bridge_result& operator=(const switch_sai_rpc_sai_thrift_create_bridge_result&);
  switch_sai_rpc_sai_thrift_create_bridge_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bridge_result() noexcept;
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_create_bridge_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bridge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bridge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bridge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_presult__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bridge_presult__isset;

class switch_sai_rpc_sai_thrift_create_bridge_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_bridge_presult() noexcept;
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_create_bridge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_args__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_args__isset() : bridge_id(false) {}
  bool bridge_id :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_args__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_args {
 public:

  switch_sai_rpc_sai_thrift_remove_bridge_args(const switch_sai_rpc_sai_thrift_remove_bridge_args&);
  switch_sai_rpc_sai_thrift_remove_bridge_args& operator=(const switch_sai_rpc_sai_thrift_remove_bridge_args&);
  switch_sai_rpc_sai_thrift_remove_bridge_args() : bridge_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_args() noexcept;
  sai_thrift_object_id_t bridge_id;

  _switch_sai_rpc_sai_thrift_remove_bridge_args__isset __isset;

  void __set_bridge_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bridge_args & rhs) const
  {
    if (!(bridge_id == rhs.bridge_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bridge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bridge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_bridge_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_result__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_result__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_result {
 public:

  switch_sai_rpc_sai_thrift_remove_bridge_result(const switch_sai_rpc_sai_thrift_remove_bridge_result&);
  switch_sai_rpc_sai_thrift_remove_bridge_result& operator=(const switch_sai_rpc_sai_thrift_remove_bridge_result&);
  switch_sai_rpc_sai_thrift_remove_bridge_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_bridge_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bridge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bridge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bridge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_presult__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_bridge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_attribute_args__isset() : bridge_id(false) {}
  bool bridge_id :1;
} _switch_sai_rpc_sai_thrift_get_bridge_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_bridge_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_attribute_args(const switch_sai_rpc_sai_thrift_get_bridge_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bridge_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_bridge_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bridge_attribute_args() : bridge_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_attribute_args() noexcept;
  sai_thrift_object_id_t bridge_id;

  _switch_sai_rpc_sai_thrift_get_bridge_attribute_args__isset __isset;

  void __set_bridge_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_attribute_args & rhs) const
  {
    if (!(bridge_id == rhs.bridge_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_bridge_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_attribute_result(const switch_sai_rpc_sai_thrift_get_bridge_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bridge_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_bridge_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bridge_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_bridge_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_bridge_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_bridge_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_attribute_args__isset() : bridge_id(false), thrift_attr(false) {}
  bool bridge_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_bridge_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_bridge_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_bridge_attribute_args(const switch_sai_rpc_sai_thrift_set_bridge_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bridge_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_bridge_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bridge_attribute_args() : bridge_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bridge_attribute_args() noexcept;
  sai_thrift_object_id_t bridge_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_bridge_attribute_args__isset __isset;

  void __set_bridge_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bridge_attribute_args & rhs) const
  {
    if (!(bridge_id == rhs.bridge_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bridge_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bridge_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bridge_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_bridge_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_bridge_attribute_result(const switch_sai_rpc_sai_thrift_set_bridge_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bridge_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_bridge_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bridge_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bridge_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_bridge_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bridge_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bridge_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bridge_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bridge_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_bridge_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_bridge_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_bridge_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_args__isset() : bridge_port_id(false), counter_ids(false), number_of_counters(false) {}
  bool bridge_port_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_port_stats_args(const switch_sai_rpc_sai_thrift_get_bridge_port_stats_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_stats_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_stats_args() : bridge_port_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_stats_args() noexcept;
  sai_thrift_object_id_t bridge_port_id;
  std::vector<sai_thrift_bridge_port_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_args__isset __isset;

  void __set_bridge_port_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_bridge_port_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_args & rhs) const
  {
    if (!(bridge_port_id == rhs.bridge_port_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_bridge_port_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_stats_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_port_id;
  const std::vector<sai_thrift_bridge_port_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_port_stats_result(const switch_sai_rpc_sai_thrift_get_bridge_port_stats_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_stats_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args__isset() : bridge_port_id(false), thrift_counter_ids(false), mode(false), number_of_counters(false) {}
  bool bridge_port_id :1;
  bool thrift_counter_ids :1;
  bool mode :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args(const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args() : bridge_port_id(0), mode(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args() noexcept;
  sai_thrift_object_id_t bridge_port_id;
  std::vector<sai_thrift_bridge_port_stat_counter_t>  thrift_counter_ids;
  int8_t mode;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args__isset __isset;

  void __set_bridge_port_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_bridge_port_stat_counter_t> & val);

  void __set_mode(const int8_t val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args & rhs) const
  {
    if (!(bridge_port_id == rhs.bridge_port_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_port_id;
  const std::vector<sai_thrift_bridge_port_stat_counter_t> * thrift_counter_ids;
  const int8_t* mode;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result {
 public:

  switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result(const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args__isset() : bridge_port_id(false), thrift_counter_ids(false), number_of_counters(false) {}
  bool bridge_port_id :1;
  bool thrift_counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args {
 public:

  switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args(const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args&);
  switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args&);
  switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args() : bridge_port_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args() noexcept;
  sai_thrift_object_id_t bridge_port_id;
  std::vector<sai_thrift_bridge_port_stat_counter_t>  thrift_counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args__isset __isset;

  void __set_bridge_port_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_bridge_port_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args & rhs) const
  {
    if (!(bridge_port_id == rhs.bridge_port_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_bridge_port_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_bridge_port_stats_pargs() noexcept;
  const sai_thrift_object_id_t* bridge_port_id;
  const std::vector<sai_thrift_bridge_port_stat_counter_t> * thrift_counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result {
 public:

  switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result(const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result&);
  switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result&);
  switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_bridge_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_bridge_port_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_bridge_port_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_bridge_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_args__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hostif_args__isset;

class switch_sai_rpc_sai_thrift_create_hostif_args {
 public:

  switch_sai_rpc_sai_thrift_create_hostif_args(const switch_sai_rpc_sai_thrift_create_hostif_args&);
  switch_sai_rpc_sai_thrift_create_hostif_args& operator=(const switch_sai_rpc_sai_thrift_create_hostif_args&);
  switch_sai_rpc_sai_thrift_create_hostif_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hostif_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_hostif_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_result__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_result__isset;

class switch_sai_rpc_sai_thrift_create_hostif_result {
 public:

  switch_sai_rpc_sai_thrift_create_hostif_result(const switch_sai_rpc_sai_thrift_create_hostif_result&);
  switch_sai_rpc_sai_thrift_create_hostif_result& operator=(const switch_sai_rpc_sai_thrift_create_hostif_result&);
  switch_sai_rpc_sai_thrift_create_hostif_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hostif_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_presult__isset;

class switch_sai_rpc_sai_thrift_create_hostif_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hostif_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_args__isset() : thrift_hif_id(false) {}
  bool thrift_hif_id :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_args__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_args {
 public:

  switch_sai_rpc_sai_thrift_remove_hostif_args(const switch_sai_rpc_sai_thrift_remove_hostif_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_args& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_args() : thrift_hif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_args() noexcept;
  sai_thrift_object_id_t thrift_hif_id;

  _switch_sai_rpc_sai_thrift_remove_hostif_args__isset __isset;

  void __set_thrift_hif_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_args & rhs) const
  {
    if (!(thrift_hif_id == rhs.thrift_hif_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_hostif_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hif_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_result__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_result {
 public:

  switch_sai_rpc_sai_thrift_remove_hostif_result(const switch_sai_rpc_sai_thrift_remove_hostif_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_result& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hostif_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hostif_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_attribute_args__isset() : thrift_hif_id(false) {}
  bool thrift_hif_id :1;
} _switch_sai_rpc_sai_thrift_get_hostif_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hostif_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_hostif_attribute_args(const switch_sai_rpc_sai_thrift_get_hostif_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hostif_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_attribute_args() : thrift_hif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hif_id;

  _switch_sai_rpc_sai_thrift_get_hostif_attribute_args__isset __isset;

  void __set_thrift_hif_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_attribute_args & rhs) const
  {
    if (!(thrift_hif_id == rhs.thrift_hif_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hif_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hostif_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_hostif_attribute_result(const switch_sai_rpc_sai_thrift_get_hostif_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hostif_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hostif_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hostif_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hostif_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_attribute_args__isset() : thrift_hif_id(false), thrift_attr(false) {}
  bool thrift_hif_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hostif_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hostif_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_hostif_attribute_args(const switch_sai_rpc_sai_thrift_set_hostif_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hostif_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_attribute_args() : thrift_hif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hif_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hostif_attribute_args__isset __isset;

  void __set_thrift_hif_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_attribute_args & rhs) const
  {
    if (!(thrift_hif_id == rhs.thrift_hif_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hif_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hostif_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_hostif_attribute_result(const switch_sai_rpc_sai_thrift_set_hostif_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hostif_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hostif_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hostif_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hostif_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_table_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hostif_table_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_hostif_table_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_hostif_table_entry_args(const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args&);
  switch_sai_rpc_sai_thrift_create_hostif_table_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args&);
  switch_sai_rpc_sai_thrift_create_hostif_table_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_table_entry_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_table_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_table_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_hostif_table_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_hostif_table_entry_result(const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result&);
  switch_sai_rpc_sai_thrift_create_hostif_table_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result&);
  switch_sai_rpc_sai_thrift_create_hostif_table_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_table_entry_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset() : thrift_hostif_table_entry_id(false) {}
  bool thrift_hostif_table_entry_id :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args(const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args() : thrift_hostif_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args() noexcept;
  sai_thrift_object_id_t thrift_hostif_table_entry_id;

  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset __isset;

  void __set_thrift_hostif_table_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args & rhs) const
  {
    if (!(thrift_hostif_table_entry_id == rhs.thrift_hostif_table_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hostif_table_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result(const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset() : thrift_hostif_table_entry_id(false) {}
  bool thrift_hostif_table_entry_id :1;
} _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args() : thrift_hostif_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hostif_table_entry_id;

  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset __isset;

  void __set_thrift_hostif_table_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args & rhs) const
  {
    if (!(thrift_hostif_table_entry_id == rhs.thrift_hostif_table_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hostif_table_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset() : thrift_hostif_table_entry_id(false), thrift_attr(false) {}
  bool thrift_hostif_table_entry_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args() : thrift_hostif_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hostif_table_entry_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset __isset;

  void __set_thrift_hostif_table_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args & rhs) const
  {
    if (!(thrift_hostif_table_entry_id == rhs.thrift_hostif_table_entry_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hostif_table_entry_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_group_args__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_args(const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_args& operator=(const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_group_result__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_result(const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_result& operator=(const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset() : thrift_hostif_trap_group_id(false) {}
  bool thrift_hostif_trap_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args(const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args() : thrift_hostif_trap_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args() noexcept;
  sai_thrift_object_id_t thrift_hostif_trap_group_id;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset __isset;

  void __set_thrift_hostif_trap_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args & rhs) const
  {
    if (!(thrift_hostif_trap_group_id == rhs.thrift_hostif_trap_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hostif_trap_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result(const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset() : thrift_hostif_trap_group_id(false) {}
  bool thrift_hostif_trap_group_id :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args(const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args() : thrift_hostif_trap_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hostif_trap_group_id;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset __isset;

  void __set_thrift_hostif_trap_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args & rhs) const
  {
    if (!(thrift_hostif_trap_group_id == rhs.thrift_hostif_trap_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hostif_trap_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result(const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset() : thrift_hostif_trap_group_id(false), thrift_attr(false) {}
  bool thrift_hostif_trap_group_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args(const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args() : thrift_hostif_trap_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hostif_trap_group_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset __isset;

  void __set_thrift_hostif_trap_group_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args & rhs) const
  {
    if (!(thrift_hostif_trap_group_id == rhs.thrift_hostif_trap_group_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hostif_trap_group_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result(const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_args__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_args__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_args {
 public:

  switch_sai_rpc_sai_thrift_create_hostif_trap_args(const switch_sai_rpc_sai_thrift_create_hostif_trap_args&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_args& operator=(const switch_sai_rpc_sai_thrift_create_hostif_trap_args&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_trap_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_trap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_trap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_hostif_trap_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_result__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_result__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_result {
 public:

  switch_sai_rpc_sai_thrift_create_hostif_trap_result(const switch_sai_rpc_sai_thrift_create_hostif_trap_result&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_result& operator=(const switch_sai_rpc_sai_thrift_create_hostif_trap_result&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_trap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_trap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_trap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_presult__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_args__isset() : thrift_hostif_trap_id(false) {}
  bool thrift_hostif_trap_id :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_args__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_args {
 public:

  switch_sai_rpc_sai_thrift_remove_hostif_trap_args(const switch_sai_rpc_sai_thrift_remove_hostif_trap_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_args& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_trap_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_args() : thrift_hostif_trap_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_args() noexcept;
  sai_thrift_object_id_t thrift_hostif_trap_id;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_args__isset __isset;

  void __set_thrift_hostif_trap_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_trap_args & rhs) const
  {
    if (!(thrift_hostif_trap_id == rhs.thrift_hostif_trap_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_trap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_trap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hostif_trap_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_result__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_result {
 public:

  switch_sai_rpc_sai_thrift_remove_hostif_trap_result(const switch_sai_rpc_sai_thrift_remove_hostif_trap_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_result& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_trap_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_trap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_trap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_trap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset() : thrift_hostif_trap_id(false) {}
  bool thrift_hostif_trap_id :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args(const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args() : thrift_hostif_trap_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hostif_trap_id;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset __isset;

  void __set_thrift_hostif_trap_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args & rhs) const
  {
    if (!(thrift_hostif_trap_id == rhs.thrift_hostif_trap_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hostif_trap_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result(const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset() : thrift_hostif_trap_id(false), thrift_attr(false) {}
  bool thrift_hostif_trap_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args(const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args() : thrift_hostif_trap_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hostif_trap_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset __isset;

  void __set_thrift_hostif_trap_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args & rhs) const
  {
    if (!(thrift_hostif_trap_id == rhs.thrift_hostif_trap_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hostif_trap_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result(const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_send_hostif_packet_args__isset {
  _switch_sai_rpc_sai_thrift_send_hostif_packet_args__isset() : thrift_hif_id(false), packet_data(false), thrift_attr_list(false) {}
  bool thrift_hif_id :1;
  bool packet_data :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_send_hostif_packet_args__isset;

class switch_sai_rpc_sai_thrift_send_hostif_packet_args {
 public:

  switch_sai_rpc_sai_thrift_send_hostif_packet_args(const switch_sai_rpc_sai_thrift_send_hostif_packet_args&);
  switch_sai_rpc_sai_thrift_send_hostif_packet_args& operator=(const switch_sai_rpc_sai_thrift_send_hostif_packet_args&);
  switch_sai_rpc_sai_thrift_send_hostif_packet_args() : thrift_hif_id(0), packet_data() {
  }

  virtual ~switch_sai_rpc_sai_thrift_send_hostif_packet_args() noexcept;
  sai_thrift_object_id_t thrift_hif_id;
  std::string packet_data;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_send_hostif_packet_args__isset __isset;

  void __set_thrift_hif_id(const sai_thrift_object_id_t val);

  void __set_packet_data(const std::string& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_send_hostif_packet_args & rhs) const
  {
    if (!(thrift_hif_id == rhs.thrift_hif_id))
      return false;
    if (!(packet_data == rhs.packet_data))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_send_hostif_packet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_send_hostif_packet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_send_hostif_packet_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_send_hostif_packet_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hif_id;
  const std::string* packet_data;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_send_hostif_packet_result__isset {
  _switch_sai_rpc_sai_thrift_send_hostif_packet_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_send_hostif_packet_result__isset;

class switch_sai_rpc_sai_thrift_send_hostif_packet_result {
 public:

  switch_sai_rpc_sai_thrift_send_hostif_packet_result(const switch_sai_rpc_sai_thrift_send_hostif_packet_result&);
  switch_sai_rpc_sai_thrift_send_hostif_packet_result& operator=(const switch_sai_rpc_sai_thrift_send_hostif_packet_result&);
  switch_sai_rpc_sai_thrift_send_hostif_packet_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_send_hostif_packet_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_send_hostif_packet_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_send_hostif_packet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_send_hostif_packet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_send_hostif_packet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_send_hostif_packet_presult__isset {
  _switch_sai_rpc_sai_thrift_send_hostif_packet_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_send_hostif_packet_presult__isset;

class switch_sai_rpc_sai_thrift_send_hostif_packet_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_send_hostif_packet_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_send_hostif_packet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_args {
 public:

  switch_sai_rpc_sai_thrift_create_acl_table_args(const switch_sai_rpc_sai_thrift_create_acl_table_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_table_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_acl_table_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_result {
 public:

  switch_sai_rpc_sai_thrift_create_acl_table_result(const switch_sai_rpc_sai_thrift_create_acl_table_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_table_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_args__isset() : acl_table_id(false) {}
  bool acl_table_id :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_args {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_table_args(const switch_sai_rpc_sai_thrift_remove_acl_table_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_args() : acl_table_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_args() noexcept;
  sai_thrift_object_id_t acl_table_id;

  _switch_sai_rpc_sai_thrift_remove_acl_table_args__isset __isset;

  void __set_acl_table_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_args & rhs) const
  {
    if (!(acl_table_id == rhs.acl_table_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_acl_table_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_pargs() noexcept;
  const sai_thrift_object_id_t* acl_table_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_result {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_table_result(const switch_sai_rpc_sai_thrift_remove_acl_table_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_args__isset() : acl_table_id(false), thrift_attr_ids(false) {}
  bool acl_table_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_acl_table_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_attribute_args() : acl_table_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_attribute_args() noexcept;
  sai_thrift_object_id_t acl_table_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_args__isset __isset;

  void __set_acl_table_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args & rhs) const
  {
    if (!(acl_table_id == rhs.acl_table_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* acl_table_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_acl_table_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_acl_entry_args(const switch_sai_rpc_sai_thrift_create_acl_entry_args&);
  switch_sai_rpc_sai_thrift_create_acl_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_entry_args&);
  switch_sai_rpc_sai_thrift_create_acl_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_entry_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_acl_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_entry_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_acl_entry_result(const switch_sai_rpc_sai_thrift_create_acl_entry_result&);
  switch_sai_rpc_sai_thrift_create_acl_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_entry_result&);
  switch_sai_rpc_sai_thrift_create_acl_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_entry_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_entry_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_entry_args__isset() : acl_entry(false) {}
  bool acl_entry :1;
} _switch_sai_rpc_sai_thrift_remove_acl_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_entry_args(const switch_sai_rpc_sai_thrift_remove_acl_entry_args&);
  switch_sai_rpc_sai_thrift_remove_acl_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_entry_args&);
  switch_sai_rpc_sai_thrift_remove_acl_entry_args() : acl_entry(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_entry_args() noexcept;
  sai_thrift_object_id_t acl_entry;

  _switch_sai_rpc_sai_thrift_remove_acl_entry_args__isset __isset;

  void __set_acl_entry(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_entry_args & rhs) const
  {
    if (!(acl_entry == rhs.acl_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_acl_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_entry_pargs() noexcept;
  const sai_thrift_object_id_t* acl_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_entry_result(const switch_sai_rpc_sai_thrift_remove_acl_entry_result&);
  switch_sai_rpc_sai_thrift_remove_acl_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_entry_result&);
  switch_sai_rpc_sai_thrift_remove_acl_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset() : acl_entry_id(false), thrift_attr(false) {}
  bool acl_entry_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args() : acl_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args() noexcept;
  sai_thrift_object_id_t acl_entry_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset __isset;

  void __set_acl_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args & rhs) const
  {
    if (!(acl_entry_id == rhs.acl_entry_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* acl_entry_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset() : acl_entry_id(false), thrift_attr_ids(false) {}
  bool acl_entry_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args() : acl_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args() noexcept;
  sai_thrift_object_id_t acl_entry_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset __isset;

  void __set_acl_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args & rhs) const
  {
    if (!(acl_entry_id == rhs.acl_entry_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* acl_entry_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_acl_table_group_args(const switch_sai_rpc_sai_thrift_create_acl_table_group_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_group_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_acl_table_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_acl_table_group_result(const switch_sai_rpc_sai_thrift_create_acl_table_group_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_group_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_args__isset() : acl_table_group_id(false) {}
  bool acl_table_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_table_group_args(const switch_sai_rpc_sai_thrift_remove_acl_table_group_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_group_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_args() : acl_table_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_args() noexcept;
  sai_thrift_object_id_t acl_table_group_id;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_args__isset __isset;

  void __set_acl_table_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_group_args & rhs) const
  {
    if (!(acl_table_group_id == rhs.acl_table_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs() noexcept;
  const sai_thrift_object_id_t* acl_table_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_table_group_result(const switch_sai_rpc_sai_thrift_remove_acl_table_group_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_group_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset() : acl_table_group_id(false) {}
  bool acl_table_group_id :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args() : acl_table_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args() noexcept;
  sai_thrift_object_id_t acl_table_group_id;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset __isset;

  void __set_acl_table_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args & rhs) const
  {
    if (!(acl_table_group_id == rhs.acl_table_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* acl_table_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_create_acl_table_group_member_args(const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_member_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_create_acl_table_group_member_result(const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_member_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset() : acl_table_group_member_id(false) {}
  bool acl_table_group_member_id :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args(const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args() : acl_table_group_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args() noexcept;
  sai_thrift_object_id_t acl_table_group_member_id;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset __isset;

  void __set_acl_table_group_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args & rhs) const
  {
    if (!(acl_table_group_member_id == rhs.acl_table_group_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs() noexcept;
  const sai_thrift_object_id_t* acl_table_group_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result(const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset() : acl_table_group_member_id(false) {}
  bool acl_table_group_member_id :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args() : acl_table_group_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args() noexcept;
  sai_thrift_object_id_t acl_table_group_member_id;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset __isset;

  void __set_acl_table_group_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args & rhs) const
  {
    if (!(acl_table_group_member_id == rhs.acl_table_group_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* acl_table_group_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_counter_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_counter_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_counter_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_counter_args {
 public:

  switch_sai_rpc_sai_thrift_create_acl_counter_args(const switch_sai_rpc_sai_thrift_create_acl_counter_args&);
  switch_sai_rpc_sai_thrift_create_acl_counter_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_counter_args&);
  switch_sai_rpc_sai_thrift_create_acl_counter_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_counter_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_counter_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_counter_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_acl_counter_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_counter_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_counter_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_counter_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_counter_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_counter_result {
 public:

  switch_sai_rpc_sai_thrift_create_acl_counter_result(const switch_sai_rpc_sai_thrift_create_acl_counter_result&);
  switch_sai_rpc_sai_thrift_create_acl_counter_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_counter_result&);
  switch_sai_rpc_sai_thrift_create_acl_counter_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_counter_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_counter_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_counter_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_counter_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_counter_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_counter_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_counter_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_counter_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_counter_args__isset() : acl_counter_id(false) {}
  bool acl_counter_id :1;
} _switch_sai_rpc_sai_thrift_remove_acl_counter_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_counter_args {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_counter_args(const switch_sai_rpc_sai_thrift_remove_acl_counter_args&);
  switch_sai_rpc_sai_thrift_remove_acl_counter_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_counter_args&);
  switch_sai_rpc_sai_thrift_remove_acl_counter_args() : acl_counter_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_counter_args() noexcept;
  sai_thrift_object_id_t acl_counter_id;

  _switch_sai_rpc_sai_thrift_remove_acl_counter_args__isset __isset;

  void __set_acl_counter_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_counter_args & rhs) const
  {
    if (!(acl_counter_id == rhs.acl_counter_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_acl_counter_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_counter_pargs() noexcept;
  const sai_thrift_object_id_t* acl_counter_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_counter_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_counter_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_counter_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_counter_result {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_counter_result(const switch_sai_rpc_sai_thrift_remove_acl_counter_result&);
  switch_sai_rpc_sai_thrift_remove_acl_counter_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_counter_result&);
  switch_sai_rpc_sai_thrift_remove_acl_counter_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_counter_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_counter_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_counter_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_counter_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_counter_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_counter_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_counter_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset() : acl_counter_id(false), thrift_attr_ids(false) {}
  bool acl_counter_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args() : acl_counter_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args() noexcept;
  sai_thrift_object_id_t acl_counter_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset __isset;

  void __set_acl_counter_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args & rhs) const
  {
    if (!(acl_counter_id == rhs.acl_counter_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* acl_counter_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result() noexcept;
  std::vector<sai_thrift_attribute_value_t>  success;

  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_attribute_value_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult() noexcept;
  std::vector<sai_thrift_attribute_value_t> * success;

  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_range_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_range_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_range_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_range_args {
 public:

  switch_sai_rpc_sai_thrift_create_acl_range_args(const switch_sai_rpc_sai_thrift_create_acl_range_args&);
  switch_sai_rpc_sai_thrift_create_acl_range_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_range_args&);
  switch_sai_rpc_sai_thrift_create_acl_range_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_range_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_range_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_range_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_acl_range_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_range_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_range_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_range_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_range_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_range_result {
 public:

  switch_sai_rpc_sai_thrift_create_acl_range_result(const switch_sai_rpc_sai_thrift_create_acl_range_result&);
  switch_sai_rpc_sai_thrift_create_acl_range_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_range_result&);
  switch_sai_rpc_sai_thrift_create_acl_range_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_range_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_range_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_range_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_range_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_range_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_range_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_acl_range_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_range_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_range_args__isset() : acl_range_id(false) {}
  bool acl_range_id :1;
} _switch_sai_rpc_sai_thrift_remove_acl_range_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_range_args {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_range_args(const switch_sai_rpc_sai_thrift_remove_acl_range_args&);
  switch_sai_rpc_sai_thrift_remove_acl_range_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_range_args&);
  switch_sai_rpc_sai_thrift_remove_acl_range_args() : acl_range_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_range_args() noexcept;
  sai_thrift_object_id_t acl_range_id;

  _switch_sai_rpc_sai_thrift_remove_acl_range_args__isset __isset;

  void __set_acl_range_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_range_args & rhs) const
  {
    if (!(acl_range_id == rhs.acl_range_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_acl_range_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_range_pargs() noexcept;
  const sai_thrift_object_id_t* acl_range_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_range_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_range_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_range_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_range_result {
 public:

  switch_sai_rpc_sai_thrift_remove_acl_range_result(const switch_sai_rpc_sai_thrift_remove_acl_range_result&);
  switch_sai_rpc_sai_thrift_remove_acl_range_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_range_result&);
  switch_sai_rpc_sai_thrift_remove_acl_range_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_range_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_range_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_range_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_range_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_range_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_range_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_range_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_hash_args__isset {
  _switch_sai_rpc_sai_thrift_create_hash_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hash_args__isset;

class switch_sai_rpc_sai_thrift_create_hash_args {
 public:

  switch_sai_rpc_sai_thrift_create_hash_args(const switch_sai_rpc_sai_thrift_create_hash_args&);
  switch_sai_rpc_sai_thrift_create_hash_args& operator=(const switch_sai_rpc_sai_thrift_create_hash_args&);
  switch_sai_rpc_sai_thrift_create_hash_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hash_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hash_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hash_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_hash_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hash_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hash_result__isset {
  _switch_sai_rpc_sai_thrift_create_hash_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hash_result__isset;

class switch_sai_rpc_sai_thrift_create_hash_result {
 public:

  switch_sai_rpc_sai_thrift_create_hash_result(const switch_sai_rpc_sai_thrift_create_hash_result&);
  switch_sai_rpc_sai_thrift_create_hash_result& operator=(const switch_sai_rpc_sai_thrift_create_hash_result&);
  switch_sai_rpc_sai_thrift_create_hash_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hash_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hash_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_hash_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hash_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hash_presult__isset;

class switch_sai_rpc_sai_thrift_create_hash_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_hash_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hash_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hash_args__isset() : hash_id(false) {}
  bool hash_id :1;
} _switch_sai_rpc_sai_thrift_remove_hash_args__isset;

class switch_sai_rpc_sai_thrift_remove_hash_args {
 public:

  switch_sai_rpc_sai_thrift_remove_hash_args(const switch_sai_rpc_sai_thrift_remove_hash_args&);
  switch_sai_rpc_sai_thrift_remove_hash_args& operator=(const switch_sai_rpc_sai_thrift_remove_hash_args&);
  switch_sai_rpc_sai_thrift_remove_hash_args() : hash_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hash_args() noexcept;
  sai_thrift_object_id_t hash_id;

  _switch_sai_rpc_sai_thrift_remove_hash_args__isset __isset;

  void __set_hash_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hash_args & rhs) const
  {
    if (!(hash_id == rhs.hash_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_hash_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hash_pargs() noexcept;
  const sai_thrift_object_id_t* hash_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hash_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hash_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hash_result__isset;

class switch_sai_rpc_sai_thrift_remove_hash_result {
 public:

  switch_sai_rpc_sai_thrift_remove_hash_result(const switch_sai_rpc_sai_thrift_remove_hash_result&);
  switch_sai_rpc_sai_thrift_remove_hash_result& operator=(const switch_sai_rpc_sai_thrift_remove_hash_result&);
  switch_sai_rpc_sai_thrift_remove_hash_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hash_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hash_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_hash_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hash_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hash_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hash_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_hash_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_hash_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hash_attribute_args__isset() : thrift_hash_id(false), thrift_attr(false) {}
  bool thrift_hash_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hash_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hash_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_hash_attribute_args(const switch_sai_rpc_sai_thrift_set_hash_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hash_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hash_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hash_attribute_args() : thrift_hash_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hash_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hash_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hash_attribute_args__isset __isset;

  void __set_thrift_hash_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hash_attribute_args & rhs) const
  {
    if (!(thrift_hash_id == rhs.thrift_hash_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hash_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hash_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_hash_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hash_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hash_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hash_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hash_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hash_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hash_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_hash_attribute_result(const switch_sai_rpc_sai_thrift_set_hash_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hash_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hash_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hash_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hash_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hash_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hash_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hash_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hash_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_hash_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hash_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hash_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hash_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_hash_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hash_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_hash_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hash_attribute_args__isset() : thrift_hash_id(false) {}
  bool thrift_hash_id :1;
} _switch_sai_rpc_sai_thrift_get_hash_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hash_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_hash_attribute_args(const switch_sai_rpc_sai_thrift_get_hash_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hash_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hash_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hash_attribute_args() : thrift_hash_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hash_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_hash_id;

  _switch_sai_rpc_sai_thrift_get_hash_attribute_args__isset __isset;

  void __set_thrift_hash_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hash_attribute_args & rhs) const
  {
    if (!(thrift_hash_id == rhs.thrift_hash_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hash_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hash_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_hash_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hash_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_hash_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hash_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hash_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hash_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hash_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_hash_attribute_result(const switch_sai_rpc_sai_thrift_get_hash_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hash_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hash_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hash_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hash_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hash_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hash_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hash_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hash_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_hash_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hash_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hash_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hash_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_hash_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hash_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_udf_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_udf_group_args__isset;

class switch_sai_rpc_sai_thrift_create_udf_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_udf_group_args(const switch_sai_rpc_sai_thrift_create_udf_group_args&);
  switch_sai_rpc_sai_thrift_create_udf_group_args& operator=(const switch_sai_rpc_sai_thrift_create_udf_group_args&);
  switch_sai_rpc_sai_thrift_create_udf_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_udf_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_udf_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_udf_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_udf_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_group_result__isset;

class switch_sai_rpc_sai_thrift_create_udf_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_udf_group_result(const switch_sai_rpc_sai_thrift_create_udf_group_result&);
  switch_sai_rpc_sai_thrift_create_udf_group_result& operator=(const switch_sai_rpc_sai_thrift_create_udf_group_result&);
  switch_sai_rpc_sai_thrift_create_udf_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_udf_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_udf_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_udf_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_udf_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_udf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_group_args__isset() : udf_group_id(false) {}
  bool udf_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_udf_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_udf_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_udf_group_args(const switch_sai_rpc_sai_thrift_remove_udf_group_args&);
  switch_sai_rpc_sai_thrift_remove_udf_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_udf_group_args&);
  switch_sai_rpc_sai_thrift_remove_udf_group_args() : udf_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_group_args() noexcept;
  sai_thrift_object_id_t udf_group_id;

  _switch_sai_rpc_sai_thrift_remove_udf_group_args__isset __isset;

  void __set_udf_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_group_args & rhs) const
  {
    if (!(udf_group_id == rhs.udf_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_udf_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_group_pargs() noexcept;
  const sai_thrift_object_id_t* udf_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_udf_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_udf_group_result(const switch_sai_rpc_sai_thrift_remove_udf_group_result&);
  switch_sai_rpc_sai_thrift_remove_udf_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_udf_group_result&);
  switch_sai_rpc_sai_thrift_remove_udf_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_udf_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_udf_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_udf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_args__isset() : thrift_udf_group_id(false) {}
  bool thrift_udf_group_id :1;
} _switch_sai_rpc_sai_thrift_get_udf_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_udf_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_udf_group_attribute_args(const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_group_attribute_args() : thrift_udf_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_group_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_udf_group_id;

  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_args__isset __isset;

  void __set_thrift_udf_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args & rhs) const
  {
    if (!(thrift_udf_group_id == rhs.thrift_udf_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_udf_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_udf_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_udf_group_attribute_result(const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_group_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_match_args__isset {
  _switch_sai_rpc_sai_thrift_create_udf_match_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_udf_match_args__isset;

class switch_sai_rpc_sai_thrift_create_udf_match_args {
 public:

  switch_sai_rpc_sai_thrift_create_udf_match_args(const switch_sai_rpc_sai_thrift_create_udf_match_args&);
  switch_sai_rpc_sai_thrift_create_udf_match_args& operator=(const switch_sai_rpc_sai_thrift_create_udf_match_args&);
  switch_sai_rpc_sai_thrift_create_udf_match_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_match_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_udf_match_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_match_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_match_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_match_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_udf_match_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_udf_match_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_match_result__isset {
  _switch_sai_rpc_sai_thrift_create_udf_match_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_match_result__isset;

class switch_sai_rpc_sai_thrift_create_udf_match_result {
 public:

  switch_sai_rpc_sai_thrift_create_udf_match_result(const switch_sai_rpc_sai_thrift_create_udf_match_result&);
  switch_sai_rpc_sai_thrift_create_udf_match_result& operator=(const switch_sai_rpc_sai_thrift_create_udf_match_result&);
  switch_sai_rpc_sai_thrift_create_udf_match_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_match_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_udf_match_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_match_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_match_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_match_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_match_presult__isset {
  _switch_sai_rpc_sai_thrift_create_udf_match_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_match_presult__isset;

class switch_sai_rpc_sai_thrift_create_udf_match_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_udf_match_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_udf_match_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_match_args__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_match_args__isset() : udf_match_id(false) {}
  bool udf_match_id :1;
} _switch_sai_rpc_sai_thrift_remove_udf_match_args__isset;

class switch_sai_rpc_sai_thrift_remove_udf_match_args {
 public:

  switch_sai_rpc_sai_thrift_remove_udf_match_args(const switch_sai_rpc_sai_thrift_remove_udf_match_args&);
  switch_sai_rpc_sai_thrift_remove_udf_match_args& operator=(const switch_sai_rpc_sai_thrift_remove_udf_match_args&);
  switch_sai_rpc_sai_thrift_remove_udf_match_args() : udf_match_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_match_args() noexcept;
  sai_thrift_object_id_t udf_match_id;

  _switch_sai_rpc_sai_thrift_remove_udf_match_args__isset __isset;

  void __set_udf_match_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_match_args & rhs) const
  {
    if (!(udf_match_id == rhs.udf_match_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_match_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_match_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_udf_match_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_match_pargs() noexcept;
  const sai_thrift_object_id_t* udf_match_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_match_result__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_match_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_match_result__isset;

class switch_sai_rpc_sai_thrift_remove_udf_match_result {
 public:

  switch_sai_rpc_sai_thrift_remove_udf_match_result(const switch_sai_rpc_sai_thrift_remove_udf_match_result&);
  switch_sai_rpc_sai_thrift_remove_udf_match_result& operator=(const switch_sai_rpc_sai_thrift_remove_udf_match_result&);
  switch_sai_rpc_sai_thrift_remove_udf_match_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_match_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_udf_match_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_match_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_match_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_match_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_match_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_match_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_match_presult__isset;

class switch_sai_rpc_sai_thrift_remove_udf_match_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_match_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_udf_match_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_match_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_args__isset() : thrift_udf_match_id(false) {}
  bool thrift_udf_match_id :1;
} _switch_sai_rpc_sai_thrift_get_udf_match_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_udf_match_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_udf_match_attribute_args(const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_match_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_match_attribute_args() : thrift_udf_match_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_match_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_udf_match_id;

  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_args__isset __isset;

  void __set_thrift_udf_match_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args & rhs) const
  {
    if (!(thrift_udf_match_id == rhs.thrift_udf_match_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_udf_match_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_match_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_match_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_udf_match_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_udf_match_attribute_result(const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_match_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_match_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_match_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_args__isset {
  _switch_sai_rpc_sai_thrift_create_udf_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_udf_args__isset;

class switch_sai_rpc_sai_thrift_create_udf_args {
 public:

  switch_sai_rpc_sai_thrift_create_udf_args(const switch_sai_rpc_sai_thrift_create_udf_args&);
  switch_sai_rpc_sai_thrift_create_udf_args& operator=(const switch_sai_rpc_sai_thrift_create_udf_args&);
  switch_sai_rpc_sai_thrift_create_udf_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_udf_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_udf_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_udf_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_result__isset {
  _switch_sai_rpc_sai_thrift_create_udf_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_result__isset;

class switch_sai_rpc_sai_thrift_create_udf_result {
 public:

  switch_sai_rpc_sai_thrift_create_udf_result(const switch_sai_rpc_sai_thrift_create_udf_result&);
  switch_sai_rpc_sai_thrift_create_udf_result& operator=(const switch_sai_rpc_sai_thrift_create_udf_result&);
  switch_sai_rpc_sai_thrift_create_udf_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_udf_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_presult__isset {
  _switch_sai_rpc_sai_thrift_create_udf_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_presult__isset;

class switch_sai_rpc_sai_thrift_create_udf_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_udf_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_udf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_args__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_args__isset() : udf_id(false) {}
  bool udf_id :1;
} _switch_sai_rpc_sai_thrift_remove_udf_args__isset;

class switch_sai_rpc_sai_thrift_remove_udf_args {
 public:

  switch_sai_rpc_sai_thrift_remove_udf_args(const switch_sai_rpc_sai_thrift_remove_udf_args&);
  switch_sai_rpc_sai_thrift_remove_udf_args& operator=(const switch_sai_rpc_sai_thrift_remove_udf_args&);
  switch_sai_rpc_sai_thrift_remove_udf_args() : udf_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_args() noexcept;
  sai_thrift_object_id_t udf_id;

  _switch_sai_rpc_sai_thrift_remove_udf_args__isset __isset;

  void __set_udf_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_args & rhs) const
  {
    if (!(udf_id == rhs.udf_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_udf_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_pargs() noexcept;
  const sai_thrift_object_id_t* udf_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_result__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_result__isset;

class switch_sai_rpc_sai_thrift_remove_udf_result {
 public:

  switch_sai_rpc_sai_thrift_remove_udf_result(const switch_sai_rpc_sai_thrift_remove_udf_result&);
  switch_sai_rpc_sai_thrift_remove_udf_result& operator=(const switch_sai_rpc_sai_thrift_remove_udf_result&);
  switch_sai_rpc_sai_thrift_remove_udf_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_udf_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_presult__isset;

class switch_sai_rpc_sai_thrift_remove_udf_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_udf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_udf_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_udf_attribute_args__isset() : thrift_udf_id(false), thrift_attr(false) {}
  bool thrift_udf_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_udf_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_udf_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_udf_attribute_args(const switch_sai_rpc_sai_thrift_set_udf_attribute_args&);
  switch_sai_rpc_sai_thrift_set_udf_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_udf_attribute_args&);
  switch_sai_rpc_sai_thrift_set_udf_attribute_args() : thrift_udf_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_udf_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_udf_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_udf_attribute_args__isset __isset;

  void __set_thrift_udf_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_udf_attribute_args & rhs) const
  {
    if (!(thrift_udf_id == rhs.thrift_udf_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_udf_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_udf_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_udf_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_udf_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_udf_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_udf_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_udf_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_udf_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_udf_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_udf_attribute_result(const switch_sai_rpc_sai_thrift_set_udf_attribute_result&);
  switch_sai_rpc_sai_thrift_set_udf_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_udf_attribute_result&);
  switch_sai_rpc_sai_thrift_set_udf_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_udf_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_udf_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_udf_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_udf_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_udf_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_udf_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_udf_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_udf_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_udf_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_udf_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_udf_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_udf_attribute_args__isset() : thrift_udf_id(false) {}
  bool thrift_udf_id :1;
} _switch_sai_rpc_sai_thrift_get_udf_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_udf_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_udf_attribute_args(const switch_sai_rpc_sai_thrift_get_udf_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_udf_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_attribute_args() : thrift_udf_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_udf_id;

  _switch_sai_rpc_sai_thrift_get_udf_attribute_args__isset __isset;

  void __set_thrift_udf_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_attribute_args & rhs) const
  {
    if (!(thrift_udf_id == rhs.thrift_udf_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_udf_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_udf_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_udf_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_udf_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_udf_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_udf_attribute_result(const switch_sai_rpc_sai_thrift_get_udf_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_udf_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_udf_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_udf_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_udf_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_udf_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_udf_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_twamp_session_args__isset {
  _switch_sai_rpc_sai_thrift_create_twamp_session_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_twamp_session_args__isset;

class switch_sai_rpc_sai_thrift_create_twamp_session_args {
 public:

  switch_sai_rpc_sai_thrift_create_twamp_session_args(const switch_sai_rpc_sai_thrift_create_twamp_session_args&);
  switch_sai_rpc_sai_thrift_create_twamp_session_args& operator=(const switch_sai_rpc_sai_thrift_create_twamp_session_args&);
  switch_sai_rpc_sai_thrift_create_twamp_session_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_twamp_session_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_twamp_session_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_twamp_session_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_twamp_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_twamp_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_twamp_session_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_twamp_session_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_twamp_session_result__isset {
  _switch_sai_rpc_sai_thrift_create_twamp_session_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_twamp_session_result__isset;

class switch_sai_rpc_sai_thrift_create_twamp_session_result {
 public:

  switch_sai_rpc_sai_thrift_create_twamp_session_result(const switch_sai_rpc_sai_thrift_create_twamp_session_result&);
  switch_sai_rpc_sai_thrift_create_twamp_session_result& operator=(const switch_sai_rpc_sai_thrift_create_twamp_session_result&);
  switch_sai_rpc_sai_thrift_create_twamp_session_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_twamp_session_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_twamp_session_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_twamp_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_twamp_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_twamp_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_twamp_session_presult__isset {
  _switch_sai_rpc_sai_thrift_create_twamp_session_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_twamp_session_presult__isset;

class switch_sai_rpc_sai_thrift_create_twamp_session_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_twamp_session_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_twamp_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_twamp_session_args__isset {
  _switch_sai_rpc_sai_thrift_remove_twamp_session_args__isset() : session_id(false) {}
  bool session_id :1;
} _switch_sai_rpc_sai_thrift_remove_twamp_session_args__isset;

class switch_sai_rpc_sai_thrift_remove_twamp_session_args {
 public:

  switch_sai_rpc_sai_thrift_remove_twamp_session_args(const switch_sai_rpc_sai_thrift_remove_twamp_session_args&);
  switch_sai_rpc_sai_thrift_remove_twamp_session_args& operator=(const switch_sai_rpc_sai_thrift_remove_twamp_session_args&);
  switch_sai_rpc_sai_thrift_remove_twamp_session_args() : session_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_twamp_session_args() noexcept;
  sai_thrift_object_id_t session_id;

  _switch_sai_rpc_sai_thrift_remove_twamp_session_args__isset __isset;

  void __set_session_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_twamp_session_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_twamp_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_twamp_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_twamp_session_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_twamp_session_pargs() noexcept;
  const sai_thrift_object_id_t* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_twamp_session_result__isset {
  _switch_sai_rpc_sai_thrift_remove_twamp_session_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_twamp_session_result__isset;

class switch_sai_rpc_sai_thrift_remove_twamp_session_result {
 public:

  switch_sai_rpc_sai_thrift_remove_twamp_session_result(const switch_sai_rpc_sai_thrift_remove_twamp_session_result&);
  switch_sai_rpc_sai_thrift_remove_twamp_session_result& operator=(const switch_sai_rpc_sai_thrift_remove_twamp_session_result&);
  switch_sai_rpc_sai_thrift_remove_twamp_session_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_twamp_session_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_twamp_session_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_twamp_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_twamp_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_twamp_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_twamp_session_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_twamp_session_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_twamp_session_presult__isset;

class switch_sai_rpc_sai_thrift_remove_twamp_session_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_twamp_session_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_twamp_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_twamp_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_twamp_attribute_args__isset() : thrift_twamp_session_id(false), thrift_attr(false) {}
  bool thrift_twamp_session_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_twamp_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_twamp_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_twamp_attribute_args(const switch_sai_rpc_sai_thrift_set_twamp_attribute_args&);
  switch_sai_rpc_sai_thrift_set_twamp_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_twamp_attribute_args&);
  switch_sai_rpc_sai_thrift_set_twamp_attribute_args() : thrift_twamp_session_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_twamp_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_twamp_session_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_twamp_attribute_args__isset __isset;

  void __set_thrift_twamp_session_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_twamp_attribute_args & rhs) const
  {
    if (!(thrift_twamp_session_id == rhs.thrift_twamp_session_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_twamp_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_twamp_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_twamp_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_twamp_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_twamp_session_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_twamp_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_twamp_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_twamp_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_twamp_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_twamp_attribute_result(const switch_sai_rpc_sai_thrift_set_twamp_attribute_result&);
  switch_sai_rpc_sai_thrift_set_twamp_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_twamp_attribute_result&);
  switch_sai_rpc_sai_thrift_set_twamp_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_twamp_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_twamp_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_twamp_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_twamp_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_twamp_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_twamp_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_twamp_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_twamp_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_twamp_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_twamp_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_twamp_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_mirror_session_args__isset {
  _switch_sai_rpc_sai_thrift_create_mirror_session_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_mirror_session_args__isset;

class switch_sai_rpc_sai_thrift_create_mirror_session_args {
 public:

  switch_sai_rpc_sai_thrift_create_mirror_session_args(const switch_sai_rpc_sai_thrift_create_mirror_session_args&);
  switch_sai_rpc_sai_thrift_create_mirror_session_args& operator=(const switch_sai_rpc_sai_thrift_create_mirror_session_args&);
  switch_sai_rpc_sai_thrift_create_mirror_session_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_mirror_session_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_mirror_session_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_mirror_session_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_mirror_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_mirror_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_mirror_session_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_mirror_session_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_mirror_session_result__isset {
  _switch_sai_rpc_sai_thrift_create_mirror_session_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_mirror_session_result__isset;

class switch_sai_rpc_sai_thrift_create_mirror_session_result {
 public:

  switch_sai_rpc_sai_thrift_create_mirror_session_result(const switch_sai_rpc_sai_thrift_create_mirror_session_result&);
  switch_sai_rpc_sai_thrift_create_mirror_session_result& operator=(const switch_sai_rpc_sai_thrift_create_mirror_session_result&);
  switch_sai_rpc_sai_thrift_create_mirror_session_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_mirror_session_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_mirror_session_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_mirror_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_mirror_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_mirror_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_mirror_session_presult__isset {
  _switch_sai_rpc_sai_thrift_create_mirror_session_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_mirror_session_presult__isset;

class switch_sai_rpc_sai_thrift_create_mirror_session_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_mirror_session_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_mirror_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_mirror_session_args__isset {
  _switch_sai_rpc_sai_thrift_remove_mirror_session_args__isset() : session_id(false) {}
  bool session_id :1;
} _switch_sai_rpc_sai_thrift_remove_mirror_session_args__isset;

class switch_sai_rpc_sai_thrift_remove_mirror_session_args {
 public:

  switch_sai_rpc_sai_thrift_remove_mirror_session_args(const switch_sai_rpc_sai_thrift_remove_mirror_session_args&);
  switch_sai_rpc_sai_thrift_remove_mirror_session_args& operator=(const switch_sai_rpc_sai_thrift_remove_mirror_session_args&);
  switch_sai_rpc_sai_thrift_remove_mirror_session_args() : session_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_mirror_session_args() noexcept;
  sai_thrift_object_id_t session_id;

  _switch_sai_rpc_sai_thrift_remove_mirror_session_args__isset __isset;

  void __set_session_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_mirror_session_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_mirror_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_mirror_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_mirror_session_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_mirror_session_pargs() noexcept;
  const sai_thrift_object_id_t* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_mirror_session_result__isset {
  _switch_sai_rpc_sai_thrift_remove_mirror_session_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_mirror_session_result__isset;

class switch_sai_rpc_sai_thrift_remove_mirror_session_result {
 public:

  switch_sai_rpc_sai_thrift_remove_mirror_session_result(const switch_sai_rpc_sai_thrift_remove_mirror_session_result&);
  switch_sai_rpc_sai_thrift_remove_mirror_session_result& operator=(const switch_sai_rpc_sai_thrift_remove_mirror_session_result&);
  switch_sai_rpc_sai_thrift_remove_mirror_session_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_mirror_session_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_mirror_session_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_mirror_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_mirror_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_mirror_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_mirror_session_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_mirror_session_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_mirror_session_presult__isset;

class switch_sai_rpc_sai_thrift_remove_mirror_session_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_mirror_session_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_mirror_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_mirror_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_mirror_attribute_args__isset() : thrift_mirror_id(false), thrift_attr(false) {}
  bool thrift_mirror_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_mirror_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_mirror_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_mirror_attribute_args(const switch_sai_rpc_sai_thrift_set_mirror_attribute_args&);
  switch_sai_rpc_sai_thrift_set_mirror_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_mirror_attribute_args&);
  switch_sai_rpc_sai_thrift_set_mirror_attribute_args() : thrift_mirror_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_mirror_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_mirror_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_mirror_attribute_args__isset __isset;

  void __set_thrift_mirror_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_mirror_attribute_args & rhs) const
  {
    if (!(thrift_mirror_id == rhs.thrift_mirror_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_mirror_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_mirror_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_mirror_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_mirror_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_mirror_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_mirror_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_mirror_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_mirror_attribute_result(const switch_sai_rpc_sai_thrift_set_mirror_attribute_result&);
  switch_sai_rpc_sai_thrift_set_mirror_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_mirror_attribute_result&);
  switch_sai_rpc_sai_thrift_set_mirror_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_mirror_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_mirror_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_mirror_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_mirror_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_mirror_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_mirror_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_mirror_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_mirror_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_mirror_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_mirror_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_mirror_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_mirror_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_mirror_attribute_args__isset() : thrift_mirror_id(false) {}
  bool thrift_mirror_id :1;
} _switch_sai_rpc_sai_thrift_get_mirror_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_mirror_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_mirror_attribute_args(const switch_sai_rpc_sai_thrift_get_mirror_attribute_args&);
  switch_sai_rpc_sai_thrift_get_mirror_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_mirror_attribute_args&);
  switch_sai_rpc_sai_thrift_get_mirror_attribute_args() : thrift_mirror_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_mirror_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_mirror_id;

  _switch_sai_rpc_sai_thrift_get_mirror_attribute_args__isset __isset;

  void __set_thrift_mirror_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_mirror_attribute_args & rhs) const
  {
    if (!(thrift_mirror_id == rhs.thrift_mirror_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_mirror_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_mirror_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_mirror_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_mirror_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_mirror_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_mirror_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_mirror_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_mirror_attribute_result(const switch_sai_rpc_sai_thrift_get_mirror_attribute_result&);
  switch_sai_rpc_sai_thrift_get_mirror_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_mirror_attribute_result&);
  switch_sai_rpc_sai_thrift_get_mirror_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_mirror_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_mirror_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_mirror_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_mirror_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_mirror_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_mirror_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_mirror_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_mirror_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_mirror_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_mirror_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_mirror_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_inseg_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_inseg_entry_args__isset() : thrift_inseg_entry(false), thrift_attr_list(false) {}
  bool thrift_inseg_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_inseg_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_inseg_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_inseg_entry_args(const switch_sai_rpc_sai_thrift_create_inseg_entry_args&);
  switch_sai_rpc_sai_thrift_create_inseg_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_inseg_entry_args&);
  switch_sai_rpc_sai_thrift_create_inseg_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_inseg_entry_args() noexcept;
  sai_thrift_inseg_entry_t thrift_inseg_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_inseg_entry_args__isset __isset;

  void __set_thrift_inseg_entry(const sai_thrift_inseg_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_inseg_entry_args & rhs) const
  {
    if (!(thrift_inseg_entry == rhs.thrift_inseg_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_inseg_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_inseg_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_inseg_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_inseg_entry_pargs() noexcept;
  const sai_thrift_inseg_entry_t* thrift_inseg_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_inseg_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_inseg_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_inseg_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_inseg_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_inseg_entry_result(const switch_sai_rpc_sai_thrift_create_inseg_entry_result&);
  switch_sai_rpc_sai_thrift_create_inseg_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_inseg_entry_result&);
  switch_sai_rpc_sai_thrift_create_inseg_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_inseg_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_inseg_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_inseg_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_inseg_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_inseg_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_inseg_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_inseg_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_inseg_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_inseg_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_inseg_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_inseg_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_inseg_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_inseg_entry_args__isset() : thrift_inseg_entry(false) {}
  bool thrift_inseg_entry :1;
} _switch_sai_rpc_sai_thrift_remove_inseg_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_inseg_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_inseg_entry_args(const switch_sai_rpc_sai_thrift_remove_inseg_entry_args&);
  switch_sai_rpc_sai_thrift_remove_inseg_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_inseg_entry_args&);
  switch_sai_rpc_sai_thrift_remove_inseg_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_inseg_entry_args() noexcept;
  sai_thrift_inseg_entry_t thrift_inseg_entry;

  _switch_sai_rpc_sai_thrift_remove_inseg_entry_args__isset __isset;

  void __set_thrift_inseg_entry(const sai_thrift_inseg_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_inseg_entry_args & rhs) const
  {
    if (!(thrift_inseg_entry == rhs.thrift_inseg_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_inseg_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_inseg_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs() noexcept;
  const sai_thrift_inseg_entry_t* thrift_inseg_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_inseg_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_inseg_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_inseg_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_inseg_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_inseg_entry_result(const switch_sai_rpc_sai_thrift_remove_inseg_entry_result&);
  switch_sai_rpc_sai_thrift_remove_inseg_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_inseg_entry_result&);
  switch_sai_rpc_sai_thrift_remove_inseg_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_inseg_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_inseg_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_inseg_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_inseg_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_inseg_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_inseg_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_inseg_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_inseg_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_inseg_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_inseg_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_inseg_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset() : thrift_inseg_entry(false), thrift_attr(false) {}
  bool thrift_inseg_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args() noexcept;
  sai_thrift_inseg_entry_t thrift_inseg_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset __isset;

  void __set_thrift_inseg_entry(const sai_thrift_inseg_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args & rhs) const
  {
    if (!(thrift_inseg_entry == rhs.thrift_inseg_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs() noexcept;
  const sai_thrift_inseg_entry_t* thrift_inseg_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset() : thrift_inseg_entry(false) {}
  bool thrift_inseg_entry :1;
} _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args() noexcept;
  sai_thrift_inseg_entry_t thrift_inseg_entry;

  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset __isset;

  void __set_thrift_inseg_entry(const sai_thrift_inseg_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args & rhs) const
  {
    if (!(thrift_inseg_entry == rhs.thrift_inseg_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs() noexcept;
  const sai_thrift_inseg_entry_t* thrift_inseg_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_dump_log_args__isset {
  _switch_sai_rpc_sai_thrift_dump_log_args__isset() : dump_file_name(false) {}
  bool dump_file_name :1;
} _switch_sai_rpc_sai_thrift_dump_log_args__isset;

class switch_sai_rpc_sai_thrift_dump_log_args {
 public:

  switch_sai_rpc_sai_thrift_dump_log_args(const switch_sai_rpc_sai_thrift_dump_log_args&);
  switch_sai_rpc_sai_thrift_dump_log_args& operator=(const switch_sai_rpc_sai_thrift_dump_log_args&);
  switch_sai_rpc_sai_thrift_dump_log_args() : dump_file_name() {
  }

  virtual ~switch_sai_rpc_sai_thrift_dump_log_args() noexcept;
  std::string dump_file_name;

  _switch_sai_rpc_sai_thrift_dump_log_args__isset __isset;

  void __set_dump_file_name(const std::string& val);

  bool operator == (const switch_sai_rpc_sai_thrift_dump_log_args & rhs) const
  {
    if (!(dump_file_name == rhs.dump_file_name))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_dump_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_dump_log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_dump_log_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_dump_log_pargs() noexcept;
  const std::string* dump_file_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_dump_log_result__isset {
  _switch_sai_rpc_sai_thrift_dump_log_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_dump_log_result__isset;

class switch_sai_rpc_sai_thrift_dump_log_result {
 public:

  switch_sai_rpc_sai_thrift_dump_log_result(const switch_sai_rpc_sai_thrift_dump_log_result&);
  switch_sai_rpc_sai_thrift_dump_log_result& operator=(const switch_sai_rpc_sai_thrift_dump_log_result&);
  switch_sai_rpc_sai_thrift_dump_log_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_dump_log_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_dump_log_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_dump_log_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_dump_log_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_dump_log_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_dump_log_presult__isset {
  _switch_sai_rpc_sai_thrift_dump_log_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_dump_log_presult__isset;

class switch_sai_rpc_sai_thrift_dump_log_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_dump_log_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_dump_log_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_policer_args__isset {
  _switch_sai_rpc_sai_thrift_create_policer_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_policer_args__isset;

class switch_sai_rpc_sai_thrift_create_policer_args {
 public:

  switch_sai_rpc_sai_thrift_create_policer_args(const switch_sai_rpc_sai_thrift_create_policer_args&);
  switch_sai_rpc_sai_thrift_create_policer_args& operator=(const switch_sai_rpc_sai_thrift_create_policer_args&);
  switch_sai_rpc_sai_thrift_create_policer_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_policer_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_policer_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_policer_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_policer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_policer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_policer_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_policer_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_policer_result__isset {
  _switch_sai_rpc_sai_thrift_create_policer_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_policer_result__isset;

class switch_sai_rpc_sai_thrift_create_policer_result {
 public:

  switch_sai_rpc_sai_thrift_create_policer_result(const switch_sai_rpc_sai_thrift_create_policer_result&);
  switch_sai_rpc_sai_thrift_create_policer_result& operator=(const switch_sai_rpc_sai_thrift_create_policer_result&);
  switch_sai_rpc_sai_thrift_create_policer_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_policer_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_policer_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_policer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_policer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_policer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_policer_presult__isset {
  _switch_sai_rpc_sai_thrift_create_policer_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_policer_presult__isset;

class switch_sai_rpc_sai_thrift_create_policer_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_policer_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_policer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_policer_args__isset {
  _switch_sai_rpc_sai_thrift_remove_policer_args__isset() : thrift_policer_id(false) {}
  bool thrift_policer_id :1;
} _switch_sai_rpc_sai_thrift_remove_policer_args__isset;

class switch_sai_rpc_sai_thrift_remove_policer_args {
 public:

  switch_sai_rpc_sai_thrift_remove_policer_args(const switch_sai_rpc_sai_thrift_remove_policer_args&);
  switch_sai_rpc_sai_thrift_remove_policer_args& operator=(const switch_sai_rpc_sai_thrift_remove_policer_args&);
  switch_sai_rpc_sai_thrift_remove_policer_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_policer_args() noexcept;
  sai_thrift_object_id_t thrift_policer_id;

  _switch_sai_rpc_sai_thrift_remove_policer_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_policer_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_policer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_policer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_policer_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_policer_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_policer_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_policer_result__isset {
  _switch_sai_rpc_sai_thrift_remove_policer_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_policer_result__isset;

class switch_sai_rpc_sai_thrift_remove_policer_result {
 public:

  switch_sai_rpc_sai_thrift_remove_policer_result(const switch_sai_rpc_sai_thrift_remove_policer_result&);
  switch_sai_rpc_sai_thrift_remove_policer_result& operator=(const switch_sai_rpc_sai_thrift_remove_policer_result&);
  switch_sai_rpc_sai_thrift_remove_policer_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_policer_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_policer_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_policer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_policer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_policer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_policer_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_policer_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_policer_presult__isset;

class switch_sai_rpc_sai_thrift_remove_policer_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_policer_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_policer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_policer_attribute_args__isset() : thrift_policer_id(false) {}
  bool thrift_policer_id :1;
} _switch_sai_rpc_sai_thrift_get_policer_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_policer_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_policer_attribute_args(const switch_sai_rpc_sai_thrift_get_policer_attribute_args&);
  switch_sai_rpc_sai_thrift_get_policer_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_policer_attribute_args&);
  switch_sai_rpc_sai_thrift_get_policer_attribute_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_policer_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_policer_id;

  _switch_sai_rpc_sai_thrift_get_policer_attribute_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_policer_attribute_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_policer_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_policer_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_policer_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_policer_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_policer_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_policer_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_policer_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_policer_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_policer_attribute_result(const switch_sai_rpc_sai_thrift_get_policer_attribute_result&);
  switch_sai_rpc_sai_thrift_get_policer_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_policer_attribute_result&);
  switch_sai_rpc_sai_thrift_get_policer_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_policer_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_policer_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_policer_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_policer_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_policer_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_policer_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_policer_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_policer_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_policer_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_policer_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_policer_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_policer_attribute_args__isset() : thrift_policer_id(false), thrift_attr(false) {}
  bool thrift_policer_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_policer_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_policer_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_policer_attribute_args(const switch_sai_rpc_sai_thrift_set_policer_attribute_args&);
  switch_sai_rpc_sai_thrift_set_policer_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_policer_attribute_args&);
  switch_sai_rpc_sai_thrift_set_policer_attribute_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_policer_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_policer_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_policer_attribute_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_policer_attribute_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_policer_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_policer_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_policer_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_policer_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_policer_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_policer_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_policer_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_policer_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_policer_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_policer_attribute_result(const switch_sai_rpc_sai_thrift_set_policer_attribute_result&);
  switch_sai_rpc_sai_thrift_set_policer_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_policer_attribute_result&);
  switch_sai_rpc_sai_thrift_set_policer_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_policer_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_policer_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_policer_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_policer_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_policer_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_policer_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_policer_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_policer_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_policer_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_policer_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_policer_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_policer_stats_args__isset() : thrift_policer_id(false), thrift_counter_ids(false) {}
  bool thrift_policer_id :1;
  bool thrift_counter_ids :1;
} _switch_sai_rpc_sai_thrift_get_policer_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_policer_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_policer_stats_args(const switch_sai_rpc_sai_thrift_get_policer_stats_args&);
  switch_sai_rpc_sai_thrift_get_policer_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_policer_stats_args&);
  switch_sai_rpc_sai_thrift_get_policer_stats_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_policer_stats_args() noexcept;
  sai_thrift_object_id_t thrift_policer_id;
  std::vector<sai_thrift_policer_stat_t>  thrift_counter_ids;

  _switch_sai_rpc_sai_thrift_get_policer_stats_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_policer_stat_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_policer_stats_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_policer_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_policer_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_policer_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_policer_stats_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_policer_id;
  const std::vector<sai_thrift_policer_stat_t> * thrift_counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_policer_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_policer_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_policer_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_policer_stats_result(const switch_sai_rpc_sai_thrift_get_policer_stats_result&);
  switch_sai_rpc_sai_thrift_get_policer_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_policer_stats_result&);
  switch_sai_rpc_sai_thrift_get_policer_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_policer_stats_result() noexcept;
  std::vector<sai_thrift_uint64_t>  success;

  _switch_sai_rpc_sai_thrift_get_policer_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_policer_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_policer_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_policer_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_policer_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_policer_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_policer_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_policer_stats_presult() noexcept;
  std::vector<sai_thrift_uint64_t> * success;

  _switch_sai_rpc_sai_thrift_get_policer_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_clear_policer_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_policer_stats_args__isset() : thrift_policer_id(false), thrift_counter_ids(false) {}
  bool thrift_policer_id :1;
  bool thrift_counter_ids :1;
} _switch_sai_rpc_sai_thrift_clear_policer_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_policer_stats_args {
 public:

  switch_sai_rpc_sai_thrift_clear_policer_stats_args(const switch_sai_rpc_sai_thrift_clear_policer_stats_args&);
  switch_sai_rpc_sai_thrift_clear_policer_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_policer_stats_args&);
  switch_sai_rpc_sai_thrift_clear_policer_stats_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_policer_stats_args() noexcept;
  sai_thrift_object_id_t thrift_policer_id;
  std::vector<sai_thrift_policer_stat_t>  thrift_counter_ids;

  _switch_sai_rpc_sai_thrift_clear_policer_stats_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_policer_stat_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_policer_stats_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_policer_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_policer_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_policer_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_policer_stats_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_policer_id;
  const std::vector<sai_thrift_policer_stat_t> * thrift_counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_policer_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_policer_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_policer_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_policer_stats_result {
 public:

  switch_sai_rpc_sai_thrift_clear_policer_stats_result(const switch_sai_rpc_sai_thrift_clear_policer_stats_result&);
  switch_sai_rpc_sai_thrift_clear_policer_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_policer_stats_result&);
  switch_sai_rpc_sai_thrift_clear_policer_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_policer_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_policer_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_policer_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_policer_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_policer_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_policer_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_policer_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_policer_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_policer_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_policer_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_policer_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_profile_args__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_profile_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_profile_args__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_profile_args {
 public:

  switch_sai_rpc_sai_thrift_create_scheduler_profile_args(const switch_sai_rpc_sai_thrift_create_scheduler_profile_args&);
  switch_sai_rpc_sai_thrift_create_scheduler_profile_args& operator=(const switch_sai_rpc_sai_thrift_create_scheduler_profile_args&);
  switch_sai_rpc_sai_thrift_create_scheduler_profile_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_profile_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_scheduler_profile_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_scheduler_profile_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_scheduler_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_scheduler_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_profile_result__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_profile_result__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_profile_result {
 public:

  switch_sai_rpc_sai_thrift_create_scheduler_profile_result(const switch_sai_rpc_sai_thrift_create_scheduler_profile_result&);
  switch_sai_rpc_sai_thrift_create_scheduler_profile_result& operator=(const switch_sai_rpc_sai_thrift_create_scheduler_profile_result&);
  switch_sai_rpc_sai_thrift_create_scheduler_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_profile_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_scheduler_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_scheduler_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_scheduler_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_scheduler_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_profile_presult__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_profile_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_profile_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_scheduler_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_profile_args__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_args__isset() : scheduler_id(false) {}
  bool scheduler_id :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_profile_args__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_profile_args {
 public:

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_args(const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args&);
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_args& operator=(const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args&);
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_args() : scheduler_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_profile_args() noexcept;
  sai_thrift_object_id_t scheduler_id;

  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_args__isset __isset;

  void __set_scheduler_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args & rhs) const
  {
    if (!(scheduler_id == rhs.scheduler_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs() noexcept;
  const sai_thrift_object_id_t* scheduler_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_profile_result__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_profile_result__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_profile_result {
 public:

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_result(const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result&);
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_result& operator=(const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result&);
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_profile_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_args__isset() : thrift_scheduler_id(false) {}
  bool thrift_scheduler_id :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_scheduler_attribute_args(const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args&);
  switch_sai_rpc_sai_thrift_get_scheduler_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args&);
  switch_sai_rpc_sai_thrift_get_scheduler_attribute_args() : thrift_scheduler_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_scheduler_id;

  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_args__isset __isset;

  void __set_thrift_scheduler_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args & rhs) const
  {
    if (!(thrift_scheduler_id == rhs.thrift_scheduler_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_scheduler_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_scheduler_attribute_result(const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result&);
  switch_sai_rpc_sai_thrift_get_scheduler_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result&);
  switch_sai_rpc_sai_thrift_get_scheduler_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_args__isset() : thrift_scheduler_id(false), thrift_attr(false) {}
  bool thrift_scheduler_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_scheduler_attribute_args(const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args&);
  switch_sai_rpc_sai_thrift_set_scheduler_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args&);
  switch_sai_rpc_sai_thrift_set_scheduler_attribute_args() : thrift_scheduler_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_scheduler_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_args__isset __isset;

  void __set_thrift_scheduler_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args & rhs) const
  {
    if (!(thrift_scheduler_id == rhs.thrift_scheduler_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_scheduler_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_scheduler_attribute_result(const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result&);
  switch_sai_rpc_sai_thrift_set_scheduler_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result&);
  switch_sai_rpc_sai_thrift_set_scheduler_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_group_args__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_scheduler_group_args(const switch_sai_rpc_sai_thrift_create_scheduler_group_args&);
  switch_sai_rpc_sai_thrift_create_scheduler_group_args& operator=(const switch_sai_rpc_sai_thrift_create_scheduler_group_args&);
  switch_sai_rpc_sai_thrift_create_scheduler_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_scheduler_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_scheduler_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_scheduler_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_scheduler_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_scheduler_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_group_result__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_scheduler_group_result(const switch_sai_rpc_sai_thrift_create_scheduler_group_result&);
  switch_sai_rpc_sai_thrift_create_scheduler_group_result& operator=(const switch_sai_rpc_sai_thrift_create_scheduler_group_result&);
  switch_sai_rpc_sai_thrift_create_scheduler_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_scheduler_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_scheduler_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_scheduler_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_scheduler_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_scheduler_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_group_args__isset() : scheduler_group_id(false) {}
  bool scheduler_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_scheduler_group_args(const switch_sai_rpc_sai_thrift_remove_scheduler_group_args&);
  switch_sai_rpc_sai_thrift_remove_scheduler_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_scheduler_group_args&);
  switch_sai_rpc_sai_thrift_remove_scheduler_group_args() : scheduler_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_group_args() noexcept;
  sai_thrift_object_id_t scheduler_group_id;

  _switch_sai_rpc_sai_thrift_remove_scheduler_group_args__isset __isset;

  void __set_scheduler_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_scheduler_group_args & rhs) const
  {
    if (!(scheduler_group_id == rhs.scheduler_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_scheduler_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_scheduler_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs() noexcept;
  const sai_thrift_object_id_t* scheduler_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_scheduler_group_result(const switch_sai_rpc_sai_thrift_remove_scheduler_group_result&);
  switch_sai_rpc_sai_thrift_remove_scheduler_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_scheduler_group_result&);
  switch_sai_rpc_sai_thrift_remove_scheduler_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_scheduler_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_scheduler_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_scheduler_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_scheduler_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_scheduler_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset() : scheduler_group_id(false) {}
  bool scheduler_group_id :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args(const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args() : scheduler_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args() noexcept;
  sai_thrift_object_id_t scheduler_group_id;

  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset __isset;

  void __set_scheduler_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args & rhs) const
  {
    if (!(scheduler_group_id == rhs.scheduler_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* scheduler_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result(const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset() : scheduler_group_id(false), thrift_attr(false) {}
  bool scheduler_group_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args(const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args() : scheduler_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args() noexcept;
  sai_thrift_object_id_t scheduler_group_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset __isset;

  void __set_scheduler_group_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args & rhs) const
  {
    if (!(scheduler_group_id == rhs.scheduler_group_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* scheduler_group_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result(const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_queue_stats_args__isset() : queue_id(false), counter_ids(false), number_of_counters(false) {}
  bool queue_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_queue_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_queue_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_queue_stats_args(const switch_sai_rpc_sai_thrift_get_queue_stats_args&);
  switch_sai_rpc_sai_thrift_get_queue_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_queue_stats_args&);
  switch_sai_rpc_sai_thrift_get_queue_stats_args() : queue_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_queue_stats_args() noexcept;
  sai_thrift_object_id_t queue_id;
  std::vector<sai_thrift_queue_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_queue_stats_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_queue_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_queue_stats_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_queue_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_queue_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_queue_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_queue_stats_pargs() noexcept;
  const sai_thrift_object_id_t* queue_id;
  const std::vector<sai_thrift_queue_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_queue_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_queue_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_queue_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_queue_stats_result(const switch_sai_rpc_sai_thrift_get_queue_stats_result&);
  switch_sai_rpc_sai_thrift_get_queue_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_queue_stats_result&);
  switch_sai_rpc_sai_thrift_get_queue_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_queue_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_queue_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_queue_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_queue_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_queue_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_queue_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_queue_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_queue_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_queue_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_queue_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_clear_queue_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_queue_stats_args__isset() : queue_id(false), counter_ids(false), number_of_counters(false) {}
  bool queue_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_clear_queue_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_queue_stats_args {
 public:

  switch_sai_rpc_sai_thrift_clear_queue_stats_args(const switch_sai_rpc_sai_thrift_clear_queue_stats_args&);
  switch_sai_rpc_sai_thrift_clear_queue_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_queue_stats_args&);
  switch_sai_rpc_sai_thrift_clear_queue_stats_args() : queue_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_queue_stats_args() noexcept;
  sai_thrift_object_id_t queue_id;
  std::vector<sai_thrift_queue_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_clear_queue_stats_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_queue_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_queue_stats_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_queue_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_queue_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_queue_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_queue_stats_pargs() noexcept;
  const sai_thrift_object_id_t* queue_id;
  const std::vector<sai_thrift_queue_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_queue_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_queue_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_queue_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_queue_stats_result {
 public:

  switch_sai_rpc_sai_thrift_clear_queue_stats_result(const switch_sai_rpc_sai_thrift_clear_queue_stats_result&);
  switch_sai_rpc_sai_thrift_clear_queue_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_queue_stats_result&);
  switch_sai_rpc_sai_thrift_clear_queue_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_queue_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_queue_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_queue_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_queue_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_queue_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_queue_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_queue_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_queue_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_queue_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_queue_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_queue_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_queue_args__isset {
  _switch_sai_rpc_sai_thrift_create_queue_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_queue_args__isset;

class switch_sai_rpc_sai_thrift_create_queue_args {
 public:

  switch_sai_rpc_sai_thrift_create_queue_args(const switch_sai_rpc_sai_thrift_create_queue_args&);
  switch_sai_rpc_sai_thrift_create_queue_args& operator=(const switch_sai_rpc_sai_thrift_create_queue_args&);
  switch_sai_rpc_sai_thrift_create_queue_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_queue_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_queue_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_queue_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_queue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_queue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_queue_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_queue_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_queue_result__isset {
  _switch_sai_rpc_sai_thrift_create_queue_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_queue_result__isset;

class switch_sai_rpc_sai_thrift_create_queue_result {
 public:

  switch_sai_rpc_sai_thrift_create_queue_result(const switch_sai_rpc_sai_thrift_create_queue_result&);
  switch_sai_rpc_sai_thrift_create_queue_result& operator=(const switch_sai_rpc_sai_thrift_create_queue_result&);
  switch_sai_rpc_sai_thrift_create_queue_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_queue_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_queue_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_queue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_queue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_queue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_queue_presult__isset {
  _switch_sai_rpc_sai_thrift_create_queue_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_queue_presult__isset;

class switch_sai_rpc_sai_thrift_create_queue_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_queue_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_queue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_queue_args__isset {
  _switch_sai_rpc_sai_thrift_remove_queue_args__isset() : queue_id(false) {}
  bool queue_id :1;
} _switch_sai_rpc_sai_thrift_remove_queue_args__isset;

class switch_sai_rpc_sai_thrift_remove_queue_args {
 public:

  switch_sai_rpc_sai_thrift_remove_queue_args(const switch_sai_rpc_sai_thrift_remove_queue_args&);
  switch_sai_rpc_sai_thrift_remove_queue_args& operator=(const switch_sai_rpc_sai_thrift_remove_queue_args&);
  switch_sai_rpc_sai_thrift_remove_queue_args() : queue_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_queue_args() noexcept;
  sai_thrift_object_id_t queue_id;

  _switch_sai_rpc_sai_thrift_remove_queue_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_queue_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_queue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_queue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_queue_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_queue_pargs() noexcept;
  const sai_thrift_object_id_t* queue_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_queue_result__isset {
  _switch_sai_rpc_sai_thrift_remove_queue_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_queue_result__isset;

class switch_sai_rpc_sai_thrift_remove_queue_result {
 public:

  switch_sai_rpc_sai_thrift_remove_queue_result(const switch_sai_rpc_sai_thrift_remove_queue_result&);
  switch_sai_rpc_sai_thrift_remove_queue_result& operator=(const switch_sai_rpc_sai_thrift_remove_queue_result&);
  switch_sai_rpc_sai_thrift_remove_queue_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_queue_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_queue_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_queue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_queue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_queue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_queue_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_queue_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_queue_presult__isset;

class switch_sai_rpc_sai_thrift_remove_queue_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_queue_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_queue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_queue_attribute_args__isset() : queue_id(false) {}
  bool queue_id :1;
} _switch_sai_rpc_sai_thrift_get_queue_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_queue_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_queue_attribute_args(const switch_sai_rpc_sai_thrift_get_queue_attribute_args&);
  switch_sai_rpc_sai_thrift_get_queue_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_queue_attribute_args&);
  switch_sai_rpc_sai_thrift_get_queue_attribute_args() : queue_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_queue_attribute_args() noexcept;
  sai_thrift_object_id_t queue_id;

  _switch_sai_rpc_sai_thrift_get_queue_attribute_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_queue_attribute_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_queue_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_queue_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_queue_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_queue_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* queue_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_queue_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_queue_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_queue_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_queue_attribute_result(const switch_sai_rpc_sai_thrift_get_queue_attribute_result&);
  switch_sai_rpc_sai_thrift_get_queue_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_queue_attribute_result&);
  switch_sai_rpc_sai_thrift_get_queue_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_queue_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_queue_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_queue_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_queue_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_queue_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_queue_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_queue_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_queue_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_queue_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_queue_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_queue_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_queue_attribute_args__isset() : queue_id(false), thrift_attr(false) {}
  bool queue_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_queue_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_queue_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_queue_attribute_args(const switch_sai_rpc_sai_thrift_set_queue_attribute_args&);
  switch_sai_rpc_sai_thrift_set_queue_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_queue_attribute_args&);
  switch_sai_rpc_sai_thrift_set_queue_attribute_args() : queue_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_queue_attribute_args() noexcept;
  sai_thrift_object_id_t queue_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_queue_attribute_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_queue_attribute_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_queue_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_queue_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_queue_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_queue_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* queue_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_queue_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_queue_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_queue_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_queue_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_queue_attribute_result(const switch_sai_rpc_sai_thrift_set_queue_attribute_result&);
  switch_sai_rpc_sai_thrift_set_queue_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_queue_attribute_result&);
  switch_sai_rpc_sai_thrift_set_queue_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_queue_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_queue_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_queue_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_queue_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_queue_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_queue_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_queue_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_queue_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_queue_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_queue_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_queue_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_buffer_profile_args__isset {
  _switch_sai_rpc_sai_thrift_create_buffer_profile_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_buffer_profile_args__isset;

class switch_sai_rpc_sai_thrift_create_buffer_profile_args {
 public:

  switch_sai_rpc_sai_thrift_create_buffer_profile_args(const switch_sai_rpc_sai_thrift_create_buffer_profile_args&);
  switch_sai_rpc_sai_thrift_create_buffer_profile_args& operator=(const switch_sai_rpc_sai_thrift_create_buffer_profile_args&);
  switch_sai_rpc_sai_thrift_create_buffer_profile_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_buffer_profile_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_buffer_profile_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_buffer_profile_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_buffer_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_buffer_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_buffer_profile_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_buffer_profile_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_buffer_profile_result__isset {
  _switch_sai_rpc_sai_thrift_create_buffer_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_buffer_profile_result__isset;

class switch_sai_rpc_sai_thrift_create_buffer_profile_result {
 public:

  switch_sai_rpc_sai_thrift_create_buffer_profile_result(const switch_sai_rpc_sai_thrift_create_buffer_profile_result&);
  switch_sai_rpc_sai_thrift_create_buffer_profile_result& operator=(const switch_sai_rpc_sai_thrift_create_buffer_profile_result&);
  switch_sai_rpc_sai_thrift_create_buffer_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_buffer_profile_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_buffer_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_buffer_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_buffer_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_buffer_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_buffer_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_create_buffer_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_buffer_profile_presult__isset;

class switch_sai_rpc_sai_thrift_create_buffer_profile_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_buffer_profile_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_buffer_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_buffer_profile_args__isset {
  _switch_sai_rpc_sai_thrift_remove_buffer_profile_args__isset() : buffer_profile_id(false) {}
  bool buffer_profile_id :1;
} _switch_sai_rpc_sai_thrift_remove_buffer_profile_args__isset;

class switch_sai_rpc_sai_thrift_remove_buffer_profile_args {
 public:

  switch_sai_rpc_sai_thrift_remove_buffer_profile_args(const switch_sai_rpc_sai_thrift_remove_buffer_profile_args&);
  switch_sai_rpc_sai_thrift_remove_buffer_profile_args& operator=(const switch_sai_rpc_sai_thrift_remove_buffer_profile_args&);
  switch_sai_rpc_sai_thrift_remove_buffer_profile_args() : buffer_profile_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_buffer_profile_args() noexcept;
  sai_thrift_object_id_t buffer_profile_id;

  _switch_sai_rpc_sai_thrift_remove_buffer_profile_args__isset __isset;

  void __set_buffer_profile_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_buffer_profile_args & rhs) const
  {
    if (!(buffer_profile_id == rhs.buffer_profile_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_buffer_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_buffer_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs() noexcept;
  const sai_thrift_object_id_t* buffer_profile_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_buffer_profile_result__isset {
  _switch_sai_rpc_sai_thrift_remove_buffer_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_buffer_profile_result__isset;

class switch_sai_rpc_sai_thrift_remove_buffer_profile_result {
 public:

  switch_sai_rpc_sai_thrift_remove_buffer_profile_result(const switch_sai_rpc_sai_thrift_remove_buffer_profile_result&);
  switch_sai_rpc_sai_thrift_remove_buffer_profile_result& operator=(const switch_sai_rpc_sai_thrift_remove_buffer_profile_result&);
  switch_sai_rpc_sai_thrift_remove_buffer_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_buffer_profile_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_buffer_profile_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_buffer_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_buffer_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_buffer_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_buffer_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_buffer_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_buffer_profile_presult__isset;

class switch_sai_rpc_sai_thrift_remove_buffer_profile_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_buffer_profile_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_buffer_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset() : buffer_profile_id(false) {}
  bool buffer_profile_id :1;
} _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args(const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args&);
  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args&);
  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args() : buffer_profile_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args() noexcept;
  sai_thrift_object_id_t buffer_profile_id;

  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset __isset;

  void __set_buffer_profile_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args & rhs) const
  {
    if (!(buffer_profile_id == rhs.buffer_profile_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* buffer_profile_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result(const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result&);
  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result&);
  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset() : buffer_profile_id(false), thrift_attr(false) {}
  bool buffer_profile_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args(const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args&);
  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args&);
  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args() : buffer_profile_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args() noexcept;
  sai_thrift_object_id_t buffer_profile_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset __isset;

  void __set_buffer_profile_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args & rhs) const
  {
    if (!(buffer_profile_id == rhs.buffer_profile_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* buffer_profile_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result(const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result&);
  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result&);
  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_pool_profile_args__isset {
  _switch_sai_rpc_sai_thrift_create_pool_profile_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_pool_profile_args__isset;

class switch_sai_rpc_sai_thrift_create_pool_profile_args {
 public:

  switch_sai_rpc_sai_thrift_create_pool_profile_args(const switch_sai_rpc_sai_thrift_create_pool_profile_args&);
  switch_sai_rpc_sai_thrift_create_pool_profile_args& operator=(const switch_sai_rpc_sai_thrift_create_pool_profile_args&);
  switch_sai_rpc_sai_thrift_create_pool_profile_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_pool_profile_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_pool_profile_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_pool_profile_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_pool_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_pool_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_pool_profile_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_pool_profile_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_pool_profile_result__isset {
  _switch_sai_rpc_sai_thrift_create_pool_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_pool_profile_result__isset;

class switch_sai_rpc_sai_thrift_create_pool_profile_result {
 public:

  switch_sai_rpc_sai_thrift_create_pool_profile_result(const switch_sai_rpc_sai_thrift_create_pool_profile_result&);
  switch_sai_rpc_sai_thrift_create_pool_profile_result& operator=(const switch_sai_rpc_sai_thrift_create_pool_profile_result&);
  switch_sai_rpc_sai_thrift_create_pool_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_pool_profile_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_pool_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_pool_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_pool_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_pool_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_pool_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_create_pool_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_pool_profile_presult__isset;

class switch_sai_rpc_sai_thrift_create_pool_profile_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_pool_profile_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_pool_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_priority_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_priority_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_priority_group_args__isset;

class switch_sai_rpc_sai_thrift_create_priority_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_priority_group_args(const switch_sai_rpc_sai_thrift_create_priority_group_args&);
  switch_sai_rpc_sai_thrift_create_priority_group_args& operator=(const switch_sai_rpc_sai_thrift_create_priority_group_args&);
  switch_sai_rpc_sai_thrift_create_priority_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_priority_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_priority_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_priority_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_priority_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_priority_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_priority_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_priority_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_priority_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_priority_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_priority_group_result__isset;

class switch_sai_rpc_sai_thrift_create_priority_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_priority_group_result(const switch_sai_rpc_sai_thrift_create_priority_group_result&);
  switch_sai_rpc_sai_thrift_create_priority_group_result& operator=(const switch_sai_rpc_sai_thrift_create_priority_group_result&);
  switch_sai_rpc_sai_thrift_create_priority_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_priority_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_priority_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_priority_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_priority_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_priority_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_priority_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_priority_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_priority_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_priority_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_priority_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_priority_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_priority_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_priority_group_args__isset() : priority_group_id(false) {}
  bool priority_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_priority_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_priority_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_priority_group_args(const switch_sai_rpc_sai_thrift_remove_priority_group_args&);
  switch_sai_rpc_sai_thrift_remove_priority_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_priority_group_args&);
  switch_sai_rpc_sai_thrift_remove_priority_group_args() : priority_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_priority_group_args() noexcept;
  sai_thrift_object_id_t priority_group_id;

  _switch_sai_rpc_sai_thrift_remove_priority_group_args__isset __isset;

  void __set_priority_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_priority_group_args & rhs) const
  {
    if (!(priority_group_id == rhs.priority_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_priority_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_priority_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_priority_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_priority_group_pargs() noexcept;
  const sai_thrift_object_id_t* priority_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_priority_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_priority_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_priority_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_priority_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_priority_group_result(const switch_sai_rpc_sai_thrift_remove_priority_group_result&);
  switch_sai_rpc_sai_thrift_remove_priority_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_priority_group_result&);
  switch_sai_rpc_sai_thrift_remove_priority_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_priority_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_priority_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_priority_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_priority_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_priority_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_priority_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_priority_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_priority_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_priority_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_priority_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_priority_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_priority_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_args__isset() : priority_group_id(false) {}
  bool priority_group_id :1;
} _switch_sai_rpc_sai_thrift_get_priority_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_priority_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_priority_group_attribute_args(const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_priority_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_priority_group_attribute_args() : priority_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_priority_group_attribute_args() noexcept;
  sai_thrift_object_id_t priority_group_id;

  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_args__isset __isset;

  void __set_priority_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args & rhs) const
  {
    if (!(priority_group_id == rhs.priority_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* priority_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_priority_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_priority_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_priority_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_priority_group_attribute_result(const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_priority_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_priority_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_priority_group_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_priority_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_args__isset() : pg_id(false), thrift_attr(false) {}
  bool pg_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_priority_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_priority_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_args(const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_args() : pg_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_priority_group_attribute_args() noexcept;
  sai_thrift_object_id_t pg_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_args__isset __isset;

  void __set_pg_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args & rhs) const
  {
    if (!(pg_id == rhs.pg_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* pg_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_priority_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_priority_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_priority_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_result(const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_priority_group_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_pg_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_pg_stats_args__isset() : pg_id(false), counter_ids(false), number_of_counters(false) {}
  bool pg_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_pg_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_pg_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_pg_stats_args(const switch_sai_rpc_sai_thrift_get_pg_stats_args&);
  switch_sai_rpc_sai_thrift_get_pg_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_pg_stats_args&);
  switch_sai_rpc_sai_thrift_get_pg_stats_args() : pg_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_pg_stats_args() noexcept;
  sai_thrift_object_id_t pg_id;
  std::vector<sai_thrift_pg_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_pg_stats_args__isset __isset;

  void __set_pg_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_pg_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_pg_stats_args & rhs) const
  {
    if (!(pg_id == rhs.pg_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_pg_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_pg_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_pg_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_pg_stats_pargs() noexcept;
  const sai_thrift_object_id_t* pg_id;
  const std::vector<sai_thrift_pg_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_pg_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_pg_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_pg_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_pg_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_pg_stats_result(const switch_sai_rpc_sai_thrift_get_pg_stats_result&);
  switch_sai_rpc_sai_thrift_get_pg_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_pg_stats_result&);
  switch_sai_rpc_sai_thrift_get_pg_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_pg_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_pg_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_pg_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_pg_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_pg_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_pg_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_pg_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_pg_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_pg_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_pg_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_pg_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_wred_profile_args__isset {
  _switch_sai_rpc_sai_thrift_create_wred_profile_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_wred_profile_args__isset;

class switch_sai_rpc_sai_thrift_create_wred_profile_args {
 public:

  switch_sai_rpc_sai_thrift_create_wred_profile_args(const switch_sai_rpc_sai_thrift_create_wred_profile_args&);
  switch_sai_rpc_sai_thrift_create_wred_profile_args& operator=(const switch_sai_rpc_sai_thrift_create_wred_profile_args&);
  switch_sai_rpc_sai_thrift_create_wred_profile_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_wred_profile_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_wred_profile_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_wred_profile_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_wred_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_wred_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_wred_profile_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_wred_profile_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_wred_profile_result__isset {
  _switch_sai_rpc_sai_thrift_create_wred_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_wred_profile_result__isset;

class switch_sai_rpc_sai_thrift_create_wred_profile_result {
 public:

  switch_sai_rpc_sai_thrift_create_wred_profile_result(const switch_sai_rpc_sai_thrift_create_wred_profile_result&);
  switch_sai_rpc_sai_thrift_create_wred_profile_result& operator=(const switch_sai_rpc_sai_thrift_create_wred_profile_result&);
  switch_sai_rpc_sai_thrift_create_wred_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_wred_profile_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_wred_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_wred_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_wred_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_wred_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_wred_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_create_wred_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_wred_profile_presult__isset;

class switch_sai_rpc_sai_thrift_create_wred_profile_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_wred_profile_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_wred_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_wred_profile_args__isset {
  _switch_sai_rpc_sai_thrift_remove_wred_profile_args__isset() : wred_id(false) {}
  bool wred_id :1;
} _switch_sai_rpc_sai_thrift_remove_wred_profile_args__isset;

class switch_sai_rpc_sai_thrift_remove_wred_profile_args {
 public:

  switch_sai_rpc_sai_thrift_remove_wred_profile_args(const switch_sai_rpc_sai_thrift_remove_wred_profile_args&);
  switch_sai_rpc_sai_thrift_remove_wred_profile_args& operator=(const switch_sai_rpc_sai_thrift_remove_wred_profile_args&);
  switch_sai_rpc_sai_thrift_remove_wred_profile_args() : wred_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_wred_profile_args() noexcept;
  sai_thrift_object_id_t wred_id;

  _switch_sai_rpc_sai_thrift_remove_wred_profile_args__isset __isset;

  void __set_wred_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_wred_profile_args & rhs) const
  {
    if (!(wred_id == rhs.wred_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_wred_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_wred_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_wred_profile_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_wred_profile_pargs() noexcept;
  const sai_thrift_object_id_t* wred_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_wred_profile_result__isset {
  _switch_sai_rpc_sai_thrift_remove_wred_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_wred_profile_result__isset;

class switch_sai_rpc_sai_thrift_remove_wred_profile_result {
 public:

  switch_sai_rpc_sai_thrift_remove_wred_profile_result(const switch_sai_rpc_sai_thrift_remove_wred_profile_result&);
  switch_sai_rpc_sai_thrift_remove_wred_profile_result& operator=(const switch_sai_rpc_sai_thrift_remove_wred_profile_result&);
  switch_sai_rpc_sai_thrift_remove_wred_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_wred_profile_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_wred_profile_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_wred_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_wred_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_wred_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_wred_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_wred_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_wred_profile_presult__isset;

class switch_sai_rpc_sai_thrift_remove_wred_profile_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_wred_profile_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_wred_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args__isset {
  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args__isset() : wred_id(false) {}
  bool wred_id :1;
} _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args__isset;

class switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args {
 public:

  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args(const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args&);
  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args& operator=(const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args&);
  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args() : wred_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args() noexcept;
  sai_thrift_object_id_t wred_id;

  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args__isset __isset;

  void __set_wred_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args & rhs) const
  {
    if (!(wred_id == rhs.wred_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs() noexcept;
  const sai_thrift_object_id_t* wred_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result__isset {
  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result__isset;

class switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result {
 public:

  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result(const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result&);
  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result& operator=(const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result&);
  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult__isset;

class switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args__isset {
  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args__isset() : wred_id(false), thrift_attr(false) {}
  bool wred_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args__isset;

class switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args {
 public:

  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args(const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args&);
  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args& operator=(const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args&);
  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args() : wred_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args() noexcept;
  sai_thrift_object_id_t wred_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args__isset __isset;

  void __set_wred_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args & rhs) const
  {
    if (!(wred_id == rhs.wred_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs() noexcept;
  const sai_thrift_object_id_t* wred_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result__isset {
  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result__isset;

class switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result {
 public:

  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result(const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result&);
  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result& operator=(const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result&);
  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult__isset;

class switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_qos_map_args__isset {
  _switch_sai_rpc_sai_thrift_create_qos_map_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_qos_map_args__isset;

class switch_sai_rpc_sai_thrift_create_qos_map_args {
 public:

  switch_sai_rpc_sai_thrift_create_qos_map_args(const switch_sai_rpc_sai_thrift_create_qos_map_args&);
  switch_sai_rpc_sai_thrift_create_qos_map_args& operator=(const switch_sai_rpc_sai_thrift_create_qos_map_args&);
  switch_sai_rpc_sai_thrift_create_qos_map_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_qos_map_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_qos_map_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_qos_map_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_qos_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_qos_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_qos_map_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_qos_map_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_qos_map_result__isset {
  _switch_sai_rpc_sai_thrift_create_qos_map_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_qos_map_result__isset;

class switch_sai_rpc_sai_thrift_create_qos_map_result {
 public:

  switch_sai_rpc_sai_thrift_create_qos_map_result(const switch_sai_rpc_sai_thrift_create_qos_map_result&);
  switch_sai_rpc_sai_thrift_create_qos_map_result& operator=(const switch_sai_rpc_sai_thrift_create_qos_map_result&);
  switch_sai_rpc_sai_thrift_create_qos_map_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_qos_map_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_qos_map_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_qos_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_qos_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_qos_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_qos_map_presult__isset {
  _switch_sai_rpc_sai_thrift_create_qos_map_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_qos_map_presult__isset;

class switch_sai_rpc_sai_thrift_create_qos_map_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_qos_map_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_qos_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_qos_map_args__isset {
  _switch_sai_rpc_sai_thrift_remove_qos_map_args__isset() : qos_map_id(false) {}
  bool qos_map_id :1;
} _switch_sai_rpc_sai_thrift_remove_qos_map_args__isset;

class switch_sai_rpc_sai_thrift_remove_qos_map_args {
 public:

  switch_sai_rpc_sai_thrift_remove_qos_map_args(const switch_sai_rpc_sai_thrift_remove_qos_map_args&);
  switch_sai_rpc_sai_thrift_remove_qos_map_args& operator=(const switch_sai_rpc_sai_thrift_remove_qos_map_args&);
  switch_sai_rpc_sai_thrift_remove_qos_map_args() : qos_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_qos_map_args() noexcept;
  sai_thrift_object_id_t qos_map_id;

  _switch_sai_rpc_sai_thrift_remove_qos_map_args__isset __isset;

  void __set_qos_map_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_qos_map_args & rhs) const
  {
    if (!(qos_map_id == rhs.qos_map_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_qos_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_qos_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_qos_map_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_qos_map_pargs() noexcept;
  const sai_thrift_object_id_t* qos_map_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_qos_map_result__isset {
  _switch_sai_rpc_sai_thrift_remove_qos_map_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_qos_map_result__isset;

class switch_sai_rpc_sai_thrift_remove_qos_map_result {
 public:

  switch_sai_rpc_sai_thrift_remove_qos_map_result(const switch_sai_rpc_sai_thrift_remove_qos_map_result&);
  switch_sai_rpc_sai_thrift_remove_qos_map_result& operator=(const switch_sai_rpc_sai_thrift_remove_qos_map_result&);
  switch_sai_rpc_sai_thrift_remove_qos_map_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_qos_map_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_qos_map_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_qos_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_qos_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_qos_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_qos_map_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_qos_map_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_qos_map_presult__isset;

class switch_sai_rpc_sai_thrift_remove_qos_map_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_qos_map_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_qos_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_qos_map_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_args__isset() : qos_map_id(false) {}
  bool qos_map_id :1;
} _switch_sai_rpc_sai_thrift_get_qos_map_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_qos_map_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_qos_map_attribute_args(const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args&);
  switch_sai_rpc_sai_thrift_get_qos_map_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args&);
  switch_sai_rpc_sai_thrift_get_qos_map_attribute_args() : qos_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_qos_map_attribute_args() noexcept;
  sai_thrift_object_id_t qos_map_id;

  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_args__isset __isset;

  void __set_qos_map_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args & rhs) const
  {
    if (!(qos_map_id == rhs.qos_map_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* qos_map_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_qos_map_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_qos_map_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_qos_map_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_qos_map_attribute_result(const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result&);
  switch_sai_rpc_sai_thrift_get_qos_map_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result&);
  switch_sai_rpc_sai_thrift_get_qos_map_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_qos_map_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_qos_map_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_args__isset() : qos_map_id(false), thrift_attr(false) {}
  bool qos_map_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_qos_map_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_qos_map_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_qos_map_attribute_args(const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args&);
  switch_sai_rpc_sai_thrift_set_qos_map_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args&);
  switch_sai_rpc_sai_thrift_set_qos_map_attribute_args() : qos_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_qos_map_attribute_args() noexcept;
  sai_thrift_object_id_t qos_map_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_args__isset __isset;

  void __set_qos_map_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args & rhs) const
  {
    if (!(qos_map_id == rhs.qos_map_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* qos_map_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_qos_map_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_qos_map_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_qos_map_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_qos_map_attribute_result(const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result&);
  switch_sai_rpc_sai_thrift_set_qos_map_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result&);
  switch_sai_rpc_sai_thrift_set_qos_map_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_qos_map_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_args__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_l2mc_group_args(const switch_sai_rpc_sai_thrift_create_l2mc_group_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_args& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_group_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_l2mc_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_result__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_l2mc_group_result(const switch_sai_rpc_sai_thrift_create_l2mc_group_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_result& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_group_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_l2mc_group_args(const switch_sai_rpc_sai_thrift_remove_l2mc_group_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_group_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_args() noexcept;
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_group_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs() noexcept;
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_l2mc_group_result(const switch_sai_rpc_sai_thrift_remove_l2mc_group_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_group_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args(const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args() noexcept;
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result(const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_create_l2mc_group_member_args(const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_member_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_create_l2mc_group_member_result(const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_member_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args(const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args() noexcept;
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs() noexcept;
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result(const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset() : member_id(false), thrift_attr(false) {}
  bool member_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args(const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args() noexcept;
  sai_thrift_object_id_t member_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* member_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result(const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args() noexcept;
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_entry_args__isset() : thrift_l2mc_entry(false), thrift_attr_list(false) {}
  bool thrift_l2mc_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_l2mc_entry_args(const switch_sai_rpc_sai_thrift_create_l2mc_entry_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_entry_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_entry_args() noexcept;
  sai_thrift_l2mc_entry_t thrift_l2mc_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_l2mc_entry_args__isset __isset;

  void __set_thrift_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_entry_args & rhs) const
  {
    if (!(thrift_l2mc_entry == rhs.thrift_l2mc_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs() noexcept;
  const sai_thrift_l2mc_entry_t* thrift_l2mc_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_l2mc_entry_result(const switch_sai_rpc_sai_thrift_create_l2mc_entry_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_entry_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_l2mc_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_l2mc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_args__isset() : thrift_l2mc_entry(false) {}
  bool thrift_l2mc_entry :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_l2mc_entry_args(const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_entry_args() noexcept;
  sai_thrift_l2mc_entry_t thrift_l2mc_entry;

  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_args__isset __isset;

  void __set_thrift_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args & rhs) const
  {
    if (!(thrift_l2mc_entry == rhs.thrift_l2mc_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs() noexcept;
  const sai_thrift_l2mc_entry_t* thrift_l2mc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_l2mc_entry_result(const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset() : thrift_l2mc_entry(false), thrift_attr(false) {}
  bool thrift_l2mc_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args() noexcept;
  sai_thrift_l2mc_entry_t thrift_l2mc_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset __isset;

  void __set_thrift_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args & rhs) const
  {
    if (!(thrift_l2mc_entry == rhs.thrift_l2mc_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs() noexcept;
  const sai_thrift_l2mc_entry_t* thrift_l2mc_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset() : thrift_l2mc_entry(false) {}
  bool thrift_l2mc_entry :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args() noexcept;
  sai_thrift_l2mc_entry_t thrift_l2mc_entry;

  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset __isset;

  void __set_thrift_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args & rhs) const
  {
    if (!(thrift_l2mc_entry == rhs.thrift_l2mc_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs() noexcept;
  const sai_thrift_l2mc_entry_t* thrift_l2mc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset() : thrift_mcast_fdb_entry(false), thrift_attr_list(false) {}
  bool thrift_mcast_fdb_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args(const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args() noexcept;
  sai_thrift_mcast_fdb_entry_t thrift_mcast_fdb_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset __isset;

  void __set_thrift_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args & rhs) const
  {
    if (!(thrift_mcast_fdb_entry == rhs.thrift_mcast_fdb_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs() noexcept;
  const sai_thrift_mcast_fdb_entry_t* thrift_mcast_fdb_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result(const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset() : thrift_mcast_fdb_entry(false) {}
  bool thrift_mcast_fdb_entry :1;
} _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args(const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args() noexcept;
  sai_thrift_mcast_fdb_entry_t thrift_mcast_fdb_entry;

  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset __isset;

  void __set_thrift_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args & rhs) const
  {
    if (!(thrift_mcast_fdb_entry == rhs.thrift_mcast_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs() noexcept;
  const sai_thrift_mcast_fdb_entry_t* thrift_mcast_fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result(const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset() : thrift_mcast_fdb_entry(false), thrift_attr(false) {}
  bool thrift_mcast_fdb_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args() noexcept;
  sai_thrift_mcast_fdb_entry_t thrift_mcast_fdb_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset __isset;

  void __set_thrift_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args & rhs) const
  {
    if (!(thrift_mcast_fdb_entry == rhs.thrift_mcast_fdb_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs() noexcept;
  const sai_thrift_mcast_fdb_entry_t* thrift_mcast_fdb_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset() : thrift_mcast_fdb_entry(false) {}
  bool thrift_mcast_fdb_entry :1;
} _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args() noexcept;
  sai_thrift_mcast_fdb_entry_t thrift_mcast_fdb_entry;

  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset __isset;

  void __set_thrift_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args & rhs) const
  {
    if (!(thrift_mcast_fdb_entry == rhs.thrift_mcast_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs() noexcept;
  const sai_thrift_mcast_fdb_entry_t* thrift_mcast_fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_args__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_ipmc_group_args(const switch_sai_rpc_sai_thrift_create_ipmc_group_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_args& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_group_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_ipmc_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_result__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_ipmc_group_result(const switch_sai_rpc_sai_thrift_create_ipmc_group_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_result& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_group_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_ipmc_group_args(const switch_sai_rpc_sai_thrift_remove_ipmc_group_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_group_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_args() noexcept;
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_group_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs() noexcept;
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_ipmc_group_result(const switch_sai_rpc_sai_thrift_remove_ipmc_group_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_group_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args(const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args() noexcept;
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result(const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_create_ipmc_group_member_args(const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_member_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_create_ipmc_group_member_result(const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_member_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args(const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args() noexcept;
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs() noexcept;
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result(const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset() : member_id(false), thrift_attr(false) {}
  bool member_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args(const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args() noexcept;
  sai_thrift_object_id_t member_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* member_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result(const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args() noexcept;
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_args__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_rpf_group_args(const switch_sai_rpc_sai_thrift_create_rpf_group_args&);
  switch_sai_rpc_sai_thrift_create_rpf_group_args& operator=(const switch_sai_rpc_sai_thrift_create_rpf_group_args&);
  switch_sai_rpc_sai_thrift_create_rpf_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_rpf_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_rpf_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_rpf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_rpf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_rpf_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_result__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_rpf_group_result(const switch_sai_rpc_sai_thrift_create_rpf_group_result&);
  switch_sai_rpc_sai_thrift_create_rpf_group_result& operator=(const switch_sai_rpc_sai_thrift_create_rpf_group_result&);
  switch_sai_rpc_sai_thrift_create_rpf_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_rpf_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_rpf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_rpf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_rpf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_rpf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_rpf_group_args(const switch_sai_rpc_sai_thrift_remove_rpf_group_args&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_rpf_group_args&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_args() noexcept;
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_rpf_group_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_rpf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_rpf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_rpf_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_pargs() noexcept;
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_rpf_group_result(const switch_sai_rpc_sai_thrift_remove_rpf_group_result&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_rpf_group_result&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_rpf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_rpf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_rpf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args(const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args() noexcept;
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result(const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_create_rpf_group_member_args(const switch_sai_rpc_sai_thrift_create_rpf_group_member_args&);
  switch_sai_rpc_sai_thrift_create_rpf_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_rpf_group_member_args&);
  switch_sai_rpc_sai_thrift_create_rpf_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_member_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_rpf_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_rpf_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_rpf_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_rpf_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_create_rpf_group_member_result(const switch_sai_rpc_sai_thrift_create_rpf_group_member_result&);
  switch_sai_rpc_sai_thrift_create_rpf_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_rpf_group_member_result&);
  switch_sai_rpc_sai_thrift_create_rpf_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_member_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_rpf_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_rpf_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_rpf_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_rpf_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_member_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_rpf_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_remove_rpf_group_member_args(const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_member_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_member_args() noexcept;
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs() noexcept;
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_remove_rpf_group_member_result(const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_member_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset() : member_id(false), thrift_attr(false) {}
  bool member_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args(const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args() noexcept;
  sai_thrift_object_id_t member_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* member_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result(const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args() noexcept;
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_entry_args__isset() : thrift_ipmc_entry(false), thrift_attr_list(false) {}
  bool thrift_ipmc_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_ipmc_entry_args(const switch_sai_rpc_sai_thrift_create_ipmc_entry_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_entry_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_entry_args() noexcept;
  sai_thrift_ipmc_entry_t thrift_ipmc_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_ipmc_entry_args__isset __isset;

  void __set_thrift_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_entry_args & rhs) const
  {
    if (!(thrift_ipmc_entry == rhs.thrift_ipmc_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs() noexcept;
  const sai_thrift_ipmc_entry_t* thrift_ipmc_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_ipmc_entry_result(const switch_sai_rpc_sai_thrift_create_ipmc_entry_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_entry_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_ipmc_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_ipmc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_args__isset() : thrift_ipmc_entry(false) {}
  bool thrift_ipmc_entry :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_ipmc_entry_args(const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_entry_args() noexcept;
  sai_thrift_ipmc_entry_t thrift_ipmc_entry;

  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_args__isset __isset;

  void __set_thrift_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args & rhs) const
  {
    if (!(thrift_ipmc_entry == rhs.thrift_ipmc_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs() noexcept;
  const sai_thrift_ipmc_entry_t* thrift_ipmc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_ipmc_entry_result(const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset() : thrift_ipmc_entry(false), thrift_attr(false) {}
  bool thrift_ipmc_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args() noexcept;
  sai_thrift_ipmc_entry_t thrift_ipmc_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset __isset;

  void __set_thrift_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args & rhs) const
  {
    if (!(thrift_ipmc_entry == rhs.thrift_ipmc_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs() noexcept;
  const sai_thrift_ipmc_entry_t* thrift_ipmc_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset() : thrift_ipmc_entry(false) {}
  bool thrift_ipmc_entry :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args() noexcept;
  sai_thrift_ipmc_entry_t thrift_ipmc_entry;

  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset __isset;

  void __set_thrift_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args & rhs) const
  {
    if (!(thrift_ipmc_entry == rhs.thrift_ipmc_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs() noexcept;
  const sai_thrift_ipmc_entry_t* thrift_ipmc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_samplepacket_args__isset {
  _switch_sai_rpc_sai_thrift_create_samplepacket_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_samplepacket_args__isset;

class switch_sai_rpc_sai_thrift_create_samplepacket_args {
 public:

  switch_sai_rpc_sai_thrift_create_samplepacket_args(const switch_sai_rpc_sai_thrift_create_samplepacket_args&);
  switch_sai_rpc_sai_thrift_create_samplepacket_args& operator=(const switch_sai_rpc_sai_thrift_create_samplepacket_args&);
  switch_sai_rpc_sai_thrift_create_samplepacket_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_samplepacket_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_samplepacket_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_samplepacket_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_samplepacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_samplepacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_samplepacket_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_samplepacket_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_samplepacket_result__isset {
  _switch_sai_rpc_sai_thrift_create_samplepacket_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_samplepacket_result__isset;

class switch_sai_rpc_sai_thrift_create_samplepacket_result {
 public:

  switch_sai_rpc_sai_thrift_create_samplepacket_result(const switch_sai_rpc_sai_thrift_create_samplepacket_result&);
  switch_sai_rpc_sai_thrift_create_samplepacket_result& operator=(const switch_sai_rpc_sai_thrift_create_samplepacket_result&);
  switch_sai_rpc_sai_thrift_create_samplepacket_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_samplepacket_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_samplepacket_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_samplepacket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_samplepacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_samplepacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_samplepacket_presult__isset {
  _switch_sai_rpc_sai_thrift_create_samplepacket_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_samplepacket_presult__isset;

class switch_sai_rpc_sai_thrift_create_samplepacket_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_samplepacket_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_samplepacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_samplepacket_args__isset {
  _switch_sai_rpc_sai_thrift_remove_samplepacket_args__isset() : samplepacket_id(false) {}
  bool samplepacket_id :1;
} _switch_sai_rpc_sai_thrift_remove_samplepacket_args__isset;

class switch_sai_rpc_sai_thrift_remove_samplepacket_args {
 public:

  switch_sai_rpc_sai_thrift_remove_samplepacket_args(const switch_sai_rpc_sai_thrift_remove_samplepacket_args&);
  switch_sai_rpc_sai_thrift_remove_samplepacket_args& operator=(const switch_sai_rpc_sai_thrift_remove_samplepacket_args&);
  switch_sai_rpc_sai_thrift_remove_samplepacket_args() : samplepacket_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_samplepacket_args() noexcept;
  sai_thrift_object_id_t samplepacket_id;

  _switch_sai_rpc_sai_thrift_remove_samplepacket_args__isset __isset;

  void __set_samplepacket_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_samplepacket_args & rhs) const
  {
    if (!(samplepacket_id == rhs.samplepacket_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_samplepacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_samplepacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_samplepacket_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_samplepacket_pargs() noexcept;
  const sai_thrift_object_id_t* samplepacket_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_samplepacket_result__isset {
  _switch_sai_rpc_sai_thrift_remove_samplepacket_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_samplepacket_result__isset;

class switch_sai_rpc_sai_thrift_remove_samplepacket_result {
 public:

  switch_sai_rpc_sai_thrift_remove_samplepacket_result(const switch_sai_rpc_sai_thrift_remove_samplepacket_result&);
  switch_sai_rpc_sai_thrift_remove_samplepacket_result& operator=(const switch_sai_rpc_sai_thrift_remove_samplepacket_result&);
  switch_sai_rpc_sai_thrift_remove_samplepacket_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_samplepacket_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_samplepacket_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_samplepacket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_samplepacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_samplepacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_samplepacket_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_samplepacket_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_samplepacket_presult__isset;

class switch_sai_rpc_sai_thrift_remove_samplepacket_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_samplepacket_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_samplepacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset() : samplepacket_id(false) {}
  bool samplepacket_id :1;
} _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args(const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args&);
  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args&);
  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args() : samplepacket_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args() noexcept;
  sai_thrift_object_id_t samplepacket_id;

  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset __isset;

  void __set_samplepacket_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args & rhs) const
  {
    if (!(samplepacket_id == rhs.samplepacket_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* samplepacket_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result(const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result&);
  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result&);
  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset() : samplepacket_id(false), thrift_attr(false) {}
  bool samplepacket_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args(const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args&);
  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args&);
  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args() : samplepacket_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args() noexcept;
  sai_thrift_object_id_t samplepacket_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset __isset;

  void __set_samplepacket_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args & rhs) const
  {
    if (!(samplepacket_id == rhs.samplepacket_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* samplepacket_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result(const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result&);
  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result&);
  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args(const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result(const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset() : tunnel_map_entry_id(false) {}
  bool tunnel_map_entry_id :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args(const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args() : tunnel_map_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args() noexcept;
  sai_thrift_object_id_t tunnel_map_entry_id;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset __isset;

  void __set_tunnel_map_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args & rhs) const
  {
    if (!(tunnel_map_entry_id == rhs.tunnel_map_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_map_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result(const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset() : tunnel_map_entry_id(false) {}
  bool tunnel_map_entry_id :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args() : tunnel_map_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args() noexcept;
  sai_thrift_object_id_t tunnel_map_entry_id;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset __isset;

  void __set_tunnel_map_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args & rhs) const
  {
    if (!(tunnel_map_entry_id == rhs.tunnel_map_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_map_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset() : tunnel_map_entry_id(false), thrift_attr(false) {}
  bool tunnel_map_entry_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args() : tunnel_map_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args() noexcept;
  sai_thrift_object_id_t tunnel_map_entry_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset __isset;

  void __set_tunnel_map_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args & rhs) const
  {
    if (!(tunnel_map_entry_id == rhs.tunnel_map_entry_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_map_entry_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_args__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_args__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_args {
 public:

  switch_sai_rpc_sai_thrift_create_tunnel_map_args(const switch_sai_rpc_sai_thrift_create_tunnel_map_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_args& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_map_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_map_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_tunnel_map_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_result__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_result__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_result {
 public:

  switch_sai_rpc_sai_thrift_create_tunnel_map_result(const switch_sai_rpc_sai_thrift_create_tunnel_map_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_result& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_map_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_presult__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_presult__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_args__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_args__isset() : tunnel_map_id(false) {}
  bool tunnel_map_id :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_args__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_args {
 public:

  switch_sai_rpc_sai_thrift_remove_tunnel_map_args(const switch_sai_rpc_sai_thrift_remove_tunnel_map_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_args& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_map_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_args() : tunnel_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_args() noexcept;
  sai_thrift_object_id_t tunnel_map_id;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_args__isset __isset;

  void __set_tunnel_map_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_map_args & rhs) const
  {
    if (!(tunnel_map_id == rhs.tunnel_map_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_map_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_result__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_result__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_result {
 public:

  switch_sai_rpc_sai_thrift_remove_tunnel_map_result(const switch_sai_rpc_sai_thrift_remove_tunnel_map_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_result& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_map_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_presult__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset() : tunnel_map_id(false) {}
  bool tunnel_map_id :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args(const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args() : tunnel_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args() noexcept;
  sai_thrift_object_id_t tunnel_map_id;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset __isset;

  void __set_tunnel_map_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args & rhs) const
  {
    if (!(tunnel_map_id == rhs.tunnel_map_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_map_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result(const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset() : tunnel_map_id(false), thrift_attr(false) {}
  bool tunnel_map_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args(const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args() : tunnel_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args() noexcept;
  sai_thrift_object_id_t tunnel_map_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset __isset;

  void __set_tunnel_map_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args & rhs) const
  {
    if (!(tunnel_map_id == rhs.tunnel_map_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_map_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result(const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_args__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_args__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_args {
 public:

  switch_sai_rpc_sai_thrift_create_tunnel_args(const switch_sai_rpc_sai_thrift_create_tunnel_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_args& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_tunnel_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_tunnel_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_result__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_result__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_result {
 public:

  switch_sai_rpc_sai_thrift_create_tunnel_result(const switch_sai_rpc_sai_thrift_create_tunnel_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_result& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_tunnel_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_presult__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_presult__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_tunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_args__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_args__isset() : tunnel_id(false) {}
  bool tunnel_id :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_args__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_args {
 public:

  switch_sai_rpc_sai_thrift_remove_tunnel_args(const switch_sai_rpc_sai_thrift_remove_tunnel_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_args& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_args() : tunnel_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_args() noexcept;
  sai_thrift_object_id_t tunnel_id;

  _switch_sai_rpc_sai_thrift_remove_tunnel_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_tunnel_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_result__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_result__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_result {
 public:

  switch_sai_rpc_sai_thrift_remove_tunnel_result(const switch_sai_rpc_sai_thrift_remove_tunnel_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_result& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_presult__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_args__isset() : tunnel_id(false), thrift_attr_ids(false) {}
  bool tunnel_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_attribute_args(const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_attribute_args() : tunnel_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_attribute_args() noexcept;
  sai_thrift_object_id_t tunnel_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_attribute_result(const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_args__isset() : tunnel_id(false), thrift_attr(false) {}
  bool tunnel_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_tunnel_attribute_args(const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_attribute_args() : tunnel_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_attribute_args() noexcept;
  sai_thrift_object_id_t tunnel_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_tunnel_attribute_result(const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_stats_args__isset() : tunnel_id(false), counter_ids(false), number_of_counters(false) {}
  bool tunnel_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_stats_args(const switch_sai_rpc_sai_thrift_get_tunnel_stats_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_stats_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_stats_args() : tunnel_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_stats_args() noexcept;
  sai_thrift_object_id_t tunnel_id;
  std::vector<sai_thrift_queue_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_tunnel_stats_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_queue_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_stats_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_id;
  const std::vector<sai_thrift_queue_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_stats_result(const switch_sai_rpc_sai_thrift_get_tunnel_stats_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_stats_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_tunnel_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_tunnel_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_clear_tunnel_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_args__isset() : tunnel_id(false), counter_ids(false), number_of_counters(false) {}
  bool tunnel_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_clear_tunnel_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_tunnel_stats_args {
 public:

  switch_sai_rpc_sai_thrift_clear_tunnel_stats_args(const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args&);
  switch_sai_rpc_sai_thrift_clear_tunnel_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args&);
  switch_sai_rpc_sai_thrift_clear_tunnel_stats_args() : tunnel_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_tunnel_stats_args() noexcept;
  sai_thrift_object_id_t tunnel_id;
  std::vector<sai_thrift_queue_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_queue_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_id;
  const std::vector<sai_thrift_queue_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_tunnel_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_tunnel_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_tunnel_stats_result {
 public:

  switch_sai_rpc_sai_thrift_clear_tunnel_stats_result(const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result&);
  switch_sai_rpc_sai_thrift_clear_tunnel_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result&);
  switch_sai_rpc_sai_thrift_clear_tunnel_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_tunnel_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args {
 public:

  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args(const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result {
 public:

  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result(const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset() : tunnel_term_table_entry_id(false) {}
  bool tunnel_term_table_entry_id :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args {
 public:

  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args(const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args() : tunnel_term_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args() noexcept;
  sai_thrift_object_id_t tunnel_term_table_entry_id;

  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset __isset;

  void __set_tunnel_term_table_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args & rhs) const
  {
    if (!(tunnel_term_table_entry_id == rhs.tunnel_term_table_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_term_table_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result {
 public:

  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result(const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset() : tunnel_term_table_entry_id(false), thrift_attr_ids(false) {}
  bool tunnel_term_table_entry_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args() : tunnel_term_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args() noexcept;
  sai_thrift_object_id_t tunnel_term_table_entry_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset __isset;

  void __set_tunnel_term_table_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args & rhs) const
  {
    if (!(tunnel_term_table_entry_id == rhs.tunnel_term_table_entry_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_term_table_entry_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset() : tunnel_term_table_entry_id(false), thrift_attr(false) {}
  bool tunnel_term_table_entry_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args() : tunnel_term_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args() noexcept;
  sai_thrift_object_id_t tunnel_term_table_entry_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset __isset;

  void __set_tunnel_term_table_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args & rhs) const
  {
    if (!(tunnel_term_table_entry_id == rhs.tunnel_term_table_entry_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* tunnel_term_table_entry_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args__isset() : switch_id(false) {}
  bool switch_id :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args(const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args() : switch_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args() noexcept;
  sai_thrift_object_id_t switch_id;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* switch_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result(const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_get_cpu_packet_count_args {
 public:

  switch_sai_rpc_sai_thrift_get_cpu_packet_count_args(const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_count_args& operator=(const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_count_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_count_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_count_result__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_count_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_count_result__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_count_result {
 public:

  switch_sai_rpc_sai_thrift_get_cpu_packet_count_result(const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_count_result& operator=(const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_count_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_count_result() noexcept;
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_count_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult() noexcept;
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args {
 public:

  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args(const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args&);
  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args& operator=(const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args&);
  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args() noexcept;

  bool operator == (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result__isset {
  _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result__isset;

class switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result {
 public:

  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result(const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result&);
  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result& operator=(const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result&);
  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result() noexcept;
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult__isset;

class switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult() noexcept;
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_log_set_args__isset {
  _switch_sai_rpc_sai_thrift_log_set_args__isset() : sai_api_id(false), log_level(false) {}
  bool sai_api_id :1;
  bool log_level :1;
} _switch_sai_rpc_sai_thrift_log_set_args__isset;

class switch_sai_rpc_sai_thrift_log_set_args {
 public:

  switch_sai_rpc_sai_thrift_log_set_args(const switch_sai_rpc_sai_thrift_log_set_args&);
  switch_sai_rpc_sai_thrift_log_set_args& operator=(const switch_sai_rpc_sai_thrift_log_set_args&);
  switch_sai_rpc_sai_thrift_log_set_args() : sai_api_id(0), log_level(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_log_set_args() noexcept;
  int32_t sai_api_id;
  int32_t log_level;

  _switch_sai_rpc_sai_thrift_log_set_args__isset __isset;

  void __set_sai_api_id(const int32_t val);

  void __set_log_level(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_log_set_args & rhs) const
  {
    if (!(sai_api_id == rhs.sai_api_id))
      return false;
    if (!(log_level == rhs.log_level))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_log_set_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_log_set_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_log_set_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_log_set_pargs() noexcept;
  const int32_t* sai_api_id;
  const int32_t* log_level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_log_set_result__isset {
  _switch_sai_rpc_sai_thrift_log_set_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_log_set_result__isset;

class switch_sai_rpc_sai_thrift_log_set_result {
 public:

  switch_sai_rpc_sai_thrift_log_set_result(const switch_sai_rpc_sai_thrift_log_set_result&);
  switch_sai_rpc_sai_thrift_log_set_result& operator=(const switch_sai_rpc_sai_thrift_log_set_result&);
  switch_sai_rpc_sai_thrift_log_set_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_log_set_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_log_set_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_log_set_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_log_set_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_log_set_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_log_set_presult__isset {
  _switch_sai_rpc_sai_thrift_log_set_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_log_set_presult__isset;

class switch_sai_rpc_sai_thrift_log_set_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_log_set_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_log_set_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_isolation_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_isolation_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_isolation_group_args__isset;

class switch_sai_rpc_sai_thrift_create_isolation_group_args {
 public:

  switch_sai_rpc_sai_thrift_create_isolation_group_args(const switch_sai_rpc_sai_thrift_create_isolation_group_args&);
  switch_sai_rpc_sai_thrift_create_isolation_group_args& operator=(const switch_sai_rpc_sai_thrift_create_isolation_group_args&);
  switch_sai_rpc_sai_thrift_create_isolation_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_isolation_group_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_isolation_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_isolation_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_isolation_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_isolation_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_isolation_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_isolation_group_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_isolation_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_isolation_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_isolation_group_result__isset;

class switch_sai_rpc_sai_thrift_create_isolation_group_result {
 public:

  switch_sai_rpc_sai_thrift_create_isolation_group_result(const switch_sai_rpc_sai_thrift_create_isolation_group_result&);
  switch_sai_rpc_sai_thrift_create_isolation_group_result& operator=(const switch_sai_rpc_sai_thrift_create_isolation_group_result&);
  switch_sai_rpc_sai_thrift_create_isolation_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_isolation_group_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_isolation_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_isolation_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_isolation_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_isolation_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_isolation_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_isolation_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_isolation_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_isolation_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_isolation_group_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_isolation_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_isolation_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_isolation_group_args__isset() : iso_group_oid(false) {}
  bool iso_group_oid :1;
} _switch_sai_rpc_sai_thrift_remove_isolation_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_isolation_group_args {
 public:

  switch_sai_rpc_sai_thrift_remove_isolation_group_args(const switch_sai_rpc_sai_thrift_remove_isolation_group_args&);
  switch_sai_rpc_sai_thrift_remove_isolation_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_isolation_group_args&);
  switch_sai_rpc_sai_thrift_remove_isolation_group_args() : iso_group_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_isolation_group_args() noexcept;
  sai_thrift_object_id_t iso_group_oid;

  _switch_sai_rpc_sai_thrift_remove_isolation_group_args__isset __isset;

  void __set_iso_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_isolation_group_args & rhs) const
  {
    if (!(iso_group_oid == rhs.iso_group_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_isolation_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_isolation_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_isolation_group_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_isolation_group_pargs() noexcept;
  const sai_thrift_object_id_t* iso_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_isolation_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_isolation_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_isolation_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_isolation_group_result {
 public:

  switch_sai_rpc_sai_thrift_remove_isolation_group_result(const switch_sai_rpc_sai_thrift_remove_isolation_group_result&);
  switch_sai_rpc_sai_thrift_remove_isolation_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_isolation_group_result&);
  switch_sai_rpc_sai_thrift_remove_isolation_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_isolation_group_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_isolation_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_isolation_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_isolation_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_isolation_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_isolation_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_isolation_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_isolation_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_isolation_group_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_isolation_group_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_isolation_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_isolation_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_isolation_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_isolation_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_isolation_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_create_isolation_group_member_args(const switch_sai_rpc_sai_thrift_create_isolation_group_member_args&);
  switch_sai_rpc_sai_thrift_create_isolation_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_isolation_group_member_args&);
  switch_sai_rpc_sai_thrift_create_isolation_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_isolation_group_member_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_isolation_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_isolation_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_isolation_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_isolation_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_isolation_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_isolation_group_member_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_isolation_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_isolation_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_isolation_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_isolation_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_create_isolation_group_member_result(const switch_sai_rpc_sai_thrift_create_isolation_group_member_result&);
  switch_sai_rpc_sai_thrift_create_isolation_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_isolation_group_member_result&);
  switch_sai_rpc_sai_thrift_create_isolation_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_isolation_group_member_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_isolation_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_isolation_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_isolation_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_isolation_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_isolation_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_isolation_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_isolation_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_isolation_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_isolation_group_member_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_isolation_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_isolation_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_isolation_group_member_args__isset() : member_oid(false) {}
  bool member_oid :1;
} _switch_sai_rpc_sai_thrift_remove_isolation_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_isolation_group_member_args {
 public:

  switch_sai_rpc_sai_thrift_remove_isolation_group_member_args(const switch_sai_rpc_sai_thrift_remove_isolation_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_isolation_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_isolation_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_isolation_group_member_args() : member_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_isolation_group_member_args() noexcept;
  sai_thrift_object_id_t member_oid;

  _switch_sai_rpc_sai_thrift_remove_isolation_group_member_args__isset __isset;

  void __set_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_isolation_group_member_args & rhs) const
  {
    if (!(member_oid == rhs.member_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_isolation_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_isolation_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_isolation_group_member_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_isolation_group_member_pargs() noexcept;
  const sai_thrift_object_id_t* member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_isolation_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_isolation_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_isolation_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_isolation_group_member_result {
 public:

  switch_sai_rpc_sai_thrift_remove_isolation_group_member_result(const switch_sai_rpc_sai_thrift_remove_isolation_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_isolation_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_isolation_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_isolation_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_isolation_group_member_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_isolation_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_isolation_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_isolation_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_isolation_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_isolation_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_isolation_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_isolation_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_isolation_group_member_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_isolation_group_member_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_isolation_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args__isset {
  _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args__isset() : iso_group_oid(false) {}
  bool iso_group_oid :1;
} _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args__isset;

class switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args {
 public:

  switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args(const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args&);
  switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args& operator=(const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args&);
  switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args() : iso_group_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args() noexcept;
  sai_thrift_object_id_t iso_group_oid;

  _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args__isset __isset;

  void __set_iso_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args & rhs) const
  {
    if (!(iso_group_oid == rhs.iso_group_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_isolation_group_attributes_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_isolation_group_attributes_pargs() noexcept;
  const sai_thrift_object_id_t* iso_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result__isset {
  _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result__isset;

class switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result {
 public:

  switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result(const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result&);
  switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result& operator=(const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result&);
  switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_isolation_group_attributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_presult__isset {
  _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_presult__isset;

class switch_sai_rpc_sai_thrift_get_isolation_group_attributes_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_isolation_group_attributes_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_isolation_group_attributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args__isset {
  _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args__isset() : member_oid(false) {}
  bool member_oid :1;
} _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args__isset;

class switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args {
 public:

  switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args(const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args&);
  switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args& operator=(const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args&);
  switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args() : member_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args() noexcept;
  sai_thrift_object_id_t member_oid;

  _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args__isset __isset;

  void __set_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args & rhs) const
  {
    if (!(member_oid == rhs.member_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_pargs() noexcept;
  const sai_thrift_object_id_t* member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result__isset {
  _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result__isset;

class switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result {
 public:

  switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result(const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result&);
  switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result& operator=(const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result&);
  switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_presult__isset {
  _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_presult__isset;

class switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_isolation_group_member_attributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_counter_args__isset {
  _switch_sai_rpc_sai_thrift_create_counter_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_counter_args__isset;

class switch_sai_rpc_sai_thrift_create_counter_args {
 public:

  switch_sai_rpc_sai_thrift_create_counter_args(const switch_sai_rpc_sai_thrift_create_counter_args&);
  switch_sai_rpc_sai_thrift_create_counter_args& operator=(const switch_sai_rpc_sai_thrift_create_counter_args&);
  switch_sai_rpc_sai_thrift_create_counter_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_counter_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_counter_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_counter_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_counter_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_counter_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_counter_result__isset {
  _switch_sai_rpc_sai_thrift_create_counter_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_counter_result__isset;

class switch_sai_rpc_sai_thrift_create_counter_result {
 public:

  switch_sai_rpc_sai_thrift_create_counter_result(const switch_sai_rpc_sai_thrift_create_counter_result&);
  switch_sai_rpc_sai_thrift_create_counter_result& operator=(const switch_sai_rpc_sai_thrift_create_counter_result&);
  switch_sai_rpc_sai_thrift_create_counter_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_counter_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_counter_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_counter_presult__isset {
  _switch_sai_rpc_sai_thrift_create_counter_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_counter_presult__isset;

class switch_sai_rpc_sai_thrift_create_counter_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_counter_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_counter_args__isset {
  _switch_sai_rpc_sai_thrift_remove_counter_args__isset() : counter_oid(false) {}
  bool counter_oid :1;
} _switch_sai_rpc_sai_thrift_remove_counter_args__isset;

class switch_sai_rpc_sai_thrift_remove_counter_args {
 public:

  switch_sai_rpc_sai_thrift_remove_counter_args(const switch_sai_rpc_sai_thrift_remove_counter_args&);
  switch_sai_rpc_sai_thrift_remove_counter_args& operator=(const switch_sai_rpc_sai_thrift_remove_counter_args&);
  switch_sai_rpc_sai_thrift_remove_counter_args() : counter_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_counter_args() noexcept;
  sai_thrift_object_id_t counter_oid;

  _switch_sai_rpc_sai_thrift_remove_counter_args__isset __isset;

  void __set_counter_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_counter_args & rhs) const
  {
    if (!(counter_oid == rhs.counter_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_counter_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_counter_pargs() noexcept;
  const sai_thrift_object_id_t* counter_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_counter_result__isset {
  _switch_sai_rpc_sai_thrift_remove_counter_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_counter_result__isset;

class switch_sai_rpc_sai_thrift_remove_counter_result {
 public:

  switch_sai_rpc_sai_thrift_remove_counter_result(const switch_sai_rpc_sai_thrift_remove_counter_result&);
  switch_sai_rpc_sai_thrift_remove_counter_result& operator=(const switch_sai_rpc_sai_thrift_remove_counter_result&);
  switch_sai_rpc_sai_thrift_remove_counter_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_counter_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_counter_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_counter_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_counter_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_counter_presult__isset;

class switch_sai_rpc_sai_thrift_remove_counter_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_counter_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_counter_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_counter_attribute_args__isset() : thrift_counter_id(false), thrift_attr(false) {}
  bool thrift_counter_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_counter_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_counter_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_counter_attribute_args(const switch_sai_rpc_sai_thrift_set_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_set_counter_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_set_counter_attribute_args() : thrift_counter_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_counter_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_counter_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_counter_attribute_args__isset __isset;

  void __set_thrift_counter_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_counter_attribute_args & rhs) const
  {
    if (!(thrift_counter_id == rhs.thrift_counter_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_counter_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_counter_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_counter_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_counter_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_counter_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_counter_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_counter_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_counter_attribute_result(const switch_sai_rpc_sai_thrift_set_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_set_counter_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_set_counter_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_counter_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_counter_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_counter_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_counter_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_counter_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_counter_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_counter_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_counter_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_counter_attribute_args__isset() : thrift_counter_id(false) {}
  bool thrift_counter_id :1;
} _switch_sai_rpc_sai_thrift_get_counter_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_counter_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_counter_attribute_args(const switch_sai_rpc_sai_thrift_get_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_get_counter_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_get_counter_attribute_args() : thrift_counter_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_counter_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_counter_id;

  _switch_sai_rpc_sai_thrift_get_counter_attribute_args__isset __isset;

  void __set_thrift_counter_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_counter_attribute_args & rhs) const
  {
    if (!(thrift_counter_id == rhs.thrift_counter_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_counter_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_counter_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_counter_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_counter_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_counter_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_counter_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_counter_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_counter_attribute_result(const switch_sai_rpc_sai_thrift_get_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_get_counter_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_get_counter_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_counter_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_counter_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_counter_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_counter_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_counter_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_counter_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_counter_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_counter_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_counter_stats_args__isset() : counter_id(false), counter_ids(false), number_of_counters(false) {}
  bool counter_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_counter_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_counter_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_counter_stats_args(const switch_sai_rpc_sai_thrift_get_counter_stats_args&);
  switch_sai_rpc_sai_thrift_get_counter_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_counter_stats_args&);
  switch_sai_rpc_sai_thrift_get_counter_stats_args() : counter_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_counter_stats_args() noexcept;
  sai_thrift_object_id_t counter_id;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_counter_stats_args__isset __isset;

  void __set_counter_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_counter_stats_args & rhs) const
  {
    if (!(counter_id == rhs.counter_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_counter_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_counter_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_counter_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_counter_stats_pargs() noexcept;
  const sai_thrift_object_id_t* counter_id;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_counter_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_counter_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_counter_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_counter_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_counter_stats_result(const switch_sai_rpc_sai_thrift_get_counter_stats_result&);
  switch_sai_rpc_sai_thrift_get_counter_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_counter_stats_result&);
  switch_sai_rpc_sai_thrift_get_counter_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_counter_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_counter_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_counter_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_counter_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_counter_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_counter_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_counter_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_counter_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_counter_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_counter_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_counter_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_counter_stats_ext_args__isset {
  _switch_sai_rpc_sai_thrift_get_counter_stats_ext_args__isset() : counter_id(false), counter_ids(false), mode(false), number_of_counters(false) {}
  bool counter_id :1;
  bool counter_ids :1;
  bool mode :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_counter_stats_ext_args__isset;

class switch_sai_rpc_sai_thrift_get_counter_stats_ext_args {
 public:

  switch_sai_rpc_sai_thrift_get_counter_stats_ext_args(const switch_sai_rpc_sai_thrift_get_counter_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_counter_stats_ext_args& operator=(const switch_sai_rpc_sai_thrift_get_counter_stats_ext_args&);
  switch_sai_rpc_sai_thrift_get_counter_stats_ext_args() : counter_id(0), mode(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_counter_stats_ext_args() noexcept;
  sai_thrift_object_id_t counter_id;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  int8_t mode;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_counter_stats_ext_args__isset __isset;

  void __set_counter_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const int8_t val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_counter_stats_ext_args & rhs) const
  {
    if (!(counter_id == rhs.counter_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_counter_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_counter_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_counter_stats_ext_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_counter_stats_ext_pargs() noexcept;
  const sai_thrift_object_id_t* counter_id;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const int8_t* mode;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_counter_stats_ext_result__isset {
  _switch_sai_rpc_sai_thrift_get_counter_stats_ext_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_counter_stats_ext_result__isset;

class switch_sai_rpc_sai_thrift_get_counter_stats_ext_result {
 public:

  switch_sai_rpc_sai_thrift_get_counter_stats_ext_result(const switch_sai_rpc_sai_thrift_get_counter_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_counter_stats_ext_result& operator=(const switch_sai_rpc_sai_thrift_get_counter_stats_ext_result&);
  switch_sai_rpc_sai_thrift_get_counter_stats_ext_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_counter_stats_ext_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_counter_stats_ext_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_counter_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_counter_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_counter_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_counter_stats_ext_presult__isset {
  _switch_sai_rpc_sai_thrift_get_counter_stats_ext_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_counter_stats_ext_presult__isset;

class switch_sai_rpc_sai_thrift_get_counter_stats_ext_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_counter_stats_ext_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_counter_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_clear_counter_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_counter_stats_args__isset() : counter_id(false), thrift_counter_ids(false), number_of_counters(false) {}
  bool counter_id :1;
  bool thrift_counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_clear_counter_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_counter_stats_args {
 public:

  switch_sai_rpc_sai_thrift_clear_counter_stats_args(const switch_sai_rpc_sai_thrift_clear_counter_stats_args&);
  switch_sai_rpc_sai_thrift_clear_counter_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_counter_stats_args&);
  switch_sai_rpc_sai_thrift_clear_counter_stats_args() : counter_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_counter_stats_args() noexcept;
  sai_thrift_object_id_t counter_id;
  std::vector<sai_thrift_stat_id_t>  thrift_counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_clear_counter_stats_args__isset __isset;

  void __set_counter_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_counter_stats_args & rhs) const
  {
    if (!(counter_id == rhs.counter_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_counter_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_counter_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_clear_counter_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_counter_stats_pargs() noexcept;
  const sai_thrift_object_id_t* counter_id;
  const std::vector<sai_thrift_stat_id_t> * thrift_counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_counter_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_counter_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_counter_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_counter_stats_result {
 public:

  switch_sai_rpc_sai_thrift_clear_counter_stats_result(const switch_sai_rpc_sai_thrift_clear_counter_stats_result&);
  switch_sai_rpc_sai_thrift_clear_counter_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_counter_stats_result&);
  switch_sai_rpc_sai_thrift_clear_counter_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_counter_stats_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_counter_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_counter_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_counter_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_counter_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_clear_counter_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_counter_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_counter_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_counter_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_clear_counter_stats_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_counter_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_debug_counter_args__isset {
  _switch_sai_rpc_sai_thrift_create_debug_counter_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_debug_counter_args__isset;

class switch_sai_rpc_sai_thrift_create_debug_counter_args {
 public:

  switch_sai_rpc_sai_thrift_create_debug_counter_args(const switch_sai_rpc_sai_thrift_create_debug_counter_args&);
  switch_sai_rpc_sai_thrift_create_debug_counter_args& operator=(const switch_sai_rpc_sai_thrift_create_debug_counter_args&);
  switch_sai_rpc_sai_thrift_create_debug_counter_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_debug_counter_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_debug_counter_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_debug_counter_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_debug_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_debug_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_debug_counter_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_debug_counter_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_debug_counter_result__isset {
  _switch_sai_rpc_sai_thrift_create_debug_counter_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_debug_counter_result__isset;

class switch_sai_rpc_sai_thrift_create_debug_counter_result {
 public:

  switch_sai_rpc_sai_thrift_create_debug_counter_result(const switch_sai_rpc_sai_thrift_create_debug_counter_result&);
  switch_sai_rpc_sai_thrift_create_debug_counter_result& operator=(const switch_sai_rpc_sai_thrift_create_debug_counter_result&);
  switch_sai_rpc_sai_thrift_create_debug_counter_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_debug_counter_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_debug_counter_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_debug_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_debug_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_debug_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_debug_counter_presult__isset {
  _switch_sai_rpc_sai_thrift_create_debug_counter_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_debug_counter_presult__isset;

class switch_sai_rpc_sai_thrift_create_debug_counter_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_debug_counter_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_debug_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_debug_counter_args__isset {
  _switch_sai_rpc_sai_thrift_remove_debug_counter_args__isset() : debug_counter_oid(false) {}
  bool debug_counter_oid :1;
} _switch_sai_rpc_sai_thrift_remove_debug_counter_args__isset;

class switch_sai_rpc_sai_thrift_remove_debug_counter_args {
 public:

  switch_sai_rpc_sai_thrift_remove_debug_counter_args(const switch_sai_rpc_sai_thrift_remove_debug_counter_args&);
  switch_sai_rpc_sai_thrift_remove_debug_counter_args& operator=(const switch_sai_rpc_sai_thrift_remove_debug_counter_args&);
  switch_sai_rpc_sai_thrift_remove_debug_counter_args() : debug_counter_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_debug_counter_args() noexcept;
  sai_thrift_object_id_t debug_counter_oid;

  _switch_sai_rpc_sai_thrift_remove_debug_counter_args__isset __isset;

  void __set_debug_counter_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_debug_counter_args & rhs) const
  {
    if (!(debug_counter_oid == rhs.debug_counter_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_debug_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_debug_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_debug_counter_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_debug_counter_pargs() noexcept;
  const sai_thrift_object_id_t* debug_counter_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_debug_counter_result__isset {
  _switch_sai_rpc_sai_thrift_remove_debug_counter_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_debug_counter_result__isset;

class switch_sai_rpc_sai_thrift_remove_debug_counter_result {
 public:

  switch_sai_rpc_sai_thrift_remove_debug_counter_result(const switch_sai_rpc_sai_thrift_remove_debug_counter_result&);
  switch_sai_rpc_sai_thrift_remove_debug_counter_result& operator=(const switch_sai_rpc_sai_thrift_remove_debug_counter_result&);
  switch_sai_rpc_sai_thrift_remove_debug_counter_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_debug_counter_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_debug_counter_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_debug_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_debug_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_debug_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_debug_counter_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_debug_counter_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_debug_counter_presult__isset;

class switch_sai_rpc_sai_thrift_remove_debug_counter_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_debug_counter_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_debug_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args__isset() : thrift_debug_counter_id(false), thrift_attr(false) {}
  bool thrift_debug_counter_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args(const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args() : thrift_debug_counter_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_debug_counter_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args__isset __isset;

  void __set_thrift_debug_counter_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args & rhs) const
  {
    if (!(thrift_debug_counter_id == rhs.thrift_debug_counter_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_debug_counter_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_debug_counter_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_debug_counter_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result(const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_debug_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_debug_counter_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_debug_counter_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_debug_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args__isset() : thrift_debug_counter_id(false) {}
  bool thrift_debug_counter_id :1;
} _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args(const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args() : thrift_debug_counter_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args() noexcept;
  sai_thrift_object_id_t thrift_debug_counter_id;

  _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args__isset __isset;

  void __set_thrift_debug_counter_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args & rhs) const
  {
    if (!(thrift_debug_counter_id == rhs.thrift_debug_counter_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_debug_counter_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_debug_counter_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* thrift_debug_counter_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result(const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_debug_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_debug_counter_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_debug_counter_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_debug_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_nat_args__isset {
  _switch_sai_rpc_sai_thrift_create_nat_args__isset() : thrift_nat_entry(false), thrift_attr_list(false) {}
  bool thrift_nat_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_nat_args__isset;

class switch_sai_rpc_sai_thrift_create_nat_args {
 public:

  switch_sai_rpc_sai_thrift_create_nat_args(const switch_sai_rpc_sai_thrift_create_nat_args&);
  switch_sai_rpc_sai_thrift_create_nat_args& operator=(const switch_sai_rpc_sai_thrift_create_nat_args&);
  switch_sai_rpc_sai_thrift_create_nat_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_nat_args() noexcept;
  sai_thrift_nat_entry_t thrift_nat_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_nat_args__isset __isset;

  void __set_thrift_nat_entry(const sai_thrift_nat_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_nat_args & rhs) const
  {
    if (!(thrift_nat_entry == rhs.thrift_nat_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_nat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_nat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_nat_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_nat_pargs() noexcept;
  const sai_thrift_nat_entry_t* thrift_nat_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_nat_result__isset {
  _switch_sai_rpc_sai_thrift_create_nat_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_nat_result__isset;

class switch_sai_rpc_sai_thrift_create_nat_result {
 public:

  switch_sai_rpc_sai_thrift_create_nat_result(const switch_sai_rpc_sai_thrift_create_nat_result&);
  switch_sai_rpc_sai_thrift_create_nat_result& operator=(const switch_sai_rpc_sai_thrift_create_nat_result&);
  switch_sai_rpc_sai_thrift_create_nat_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_nat_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_nat_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_nat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_nat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_nat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_nat_presult__isset {
  _switch_sai_rpc_sai_thrift_create_nat_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_nat_presult__isset;

class switch_sai_rpc_sai_thrift_create_nat_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_nat_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_nat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_nat_args__isset {
  _switch_sai_rpc_sai_thrift_remove_nat_args__isset() : thrift_nat_entry(false) {}
  bool thrift_nat_entry :1;
} _switch_sai_rpc_sai_thrift_remove_nat_args__isset;

class switch_sai_rpc_sai_thrift_remove_nat_args {
 public:

  switch_sai_rpc_sai_thrift_remove_nat_args(const switch_sai_rpc_sai_thrift_remove_nat_args&);
  switch_sai_rpc_sai_thrift_remove_nat_args& operator=(const switch_sai_rpc_sai_thrift_remove_nat_args&);
  switch_sai_rpc_sai_thrift_remove_nat_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_nat_args() noexcept;
  sai_thrift_nat_entry_t thrift_nat_entry;

  _switch_sai_rpc_sai_thrift_remove_nat_args__isset __isset;

  void __set_thrift_nat_entry(const sai_thrift_nat_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_nat_args & rhs) const
  {
    if (!(thrift_nat_entry == rhs.thrift_nat_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_nat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_nat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_nat_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_nat_pargs() noexcept;
  const sai_thrift_nat_entry_t* thrift_nat_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_nat_result__isset {
  _switch_sai_rpc_sai_thrift_remove_nat_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_nat_result__isset;

class switch_sai_rpc_sai_thrift_remove_nat_result {
 public:

  switch_sai_rpc_sai_thrift_remove_nat_result(const switch_sai_rpc_sai_thrift_remove_nat_result&);
  switch_sai_rpc_sai_thrift_remove_nat_result& operator=(const switch_sai_rpc_sai_thrift_remove_nat_result&);
  switch_sai_rpc_sai_thrift_remove_nat_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_nat_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_nat_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_nat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_nat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_nat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_nat_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_nat_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_nat_presult__isset;

class switch_sai_rpc_sai_thrift_remove_nat_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_nat_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_nat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_nat_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_nat_attribute_args__isset() : thrift_nat_entry(false), thrift_attr(false) {}
  bool thrift_nat_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_nat_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_nat_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_nat_attribute_args(const switch_sai_rpc_sai_thrift_set_nat_attribute_args&);
  switch_sai_rpc_sai_thrift_set_nat_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_nat_attribute_args&);
  switch_sai_rpc_sai_thrift_set_nat_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_nat_attribute_args() noexcept;
  sai_thrift_nat_entry_t thrift_nat_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_nat_attribute_args__isset __isset;

  void __set_thrift_nat_entry(const sai_thrift_nat_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_nat_attribute_args & rhs) const
  {
    if (!(thrift_nat_entry == rhs.thrift_nat_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_nat_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_nat_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_nat_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_nat_attribute_pargs() noexcept;
  const sai_thrift_nat_entry_t* thrift_nat_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_nat_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_nat_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_nat_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_nat_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_nat_attribute_result(const switch_sai_rpc_sai_thrift_set_nat_attribute_result&);
  switch_sai_rpc_sai_thrift_set_nat_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_nat_attribute_result&);
  switch_sai_rpc_sai_thrift_set_nat_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_nat_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_nat_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_nat_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_nat_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_nat_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_nat_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_nat_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_nat_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_nat_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_nat_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_nat_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_nat_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_nat_attribute_args__isset() : thrift_nat_entry(false) {}
  bool thrift_nat_entry :1;
} _switch_sai_rpc_sai_thrift_get_nat_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_nat_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_nat_attribute_args(const switch_sai_rpc_sai_thrift_get_nat_attribute_args&);
  switch_sai_rpc_sai_thrift_get_nat_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_nat_attribute_args&);
  switch_sai_rpc_sai_thrift_get_nat_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_nat_attribute_args() noexcept;
  sai_thrift_nat_entry_t thrift_nat_entry;

  _switch_sai_rpc_sai_thrift_get_nat_attribute_args__isset __isset;

  void __set_thrift_nat_entry(const sai_thrift_nat_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_nat_attribute_args & rhs) const
  {
    if (!(thrift_nat_entry == rhs.thrift_nat_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_nat_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_nat_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_nat_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_nat_attribute_pargs() noexcept;
  const sai_thrift_nat_entry_t* thrift_nat_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_nat_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_nat_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_nat_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_nat_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_nat_attribute_result(const switch_sai_rpc_sai_thrift_get_nat_attribute_result&);
  switch_sai_rpc_sai_thrift_get_nat_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_nat_attribute_result&);
  switch_sai_rpc_sai_thrift_get_nat_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_nat_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_nat_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_nat_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_nat_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_nat_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_nat_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_nat_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_nat_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_nat_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_nat_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_nat_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_bfd_args__isset {
  _switch_sai_rpc_sai_thrift_create_bfd_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_bfd_args__isset;

class switch_sai_rpc_sai_thrift_create_bfd_args {
 public:

  switch_sai_rpc_sai_thrift_create_bfd_args(const switch_sai_rpc_sai_thrift_create_bfd_args&);
  switch_sai_rpc_sai_thrift_create_bfd_args& operator=(const switch_sai_rpc_sai_thrift_create_bfd_args&);
  switch_sai_rpc_sai_thrift_create_bfd_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bfd_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_bfd_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bfd_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bfd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bfd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_bfd_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_bfd_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_bfd_result__isset {
  _switch_sai_rpc_sai_thrift_create_bfd_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bfd_result__isset;

class switch_sai_rpc_sai_thrift_create_bfd_result {
 public:

  switch_sai_rpc_sai_thrift_create_bfd_result(const switch_sai_rpc_sai_thrift_create_bfd_result&);
  switch_sai_rpc_sai_thrift_create_bfd_result& operator=(const switch_sai_rpc_sai_thrift_create_bfd_result&);
  switch_sai_rpc_sai_thrift_create_bfd_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bfd_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_bfd_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bfd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bfd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bfd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_bfd_presult__isset {
  _switch_sai_rpc_sai_thrift_create_bfd_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bfd_presult__isset;

class switch_sai_rpc_sai_thrift_create_bfd_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_bfd_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_bfd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_bfd_args__isset {
  _switch_sai_rpc_sai_thrift_remove_bfd_args__isset() : bfd_oid(false) {}
  bool bfd_oid :1;
} _switch_sai_rpc_sai_thrift_remove_bfd_args__isset;

class switch_sai_rpc_sai_thrift_remove_bfd_args {
 public:

  switch_sai_rpc_sai_thrift_remove_bfd_args(const switch_sai_rpc_sai_thrift_remove_bfd_args&);
  switch_sai_rpc_sai_thrift_remove_bfd_args& operator=(const switch_sai_rpc_sai_thrift_remove_bfd_args&);
  switch_sai_rpc_sai_thrift_remove_bfd_args() : bfd_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bfd_args() noexcept;
  sai_thrift_object_id_t bfd_oid;

  _switch_sai_rpc_sai_thrift_remove_bfd_args__isset __isset;

  void __set_bfd_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bfd_args & rhs) const
  {
    if (!(bfd_oid == rhs.bfd_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bfd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bfd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_bfd_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_bfd_pargs() noexcept;
  const sai_thrift_object_id_t* bfd_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_bfd_result__isset {
  _switch_sai_rpc_sai_thrift_remove_bfd_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bfd_result__isset;

class switch_sai_rpc_sai_thrift_remove_bfd_result {
 public:

  switch_sai_rpc_sai_thrift_remove_bfd_result(const switch_sai_rpc_sai_thrift_remove_bfd_result&);
  switch_sai_rpc_sai_thrift_remove_bfd_result& operator=(const switch_sai_rpc_sai_thrift_remove_bfd_result&);
  switch_sai_rpc_sai_thrift_remove_bfd_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bfd_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_bfd_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bfd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bfd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bfd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_bfd_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_bfd_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bfd_presult__isset;

class switch_sai_rpc_sai_thrift_remove_bfd_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_bfd_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_bfd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_bfd_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_bfd_attribute_args__isset() : bfd_oid(false), thrift_attr(false) {}
  bool bfd_oid :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_bfd_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_bfd_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_bfd_attribute_args(const switch_sai_rpc_sai_thrift_set_bfd_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bfd_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_bfd_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bfd_attribute_args() : bfd_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bfd_attribute_args() noexcept;
  sai_thrift_object_id_t bfd_oid;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_bfd_attribute_args__isset __isset;

  void __set_bfd_oid(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bfd_attribute_args & rhs) const
  {
    if (!(bfd_oid == rhs.bfd_oid))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bfd_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bfd_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_bfd_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_bfd_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* bfd_oid;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_bfd_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_bfd_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bfd_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_bfd_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_bfd_attribute_result(const switch_sai_rpc_sai_thrift_set_bfd_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bfd_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_bfd_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bfd_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bfd_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_bfd_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bfd_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bfd_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bfd_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_bfd_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_bfd_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bfd_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_bfd_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_bfd_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_bfd_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_bfd_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_bfd_attribute_args__isset() : bfd_oid(false) {}
  bool bfd_oid :1;
} _switch_sai_rpc_sai_thrift_get_bfd_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_bfd_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_bfd_attribute_args(const switch_sai_rpc_sai_thrift_get_bfd_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bfd_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_bfd_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bfd_attribute_args() : bfd_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bfd_attribute_args() noexcept;
  sai_thrift_object_id_t bfd_oid;

  _switch_sai_rpc_sai_thrift_get_bfd_attribute_args__isset __isset;

  void __set_bfd_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bfd_attribute_args & rhs) const
  {
    if (!(bfd_oid == rhs.bfd_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bfd_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bfd_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_bfd_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bfd_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* bfd_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bfd_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_bfd_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bfd_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_bfd_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_bfd_attribute_result(const switch_sai_rpc_sai_thrift_get_bfd_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bfd_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_bfd_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bfd_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bfd_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_bfd_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bfd_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bfd_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bfd_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_bfd_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_bfd_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bfd_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_bfd_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_bfd_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_bfd_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_y1731_meg_args__isset {
  _switch_sai_rpc_sai_thrift_create_y1731_meg_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_y1731_meg_args__isset;

class switch_sai_rpc_sai_thrift_create_y1731_meg_args {
 public:

  switch_sai_rpc_sai_thrift_create_y1731_meg_args(const switch_sai_rpc_sai_thrift_create_y1731_meg_args&);
  switch_sai_rpc_sai_thrift_create_y1731_meg_args& operator=(const switch_sai_rpc_sai_thrift_create_y1731_meg_args&);
  switch_sai_rpc_sai_thrift_create_y1731_meg_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_y1731_meg_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_y1731_meg_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_y1731_meg_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_y1731_meg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_y1731_meg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_y1731_meg_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_y1731_meg_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_y1731_meg_result__isset {
  _switch_sai_rpc_sai_thrift_create_y1731_meg_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_y1731_meg_result__isset;

class switch_sai_rpc_sai_thrift_create_y1731_meg_result {
 public:

  switch_sai_rpc_sai_thrift_create_y1731_meg_result(const switch_sai_rpc_sai_thrift_create_y1731_meg_result&);
  switch_sai_rpc_sai_thrift_create_y1731_meg_result& operator=(const switch_sai_rpc_sai_thrift_create_y1731_meg_result&);
  switch_sai_rpc_sai_thrift_create_y1731_meg_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_y1731_meg_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_y1731_meg_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_y1731_meg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_y1731_meg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_y1731_meg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_y1731_meg_presult__isset {
  _switch_sai_rpc_sai_thrift_create_y1731_meg_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_y1731_meg_presult__isset;

class switch_sai_rpc_sai_thrift_create_y1731_meg_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_y1731_meg_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_y1731_meg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_y1731_meg_args__isset {
  _switch_sai_rpc_sai_thrift_remove_y1731_meg_args__isset() : y1731_meg_oid(false) {}
  bool y1731_meg_oid :1;
} _switch_sai_rpc_sai_thrift_remove_y1731_meg_args__isset;

class switch_sai_rpc_sai_thrift_remove_y1731_meg_args {
 public:

  switch_sai_rpc_sai_thrift_remove_y1731_meg_args(const switch_sai_rpc_sai_thrift_remove_y1731_meg_args&);
  switch_sai_rpc_sai_thrift_remove_y1731_meg_args& operator=(const switch_sai_rpc_sai_thrift_remove_y1731_meg_args&);
  switch_sai_rpc_sai_thrift_remove_y1731_meg_args() : y1731_meg_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_meg_args() noexcept;
  sai_thrift_object_id_t y1731_meg_oid;

  _switch_sai_rpc_sai_thrift_remove_y1731_meg_args__isset __isset;

  void __set_y1731_meg_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_y1731_meg_args & rhs) const
  {
    if (!(y1731_meg_oid == rhs.y1731_meg_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_y1731_meg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_y1731_meg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_y1731_meg_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_meg_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_meg_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_y1731_meg_result__isset {
  _switch_sai_rpc_sai_thrift_remove_y1731_meg_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_y1731_meg_result__isset;

class switch_sai_rpc_sai_thrift_remove_y1731_meg_result {
 public:

  switch_sai_rpc_sai_thrift_remove_y1731_meg_result(const switch_sai_rpc_sai_thrift_remove_y1731_meg_result&);
  switch_sai_rpc_sai_thrift_remove_y1731_meg_result& operator=(const switch_sai_rpc_sai_thrift_remove_y1731_meg_result&);
  switch_sai_rpc_sai_thrift_remove_y1731_meg_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_meg_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_y1731_meg_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_y1731_meg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_y1731_meg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_y1731_meg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_y1731_meg_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_y1731_meg_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_y1731_meg_presult__isset;

class switch_sai_rpc_sai_thrift_remove_y1731_meg_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_meg_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_y1731_meg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args__isset() : y1731_meg_oid(false), thrift_attr(false) {}
  bool y1731_meg_oid :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args(const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args&);
  switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args&);
  switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args() : y1731_meg_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args() noexcept;
  sai_thrift_object_id_t y1731_meg_oid;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args__isset __isset;

  void __set_y1731_meg_oid(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args & rhs) const
  {
    if (!(y1731_meg_oid == rhs.y1731_meg_oid))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_meg_oid;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result(const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result&);
  switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result&);
  switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_y1731_meg_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args__isset() : y1731_meg_oid(false) {}
  bool y1731_meg_oid :1;
} _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args(const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args&);
  switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args&);
  switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args() : y1731_meg_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args() noexcept;
  sai_thrift_object_id_t y1731_meg_oid;

  _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args__isset __isset;

  void __set_y1731_meg_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args & rhs) const
  {
    if (!(y1731_meg_oid == rhs.y1731_meg_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_meg_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result(const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result&);
  switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result&);
  switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_y1731_meg_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_y1731_session_args__isset {
  _switch_sai_rpc_sai_thrift_create_y1731_session_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_y1731_session_args__isset;

class switch_sai_rpc_sai_thrift_create_y1731_session_args {
 public:

  switch_sai_rpc_sai_thrift_create_y1731_session_args(const switch_sai_rpc_sai_thrift_create_y1731_session_args&);
  switch_sai_rpc_sai_thrift_create_y1731_session_args& operator=(const switch_sai_rpc_sai_thrift_create_y1731_session_args&);
  switch_sai_rpc_sai_thrift_create_y1731_session_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_y1731_session_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_y1731_session_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_y1731_session_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_y1731_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_y1731_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_y1731_session_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_y1731_session_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_y1731_session_result__isset {
  _switch_sai_rpc_sai_thrift_create_y1731_session_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_y1731_session_result__isset;

class switch_sai_rpc_sai_thrift_create_y1731_session_result {
 public:

  switch_sai_rpc_sai_thrift_create_y1731_session_result(const switch_sai_rpc_sai_thrift_create_y1731_session_result&);
  switch_sai_rpc_sai_thrift_create_y1731_session_result& operator=(const switch_sai_rpc_sai_thrift_create_y1731_session_result&);
  switch_sai_rpc_sai_thrift_create_y1731_session_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_y1731_session_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_y1731_session_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_y1731_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_y1731_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_y1731_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_y1731_session_presult__isset {
  _switch_sai_rpc_sai_thrift_create_y1731_session_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_y1731_session_presult__isset;

class switch_sai_rpc_sai_thrift_create_y1731_session_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_y1731_session_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_y1731_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_y1731_session_args__isset {
  _switch_sai_rpc_sai_thrift_remove_y1731_session_args__isset() : y1731_session_oid(false) {}
  bool y1731_session_oid :1;
} _switch_sai_rpc_sai_thrift_remove_y1731_session_args__isset;

class switch_sai_rpc_sai_thrift_remove_y1731_session_args {
 public:

  switch_sai_rpc_sai_thrift_remove_y1731_session_args(const switch_sai_rpc_sai_thrift_remove_y1731_session_args&);
  switch_sai_rpc_sai_thrift_remove_y1731_session_args& operator=(const switch_sai_rpc_sai_thrift_remove_y1731_session_args&);
  switch_sai_rpc_sai_thrift_remove_y1731_session_args() : y1731_session_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_session_args() noexcept;
  sai_thrift_object_id_t y1731_session_oid;

  _switch_sai_rpc_sai_thrift_remove_y1731_session_args__isset __isset;

  void __set_y1731_session_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_y1731_session_args & rhs) const
  {
    if (!(y1731_session_oid == rhs.y1731_session_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_y1731_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_y1731_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_y1731_session_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_session_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_session_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_y1731_session_result__isset {
  _switch_sai_rpc_sai_thrift_remove_y1731_session_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_y1731_session_result__isset;

class switch_sai_rpc_sai_thrift_remove_y1731_session_result {
 public:

  switch_sai_rpc_sai_thrift_remove_y1731_session_result(const switch_sai_rpc_sai_thrift_remove_y1731_session_result&);
  switch_sai_rpc_sai_thrift_remove_y1731_session_result& operator=(const switch_sai_rpc_sai_thrift_remove_y1731_session_result&);
  switch_sai_rpc_sai_thrift_remove_y1731_session_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_session_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_y1731_session_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_y1731_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_y1731_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_y1731_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_y1731_session_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_y1731_session_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_y1731_session_presult__isset;

class switch_sai_rpc_sai_thrift_remove_y1731_session_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_session_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_y1731_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args__isset() : y1731_session_oid(false), thrift_attr(false) {}
  bool y1731_session_oid :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args(const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args&);
  switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args&);
  switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args() : y1731_session_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args() noexcept;
  sai_thrift_object_id_t y1731_session_oid;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args__isset __isset;

  void __set_y1731_session_oid(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args & rhs) const
  {
    if (!(y1731_session_oid == rhs.y1731_session_oid))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_y1731_session_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_y1731_session_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_session_oid;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result(const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result&);
  switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result&);
  switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_y1731_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_y1731_session_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_y1731_session_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_y1731_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args__isset() : y1731_session_oid(false) {}
  bool y1731_session_oid :1;
} _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args(const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args&);
  switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args&);
  switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args() : y1731_session_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args() noexcept;
  sai_thrift_object_id_t y1731_session_oid;

  _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args__isset __isset;

  void __set_y1731_session_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args & rhs) const
  {
    if (!(y1731_session_oid == rhs.y1731_session_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_y1731_session_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_y1731_session_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_session_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result(const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result&);
  switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result&);
  switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_y1731_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_y1731_session_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_y1731_session_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_y1731_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_y1731_rmep_args__isset {
  _switch_sai_rpc_sai_thrift_create_y1731_rmep_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_y1731_rmep_args__isset;

class switch_sai_rpc_sai_thrift_create_y1731_rmep_args {
 public:

  switch_sai_rpc_sai_thrift_create_y1731_rmep_args(const switch_sai_rpc_sai_thrift_create_y1731_rmep_args&);
  switch_sai_rpc_sai_thrift_create_y1731_rmep_args& operator=(const switch_sai_rpc_sai_thrift_create_y1731_rmep_args&);
  switch_sai_rpc_sai_thrift_create_y1731_rmep_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_y1731_rmep_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_y1731_rmep_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_y1731_rmep_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_y1731_rmep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_y1731_rmep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_y1731_rmep_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_y1731_rmep_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_y1731_rmep_result__isset {
  _switch_sai_rpc_sai_thrift_create_y1731_rmep_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_y1731_rmep_result__isset;

class switch_sai_rpc_sai_thrift_create_y1731_rmep_result {
 public:

  switch_sai_rpc_sai_thrift_create_y1731_rmep_result(const switch_sai_rpc_sai_thrift_create_y1731_rmep_result&);
  switch_sai_rpc_sai_thrift_create_y1731_rmep_result& operator=(const switch_sai_rpc_sai_thrift_create_y1731_rmep_result&);
  switch_sai_rpc_sai_thrift_create_y1731_rmep_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_y1731_rmep_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_y1731_rmep_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_y1731_rmep_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_y1731_rmep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_y1731_rmep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_y1731_rmep_presult__isset {
  _switch_sai_rpc_sai_thrift_create_y1731_rmep_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_y1731_rmep_presult__isset;

class switch_sai_rpc_sai_thrift_create_y1731_rmep_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_y1731_rmep_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_y1731_rmep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_y1731_rmep_args__isset {
  _switch_sai_rpc_sai_thrift_remove_y1731_rmep_args__isset() : y1731_rmep_oid(false) {}
  bool y1731_rmep_oid :1;
} _switch_sai_rpc_sai_thrift_remove_y1731_rmep_args__isset;

class switch_sai_rpc_sai_thrift_remove_y1731_rmep_args {
 public:

  switch_sai_rpc_sai_thrift_remove_y1731_rmep_args(const switch_sai_rpc_sai_thrift_remove_y1731_rmep_args&);
  switch_sai_rpc_sai_thrift_remove_y1731_rmep_args& operator=(const switch_sai_rpc_sai_thrift_remove_y1731_rmep_args&);
  switch_sai_rpc_sai_thrift_remove_y1731_rmep_args() : y1731_rmep_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_rmep_args() noexcept;
  sai_thrift_object_id_t y1731_rmep_oid;

  _switch_sai_rpc_sai_thrift_remove_y1731_rmep_args__isset __isset;

  void __set_y1731_rmep_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_y1731_rmep_args & rhs) const
  {
    if (!(y1731_rmep_oid == rhs.y1731_rmep_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_y1731_rmep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_y1731_rmep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_y1731_rmep_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_rmep_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_rmep_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_y1731_rmep_result__isset {
  _switch_sai_rpc_sai_thrift_remove_y1731_rmep_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_y1731_rmep_result__isset;

class switch_sai_rpc_sai_thrift_remove_y1731_rmep_result {
 public:

  switch_sai_rpc_sai_thrift_remove_y1731_rmep_result(const switch_sai_rpc_sai_thrift_remove_y1731_rmep_result&);
  switch_sai_rpc_sai_thrift_remove_y1731_rmep_result& operator=(const switch_sai_rpc_sai_thrift_remove_y1731_rmep_result&);
  switch_sai_rpc_sai_thrift_remove_y1731_rmep_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_rmep_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_y1731_rmep_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_y1731_rmep_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_y1731_rmep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_y1731_rmep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_y1731_rmep_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_y1731_rmep_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_y1731_rmep_presult__isset;

class switch_sai_rpc_sai_thrift_remove_y1731_rmep_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_y1731_rmep_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_y1731_rmep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args__isset() : y1731_rmep_oid(false), thrift_attr(false) {}
  bool y1731_rmep_oid :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args(const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args&);
  switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args&);
  switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args() : y1731_rmep_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args() noexcept;
  sai_thrift_object_id_t y1731_rmep_oid;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args__isset __isset;

  void __set_y1731_rmep_oid(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args & rhs) const
  {
    if (!(y1731_rmep_oid == rhs.y1731_rmep_oid))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_rmep_oid;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result(const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result&);
  switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result&);
  switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_y1731_rmep_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args__isset() : y1731_rmep_oid(false) {}
  bool y1731_rmep_oid :1;
} _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args(const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args&);
  switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args&);
  switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args() : y1731_rmep_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args() noexcept;
  sai_thrift_object_id_t y1731_rmep_oid;

  _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args__isset __isset;

  void __set_y1731_rmep_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args & rhs) const
  {
    if (!(y1731_rmep_oid == rhs.y1731_rmep_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_rmep_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result(const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result&);
  switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result&);
  switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_y1731_rmep_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args__isset() : y1731_session_oid(false), lm_stats_ids(false), number_of_stats(false) {}
  bool y1731_session_oid :1;
  bool lm_stats_ids :1;
  bool number_of_stats :1;
} _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args {
 public:

  switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args(const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args&);
  switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args&);
  switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args() : y1731_session_oid(0), number_of_stats(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args() noexcept;
  sai_thrift_object_id_t y1731_session_oid;
  std::vector<sai_thrift_stat_id_t>  lm_stats_ids;
  int32_t number_of_stats;

  _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args__isset __isset;

  void __set_y1731_session_oid(const sai_thrift_object_id_t val);

  void __set_lm_stats_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_number_of_stats(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args & rhs) const
  {
    if (!(y1731_session_oid == rhs.y1731_session_oid))
      return false;
    if (!(lm_stats_ids == rhs.lm_stats_ids))
      return false;
    if (!(number_of_stats == rhs.number_of_stats))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_pargs() noexcept;
  const sai_thrift_object_id_t* y1731_session_oid;
  const std::vector<sai_thrift_stat_id_t> * lm_stats_ids;
  const int32_t* number_of_stats;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result {
 public:

  switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result(const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result&);
  switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result&);
  switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result() noexcept;
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_presult() noexcept;
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_y1731_session_lm_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_port_args__isset {
  _switch_sai_rpc_sai_thrift_create_port_args__isset() : port_name(false), thrift_attr_list(false) {}
  bool port_name :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_port_args__isset;

class switch_sai_rpc_sai_thrift_create_port_args {
 public:

  switch_sai_rpc_sai_thrift_create_port_args(const switch_sai_rpc_sai_thrift_create_port_args&);
  switch_sai_rpc_sai_thrift_create_port_args& operator=(const switch_sai_rpc_sai_thrift_create_port_args&);
  switch_sai_rpc_sai_thrift_create_port_args() : port_name() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_port_args() noexcept;
  std::string port_name;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_port_args__isset __isset;

  void __set_port_name(const std::string& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_port_args & rhs) const
  {
    if (!(port_name == rhs.port_name))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_port_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_port_pargs() noexcept;
  const std::string* port_name;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_port_result__isset {
  _switch_sai_rpc_sai_thrift_create_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_port_result__isset;

class switch_sai_rpc_sai_thrift_create_port_result {
 public:

  switch_sai_rpc_sai_thrift_create_port_result(const switch_sai_rpc_sai_thrift_create_port_result&);
  switch_sai_rpc_sai_thrift_create_port_result& operator=(const switch_sai_rpc_sai_thrift_create_port_result&);
  switch_sai_rpc_sai_thrift_create_port_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_port_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_port_presult__isset {
  _switch_sai_rpc_sai_thrift_create_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_port_presult__isset;

class switch_sai_rpc_sai_thrift_create_port_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_port_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_port_args__isset {
  _switch_sai_rpc_sai_thrift_remove_port_args__isset() : port_oid(false) {}
  bool port_oid :1;
} _switch_sai_rpc_sai_thrift_remove_port_args__isset;

class switch_sai_rpc_sai_thrift_remove_port_args {
 public:

  switch_sai_rpc_sai_thrift_remove_port_args(const switch_sai_rpc_sai_thrift_remove_port_args&);
  switch_sai_rpc_sai_thrift_remove_port_args& operator=(const switch_sai_rpc_sai_thrift_remove_port_args&);
  switch_sai_rpc_sai_thrift_remove_port_args() : port_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_port_args() noexcept;
  sai_thrift_object_id_t port_oid;

  _switch_sai_rpc_sai_thrift_remove_port_args__isset __isset;

  void __set_port_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_port_args & rhs) const
  {
    if (!(port_oid == rhs.port_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_port_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_port_pargs() noexcept;
  const sai_thrift_object_id_t* port_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_port_result__isset {
  _switch_sai_rpc_sai_thrift_remove_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_port_result__isset;

class switch_sai_rpc_sai_thrift_remove_port_result {
 public:

  switch_sai_rpc_sai_thrift_remove_port_result(const switch_sai_rpc_sai_thrift_remove_port_result&);
  switch_sai_rpc_sai_thrift_remove_port_result& operator=(const switch_sai_rpc_sai_thrift_remove_port_result&);
  switch_sai_rpc_sai_thrift_remove_port_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_port_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_port_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_port_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_port_presult__isset;

class switch_sai_rpc_sai_thrift_remove_port_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_port_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_ptp_domain_args__isset {
  _switch_sai_rpc_sai_thrift_create_ptp_domain_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_ptp_domain_args__isset;

class switch_sai_rpc_sai_thrift_create_ptp_domain_args {
 public:

  switch_sai_rpc_sai_thrift_create_ptp_domain_args(const switch_sai_rpc_sai_thrift_create_ptp_domain_args&);
  switch_sai_rpc_sai_thrift_create_ptp_domain_args& operator=(const switch_sai_rpc_sai_thrift_create_ptp_domain_args&);
  switch_sai_rpc_sai_thrift_create_ptp_domain_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ptp_domain_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_ptp_domain_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ptp_domain_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ptp_domain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ptp_domain_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_ptp_domain_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_ptp_domain_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_ptp_domain_result__isset {
  _switch_sai_rpc_sai_thrift_create_ptp_domain_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ptp_domain_result__isset;

class switch_sai_rpc_sai_thrift_create_ptp_domain_result {
 public:

  switch_sai_rpc_sai_thrift_create_ptp_domain_result(const switch_sai_rpc_sai_thrift_create_ptp_domain_result&);
  switch_sai_rpc_sai_thrift_create_ptp_domain_result& operator=(const switch_sai_rpc_sai_thrift_create_ptp_domain_result&);
  switch_sai_rpc_sai_thrift_create_ptp_domain_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ptp_domain_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_ptp_domain_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ptp_domain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ptp_domain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ptp_domain_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_ptp_domain_presult__isset {
  _switch_sai_rpc_sai_thrift_create_ptp_domain_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ptp_domain_presult__isset;

class switch_sai_rpc_sai_thrift_create_ptp_domain_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_ptp_domain_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_ptp_domain_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ptp_domain_args__isset {
  _switch_sai_rpc_sai_thrift_remove_ptp_domain_args__isset() : ptp_oid(false) {}
  bool ptp_oid :1;
} _switch_sai_rpc_sai_thrift_remove_ptp_domain_args__isset;

class switch_sai_rpc_sai_thrift_remove_ptp_domain_args {
 public:

  switch_sai_rpc_sai_thrift_remove_ptp_domain_args(const switch_sai_rpc_sai_thrift_remove_ptp_domain_args&);
  switch_sai_rpc_sai_thrift_remove_ptp_domain_args& operator=(const switch_sai_rpc_sai_thrift_remove_ptp_domain_args&);
  switch_sai_rpc_sai_thrift_remove_ptp_domain_args() : ptp_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ptp_domain_args() noexcept;
  sai_thrift_object_id_t ptp_oid;

  _switch_sai_rpc_sai_thrift_remove_ptp_domain_args__isset __isset;

  void __set_ptp_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ptp_domain_args & rhs) const
  {
    if (!(ptp_oid == rhs.ptp_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ptp_domain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ptp_domain_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_ptp_domain_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_ptp_domain_pargs() noexcept;
  const sai_thrift_object_id_t* ptp_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ptp_domain_result__isset {
  _switch_sai_rpc_sai_thrift_remove_ptp_domain_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ptp_domain_result__isset;

class switch_sai_rpc_sai_thrift_remove_ptp_domain_result {
 public:

  switch_sai_rpc_sai_thrift_remove_ptp_domain_result(const switch_sai_rpc_sai_thrift_remove_ptp_domain_result&);
  switch_sai_rpc_sai_thrift_remove_ptp_domain_result& operator=(const switch_sai_rpc_sai_thrift_remove_ptp_domain_result&);
  switch_sai_rpc_sai_thrift_remove_ptp_domain_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ptp_domain_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_ptp_domain_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ptp_domain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ptp_domain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ptp_domain_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_ptp_domain_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_ptp_domain_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ptp_domain_presult__isset;

class switch_sai_rpc_sai_thrift_remove_ptp_domain_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_ptp_domain_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_ptp_domain_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args__isset() : ptp_oid(false), thrift_attr(false) {}
  bool ptp_oid :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args(const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args() : ptp_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args() noexcept;
  sai_thrift_object_id_t ptp_oid;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args__isset __isset;

  void __set_ptp_oid(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args & rhs) const
  {
    if (!(ptp_oid == rhs.ptp_oid))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* ptp_oid;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result(const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_ptp_domain_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args__isset() : ptp_oid(false) {}
  bool ptp_oid :1;
} _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args(const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args() : ptp_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args() noexcept;
  sai_thrift_object_id_t ptp_oid;

  _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args__isset __isset;

  void __set_ptp_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args & rhs) const
  {
    if (!(ptp_oid == rhs.ptp_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* ptp_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result(const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_ptp_domain_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_create_es_args__isset {
  _switch_sai_rpc_sai_thrift_create_es_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_es_args__isset;

class switch_sai_rpc_sai_thrift_create_es_args {
 public:

  switch_sai_rpc_sai_thrift_create_es_args(const switch_sai_rpc_sai_thrift_create_es_args&);
  switch_sai_rpc_sai_thrift_create_es_args& operator=(const switch_sai_rpc_sai_thrift_create_es_args&);
  switch_sai_rpc_sai_thrift_create_es_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_es_args() noexcept;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_es_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_es_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_es_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_es_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_create_es_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_es_pargs() noexcept;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_es_result__isset {
  _switch_sai_rpc_sai_thrift_create_es_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_es_result__isset;

class switch_sai_rpc_sai_thrift_create_es_result {
 public:

  switch_sai_rpc_sai_thrift_create_es_result(const switch_sai_rpc_sai_thrift_create_es_result&);
  switch_sai_rpc_sai_thrift_create_es_result& operator=(const switch_sai_rpc_sai_thrift_create_es_result&);
  switch_sai_rpc_sai_thrift_create_es_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_es_result() noexcept;
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_es_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_es_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_es_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_es_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_create_es_presult__isset {
  _switch_sai_rpc_sai_thrift_create_es_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_es_presult__isset;

class switch_sai_rpc_sai_thrift_create_es_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_create_es_presult() noexcept;
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_es_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_remove_es_args__isset {
  _switch_sai_rpc_sai_thrift_remove_es_args__isset() : es_oid(false) {}
  bool es_oid :1;
} _switch_sai_rpc_sai_thrift_remove_es_args__isset;

class switch_sai_rpc_sai_thrift_remove_es_args {
 public:

  switch_sai_rpc_sai_thrift_remove_es_args(const switch_sai_rpc_sai_thrift_remove_es_args&);
  switch_sai_rpc_sai_thrift_remove_es_args& operator=(const switch_sai_rpc_sai_thrift_remove_es_args&);
  switch_sai_rpc_sai_thrift_remove_es_args() : es_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_es_args() noexcept;
  sai_thrift_object_id_t es_oid;

  _switch_sai_rpc_sai_thrift_remove_es_args__isset __isset;

  void __set_es_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_es_args & rhs) const
  {
    if (!(es_oid == rhs.es_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_es_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_es_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_remove_es_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_es_pargs() noexcept;
  const sai_thrift_object_id_t* es_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_es_result__isset {
  _switch_sai_rpc_sai_thrift_remove_es_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_es_result__isset;

class switch_sai_rpc_sai_thrift_remove_es_result {
 public:

  switch_sai_rpc_sai_thrift_remove_es_result(const switch_sai_rpc_sai_thrift_remove_es_result&);
  switch_sai_rpc_sai_thrift_remove_es_result& operator=(const switch_sai_rpc_sai_thrift_remove_es_result&);
  switch_sai_rpc_sai_thrift_remove_es_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_es_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_es_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_es_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_es_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_es_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_remove_es_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_es_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_es_presult__isset;

class switch_sai_rpc_sai_thrift_remove_es_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_remove_es_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_es_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_set_es_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_es_attribute_args__isset() : es_oid(false), thrift_attr(false) {}
  bool es_oid :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_es_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_es_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_set_es_attribute_args(const switch_sai_rpc_sai_thrift_set_es_attribute_args&);
  switch_sai_rpc_sai_thrift_set_es_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_es_attribute_args&);
  switch_sai_rpc_sai_thrift_set_es_attribute_args() : es_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_es_attribute_args() noexcept;
  sai_thrift_object_id_t es_oid;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_es_attribute_args__isset __isset;

  void __set_es_oid(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_es_attribute_args & rhs) const
  {
    if (!(es_oid == rhs.es_oid))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_es_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_es_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_set_es_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_es_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* es_oid;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_es_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_es_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_es_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_es_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_set_es_attribute_result(const switch_sai_rpc_sai_thrift_set_es_attribute_result&);
  switch_sai_rpc_sai_thrift_set_es_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_es_attribute_result&);
  switch_sai_rpc_sai_thrift_set_es_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_es_attribute_result() noexcept;
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_es_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_es_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_es_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_es_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_set_es_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_es_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_es_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_es_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_set_es_attribute_presult() noexcept;
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_es_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _switch_sai_rpc_sai_thrift_get_es_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_es_attribute_args__isset() : es_oid(false) {}
  bool es_oid :1;
} _switch_sai_rpc_sai_thrift_get_es_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_es_attribute_args {
 public:

  switch_sai_rpc_sai_thrift_get_es_attribute_args(const switch_sai_rpc_sai_thrift_get_es_attribute_args&);
  switch_sai_rpc_sai_thrift_get_es_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_es_attribute_args&);
  switch_sai_rpc_sai_thrift_get_es_attribute_args() : es_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_es_attribute_args() noexcept;
  sai_thrift_object_id_t es_oid;

  _switch_sai_rpc_sai_thrift_get_es_attribute_args__isset __isset;

  void __set_es_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_es_attribute_args & rhs) const
  {
    if (!(es_oid == rhs.es_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_es_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_es_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class switch_sai_rpc_sai_thrift_get_es_attribute_pargs {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_es_attribute_pargs() noexcept;
  const sai_thrift_object_id_t* es_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_es_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_es_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_es_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_es_attribute_result {
 public:

  switch_sai_rpc_sai_thrift_get_es_attribute_result(const switch_sai_rpc_sai_thrift_get_es_attribute_result&);
  switch_sai_rpc_sai_thrift_get_es_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_es_attribute_result&);
  switch_sai_rpc_sai_thrift_get_es_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_es_attribute_result() noexcept;
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_es_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_es_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_es_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_es_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _switch_sai_rpc_sai_thrift_get_es_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_es_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_es_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_es_attribute_presult {
 public:


  virtual ~switch_sai_rpc_sai_thrift_get_es_attribute_presult() noexcept;
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_es_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class switch_sai_rpcClient : virtual public switch_sai_rpcIf {
 public:
  switch_sai_rpcClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  switch_sai_rpcClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  sai_thrift_status_t sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_port_attribute();
  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_id);
  void send_sai_thrift_get_port_attribute(const sai_thrift_object_id_t port_id);
  void recv_sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_port_stats(const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_port_stats(std::vector<int64_t> & _return);
  void sai_thrift_get_port_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  void send_sai_thrift_get_port_stats_ext(const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_port_stats_ext(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id);
  void send_sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id);
  sai_thrift_status_t recv_sai_thrift_clear_port_all_stats();
  sai_thrift_status_t sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_id, const int32_t number_of_counters, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids);
  void send_sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_id, const int32_t number_of_counters, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids);
  sai_thrift_status_t recv_sai_thrift_clear_port_stats();
  sai_thrift_status_t sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_fdb_entry();
  sai_thrift_status_t sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  void send_sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  sai_thrift_status_t recv_sai_thrift_delete_fdb_entry();
  sai_thrift_status_t sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_flush_fdb_entries();
  sai_thrift_status_t sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_fdb_entry_attribute();
  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  void send_sai_thrift_get_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  void recv_sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan();
  sai_thrift_status_t sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  void send_sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  sai_thrift_status_t recv_sai_thrift_remove_vlan();
  void sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_vlan_stats(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_vlan_stats(std::vector<int64_t> & _return);
  void sai_thrift_get_vlan_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  void send_sai_thrift_get_vlan_stats_ext(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_vlan_stats_ext(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_vlan_stats();
  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan_member();
  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_id);
  void send_sai_thrift_get_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id);
  void recv_sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id);
  void send_sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id);
  sai_thrift_status_t recv_sai_thrift_remove_vlan_member();
  sai_thrift_status_t sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_vlan_attribute();
  sai_thrift_status_t sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_vlan_member_attribute();
  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_id);
  void send_sai_thrift_get_vlan_attribute(const sai_thrift_object_id_t vlan_id);
  void recv_sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_vlan_id(sai_thrift_result_t& _return, const sai_thrift_object_id_t vlan_id);
  void send_sai_thrift_get_vlan_id(const sai_thrift_object_id_t vlan_id);
  void recv_sai_thrift_get_vlan_id(sai_thrift_result_t& _return);
  void sai_thrift_create_vlan_members(sai_thrift_results_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  void send_sai_thrift_create_vlan_members(const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  void recv_sai_thrift_create_vlan_members(sai_thrift_results_t& _return);
  void sai_thrift_remove_vlan_members(sai_thrift_status_list_t& _return, const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode);
  void send_sai_thrift_remove_vlan_members(const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode);
  void recv_sai_thrift_remove_vlan_members(sai_thrift_status_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_virtual_router();
  sai_thrift_status_t sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id);
  void send_sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id);
  sai_thrift_status_t recv_sai_thrift_remove_virtual_router();
  sai_thrift_status_t sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_virtual_router_attribute();
  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vr_id);
  void send_sai_thrift_get_virtual_router_attribute(const sai_thrift_object_id_t vr_id);
  void recv_sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_route();
  sai_thrift_status_t sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry);
  void send_sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry);
  sai_thrift_status_t recv_sai_thrift_remove_route();
  sai_thrift_status_t sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_route_attribute();
  void sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& thrift_route_entry);
  void send_sai_thrift_get_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry);
  void recv_sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  void send_sai_thrift_create_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  sai_thrift_status_t recv_sai_thrift_create_routes();
  sai_thrift_status_t sai_thrift_remove_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode);
  void send_sai_thrift_remove_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode);
  sai_thrift_status_t recv_sai_thrift_remove_routes();
  sai_thrift_status_t sai_thrift_set_routes_attribute(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const int8_t mode);
  void send_sai_thrift_set_routes_attribute(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const int8_t mode);
  sai_thrift_status_t recv_sai_thrift_set_routes_attribute();
  void sai_thrift_get_routes_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode);
  void send_sai_thrift_get_routes_attribute(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode);
  void recv_sai_thrift_get_routes_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_router_interface();
  sai_thrift_status_t sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id);
  void send_sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id);
  sai_thrift_status_t recv_sai_thrift_remove_router_interface();
  sai_thrift_status_t sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_router_interface_attribute();
  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rif_id);
  void send_sai_thrift_get_router_interface_attribute(const sai_thrift_object_id_t rif_id);
  void recv_sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_router_interface_get_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_router_interface_get_stats(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_router_interface_get_stats(std::vector<int64_t> & _return);
  void sai_thrift_router_interface_get_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  void send_sai_thrift_router_interface_get_stats_ext(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_router_interface_get_stats_ext(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_router_interface_clear_stats(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_router_interface_clear_stats(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_router_interface_clear_stats();
  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop();
  sai_thrift_status_t sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id);
  void send_sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id);
  sai_thrift_status_t recv_sai_thrift_remove_next_hop();
  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_id);
  void send_sai_thrift_get_next_hop_attribute(const sai_thrift_object_id_t next_hop_id);
  void recv_sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group();
  sai_thrift_status_t sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid);
  void send_sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid);
  sai_thrift_status_t recv_sai_thrift_remove_next_hop_group();
  sai_thrift_status_t sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_next_hop_group_attribute();
  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_oid);
  void send_sai_thrift_get_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid);
  void recv_sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group_member();
  sai_thrift_status_t sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid);
  void send_sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid);
  sai_thrift_status_t recv_sai_thrift_remove_next_hop_group_member();
  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_member_oid);
  void send_sai_thrift_get_next_hop_group_member_attribute(const sai_thrift_object_id_t nhop_group_member_oid);
  void recv_sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag();
  sai_thrift_status_t sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id);
  void send_sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id);
  sai_thrift_status_t recv_sai_thrift_remove_lag();
  sai_thrift_status_t sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_lag_attribute();
  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_id);
  void send_sai_thrift_get_lag_attribute(const sai_thrift_object_id_t lag_id);
  void recv_sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag_member();
  sai_thrift_status_t sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id);
  void send_sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id);
  sai_thrift_status_t recv_sai_thrift_remove_lag_member();
  sai_thrift_status_t sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_lag_member_attribute();
  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_id);
  void send_sai_thrift_get_lag_member_attribute(const sai_thrift_object_id_t lag_member_id);
  void recv_sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_stp_entry();
  sai_thrift_status_t sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id);
  void send_sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id);
  sai_thrift_status_t recv_sai_thrift_remove_stp_entry();
  void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_id);
  void send_sai_thrift_get_stp_attribute(const sai_thrift_object_id_t stp_id);
  void recv_sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_stp_port();
  sai_thrift_status_t sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_id);
  void send_sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_id);
  sai_thrift_status_t recv_sai_thrift_remove_stp_port();
  void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_port_id);
  void send_sai_thrift_get_stp_port_attribute(const sai_thrift_object_id_t stp_port_id);
  void recv_sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state);
  void send_sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state);
  sai_thrift_status_t recv_sai_thrift_set_stp_port_state();
  sai_thrift_port_stp_port_state_t sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id);
  void send_sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id);
  sai_thrift_port_stp_port_state_t recv_sai_thrift_get_stp_port_state();
  void sai_thrift_create_stp_ports(sai_thrift_results_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  void send_sai_thrift_create_stp_ports(const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  void recv_sai_thrift_create_stp_ports(sai_thrift_results_t& _return);
  void sai_thrift_remove_stp_ports(sai_thrift_status_list_t& _return, const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode);
  void send_sai_thrift_remove_stp_ports(const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode);
  void recv_sai_thrift_remove_stp_ports(sai_thrift_status_list_t& _return);
  sai_thrift_status_t sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_neighbor_entry();
  sai_thrift_status_t sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  void send_sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  sai_thrift_status_t recv_sai_thrift_remove_neighbor_entry();
  sai_thrift_status_t sai_thrift_remove_all_neighbor_entry();
  void send_sai_thrift_remove_all_neighbor_entry();
  sai_thrift_status_t recv_sai_thrift_remove_all_neighbor_entry();
  sai_thrift_status_t sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_neighbor_entry_attribute();
  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  void send_sai_thrift_get_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  void recv_sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_switch_attribute(const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return);
  void send_sai_thrift_get_port_list_by_front_port();
  void recv_sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return);
  sai_thrift_object_id_t sai_thrift_get_cpu_port_id();
  void send_sai_thrift_get_cpu_port_id();
  sai_thrift_object_id_t recv_sai_thrift_get_cpu_port_id();
  sai_thrift_object_id_t sai_thrift_get_default_trap_group();
  void send_sai_thrift_get_default_trap_group();
  sai_thrift_object_id_t recv_sai_thrift_get_default_trap_group();
  sai_thrift_object_id_t sai_thrift_get_default_router_id();
  void send_sai_thrift_get_default_router_id();
  sai_thrift_object_id_t recv_sai_thrift_get_default_router_id();
  sai_thrift_object_id_t sai_thrift_get_default_1q_bridge_id();
  void send_sai_thrift_get_default_1q_bridge_id();
  sai_thrift_object_id_t recv_sai_thrift_get_default_1q_bridge_id();
  void sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return);
  void send_sai_thrift_get_default_vlan_id();
  void recv_sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return);
  sai_thrift_object_id_t sai_thrift_get_port_id_by_front_port(const std::string& port_name);
  void send_sai_thrift_get_port_id_by_front_port(const std::string& port_name);
  sai_thrift_object_id_t recv_sai_thrift_get_port_id_by_front_port();
  sai_thrift_status_t sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute);
  void send_sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute);
  sai_thrift_status_t recv_sai_thrift_set_switch_attribute();
  sai_thrift_object_id_t sai_thrift_create_switch();
  void send_sai_thrift_create_switch();
  sai_thrift_object_id_t recv_sai_thrift_create_switch();
  sai_thrift_status_t sai_thrift_remove_switch();
  void send_sai_thrift_remove_switch();
  sai_thrift_status_t recv_sai_thrift_remove_switch();
  void sai_thrift_get_switch_stats(std::vector<int64_t> & _return, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_switch_stats(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_switch_stats(std::vector<int64_t> & _return);
  void sai_thrift_get_switch_stats_ext(std::vector<int64_t> & _return, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  void send_sai_thrift_get_switch_stats_ext(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_switch_stats_ext(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_switch_stats(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_clear_switch_stats(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_switch_stats();
  void sai_thrift_create_bridge_port(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void recv_sai_thrift_create_bridge_port(sai_thrift_result_t& _return);
  sai_thrift_status_t sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id);
  void send_sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id);
  sai_thrift_status_t recv_sai_thrift_remove_bridge_port();
  void sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return, const sai_thrift_object_id_t bridge_id);
  void send_sai_thrift_get_bridge_port_list(const sai_thrift_object_id_t bridge_id);
  void recv_sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return);
  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_id);
  void send_sai_thrift_get_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id);
  void recv_sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_bridge_port_attribute();
  void sai_thrift_create_bridge(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void recv_sai_thrift_create_bridge(sai_thrift_result_t& _return);
  sai_thrift_status_t sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id);
  void send_sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id);
  sai_thrift_status_t recv_sai_thrift_remove_bridge();
  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_id);
  void send_sai_thrift_get_bridge_attribute(const sai_thrift_object_id_t bridge_id);
  void recv_sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_bridge_attribute();
  void sai_thrift_get_bridge_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_bridge_port_stats(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_bridge_port_stats(std::vector<int64_t> & _return);
  void sai_thrift_get_bridge_port_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  void send_sai_thrift_get_bridge_port_stats_ext(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_bridge_port_stats_ext(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_bridge_port_stats();
  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif();
  sai_thrift_status_t sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id);
  void send_sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif();
  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hif_id);
  void send_sai_thrift_get_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id);
  void recv_sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_attribute();
  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_table_entry();
  sai_thrift_status_t sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  void send_sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif_table_entry();
  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  void send_sai_thrift_get_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  void recv_sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_table_entry_attribute();
  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap_group();
  sai_thrift_status_t sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  void send_sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif_trap_group();
  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  void send_sai_thrift_get_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  void recv_sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_trap_group_attribute();
  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap();
  sai_thrift_status_t sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id);
  void send_sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif_trap();
  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_id);
  void send_sai_thrift_get_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id);
  void recv_sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_trap_attribute();
  sai_thrift_status_t sai_thrift_send_hostif_packet(const sai_thrift_object_id_t thrift_hif_id, const std::string& packet_data, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_send_hostif_packet(const sai_thrift_object_id_t thrift_hif_id, const std::string& packet_data, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_send_hostif_packet();
  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table();
  sai_thrift_status_t sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id);
  void send_sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_table();
  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_acl_table_attribute(const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_entry();
  sai_thrift_status_t sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry);
  void send_sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry);
  sai_thrift_status_t recv_sai_thrift_remove_acl_entry();
  sai_thrift_status_t sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_acl_entry_attribute();
  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group();
  sai_thrift_status_t sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id);
  void send_sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_table_group();
  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_id);
  void send_sai_thrift_get_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_id);
  void recv_sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group_member();
  sai_thrift_status_t sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id);
  void send_sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_table_group_member();
  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_id);
  void send_sai_thrift_get_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_id);
  void recv_sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_counter();
  sai_thrift_status_t sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id);
  void send_sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_counter();
  void sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return);
  sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_range();
  sai_thrift_status_t sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_id);
  void send_sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_range();
  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hash();
  sai_thrift_status_t sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id);
  void send_sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id);
  sai_thrift_status_t recv_sai_thrift_remove_hash();
  sai_thrift_status_t sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hash_attribute();
  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hash_id);
  void send_sai_thrift_get_hash_attribute(const sai_thrift_object_id_t thrift_hash_id);
  void recv_sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_group();
  sai_thrift_status_t sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id);
  void send_sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_udf_group();
  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_group_id);
  void send_sai_thrift_get_udf_group_attribute(const sai_thrift_object_id_t thrift_udf_group_id);
  void recv_sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_match();
  sai_thrift_status_t sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id);
  void send_sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id);
  sai_thrift_status_t recv_sai_thrift_remove_udf_match();
  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_match_id);
  void send_sai_thrift_get_udf_match_attribute(const sai_thrift_object_id_t thrift_udf_match_id);
  void recv_sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf();
  sai_thrift_status_t sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id);
  void send_sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id);
  sai_thrift_status_t recv_sai_thrift_remove_udf();
  sai_thrift_status_t sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_udf_attribute();
  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_id);
  void send_sai_thrift_get_udf_attribute(const sai_thrift_object_id_t thrift_udf_id);
  void recv_sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_twamp_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_twamp_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_twamp_session();
  sai_thrift_status_t sai_thrift_remove_twamp_session(const sai_thrift_object_id_t session_id);
  void send_sai_thrift_remove_twamp_session(const sai_thrift_object_id_t session_id);
  sai_thrift_status_t recv_sai_thrift_remove_twamp_session();
  sai_thrift_status_t sai_thrift_set_twamp_attribute(const sai_thrift_object_id_t thrift_twamp_session_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_twamp_attribute(const sai_thrift_object_id_t thrift_twamp_session_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_twamp_attribute();
  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_mirror_session();
  sai_thrift_status_t sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id);
  void send_sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id);
  sai_thrift_status_t recv_sai_thrift_remove_mirror_session();
  sai_thrift_status_t sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_mirror_attribute();
  void sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_mirror_id);
  void send_sai_thrift_get_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id);
  void recv_sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_inseg_entry();
  sai_thrift_status_t sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  void send_sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  sai_thrift_status_t recv_sai_thrift_remove_inseg_entry();
  sai_thrift_status_t sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_inseg_entry_attribute();
  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  void send_sai_thrift_get_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  void recv_sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_dump_log(const std::string& dump_file_name);
  void send_sai_thrift_dump_log(const std::string& dump_file_name);
  sai_thrift_status_t recv_sai_thrift_dump_log();
  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_policer();
  sai_thrift_status_t sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id);
  void send_sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id);
  sai_thrift_status_t recv_sai_thrift_remove_policer();
  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_policer_id);
  void send_sai_thrift_get_policer_attribute(const sai_thrift_object_id_t thrift_policer_id);
  void recv_sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_policer_attribute();
  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  void send_sai_thrift_get_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  void recv_sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  void send_sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  sai_thrift_status_t recv_sai_thrift_clear_policer_stats();
  sai_thrift_object_id_t sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler_profile();
  sai_thrift_status_t sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id);
  void send_sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id);
  sai_thrift_status_t recv_sai_thrift_remove_scheduler_profile();
  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_scheduler_id);
  void send_sai_thrift_get_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id);
  void recv_sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_scheduler_attribute();
  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler_group();
  sai_thrift_status_t sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id);
  void send_sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_scheduler_group();
  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_id);
  void send_sai_thrift_get_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id);
  void recv_sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_scheduler_group_attribute();
  void sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_queue_stats(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_queue_stats();
  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_queue();
  sai_thrift_status_t sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id);
  void send_sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id);
  sai_thrift_status_t recv_sai_thrift_remove_queue();
  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_id);
  void send_sai_thrift_get_queue_attribute(const sai_thrift_object_id_t queue_id);
  void recv_sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_queue_attribute();
  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_buffer_profile();
  sai_thrift_status_t sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id);
  void send_sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id);
  sai_thrift_status_t recv_sai_thrift_remove_buffer_profile();
  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_id);
  void send_sai_thrift_get_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id);
  void recv_sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_buffer_profile_attribute();
  sai_thrift_object_id_t sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_pool_profile();
  sai_thrift_object_id_t sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_priority_group();
  sai_thrift_status_t sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id);
  void send_sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_priority_group();
  void sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t priority_group_id);
  void send_sai_thrift_get_priority_group_attribute(const sai_thrift_object_id_t priority_group_id);
  void recv_sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_priority_group_attribute();
  void sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_pg_stats(const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_pg_stats(std::vector<int64_t> & _return);
  sai_thrift_object_id_t sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_wred_profile();
  sai_thrift_status_t sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id);
  void send_sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id);
  sai_thrift_status_t recv_sai_thrift_remove_wred_profile();
  void sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_id);
  void send_sai_thrift_get_wred_attribute_profile(const sai_thrift_object_id_t wred_id);
  void recv_sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_wred_attribute_profile();
  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_qos_map();
  sai_thrift_status_t sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id);
  void send_sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id);
  sai_thrift_status_t recv_sai_thrift_remove_qos_map();
  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_id);
  void send_sai_thrift_get_qos_map_attribute(const sai_thrift_object_id_t qos_map_id);
  void recv_sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_qos_map_attribute();
  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group();
  sai_thrift_status_t sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id);
  sai_thrift_status_t recv_sai_thrift_remove_l2mc_group();
  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_get_l2mc_group_attribute(const sai_thrift_object_id_t grp_id);
  void recv_sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group_member();
  sai_thrift_status_t sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id);
  void send_sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id);
  sai_thrift_status_t recv_sai_thrift_remove_l2mc_group_member();
  sai_thrift_status_t sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_l2mc_group_member_attribute();
  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id);
  void send_sai_thrift_get_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id);
  void recv_sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_l2mc_entry();
  sai_thrift_status_t sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  void send_sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  sai_thrift_status_t recv_sai_thrift_remove_l2mc_entry();
  sai_thrift_status_t sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_l2mc_entry_attribute();
  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  void send_sai_thrift_get_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  void recv_sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_mcast_fdb_entry();
  sai_thrift_status_t sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  void send_sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  sai_thrift_status_t recv_sai_thrift_remove_mcast_fdb_entry();
  sai_thrift_status_t sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_mcast_fdb_entry_attribute();
  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  void send_sai_thrift_get_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  void recv_sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group();
  sai_thrift_status_t sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id);
  sai_thrift_status_t recv_sai_thrift_remove_ipmc_group();
  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_get_ipmc_group_attribute(const sai_thrift_object_id_t grp_id);
  void recv_sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group_member();
  sai_thrift_status_t sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id);
  void send_sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id);
  sai_thrift_status_t recv_sai_thrift_remove_ipmc_group_member();
  sai_thrift_status_t sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_ipmc_group_member_attribute();
  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id);
  void send_sai_thrift_get_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id);
  void recv_sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group();
  sai_thrift_status_t sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id);
  sai_thrift_status_t recv_sai_thrift_remove_rpf_group();
  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_get_rpf_group_attribute(const sai_thrift_object_id_t grp_id);
  void recv_sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group_member();
  sai_thrift_status_t sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id);
  void send_sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id);
  sai_thrift_status_t recv_sai_thrift_remove_rpf_group_member();
  sai_thrift_status_t sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_rpf_group_member_attribute();
  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id);
  void send_sai_thrift_get_rpf_group_member_attribute(const sai_thrift_object_id_t member_id);
  void recv_sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_ipmc_entry();
  sai_thrift_status_t sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  void send_sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  sai_thrift_status_t recv_sai_thrift_remove_ipmc_entry();
  sai_thrift_status_t sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_ipmc_entry_attribute();
  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  void send_sai_thrift_get_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  void recv_sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_samplepacket();
  sai_thrift_status_t sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id);
  void send_sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id);
  sai_thrift_status_t recv_sai_thrift_remove_samplepacket();
  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_id);
  void send_sai_thrift_get_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id);
  void recv_sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_samplepacket_attribute();
  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map_entry();
  sai_thrift_status_t sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id);
  void send_sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel_map_entry();
  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_id);
  void send_sai_thrift_get_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id);
  void recv_sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_map_entry_attribute();
  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map();
  sai_thrift_status_t sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id);
  void send_sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel_map();
  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_id);
  void send_sai_thrift_get_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id);
  void recv_sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_map_attribute();
  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel();
  sai_thrift_status_t sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id);
  void send_sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel();
  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_attribute();
  void sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_tunnel_stats();
  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_term_table_entry();
  sai_thrift_status_t sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id);
  void send_sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel_term_table_entry();
  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_term_table_entry_attribute();
  void sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_id);
  void send_sai_thrift_get_cpu_packet_attribute(const sai_thrift_object_id_t switch_id);
  void recv_sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return);
  void send_sai_thrift_get_cpu_packet_count();
  void recv_sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return);
  void sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return);
  void send_sai_thrift_clear_cpu_packet_info();
  void recv_sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return);
  sai_thrift_status_t sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level);
  void send_sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level);
  sai_thrift_status_t recv_sai_thrift_log_set();
  sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_isolation_group();
  sai_thrift_status_t sai_thrift_remove_isolation_group(const sai_thrift_object_id_t iso_group_oid);
  void send_sai_thrift_remove_isolation_group(const sai_thrift_object_id_t iso_group_oid);
  sai_thrift_status_t recv_sai_thrift_remove_isolation_group();
  sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_isolation_group_member();
  sai_thrift_status_t sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t member_oid);
  void send_sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t member_oid);
  sai_thrift_status_t recv_sai_thrift_remove_isolation_group_member();
  void sai_thrift_get_isolation_group_attributes(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t iso_group_oid);
  void send_sai_thrift_get_isolation_group_attributes(const sai_thrift_object_id_t iso_group_oid);
  void recv_sai_thrift_get_isolation_group_attributes(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_isolation_group_member_attributes(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_oid);
  void send_sai_thrift_get_isolation_group_member_attributes(const sai_thrift_object_id_t member_oid);
  void recv_sai_thrift_get_isolation_group_member_attributes(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_counter();
  sai_thrift_status_t sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid);
  void send_sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid);
  sai_thrift_status_t recv_sai_thrift_remove_counter();
  sai_thrift_status_t sai_thrift_set_counter_attribute(const sai_thrift_object_id_t thrift_counter_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_counter_attribute(const sai_thrift_object_id_t thrift_counter_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_counter_attribute();
  void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_counter_id);
  void send_sai_thrift_get_counter_attribute(const sai_thrift_object_id_t thrift_counter_id);
  void recv_sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_counter_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_counter_stats(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_counter_stats(std::vector<int64_t> & _return);
  void sai_thrift_get_counter_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  void send_sai_thrift_get_counter_stats_ext(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_counter_stats_ext(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & thrift_counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & thrift_counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_counter_stats();
  sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_debug_counter();
  sai_thrift_status_t sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid);
  void send_sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid);
  sai_thrift_status_t recv_sai_thrift_remove_debug_counter();
  sai_thrift_status_t sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t thrift_debug_counter_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t thrift_debug_counter_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_debug_counter_attribute();
  void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_debug_counter_id);
  void send_sai_thrift_get_debug_counter_attribute(const sai_thrift_object_id_t thrift_debug_counter_id);
  void recv_sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_nat(const sai_thrift_nat_entry_t& thrift_nat_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_nat(const sai_thrift_nat_entry_t& thrift_nat_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_nat();
  sai_thrift_status_t sai_thrift_remove_nat(const sai_thrift_nat_entry_t& thrift_nat_entry);
  void send_sai_thrift_remove_nat(const sai_thrift_nat_entry_t& thrift_nat_entry);
  sai_thrift_status_t recv_sai_thrift_remove_nat();
  sai_thrift_status_t sai_thrift_set_nat_attribute(const sai_thrift_nat_entry_t& thrift_nat_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_nat_attribute(const sai_thrift_nat_entry_t& thrift_nat_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_nat_attribute();
  void sai_thrift_get_nat_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_nat_entry_t& thrift_nat_entry);
  void send_sai_thrift_get_nat_attribute(const sai_thrift_nat_entry_t& thrift_nat_entry);
  void recv_sai_thrift_get_nat_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_bfd(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_bfd(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_bfd();
  sai_thrift_status_t sai_thrift_remove_bfd(const sai_thrift_object_id_t bfd_oid);
  void send_sai_thrift_remove_bfd(const sai_thrift_object_id_t bfd_oid);
  sai_thrift_status_t recv_sai_thrift_remove_bfd();
  sai_thrift_status_t sai_thrift_set_bfd_attribute(const sai_thrift_object_id_t bfd_oid, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_bfd_attribute(const sai_thrift_object_id_t bfd_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_bfd_attribute();
  void sai_thrift_get_bfd_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bfd_oid);
  void send_sai_thrift_get_bfd_attribute(const sai_thrift_object_id_t bfd_oid);
  void recv_sai_thrift_get_bfd_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_y1731_meg(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_y1731_meg(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_y1731_meg();
  sai_thrift_status_t sai_thrift_remove_y1731_meg(const sai_thrift_object_id_t y1731_meg_oid);
  void send_sai_thrift_remove_y1731_meg(const sai_thrift_object_id_t y1731_meg_oid);
  sai_thrift_status_t recv_sai_thrift_remove_y1731_meg();
  sai_thrift_status_t sai_thrift_set_y1731_meg_attribute(const sai_thrift_object_id_t y1731_meg_oid, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_y1731_meg_attribute(const sai_thrift_object_id_t y1731_meg_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_y1731_meg_attribute();
  void sai_thrift_get_y1731_meg_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_meg_oid);
  void send_sai_thrift_get_y1731_meg_attribute(const sai_thrift_object_id_t y1731_meg_oid);
  void recv_sai_thrift_get_y1731_meg_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_y1731_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_y1731_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_y1731_session();
  sai_thrift_status_t sai_thrift_remove_y1731_session(const sai_thrift_object_id_t y1731_session_oid);
  void send_sai_thrift_remove_y1731_session(const sai_thrift_object_id_t y1731_session_oid);
  sai_thrift_status_t recv_sai_thrift_remove_y1731_session();
  sai_thrift_status_t sai_thrift_set_y1731_session_attribute(const sai_thrift_object_id_t y1731_session_oid, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_y1731_session_attribute(const sai_thrift_object_id_t y1731_session_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_y1731_session_attribute();
  void sai_thrift_get_y1731_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_session_oid);
  void send_sai_thrift_get_y1731_session_attribute(const sai_thrift_object_id_t y1731_session_oid);
  void recv_sai_thrift_get_y1731_session_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_y1731_rmep(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_y1731_rmep(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_y1731_rmep();
  sai_thrift_status_t sai_thrift_remove_y1731_rmep(const sai_thrift_object_id_t y1731_rmep_oid);
  void send_sai_thrift_remove_y1731_rmep(const sai_thrift_object_id_t y1731_rmep_oid);
  sai_thrift_status_t recv_sai_thrift_remove_y1731_rmep();
  sai_thrift_status_t sai_thrift_set_y1731_rmep_attribute(const sai_thrift_object_id_t y1731_rmep_oid, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_y1731_rmep_attribute(const sai_thrift_object_id_t y1731_rmep_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_y1731_rmep_attribute();
  void sai_thrift_get_y1731_rmep_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_rmep_oid);
  void send_sai_thrift_get_y1731_rmep_attribute(const sai_thrift_object_id_t y1731_rmep_oid);
  void recv_sai_thrift_get_y1731_rmep_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_y1731_session_lm_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t y1731_session_oid, const std::vector<sai_thrift_stat_id_t> & lm_stats_ids, const int32_t number_of_stats);
  void send_sai_thrift_get_y1731_session_lm_stats(const sai_thrift_object_id_t y1731_session_oid, const std::vector<sai_thrift_stat_id_t> & lm_stats_ids, const int32_t number_of_stats);
  void recv_sai_thrift_get_y1731_session_lm_stats(std::vector<int64_t> & _return);
  sai_thrift_object_id_t sai_thrift_create_port(const std::string& port_name, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_port(const std::string& port_name, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port();
  sai_thrift_status_t sai_thrift_remove_port(const sai_thrift_object_id_t port_oid);
  void send_sai_thrift_remove_port(const sai_thrift_object_id_t port_oid);
  sai_thrift_status_t recv_sai_thrift_remove_port();
  sai_thrift_object_id_t sai_thrift_create_ptp_domain(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_ptp_domain(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ptp_domain();
  sai_thrift_status_t sai_thrift_remove_ptp_domain(const sai_thrift_object_id_t ptp_oid);
  void send_sai_thrift_remove_ptp_domain(const sai_thrift_object_id_t ptp_oid);
  sai_thrift_status_t recv_sai_thrift_remove_ptp_domain();
  sai_thrift_status_t sai_thrift_set_ptp_domain_attribute(const sai_thrift_object_id_t ptp_oid, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_ptp_domain_attribute(const sai_thrift_object_id_t ptp_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_ptp_domain_attribute();
  void sai_thrift_get_ptp_domain_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ptp_oid);
  void send_sai_thrift_get_ptp_domain_attribute(const sai_thrift_object_id_t ptp_oid);
  void recv_sai_thrift_get_ptp_domain_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_es(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_es(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_es();
  sai_thrift_status_t sai_thrift_remove_es(const sai_thrift_object_id_t es_oid);
  void send_sai_thrift_remove_es(const sai_thrift_object_id_t es_oid);
  sai_thrift_status_t recv_sai_thrift_remove_es();
  sai_thrift_status_t sai_thrift_set_es_attribute(const sai_thrift_object_id_t es_oid, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_es_attribute(const sai_thrift_object_id_t es_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_es_attribute();
  void sai_thrift_get_es_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t es_oid);
  void send_sai_thrift_get_es_attribute(const sai_thrift_object_id_t es_oid);
  void recv_sai_thrift_get_es_attribute(sai_thrift_attribute_list_t& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class switch_sai_rpcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<switch_sai_rpcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (switch_sai_rpcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sai_thrift_set_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_port_all_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_delete_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_flush_fdb_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_vlan_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_vlan_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_vlan_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_vlan_members(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_vlan_members(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_virtual_router_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_virtual_router_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_route(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_route(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_route_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_route_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_routes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_routes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_routes_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_routes_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_router_interface_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_router_interface_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_router_interface_get_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_router_interface_get_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_router_interface_clear_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_next_hop_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_lag_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_lag_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_lag_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_lag_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_stp_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_stp_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_stp_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_stp_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_stp_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_stp_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_stp_port_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_stp_port_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_stp_ports(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_stp_ports(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_all_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_list_by_front_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_cpu_port_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_default_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_default_router_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_default_1q_bridge_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_default_vlan_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_id_by_front_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_switch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_switch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_switch_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_switch_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_switch_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_port_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_bridge_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_bridge_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_port_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_bridge_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_trap_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_trap_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_send_hostif_packet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_acl_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_table_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_table_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hash_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hash_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_udf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_udf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_udf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_udf_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_udf_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_udf_match_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_udf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_udf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_udf_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_udf_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_twamp_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_twamp_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_twamp_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_mirror_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_mirror_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_dump_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_policer_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_policer_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_policer_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_policer_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_scheduler_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_scheduler_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_scheduler_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_scheduler_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_scheduler_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_scheduler_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_scheduler_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_scheduler_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_queue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_queue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_queue_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_queue_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_buffer_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_buffer_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_buffer_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_buffer_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_pool_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_priority_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_priority_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_priority_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_priority_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_pg_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_wred_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_wred_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_wred_attribute_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_wred_attribute_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_qos_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_qos_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_l2mc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_l2mc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_l2mc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_l2mc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_l2mc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_l2mc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_l2mc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_l2mc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_l2mc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_l2mc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_l2mc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_mcast_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_mcast_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_mcast_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_mcast_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipmc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipmc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipmc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipmc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipmc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipmc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipmc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_rpf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_rpf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_rpf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_rpf_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_rpf_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_rpf_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_rpf_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipmc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipmc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipmc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipmc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_samplepacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_samplepacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_samplepacket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_samplepacket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_tunnel_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel_term_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel_term_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_term_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_term_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_cpu_packet_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_cpu_packet_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_cpu_packet_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_log_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_isolation_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_isolation_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_isolation_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_isolation_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_isolation_group_attributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_isolation_group_member_attributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_counter_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_counter_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_counter_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_debug_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_debug_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_debug_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_debug_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_nat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_nat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_nat_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_nat_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_bfd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_bfd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_bfd_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bfd_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_y1731_meg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_y1731_meg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_y1731_meg_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_y1731_meg_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_y1731_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_y1731_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_y1731_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_y1731_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_y1731_rmep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_y1731_rmep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_y1731_rmep_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_y1731_rmep_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_y1731_session_lm_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ptp_domain(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ptp_domain(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ptp_domain_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ptp_domain_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_es(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_es(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_es_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_es_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  switch_sai_rpcProcessor(::std::shared_ptr<switch_sai_rpcIf> iface) :
    iface_(iface) {
    processMap_["sai_thrift_set_port_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_port_attribute;
    processMap_["sai_thrift_get_port_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_port_attribute;
    processMap_["sai_thrift_get_port_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_port_stats;
    processMap_["sai_thrift_get_port_stats_ext"] = &switch_sai_rpcProcessor::process_sai_thrift_get_port_stats_ext;
    processMap_["sai_thrift_clear_port_all_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_port_all_stats;
    processMap_["sai_thrift_clear_port_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_port_stats;
    processMap_["sai_thrift_create_fdb_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_fdb_entry;
    processMap_["sai_thrift_delete_fdb_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_delete_fdb_entry;
    processMap_["sai_thrift_flush_fdb_entries"] = &switch_sai_rpcProcessor::process_sai_thrift_flush_fdb_entries;
    processMap_["sai_thrift_set_fdb_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_fdb_entry_attribute;
    processMap_["sai_thrift_get_fdb_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_fdb_entry_attribute;
    processMap_["sai_thrift_create_vlan"] = &switch_sai_rpcProcessor::process_sai_thrift_create_vlan;
    processMap_["sai_thrift_remove_vlan"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_vlan;
    processMap_["sai_thrift_get_vlan_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_vlan_stats;
    processMap_["sai_thrift_get_vlan_stats_ext"] = &switch_sai_rpcProcessor::process_sai_thrift_get_vlan_stats_ext;
    processMap_["sai_thrift_clear_vlan_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_vlan_stats;
    processMap_["sai_thrift_create_vlan_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_vlan_member;
    processMap_["sai_thrift_get_vlan_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_vlan_member_attribute;
    processMap_["sai_thrift_remove_vlan_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_vlan_member;
    processMap_["sai_thrift_set_vlan_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_vlan_attribute;
    processMap_["sai_thrift_set_vlan_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_vlan_member_attribute;
    processMap_["sai_thrift_get_vlan_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_vlan_attribute;
    processMap_["sai_thrift_get_vlan_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_vlan_id;
    processMap_["sai_thrift_create_vlan_members"] = &switch_sai_rpcProcessor::process_sai_thrift_create_vlan_members;
    processMap_["sai_thrift_remove_vlan_members"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_vlan_members;
    processMap_["sai_thrift_create_virtual_router"] = &switch_sai_rpcProcessor::process_sai_thrift_create_virtual_router;
    processMap_["sai_thrift_remove_virtual_router"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_virtual_router;
    processMap_["sai_thrift_set_virtual_router_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_virtual_router_attribute;
    processMap_["sai_thrift_get_virtual_router_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_virtual_router_attribute;
    processMap_["sai_thrift_create_route"] = &switch_sai_rpcProcessor::process_sai_thrift_create_route;
    processMap_["sai_thrift_remove_route"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_route;
    processMap_["sai_thrift_set_route_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_route_attribute;
    processMap_["sai_thrift_get_route_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_route_attribute;
    processMap_["sai_thrift_create_routes"] = &switch_sai_rpcProcessor::process_sai_thrift_create_routes;
    processMap_["sai_thrift_remove_routes"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_routes;
    processMap_["sai_thrift_set_routes_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_routes_attribute;
    processMap_["sai_thrift_get_routes_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_routes_attribute;
    processMap_["sai_thrift_create_router_interface"] = &switch_sai_rpcProcessor::process_sai_thrift_create_router_interface;
    processMap_["sai_thrift_remove_router_interface"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_router_interface;
    processMap_["sai_thrift_set_router_interface_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_router_interface_attribute;
    processMap_["sai_thrift_get_router_interface_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_router_interface_attribute;
    processMap_["sai_thrift_router_interface_get_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_router_interface_get_stats;
    processMap_["sai_thrift_router_interface_get_stats_ext"] = &switch_sai_rpcProcessor::process_sai_thrift_router_interface_get_stats_ext;
    processMap_["sai_thrift_router_interface_clear_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_router_interface_clear_stats;
    processMap_["sai_thrift_create_next_hop"] = &switch_sai_rpcProcessor::process_sai_thrift_create_next_hop;
    processMap_["sai_thrift_remove_next_hop"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop;
    processMap_["sai_thrift_get_next_hop_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_next_hop_attribute;
    processMap_["sai_thrift_create_next_hop_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_next_hop_group;
    processMap_["sai_thrift_remove_next_hop_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop_group;
    processMap_["sai_thrift_set_next_hop_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_next_hop_group_attribute;
    processMap_["sai_thrift_get_next_hop_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_next_hop_group_attribute;
    processMap_["sai_thrift_create_next_hop_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_next_hop_group_member;
    processMap_["sai_thrift_remove_next_hop_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop_group_member;
    processMap_["sai_thrift_get_next_hop_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_next_hop_group_member_attribute;
    processMap_["sai_thrift_create_lag"] = &switch_sai_rpcProcessor::process_sai_thrift_create_lag;
    processMap_["sai_thrift_remove_lag"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_lag;
    processMap_["sai_thrift_set_lag_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_lag_attribute;
    processMap_["sai_thrift_get_lag_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_lag_attribute;
    processMap_["sai_thrift_create_lag_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_lag_member;
    processMap_["sai_thrift_remove_lag_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_lag_member;
    processMap_["sai_thrift_set_lag_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_lag_member_attribute;
    processMap_["sai_thrift_get_lag_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_lag_member_attribute;
    processMap_["sai_thrift_create_stp_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_stp_entry;
    processMap_["sai_thrift_remove_stp_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_stp_entry;
    processMap_["sai_thrift_get_stp_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_stp_attribute;
    processMap_["sai_thrift_create_stp_port"] = &switch_sai_rpcProcessor::process_sai_thrift_create_stp_port;
    processMap_["sai_thrift_remove_stp_port"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_stp_port;
    processMap_["sai_thrift_get_stp_port_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_stp_port_attribute;
    processMap_["sai_thrift_set_stp_port_state"] = &switch_sai_rpcProcessor::process_sai_thrift_set_stp_port_state;
    processMap_["sai_thrift_get_stp_port_state"] = &switch_sai_rpcProcessor::process_sai_thrift_get_stp_port_state;
    processMap_["sai_thrift_create_stp_ports"] = &switch_sai_rpcProcessor::process_sai_thrift_create_stp_ports;
    processMap_["sai_thrift_remove_stp_ports"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_stp_ports;
    processMap_["sai_thrift_create_neighbor_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_neighbor_entry;
    processMap_["sai_thrift_remove_neighbor_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_neighbor_entry;
    processMap_["sai_thrift_remove_all_neighbor_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_all_neighbor_entry;
    processMap_["sai_thrift_set_neighbor_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_neighbor_entry_attribute;
    processMap_["sai_thrift_get_neighbor_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_neighbor_entry_attribute;
    processMap_["sai_thrift_get_switch_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_switch_attribute;
    processMap_["sai_thrift_get_port_list_by_front_port"] = &switch_sai_rpcProcessor::process_sai_thrift_get_port_list_by_front_port;
    processMap_["sai_thrift_get_cpu_port_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_cpu_port_id;
    processMap_["sai_thrift_get_default_trap_group"] = &switch_sai_rpcProcessor::process_sai_thrift_get_default_trap_group;
    processMap_["sai_thrift_get_default_router_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_default_router_id;
    processMap_["sai_thrift_get_default_1q_bridge_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_default_1q_bridge_id;
    processMap_["sai_thrift_get_default_vlan_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_default_vlan_id;
    processMap_["sai_thrift_get_port_id_by_front_port"] = &switch_sai_rpcProcessor::process_sai_thrift_get_port_id_by_front_port;
    processMap_["sai_thrift_set_switch_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_switch_attribute;
    processMap_["sai_thrift_create_switch"] = &switch_sai_rpcProcessor::process_sai_thrift_create_switch;
    processMap_["sai_thrift_remove_switch"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_switch;
    processMap_["sai_thrift_get_switch_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_switch_stats;
    processMap_["sai_thrift_get_switch_stats_ext"] = &switch_sai_rpcProcessor::process_sai_thrift_get_switch_stats_ext;
    processMap_["sai_thrift_clear_switch_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_switch_stats;
    processMap_["sai_thrift_create_bridge_port"] = &switch_sai_rpcProcessor::process_sai_thrift_create_bridge_port;
    processMap_["sai_thrift_remove_bridge_port"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_bridge_port;
    processMap_["sai_thrift_get_bridge_port_list"] = &switch_sai_rpcProcessor::process_sai_thrift_get_bridge_port_list;
    processMap_["sai_thrift_get_bridge_port_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_bridge_port_attribute;
    processMap_["sai_thrift_set_bridge_port_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_bridge_port_attribute;
    processMap_["sai_thrift_create_bridge"] = &switch_sai_rpcProcessor::process_sai_thrift_create_bridge;
    processMap_["sai_thrift_remove_bridge"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_bridge;
    processMap_["sai_thrift_get_bridge_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_bridge_attribute;
    processMap_["sai_thrift_set_bridge_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_bridge_attribute;
    processMap_["sai_thrift_get_bridge_port_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_bridge_port_stats;
    processMap_["sai_thrift_get_bridge_port_stats_ext"] = &switch_sai_rpcProcessor::process_sai_thrift_get_bridge_port_stats_ext;
    processMap_["sai_thrift_clear_bridge_port_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_bridge_port_stats;
    processMap_["sai_thrift_create_hostif"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hostif;
    processMap_["sai_thrift_remove_hostif"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hostif;
    processMap_["sai_thrift_get_hostif_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hostif_attribute;
    processMap_["sai_thrift_set_hostif_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hostif_attribute;
    processMap_["sai_thrift_create_hostif_table_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hostif_table_entry;
    processMap_["sai_thrift_remove_hostif_table_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_table_entry;
    processMap_["sai_thrift_get_hostif_table_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hostif_table_entry_attribute;
    processMap_["sai_thrift_set_hostif_table_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hostif_table_entry_attribute;
    processMap_["sai_thrift_create_hostif_trap_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hostif_trap_group;
    processMap_["sai_thrift_remove_hostif_trap_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_trap_group;
    processMap_["sai_thrift_get_hostif_trap_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hostif_trap_group_attribute;
    processMap_["sai_thrift_set_hostif_trap_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hostif_trap_group_attribute;
    processMap_["sai_thrift_create_hostif_trap"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hostif_trap;
    processMap_["sai_thrift_remove_hostif_trap"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_trap;
    processMap_["sai_thrift_get_hostif_trap_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hostif_trap_attribute;
    processMap_["sai_thrift_set_hostif_trap_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hostif_trap_attribute;
    processMap_["sai_thrift_send_hostif_packet"] = &switch_sai_rpcProcessor::process_sai_thrift_send_hostif_packet;
    processMap_["sai_thrift_create_acl_table"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_table;
    processMap_["sai_thrift_remove_acl_table"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_table;
    processMap_["sai_thrift_get_acl_table_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_table_attribute;
    processMap_["sai_thrift_create_acl_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_entry;
    processMap_["sai_thrift_remove_acl_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_entry;
    processMap_["sai_thrift_set_acl_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_acl_entry_attribute;
    processMap_["sai_thrift_get_acl_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_entry_attribute;
    processMap_["sai_thrift_create_acl_table_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_table_group;
    processMap_["sai_thrift_remove_acl_table_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_table_group;
    processMap_["sai_thrift_get_acl_table_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_table_group_attribute;
    processMap_["sai_thrift_create_acl_table_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_table_group_member;
    processMap_["sai_thrift_remove_acl_table_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_table_group_member;
    processMap_["sai_thrift_get_acl_table_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_table_group_member_attribute;
    processMap_["sai_thrift_create_acl_counter"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_counter;
    processMap_["sai_thrift_remove_acl_counter"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_counter;
    processMap_["sai_thrift_get_acl_counter_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_counter_attribute;
    processMap_["sai_thrift_create_acl_range"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_range;
    processMap_["sai_thrift_remove_acl_range"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_range;
    processMap_["sai_thrift_create_hash"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hash;
    processMap_["sai_thrift_remove_hash"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hash;
    processMap_["sai_thrift_set_hash_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hash_attribute;
    processMap_["sai_thrift_get_hash_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hash_attribute;
    processMap_["sai_thrift_create_udf_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_udf_group;
    processMap_["sai_thrift_remove_udf_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_udf_group;
    processMap_["sai_thrift_get_udf_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_udf_group_attribute;
    processMap_["sai_thrift_create_udf_match"] = &switch_sai_rpcProcessor::process_sai_thrift_create_udf_match;
    processMap_["sai_thrift_remove_udf_match"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_udf_match;
    processMap_["sai_thrift_get_udf_match_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_udf_match_attribute;
    processMap_["sai_thrift_create_udf"] = &switch_sai_rpcProcessor::process_sai_thrift_create_udf;
    processMap_["sai_thrift_remove_udf"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_udf;
    processMap_["sai_thrift_set_udf_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_udf_attribute;
    processMap_["sai_thrift_get_udf_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_udf_attribute;
    processMap_["sai_thrift_create_twamp_session"] = &switch_sai_rpcProcessor::process_sai_thrift_create_twamp_session;
    processMap_["sai_thrift_remove_twamp_session"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_twamp_session;
    processMap_["sai_thrift_set_twamp_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_twamp_attribute;
    processMap_["sai_thrift_create_mirror_session"] = &switch_sai_rpcProcessor::process_sai_thrift_create_mirror_session;
    processMap_["sai_thrift_remove_mirror_session"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_mirror_session;
    processMap_["sai_thrift_set_mirror_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_mirror_attribute;
    processMap_["sai_thrift_get_mirror_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_mirror_attribute;
    processMap_["sai_thrift_create_inseg_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_inseg_entry;
    processMap_["sai_thrift_remove_inseg_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_inseg_entry;
    processMap_["sai_thrift_set_inseg_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_inseg_entry_attribute;
    processMap_["sai_thrift_get_inseg_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_inseg_entry_attribute;
    processMap_["sai_thrift_dump_log"] = &switch_sai_rpcProcessor::process_sai_thrift_dump_log;
    processMap_["sai_thrift_create_policer"] = &switch_sai_rpcProcessor::process_sai_thrift_create_policer;
    processMap_["sai_thrift_remove_policer"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_policer;
    processMap_["sai_thrift_get_policer_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_policer_attribute;
    processMap_["sai_thrift_set_policer_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_policer_attribute;
    processMap_["sai_thrift_get_policer_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_policer_stats;
    processMap_["sai_thrift_clear_policer_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_policer_stats;
    processMap_["sai_thrift_create_scheduler_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_create_scheduler_profile;
    processMap_["sai_thrift_remove_scheduler_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_scheduler_profile;
    processMap_["sai_thrift_get_scheduler_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_scheduler_attribute;
    processMap_["sai_thrift_set_scheduler_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_scheduler_attribute;
    processMap_["sai_thrift_create_scheduler_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_scheduler_group;
    processMap_["sai_thrift_remove_scheduler_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_scheduler_group;
    processMap_["sai_thrift_get_scheduler_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_scheduler_group_attribute;
    processMap_["sai_thrift_set_scheduler_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_scheduler_group_attribute;
    processMap_["sai_thrift_get_queue_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_queue_stats;
    processMap_["sai_thrift_clear_queue_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_queue_stats;
    processMap_["sai_thrift_create_queue"] = &switch_sai_rpcProcessor::process_sai_thrift_create_queue;
    processMap_["sai_thrift_remove_queue"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_queue;
    processMap_["sai_thrift_get_queue_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_queue_attribute;
    processMap_["sai_thrift_set_queue_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_queue_attribute;
    processMap_["sai_thrift_create_buffer_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_create_buffer_profile;
    processMap_["sai_thrift_remove_buffer_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_buffer_profile;
    processMap_["sai_thrift_get_buffer_profile_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_buffer_profile_attribute;
    processMap_["sai_thrift_set_buffer_profile_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_buffer_profile_attribute;
    processMap_["sai_thrift_create_pool_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_create_pool_profile;
    processMap_["sai_thrift_create_priority_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_priority_group;
    processMap_["sai_thrift_remove_priority_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_priority_group;
    processMap_["sai_thrift_get_priority_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_priority_group_attribute;
    processMap_["sai_thrift_set_priority_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_priority_group_attribute;
    processMap_["sai_thrift_get_pg_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_pg_stats;
    processMap_["sai_thrift_create_wred_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_create_wred_profile;
    processMap_["sai_thrift_remove_wred_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_wred_profile;
    processMap_["sai_thrift_get_wred_attribute_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_get_wred_attribute_profile;
    processMap_["sai_thrift_set_wred_attribute_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_set_wred_attribute_profile;
    processMap_["sai_thrift_create_qos_map"] = &switch_sai_rpcProcessor::process_sai_thrift_create_qos_map;
    processMap_["sai_thrift_remove_qos_map"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_qos_map;
    processMap_["sai_thrift_get_qos_map_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_qos_map_attribute;
    processMap_["sai_thrift_set_qos_map_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_qos_map_attribute;
    processMap_["sai_thrift_create_l2mc_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_l2mc_group;
    processMap_["sai_thrift_remove_l2mc_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_l2mc_group;
    processMap_["sai_thrift_get_l2mc_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_l2mc_group_attribute;
    processMap_["sai_thrift_create_l2mc_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_l2mc_group_member;
    processMap_["sai_thrift_remove_l2mc_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_l2mc_group_member;
    processMap_["sai_thrift_set_l2mc_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_l2mc_group_member_attribute;
    processMap_["sai_thrift_get_l2mc_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_l2mc_group_member_attribute;
    processMap_["sai_thrift_create_l2mc_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_l2mc_entry;
    processMap_["sai_thrift_remove_l2mc_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_l2mc_entry;
    processMap_["sai_thrift_set_l2mc_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_l2mc_entry_attribute;
    processMap_["sai_thrift_get_l2mc_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_l2mc_entry_attribute;
    processMap_["sai_thrift_create_mcast_fdb_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_mcast_fdb_entry;
    processMap_["sai_thrift_remove_mcast_fdb_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_mcast_fdb_entry;
    processMap_["sai_thrift_set_mcast_fdb_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_mcast_fdb_entry_attribute;
    processMap_["sai_thrift_get_mcast_fdb_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_mcast_fdb_entry_attribute;
    processMap_["sai_thrift_create_ipmc_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_ipmc_group;
    processMap_["sai_thrift_remove_ipmc_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_ipmc_group;
    processMap_["sai_thrift_get_ipmc_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_ipmc_group_attribute;
    processMap_["sai_thrift_create_ipmc_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_ipmc_group_member;
    processMap_["sai_thrift_remove_ipmc_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_ipmc_group_member;
    processMap_["sai_thrift_set_ipmc_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_ipmc_group_member_attribute;
    processMap_["sai_thrift_get_ipmc_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_ipmc_group_member_attribute;
    processMap_["sai_thrift_create_rpf_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_rpf_group;
    processMap_["sai_thrift_remove_rpf_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_rpf_group;
    processMap_["sai_thrift_get_rpf_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_rpf_group_attribute;
    processMap_["sai_thrift_create_rpf_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_rpf_group_member;
    processMap_["sai_thrift_remove_rpf_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_rpf_group_member;
    processMap_["sai_thrift_set_rpf_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_rpf_group_member_attribute;
    processMap_["sai_thrift_get_rpf_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_rpf_group_member_attribute;
    processMap_["sai_thrift_create_ipmc_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_ipmc_entry;
    processMap_["sai_thrift_remove_ipmc_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_ipmc_entry;
    processMap_["sai_thrift_set_ipmc_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_ipmc_entry_attribute;
    processMap_["sai_thrift_get_ipmc_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_ipmc_entry_attribute;
    processMap_["sai_thrift_create_samplepacket"] = &switch_sai_rpcProcessor::process_sai_thrift_create_samplepacket;
    processMap_["sai_thrift_remove_samplepacket"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_samplepacket;
    processMap_["sai_thrift_get_samplepacket_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_samplepacket_attribute;
    processMap_["sai_thrift_set_samplepacket_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_samplepacket_attribute;
    processMap_["sai_thrift_create_tunnel_map_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_tunnel_map_entry;
    processMap_["sai_thrift_remove_tunnel_map_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel_map_entry;
    processMap_["sai_thrift_get_tunnel_map_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_map_entry_attribute;
    processMap_["sai_thrift_set_tunnel_map_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_map_entry_attribute;
    processMap_["sai_thrift_create_tunnel_map"] = &switch_sai_rpcProcessor::process_sai_thrift_create_tunnel_map;
    processMap_["sai_thrift_remove_tunnel_map"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel_map;
    processMap_["sai_thrift_get_tunnel_map_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_map_attribute;
    processMap_["sai_thrift_set_tunnel_map_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_map_attribute;
    processMap_["sai_thrift_create_tunnel"] = &switch_sai_rpcProcessor::process_sai_thrift_create_tunnel;
    processMap_["sai_thrift_remove_tunnel"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel;
    processMap_["sai_thrift_get_tunnel_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_attribute;
    processMap_["sai_thrift_set_tunnel_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_attribute;
    processMap_["sai_thrift_get_tunnel_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_stats;
    processMap_["sai_thrift_clear_tunnel_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_tunnel_stats;
    processMap_["sai_thrift_create_tunnel_term_table_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_tunnel_term_table_entry;
    processMap_["sai_thrift_remove_tunnel_term_table_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel_term_table_entry;
    processMap_["sai_thrift_get_tunnel_term_table_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_term_table_entry_attribute;
    processMap_["sai_thrift_set_tunnel_term_table_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_term_table_entry_attribute;
    processMap_["sai_thrift_get_cpu_packet_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_cpu_packet_attribute;
    processMap_["sai_thrift_get_cpu_packet_count"] = &switch_sai_rpcProcessor::process_sai_thrift_get_cpu_packet_count;
    processMap_["sai_thrift_clear_cpu_packet_info"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_cpu_packet_info;
    processMap_["sai_thrift_log_set"] = &switch_sai_rpcProcessor::process_sai_thrift_log_set;
    processMap_["sai_thrift_create_isolation_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_isolation_group;
    processMap_["sai_thrift_remove_isolation_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_isolation_group;
    processMap_["sai_thrift_create_isolation_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_isolation_group_member;
    processMap_["sai_thrift_remove_isolation_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_isolation_group_member;
    processMap_["sai_thrift_get_isolation_group_attributes"] = &switch_sai_rpcProcessor::process_sai_thrift_get_isolation_group_attributes;
    processMap_["sai_thrift_get_isolation_group_member_attributes"] = &switch_sai_rpcProcessor::process_sai_thrift_get_isolation_group_member_attributes;
    processMap_["sai_thrift_create_counter"] = &switch_sai_rpcProcessor::process_sai_thrift_create_counter;
    processMap_["sai_thrift_remove_counter"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_counter;
    processMap_["sai_thrift_set_counter_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_counter_attribute;
    processMap_["sai_thrift_get_counter_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_counter_attribute;
    processMap_["sai_thrift_get_counter_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_counter_stats;
    processMap_["sai_thrift_get_counter_stats_ext"] = &switch_sai_rpcProcessor::process_sai_thrift_get_counter_stats_ext;
    processMap_["sai_thrift_clear_counter_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_counter_stats;
    processMap_["sai_thrift_create_debug_counter"] = &switch_sai_rpcProcessor::process_sai_thrift_create_debug_counter;
    processMap_["sai_thrift_remove_debug_counter"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_debug_counter;
    processMap_["sai_thrift_set_debug_counter_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_debug_counter_attribute;
    processMap_["sai_thrift_get_debug_counter_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_debug_counter_attribute;
    processMap_["sai_thrift_create_nat"] = &switch_sai_rpcProcessor::process_sai_thrift_create_nat;
    processMap_["sai_thrift_remove_nat"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_nat;
    processMap_["sai_thrift_set_nat_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_nat_attribute;
    processMap_["sai_thrift_get_nat_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_nat_attribute;
    processMap_["sai_thrift_create_bfd"] = &switch_sai_rpcProcessor::process_sai_thrift_create_bfd;
    processMap_["sai_thrift_remove_bfd"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_bfd;
    processMap_["sai_thrift_set_bfd_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_bfd_attribute;
    processMap_["sai_thrift_get_bfd_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_bfd_attribute;
    processMap_["sai_thrift_create_y1731_meg"] = &switch_sai_rpcProcessor::process_sai_thrift_create_y1731_meg;
    processMap_["sai_thrift_remove_y1731_meg"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_y1731_meg;
    processMap_["sai_thrift_set_y1731_meg_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_y1731_meg_attribute;
    processMap_["sai_thrift_get_y1731_meg_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_y1731_meg_attribute;
    processMap_["sai_thrift_create_y1731_session"] = &switch_sai_rpcProcessor::process_sai_thrift_create_y1731_session;
    processMap_["sai_thrift_remove_y1731_session"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_y1731_session;
    processMap_["sai_thrift_set_y1731_session_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_y1731_session_attribute;
    processMap_["sai_thrift_get_y1731_session_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_y1731_session_attribute;
    processMap_["sai_thrift_create_y1731_rmep"] = &switch_sai_rpcProcessor::process_sai_thrift_create_y1731_rmep;
    processMap_["sai_thrift_remove_y1731_rmep"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_y1731_rmep;
    processMap_["sai_thrift_set_y1731_rmep_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_y1731_rmep_attribute;
    processMap_["sai_thrift_get_y1731_rmep_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_y1731_rmep_attribute;
    processMap_["sai_thrift_get_y1731_session_lm_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_y1731_session_lm_stats;
    processMap_["sai_thrift_create_port"] = &switch_sai_rpcProcessor::process_sai_thrift_create_port;
    processMap_["sai_thrift_remove_port"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_port;
    processMap_["sai_thrift_create_ptp_domain"] = &switch_sai_rpcProcessor::process_sai_thrift_create_ptp_domain;
    processMap_["sai_thrift_remove_ptp_domain"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_ptp_domain;
    processMap_["sai_thrift_set_ptp_domain_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_ptp_domain_attribute;
    processMap_["sai_thrift_get_ptp_domain_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_ptp_domain_attribute;
    processMap_["sai_thrift_create_es"] = &switch_sai_rpcProcessor::process_sai_thrift_create_es;
    processMap_["sai_thrift_remove_es"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_es;
    processMap_["sai_thrift_set_es_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_es_attribute;
    processMap_["sai_thrift_get_es_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_es_attribute;
  }

  virtual ~switch_sai_rpcProcessor() {}
};

class switch_sai_rpcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  switch_sai_rpcProcessorFactory(const ::std::shared_ptr< switch_sai_rpcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< switch_sai_rpcIfFactory > handlerFactory_;
};

class switch_sai_rpcMultiface : virtual public switch_sai_rpcIf {
 public:
  switch_sai_rpcMultiface(std::vector<std::shared_ptr<switch_sai_rpcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~switch_sai_rpcMultiface() {}
 protected:
  std::vector<std::shared_ptr<switch_sai_rpcIf> > ifaces_;
  switch_sai_rpcMultiface() {}
  void add(::std::shared_ptr<switch_sai_rpcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  sai_thrift_status_t sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_port_attribute(port_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_port_attribute(port_id, thrift_attr);
  }

  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_attribute(_return, port_id);
    }
    ifaces_[i]->sai_thrift_get_port_attribute(_return, port_id);
    return;
  }

  void sai_thrift_get_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_stats(_return, port_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_port_stats(_return, port_id, counter_ids, number_of_counters);
    return;
  }

  void sai_thrift_get_port_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_stats_ext(_return, port_id, counter_ids, mode, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_port_stats_ext(_return, port_id, counter_ids, mode, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_port_all_stats(port_id);
    }
    return ifaces_[i]->sai_thrift_clear_port_all_stats(port_id);
  }

  sai_thrift_status_t sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_id, const int32_t number_of_counters, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_port_stats(port_id, number_of_counters, counter_ids);
    }
    return ifaces_[i]->sai_thrift_clear_port_stats(port_id, number_of_counters, counter_ids);
  }

  sai_thrift_status_t sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_fdb_entry(thrift_fdb_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_fdb_entry(thrift_fdb_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_delete_fdb_entry(thrift_fdb_entry);
    }
    return ifaces_[i]->sai_thrift_delete_fdb_entry(thrift_fdb_entry);
  }

  sai_thrift_status_t sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_flush_fdb_entries(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_flush_fdb_entries(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_fdb_entry_attribute(thrift_fdb_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_fdb_entry_attribute(thrift_fdb_entry, thrift_attr);
  }

  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& thrift_fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_fdb_entry_attribute(_return, thrift_fdb_entry);
    }
    ifaces_[i]->sai_thrift_get_fdb_entry_attribute(_return, thrift_fdb_entry);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_vlan(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_vlan(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_vlan(vlan_oid);
    }
    return ifaces_[i]->sai_thrift_remove_vlan(vlan_oid);
  }

  void sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_stats(_return, vlan_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_vlan_stats(_return, vlan_id, counter_ids, number_of_counters);
    return;
  }

  void sai_thrift_get_vlan_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_stats_ext(_return, vlan_id, thrift_counter_ids, mode, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_vlan_stats_ext(_return, vlan_id, thrift_counter_ids, mode, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_vlan_stats(vlan_id, thrift_counter_ids, number_of_counters);
    }
    return ifaces_[i]->sai_thrift_clear_vlan_stats(vlan_id, thrift_counter_ids, number_of_counters);
  }

  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_vlan_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_vlan_member(thrift_attr_list);
  }

  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_member_attribute(_return, vlan_member_id);
    }
    ifaces_[i]->sai_thrift_get_vlan_member_attribute(_return, vlan_member_id);
    return;
  }

  sai_thrift_status_t sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_vlan_member(vlan_member_id);
    }
    return ifaces_[i]->sai_thrift_remove_vlan_member(vlan_member_id);
  }

  sai_thrift_status_t sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_vlan_attribute(vlan_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_vlan_attribute(vlan_id, thrift_attr);
  }

  sai_thrift_status_t sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_vlan_member_attribute(vlan_member_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_vlan_member_attribute(vlan_member_id, thrift_attr);
  }

  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_attribute(_return, vlan_id);
    }
    ifaces_[i]->sai_thrift_get_vlan_attribute(_return, vlan_id);
    return;
  }

  void sai_thrift_get_vlan_id(sai_thrift_result_t& _return, const sai_thrift_object_id_t vlan_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_id(_return, vlan_id);
    }
    ifaces_[i]->sai_thrift_get_vlan_id(_return, vlan_id);
    return;
  }

  void sai_thrift_create_vlan_members(sai_thrift_results_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_vlan_members(_return, thrift_attr_lists, thrift_attr_count_lists, mode);
    }
    ifaces_[i]->sai_thrift_create_vlan_members(_return, thrift_attr_lists, thrift_attr_count_lists, mode);
    return;
  }

  void sai_thrift_remove_vlan_members(sai_thrift_status_list_t& _return, const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_vlan_members(_return, thrift_object_id_list, mode);
    }
    ifaces_[i]->sai_thrift_remove_vlan_members(_return, thrift_object_id_list, mode);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_virtual_router(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_virtual_router(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_virtual_router(vr_id);
    }
    return ifaces_[i]->sai_thrift_remove_virtual_router(vr_id);
  }

  sai_thrift_status_t sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_virtual_router_attribute(vr_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_virtual_router_attribute(vr_id, thrift_attr);
  }

  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vr_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_virtual_router_attribute(_return, vr_id);
    }
    ifaces_[i]->sai_thrift_get_virtual_router_attribute(_return, vr_id);
    return;
  }

  sai_thrift_status_t sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_route(thrift_route_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_route(thrift_route_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_route(thrift_route_entry);
    }
    return ifaces_[i]->sai_thrift_remove_route(thrift_route_entry);
  }

  sai_thrift_status_t sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_route_attribute(thrift_route_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_route_attribute(thrift_route_entry, thrift_attr);
  }

  void sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& thrift_route_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_route_attribute(_return, thrift_route_entry);
    }
    ifaces_[i]->sai_thrift_get_route_attribute(_return, thrift_route_entry);
    return;
  }

  sai_thrift_status_t sai_thrift_create_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_routes(thrift_route_entry_list, thrift_attr_list, thrift_attr_count_lists, mode);
    }
    return ifaces_[i]->sai_thrift_create_routes(thrift_route_entry_list, thrift_attr_list, thrift_attr_count_lists, mode);
  }

  sai_thrift_status_t sai_thrift_remove_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_routes(thrift_route_entry_list, mode);
    }
    return ifaces_[i]->sai_thrift_remove_routes(thrift_route_entry_list, mode);
  }

  sai_thrift_status_t sai_thrift_set_routes_attribute(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const int8_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_routes_attribute(thrift_route_entry_list, thrift_attr_list, mode);
    }
    return ifaces_[i]->sai_thrift_set_routes_attribute(thrift_route_entry_list, thrift_attr_list, mode);
  }

  void sai_thrift_get_routes_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_routes_attribute(_return, thrift_route_entry_list, mode);
    }
    ifaces_[i]->sai_thrift_get_routes_attribute(_return, thrift_route_entry_list, mode);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_router_interface(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_router_interface(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_router_interface(rif_id);
    }
    return ifaces_[i]->sai_thrift_remove_router_interface(rif_id);
  }

  sai_thrift_status_t sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_router_interface_attribute(rif_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_router_interface_attribute(rif_id, thrift_attr);
  }

  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rif_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_router_interface_attribute(_return, rif_id);
    }
    ifaces_[i]->sai_thrift_get_router_interface_attribute(_return, rif_id);
    return;
  }

  void sai_thrift_router_interface_get_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_router_interface_get_stats(_return, rif_id, thrift_counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_router_interface_get_stats(_return, rif_id, thrift_counter_ids, number_of_counters);
    return;
  }

  void sai_thrift_router_interface_get_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_router_interface_get_stats_ext(_return, rif_id, thrift_counter_ids, mode, number_of_counters);
    }
    ifaces_[i]->sai_thrift_router_interface_get_stats_ext(_return, rif_id, thrift_counter_ids, mode, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_router_interface_clear_stats(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_router_interface_clear_stats(rif_id, thrift_counter_ids, number_of_counters);
    }
    return ifaces_[i]->sai_thrift_router_interface_clear_stats(rif_id, thrift_counter_ids, number_of_counters);
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop(next_hop_id);
    }
    return ifaces_[i]->sai_thrift_remove_next_hop(next_hop_id);
  }

  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_attribute(_return, next_hop_id);
    }
    ifaces_[i]->sai_thrift_get_next_hop_attribute(_return, next_hop_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop_group(nhop_group_oid);
    }
    return ifaces_[i]->sai_thrift_remove_next_hop_group(nhop_group_oid);
  }

  sai_thrift_status_t sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_next_hop_group_attribute(nhop_group_oid, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_next_hop_group_attribute(nhop_group_oid, thrift_attr);
  }

  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_group_attribute(_return, nhop_group_oid);
    }
    ifaces_[i]->sai_thrift_get_next_hop_group_attribute(_return, nhop_group_oid);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop_group_member(nhop_group_member_oid);
    }
    return ifaces_[i]->sai_thrift_remove_next_hop_group_member(nhop_group_member_oid);
  }

  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_group_member_attribute(_return, nhop_group_member_oid);
    }
    ifaces_[i]->sai_thrift_get_next_hop_group_member_attribute(_return, nhop_group_member_oid);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_lag(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_lag(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_lag(lag_id);
    }
    return ifaces_[i]->sai_thrift_remove_lag(lag_id);
  }

  sai_thrift_status_t sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_lag_attribute(lag_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_lag_attribute(lag_id, thrift_attr);
  }

  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_lag_attribute(_return, lag_id);
    }
    ifaces_[i]->sai_thrift_get_lag_attribute(_return, lag_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_lag_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_lag_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_lag_member(lag_member_id);
    }
    return ifaces_[i]->sai_thrift_remove_lag_member(lag_member_id);
  }

  sai_thrift_status_t sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_lag_member_attribute(lag_member_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_lag_member_attribute(lag_member_id, thrift_attr);
  }

  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_lag_member_attribute(_return, lag_member_id);
    }
    ifaces_[i]->sai_thrift_get_lag_member_attribute(_return, lag_member_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_stp_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_stp_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_stp_entry(stp_id);
    }
    return ifaces_[i]->sai_thrift_remove_stp_entry(stp_id);
  }

  void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_stp_attribute(_return, stp_id);
    }
    ifaces_[i]->sai_thrift_get_stp_attribute(_return, stp_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_stp_port(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_stp_port(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_stp_port(stp_port_id);
    }
    return ifaces_[i]->sai_thrift_remove_stp_port(stp_port_id);
  }

  void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_stp_port_attribute(_return, stp_port_id);
    }
    ifaces_[i]->sai_thrift_get_stp_port_attribute(_return, stp_port_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_stp_port_state(stp_id, port_id, stp_port_state);
    }
    return ifaces_[i]->sai_thrift_set_stp_port_state(stp_id, port_id, stp_port_state);
  }

  sai_thrift_port_stp_port_state_t sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_stp_port_state(stp_id, port_id);
    }
    return ifaces_[i]->sai_thrift_get_stp_port_state(stp_id, port_id);
  }

  void sai_thrift_create_stp_ports(sai_thrift_results_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_stp_ports(_return, thrift_attr_lists, thrift_attr_count_lists, mode);
    }
    ifaces_[i]->sai_thrift_create_stp_ports(_return, thrift_attr_lists, thrift_attr_count_lists, mode);
    return;
  }

  void sai_thrift_remove_stp_ports(sai_thrift_status_list_t& _return, const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_stp_ports(_return, thrift_object_id_list, mode);
    }
    ifaces_[i]->sai_thrift_remove_stp_ports(_return, thrift_object_id_list, mode);
    return;
  }

  sai_thrift_status_t sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_neighbor_entry(thrift_neighbor_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_neighbor_entry(thrift_neighbor_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_neighbor_entry(thrift_neighbor_entry);
    }
    return ifaces_[i]->sai_thrift_remove_neighbor_entry(thrift_neighbor_entry);
  }

  sai_thrift_status_t sai_thrift_remove_all_neighbor_entry() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_all_neighbor_entry();
    }
    return ifaces_[i]->sai_thrift_remove_all_neighbor_entry();
  }

  sai_thrift_status_t sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_neighbor_entry_attribute(thrift_neighbor_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_neighbor_entry_attribute(thrift_neighbor_entry, thrift_attr);
  }

  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& thrift_neighbor_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_neighbor_entry_attribute(_return, thrift_neighbor_entry);
    }
    ifaces_[i]->sai_thrift_get_neighbor_entry_attribute(_return, thrift_neighbor_entry);
    return;
  }

  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_switch_attribute(_return, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_switch_attribute(_return, thrift_attr_ids);
    return;
  }

  void sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_list_by_front_port(_return);
    }
    ifaces_[i]->sai_thrift_get_port_list_by_front_port(_return);
    return;
  }

  sai_thrift_object_id_t sai_thrift_get_cpu_port_id() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_cpu_port_id();
    }
    return ifaces_[i]->sai_thrift_get_cpu_port_id();
  }

  sai_thrift_object_id_t sai_thrift_get_default_trap_group() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_default_trap_group();
    }
    return ifaces_[i]->sai_thrift_get_default_trap_group();
  }

  sai_thrift_object_id_t sai_thrift_get_default_router_id() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_default_router_id();
    }
    return ifaces_[i]->sai_thrift_get_default_router_id();
  }

  sai_thrift_object_id_t sai_thrift_get_default_1q_bridge_id() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_default_1q_bridge_id();
    }
    return ifaces_[i]->sai_thrift_get_default_1q_bridge_id();
  }

  void sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_default_vlan_id(_return);
    }
    ifaces_[i]->sai_thrift_get_default_vlan_id(_return);
    return;
  }

  sai_thrift_object_id_t sai_thrift_get_port_id_by_front_port(const std::string& port_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_id_by_front_port(port_name);
    }
    return ifaces_[i]->sai_thrift_get_port_id_by_front_port(port_name);
  }

  sai_thrift_status_t sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_switch_attribute(attribute);
    }
    return ifaces_[i]->sai_thrift_set_switch_attribute(attribute);
  }

  sai_thrift_object_id_t sai_thrift_create_switch() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_switch();
    }
    return ifaces_[i]->sai_thrift_create_switch();
  }

  sai_thrift_status_t sai_thrift_remove_switch() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_switch();
    }
    return ifaces_[i]->sai_thrift_remove_switch();
  }

  void sai_thrift_get_switch_stats(std::vector<int64_t> & _return, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_switch_stats(_return, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_switch_stats(_return, counter_ids, number_of_counters);
    return;
  }

  void sai_thrift_get_switch_stats_ext(std::vector<int64_t> & _return, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_switch_stats_ext(_return, counter_ids, mode, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_switch_stats_ext(_return, counter_ids, mode, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_switch_stats(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_switch_stats(counter_ids, number_of_counters);
    }
    return ifaces_[i]->sai_thrift_clear_switch_stats(counter_ids, number_of_counters);
  }

  void sai_thrift_create_bridge_port(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_bridge_port(_return, thrift_attr_list);
    }
    ifaces_[i]->sai_thrift_create_bridge_port(_return, thrift_attr_list);
    return;
  }

  sai_thrift_status_t sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_bridge_port(bridge_port_id);
    }
    return ifaces_[i]->sai_thrift_remove_bridge_port(bridge_port_id);
  }

  void sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return, const sai_thrift_object_id_t bridge_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_port_list(_return, bridge_id);
    }
    ifaces_[i]->sai_thrift_get_bridge_port_list(_return, bridge_id);
    return;
  }

  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_port_attribute(_return, bridge_port_id);
    }
    ifaces_[i]->sai_thrift_get_bridge_port_attribute(_return, bridge_port_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_bridge_port_attribute(bridge_port_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_bridge_port_attribute(bridge_port_id, thrift_attr);
  }

  void sai_thrift_create_bridge(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_bridge(_return, thrift_attr_list);
    }
    ifaces_[i]->sai_thrift_create_bridge(_return, thrift_attr_list);
    return;
  }

  sai_thrift_status_t sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_bridge(bridge_id);
    }
    return ifaces_[i]->sai_thrift_remove_bridge(bridge_id);
  }

  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_attribute(_return, bridge_id);
    }
    ifaces_[i]->sai_thrift_get_bridge_attribute(_return, bridge_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_bridge_attribute(bridge_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_bridge_attribute(bridge_id, thrift_attr);
  }

  void sai_thrift_get_bridge_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_port_stats(_return, bridge_port_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_bridge_port_stats(_return, bridge_port_id, counter_ids, number_of_counters);
    return;
  }

  void sai_thrift_get_bridge_port_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_port_stats_ext(_return, bridge_port_id, thrift_counter_ids, mode, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_bridge_port_stats_ext(_return, bridge_port_id, thrift_counter_ids, mode, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_bridge_port_stats(bridge_port_id, thrift_counter_ids, number_of_counters);
    }
    return ifaces_[i]->sai_thrift_clear_bridge_port_stats(bridge_port_id, thrift_counter_ids, number_of_counters);
  }

  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif(thrift_hif_id);
    }
    return ifaces_[i]->sai_thrift_remove_hostif(thrift_hif_id);
  }

  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hif_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_attribute(_return, thrift_hif_id);
    }
    ifaces_[i]->sai_thrift_get_hostif_attribute(_return, thrift_hif_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_attribute(thrift_hif_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hostif_attribute(thrift_hif_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_table_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_table_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_table_entry(thrift_hostif_table_entry_id);
    }
    return ifaces_[i]->sai_thrift_remove_hostif_table_entry(thrift_hostif_table_entry_id);
  }

  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_table_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_table_entry_attribute(_return, thrift_hostif_table_entry_id);
    }
    ifaces_[i]->sai_thrift_get_hostif_table_entry_attribute(_return, thrift_hostif_table_entry_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_table_entry_attribute(thrift_hostif_table_entry_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hostif_table_entry_attribute(thrift_hostif_table_entry_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_trap_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_trap_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_trap_group(thrift_hostif_trap_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_hostif_trap_group(thrift_hostif_trap_group_id);
  }

  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_trap_group_attribute(_return, thrift_hostif_trap_group_id);
    }
    ifaces_[i]->sai_thrift_get_hostif_trap_group_attribute(_return, thrift_hostif_trap_group_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_trap_group_attribute(thrift_hostif_trap_group_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hostif_trap_group_attribute(thrift_hostif_trap_group_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_trap(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_trap(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_trap(thrift_hostif_trap_id);
    }
    return ifaces_[i]->sai_thrift_remove_hostif_trap(thrift_hostif_trap_id);
  }

  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_trap_attribute(_return, thrift_hostif_trap_id);
    }
    ifaces_[i]->sai_thrift_get_hostif_trap_attribute(_return, thrift_hostif_trap_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_trap_attribute(thrift_hostif_trap_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hostif_trap_attribute(thrift_hostif_trap_id, thrift_attr);
  }

  sai_thrift_status_t sai_thrift_send_hostif_packet(const sai_thrift_object_id_t thrift_hif_id, const std::string& packet_data, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_send_hostif_packet(thrift_hif_id, packet_data, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_send_hostif_packet(thrift_hif_id, packet_data, thrift_attr_list);
  }

  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table(acl_table_id);
    }
    return ifaces_[i]->sai_thrift_remove_acl_table(acl_table_id);
  }

  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_attribute(_return, acl_table_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_acl_table_attribute(_return, acl_table_id, thrift_attr_ids);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_entry(acl_entry);
    }
    return ifaces_[i]->sai_thrift_remove_acl_entry(acl_entry);
  }

  sai_thrift_status_t sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_acl_entry_attribute(acl_entry_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_acl_entry_attribute(acl_entry_id, thrift_attr);
  }

  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_entry_attribute(_return, acl_entry_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_acl_entry_attribute(_return, acl_entry_id, thrift_attr_ids);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table_group(acl_table_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_acl_table_group(acl_table_group_id);
  }

  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_group_attribute(_return, acl_table_group_id);
    }
    ifaces_[i]->sai_thrift_get_acl_table_group_attribute(_return, acl_table_group_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table_group_member(acl_table_group_member_id);
    }
    return ifaces_[i]->sai_thrift_remove_acl_table_group_member(acl_table_group_member_id);
  }

  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_group_member_attribute(_return, acl_table_group_member_id);
    }
    ifaces_[i]->sai_thrift_get_acl_table_group_member_attribute(_return, acl_table_group_member_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_counter(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_counter(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_counter(acl_counter_id);
    }
    return ifaces_[i]->sai_thrift_remove_acl_counter(acl_counter_id);
  }

  void sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_counter_attribute(_return, acl_counter_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_acl_counter_attribute(_return, acl_counter_id, thrift_attr_ids);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_range(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_range(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_range(acl_range_id);
    }
    return ifaces_[i]->sai_thrift_remove_acl_range(acl_range_id);
  }

  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hash(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hash(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hash(hash_id);
    }
    return ifaces_[i]->sai_thrift_remove_hash(hash_id);
  }

  sai_thrift_status_t sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hash_attribute(thrift_hash_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hash_attribute(thrift_hash_id, thrift_attr);
  }

  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hash_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hash_attribute(_return, thrift_hash_id);
    }
    ifaces_[i]->sai_thrift_get_hash_attribute(_return, thrift_hash_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_udf_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_udf_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_udf_group(udf_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_udf_group(udf_group_id);
  }

  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_udf_group_attribute(_return, thrift_udf_group_id);
    }
    ifaces_[i]->sai_thrift_get_udf_group_attribute(_return, thrift_udf_group_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_udf_match(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_udf_match(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_udf_match(udf_match_id);
    }
    return ifaces_[i]->sai_thrift_remove_udf_match(udf_match_id);
  }

  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_match_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_udf_match_attribute(_return, thrift_udf_match_id);
    }
    ifaces_[i]->sai_thrift_get_udf_match_attribute(_return, thrift_udf_match_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_udf(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_udf(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_udf(udf_id);
    }
    return ifaces_[i]->sai_thrift_remove_udf(udf_id);
  }

  sai_thrift_status_t sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_udf_attribute(thrift_udf_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_udf_attribute(thrift_udf_id, thrift_attr);
  }

  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_udf_attribute(_return, thrift_udf_id);
    }
    ifaces_[i]->sai_thrift_get_udf_attribute(_return, thrift_udf_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_twamp_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_twamp_session(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_twamp_session(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_twamp_session(const sai_thrift_object_id_t session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_twamp_session(session_id);
    }
    return ifaces_[i]->sai_thrift_remove_twamp_session(session_id);
  }

  sai_thrift_status_t sai_thrift_set_twamp_attribute(const sai_thrift_object_id_t thrift_twamp_session_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_twamp_attribute(thrift_twamp_session_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_twamp_attribute(thrift_twamp_session_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_mirror_session(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_mirror_session(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_mirror_session(session_id);
    }
    return ifaces_[i]->sai_thrift_remove_mirror_session(session_id);
  }

  sai_thrift_status_t sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_mirror_attribute(thrift_mirror_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_mirror_attribute(thrift_mirror_id, thrift_attr);
  }

  void sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_mirror_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_mirror_attribute(_return, thrift_mirror_id);
    }
    ifaces_[i]->sai_thrift_get_mirror_attribute(_return, thrift_mirror_id);
    return;
  }

  sai_thrift_status_t sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_inseg_entry(thrift_inseg_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_inseg_entry(thrift_inseg_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_inseg_entry(thrift_inseg_entry);
    }
    return ifaces_[i]->sai_thrift_remove_inseg_entry(thrift_inseg_entry);
  }

  sai_thrift_status_t sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_inseg_entry_attribute(thrift_inseg_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_inseg_entry_attribute(thrift_inseg_entry, thrift_attr);
  }

  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& thrift_inseg_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_inseg_entry_attribute(_return, thrift_inseg_entry);
    }
    ifaces_[i]->sai_thrift_get_inseg_entry_attribute(_return, thrift_inseg_entry);
    return;
  }

  sai_thrift_status_t sai_thrift_dump_log(const std::string& dump_file_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_dump_log(dump_file_name);
    }
    return ifaces_[i]->sai_thrift_dump_log(dump_file_name);
  }

  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_policer(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_policer(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_policer(thrift_policer_id);
    }
    return ifaces_[i]->sai_thrift_remove_policer(thrift_policer_id);
  }

  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_policer_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_policer_attribute(_return, thrift_policer_id);
    }
    ifaces_[i]->sai_thrift_get_policer_attribute(_return, thrift_policer_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_policer_attribute(thrift_policer_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_policer_attribute(thrift_policer_id, thrift_attr);
  }

  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_policer_stats(_return, thrift_policer_id, thrift_counter_ids);
    }
    ifaces_[i]->sai_thrift_get_policer_stats(_return, thrift_policer_id, thrift_counter_ids);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_policer_stats(thrift_policer_id, thrift_counter_ids);
    }
    return ifaces_[i]->sai_thrift_clear_policer_stats(thrift_policer_id, thrift_counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_scheduler_profile(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_scheduler_profile(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_scheduler_profile(scheduler_id);
    }
    return ifaces_[i]->sai_thrift_remove_scheduler_profile(scheduler_id);
  }

  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_scheduler_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_scheduler_attribute(_return, thrift_scheduler_id);
    }
    ifaces_[i]->sai_thrift_get_scheduler_attribute(_return, thrift_scheduler_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_scheduler_attribute(thrift_scheduler_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_scheduler_attribute(thrift_scheduler_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_scheduler_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_scheduler_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_scheduler_group(scheduler_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_scheduler_group(scheduler_group_id);
  }

  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_scheduler_group_attribute(_return, scheduler_group_id);
    }
    ifaces_[i]->sai_thrift_get_scheduler_group_attribute(_return, scheduler_group_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_scheduler_group_attribute(scheduler_group_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_scheduler_group_attribute(scheduler_group_id, thrift_attr);
  }

  void sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_queue_stats(_return, queue_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_queue_stats(_return, queue_id, counter_ids, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_queue_stats(queue_id, counter_ids, number_of_counters);
    }
    return ifaces_[i]->sai_thrift_clear_queue_stats(queue_id, counter_ids, number_of_counters);
  }

  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_queue(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_queue(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_queue(queue_id);
    }
    return ifaces_[i]->sai_thrift_remove_queue(queue_id);
  }

  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_queue_attribute(_return, queue_id);
    }
    ifaces_[i]->sai_thrift_get_queue_attribute(_return, queue_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_queue_attribute(queue_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_queue_attribute(queue_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_buffer_profile(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_buffer_profile(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_buffer_profile(buffer_profile_id);
    }
    return ifaces_[i]->sai_thrift_remove_buffer_profile(buffer_profile_id);
  }

  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_buffer_profile_attribute(_return, buffer_profile_id);
    }
    ifaces_[i]->sai_thrift_get_buffer_profile_attribute(_return, buffer_profile_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_buffer_profile_attribute(buffer_profile_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_buffer_profile_attribute(buffer_profile_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_pool_profile(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_pool_profile(thrift_attr_list);
  }

  sai_thrift_object_id_t sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_priority_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_priority_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_priority_group(priority_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_priority_group(priority_group_id);
  }

  void sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t priority_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_priority_group_attribute(_return, priority_group_id);
    }
    ifaces_[i]->sai_thrift_get_priority_group_attribute(_return, priority_group_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_priority_group_attribute(pg_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_priority_group_attribute(pg_id, thrift_attr);
  }

  void sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_pg_stats(_return, pg_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_pg_stats(_return, pg_id, counter_ids, number_of_counters);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_wred_profile(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_wred_profile(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_wred_profile(wred_id);
    }
    return ifaces_[i]->sai_thrift_remove_wred_profile(wred_id);
  }

  void sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_wred_attribute_profile(_return, wred_id);
    }
    ifaces_[i]->sai_thrift_get_wred_attribute_profile(_return, wred_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_wred_attribute_profile(wred_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_wred_attribute_profile(wred_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_qos_map(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_qos_map(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_qos_map(qos_map_id);
    }
    return ifaces_[i]->sai_thrift_remove_qos_map(qos_map_id);
  }

  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_qos_map_attribute(_return, qos_map_id);
    }
    ifaces_[i]->sai_thrift_get_qos_map_attribute(_return, qos_map_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_qos_map_attribute(qos_map_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_qos_map_attribute(qos_map_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_l2mc_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_l2mc_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_l2mc_group(grp_id);
    }
    return ifaces_[i]->sai_thrift_remove_l2mc_group(grp_id);
  }

  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_l2mc_group_attribute(_return, grp_id);
    }
    ifaces_[i]->sai_thrift_get_l2mc_group_attribute(_return, grp_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_l2mc_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_l2mc_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_l2mc_group_member(member_id);
    }
    return ifaces_[i]->sai_thrift_remove_l2mc_group_member(member_id);
  }

  sai_thrift_status_t sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_l2mc_group_member_attribute(member_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_l2mc_group_member_attribute(member_id, thrift_attr);
  }

  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_l2mc_group_member_attribute(_return, member_id);
    }
    ifaces_[i]->sai_thrift_get_l2mc_group_member_attribute(_return, member_id);
    return;
  }

  sai_thrift_status_t sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_l2mc_entry(thrift_l2mc_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_l2mc_entry(thrift_l2mc_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_l2mc_entry(thrift_l2mc_entry);
    }
    return ifaces_[i]->sai_thrift_remove_l2mc_entry(thrift_l2mc_entry);
  }

  sai_thrift_status_t sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_l2mc_entry_attribute(thrift_l2mc_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_l2mc_entry_attribute(thrift_l2mc_entry, thrift_attr);
  }

  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& thrift_l2mc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_l2mc_entry_attribute(_return, thrift_l2mc_entry);
    }
    ifaces_[i]->sai_thrift_get_l2mc_entry_attribute(_return, thrift_l2mc_entry);
    return;
  }

  sai_thrift_status_t sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_mcast_fdb_entry(thrift_mcast_fdb_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_mcast_fdb_entry(thrift_mcast_fdb_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_mcast_fdb_entry(thrift_mcast_fdb_entry);
    }
    return ifaces_[i]->sai_thrift_remove_mcast_fdb_entry(thrift_mcast_fdb_entry);
  }

  sai_thrift_status_t sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry, thrift_attr);
  }

  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_mcast_fdb_entry_attribute(_return, thrift_mcast_fdb_entry);
    }
    ifaces_[i]->sai_thrift_get_mcast_fdb_entry_attribute(_return, thrift_mcast_fdb_entry);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipmc_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipmc_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipmc_group(grp_id);
    }
    return ifaces_[i]->sai_thrift_remove_ipmc_group(grp_id);
  }

  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipmc_group_attribute(_return, grp_id);
    }
    ifaces_[i]->sai_thrift_get_ipmc_group_attribute(_return, grp_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipmc_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipmc_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipmc_group_member(member_id);
    }
    return ifaces_[i]->sai_thrift_remove_ipmc_group_member(member_id);
  }

  sai_thrift_status_t sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipmc_group_member_attribute(member_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_ipmc_group_member_attribute(member_id, thrift_attr);
  }

  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipmc_group_member_attribute(_return, member_id);
    }
    ifaces_[i]->sai_thrift_get_ipmc_group_member_attribute(_return, member_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_rpf_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_rpf_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_rpf_group(grp_id);
    }
    return ifaces_[i]->sai_thrift_remove_rpf_group(grp_id);
  }

  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_rpf_group_attribute(_return, grp_id);
    }
    ifaces_[i]->sai_thrift_get_rpf_group_attribute(_return, grp_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_rpf_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_rpf_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_rpf_group_member(member_id);
    }
    return ifaces_[i]->sai_thrift_remove_rpf_group_member(member_id);
  }

  sai_thrift_status_t sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_rpf_group_member_attribute(member_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_rpf_group_member_attribute(member_id, thrift_attr);
  }

  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_rpf_group_member_attribute(_return, member_id);
    }
    ifaces_[i]->sai_thrift_get_rpf_group_member_attribute(_return, member_id);
    return;
  }

  sai_thrift_status_t sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipmc_entry(thrift_ipmc_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipmc_entry(thrift_ipmc_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipmc_entry(thrift_ipmc_entry);
    }
    return ifaces_[i]->sai_thrift_remove_ipmc_entry(thrift_ipmc_entry);
  }

  sai_thrift_status_t sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipmc_entry_attribute(thrift_ipmc_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_ipmc_entry_attribute(thrift_ipmc_entry, thrift_attr);
  }

  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& thrift_ipmc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipmc_entry_attribute(_return, thrift_ipmc_entry);
    }
    ifaces_[i]->sai_thrift_get_ipmc_entry_attribute(_return, thrift_ipmc_entry);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_samplepacket(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_samplepacket(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_samplepacket(samplepacket_id);
    }
    return ifaces_[i]->sai_thrift_remove_samplepacket(samplepacket_id);
  }

  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_samplepacket_attribute(_return, samplepacket_id);
    }
    ifaces_[i]->sai_thrift_get_samplepacket_attribute(_return, samplepacket_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_samplepacket_attribute(samplepacket_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_samplepacket_attribute(samplepacket_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel_map_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel_map_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_id);
    }
    return ifaces_[i]->sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_id);
  }

  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_map_entry_attribute(_return, tunnel_map_entry_id);
    }
    ifaces_[i]->sai_thrift_get_tunnel_map_entry_attribute(_return, tunnel_map_entry_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel_map(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel_map(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel_map(tunnel_map_id);
    }
    return ifaces_[i]->sai_thrift_remove_tunnel_map(tunnel_map_id);
  }

  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_map_attribute(_return, tunnel_map_id);
    }
    ifaces_[i]->sai_thrift_get_tunnel_map_attribute(_return, tunnel_map_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_map_attribute(tunnel_map_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_tunnel_map_attribute(tunnel_map_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel(tunnel_id);
    }
    return ifaces_[i]->sai_thrift_remove_tunnel(tunnel_id);
  }

  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_attribute(_return, tunnel_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_tunnel_attribute(_return, tunnel_id, thrift_attr_ids);
    return;
  }

  sai_thrift_status_t sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_attribute(tunnel_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_tunnel_attribute(tunnel_id, thrift_attr);
  }

  void sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_stats(_return, tunnel_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_tunnel_stats(_return, tunnel_id, counter_ids, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_tunnel_stats(tunnel_id, counter_ids, number_of_counters);
    }
    return ifaces_[i]->sai_thrift_clear_tunnel_stats(tunnel_id, counter_ids, number_of_counters);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel_term_table_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel_term_table_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_id);
    }
    return ifaces_[i]->sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_id);
  }

  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_term_table_entry_attribute(_return, tunnel_term_table_entry_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_tunnel_term_table_entry_attribute(_return, tunnel_term_table_entry_id, thrift_attr_ids);
    return;
  }

  sai_thrift_status_t sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr);
  }

  void sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_cpu_packet_attribute(_return, switch_id);
    }
    ifaces_[i]->sai_thrift_get_cpu_packet_attribute(_return, switch_id);
    return;
  }

  void sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_cpu_packet_count(_return);
    }
    ifaces_[i]->sai_thrift_get_cpu_packet_count(_return);
    return;
  }

  void sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_cpu_packet_info(_return);
    }
    ifaces_[i]->sai_thrift_clear_cpu_packet_info(_return);
    return;
  }

  sai_thrift_status_t sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_log_set(sai_api_id, log_level);
    }
    return ifaces_[i]->sai_thrift_log_set(sai_api_id, log_level);
  }

  sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_isolation_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_isolation_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_isolation_group(const sai_thrift_object_id_t iso_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_isolation_group(iso_group_oid);
    }
    return ifaces_[i]->sai_thrift_remove_isolation_group(iso_group_oid);
  }

  sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_isolation_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_isolation_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_isolation_group_member(member_oid);
    }
    return ifaces_[i]->sai_thrift_remove_isolation_group_member(member_oid);
  }

  void sai_thrift_get_isolation_group_attributes(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t iso_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_isolation_group_attributes(_return, iso_group_oid);
    }
    ifaces_[i]->sai_thrift_get_isolation_group_attributes(_return, iso_group_oid);
    return;
  }

  void sai_thrift_get_isolation_group_member_attributes(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_isolation_group_member_attributes(_return, member_oid);
    }
    ifaces_[i]->sai_thrift_get_isolation_group_member_attributes(_return, member_oid);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_counter(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_counter(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_counter(counter_oid);
    }
    return ifaces_[i]->sai_thrift_remove_counter(counter_oid);
  }

  sai_thrift_status_t sai_thrift_set_counter_attribute(const sai_thrift_object_id_t thrift_counter_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_counter_attribute(thrift_counter_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_counter_attribute(thrift_counter_id, thrift_attr);
  }

  void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_counter_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_counter_attribute(_return, thrift_counter_id);
    }
    ifaces_[i]->sai_thrift_get_counter_attribute(_return, thrift_counter_id);
    return;
  }

  void sai_thrift_get_counter_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_counter_stats(_return, counter_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_counter_stats(_return, counter_id, counter_ids, number_of_counters);
    return;
  }

  void sai_thrift_get_counter_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int8_t mode, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_counter_stats_ext(_return, counter_id, counter_ids, mode, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_counter_stats_ext(_return, counter_id, counter_ids, mode, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & thrift_counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_counter_stats(counter_id, thrift_counter_ids, number_of_counters);
    }
    return ifaces_[i]->sai_thrift_clear_counter_stats(counter_id, thrift_counter_ids, number_of_counters);
  }

  sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_debug_counter(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_debug_counter(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_debug_counter(debug_counter_oid);
    }
    return ifaces_[i]->sai_thrift_remove_debug_counter(debug_counter_oid);
  }

  sai_thrift_status_t sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t thrift_debug_counter_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_debug_counter_attribute(thrift_debug_counter_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_debug_counter_attribute(thrift_debug_counter_id, thrift_attr);
  }

  void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_debug_counter_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_debug_counter_attribute(_return, thrift_debug_counter_id);
    }
    ifaces_[i]->sai_thrift_get_debug_counter_attribute(_return, thrift_debug_counter_id);
    return;
  }

  sai_thrift_status_t sai_thrift_create_nat(const sai_thrift_nat_entry_t& thrift_nat_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_nat(thrift_nat_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_nat(thrift_nat_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_nat(const sai_thrift_nat_entry_t& thrift_nat_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_nat(thrift_nat_entry);
    }
    return ifaces_[i]->sai_thrift_remove_nat(thrift_nat_entry);
  }

  sai_thrift_status_t sai_thrift_set_nat_attribute(const sai_thrift_nat_entry_t& thrift_nat_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_nat_attribute(thrift_nat_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_nat_attribute(thrift_nat_entry, thrift_attr);
  }

  void sai_thrift_get_nat_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_nat_entry_t& thrift_nat_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_nat_attribute(_return, thrift_nat_entry);
    }
    ifaces_[i]->sai_thrift_get_nat_attribute(_return, thrift_nat_entry);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_bfd(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_bfd(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_bfd(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_bfd(const sai_thrift_object_id_t bfd_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_bfd(bfd_oid);
    }
    return ifaces_[i]->sai_thrift_remove_bfd(bfd_oid);
  }

  sai_thrift_status_t sai_thrift_set_bfd_attribute(const sai_thrift_object_id_t bfd_oid, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_bfd_attribute(bfd_oid, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_bfd_attribute(bfd_oid, thrift_attr);
  }

  void sai_thrift_get_bfd_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bfd_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bfd_attribute(_return, bfd_oid);
    }
    ifaces_[i]->sai_thrift_get_bfd_attribute(_return, bfd_oid);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_y1731_meg(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_y1731_meg(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_y1731_meg(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_y1731_meg(const sai_thrift_object_id_t y1731_meg_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_y1731_meg(y1731_meg_oid);
    }
    return ifaces_[i]->sai_thrift_remove_y1731_meg(y1731_meg_oid);
  }

  sai_thrift_status_t sai_thrift_set_y1731_meg_attribute(const sai_thrift_object_id_t y1731_meg_oid, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_y1731_meg_attribute(y1731_meg_oid, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_y1731_meg_attribute(y1731_meg_oid, thrift_attr);
  }

  void sai_thrift_get_y1731_meg_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_meg_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_y1731_meg_attribute(_return, y1731_meg_oid);
    }
    ifaces_[i]->sai_thrift_get_y1731_meg_attribute(_return, y1731_meg_oid);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_y1731_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_y1731_session(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_y1731_session(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_y1731_session(const sai_thrift_object_id_t y1731_session_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_y1731_session(y1731_session_oid);
    }
    return ifaces_[i]->sai_thrift_remove_y1731_session(y1731_session_oid);
  }

  sai_thrift_status_t sai_thrift_set_y1731_session_attribute(const sai_thrift_object_id_t y1731_session_oid, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_y1731_session_attribute(y1731_session_oid, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_y1731_session_attribute(y1731_session_oid, thrift_attr);
  }

  void sai_thrift_get_y1731_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_session_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_y1731_session_attribute(_return, y1731_session_oid);
    }
    ifaces_[i]->sai_thrift_get_y1731_session_attribute(_return, y1731_session_oid);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_y1731_rmep(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_y1731_rmep(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_y1731_rmep(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_y1731_rmep(const sai_thrift_object_id_t y1731_rmep_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_y1731_rmep(y1731_rmep_oid);
    }
    return ifaces_[i]->sai_thrift_remove_y1731_rmep(y1731_rmep_oid);
  }

  sai_thrift_status_t sai_thrift_set_y1731_rmep_attribute(const sai_thrift_object_id_t y1731_rmep_oid, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_y1731_rmep_attribute(y1731_rmep_oid, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_y1731_rmep_attribute(y1731_rmep_oid, thrift_attr);
  }

  void sai_thrift_get_y1731_rmep_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_rmep_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_y1731_rmep_attribute(_return, y1731_rmep_oid);
    }
    ifaces_[i]->sai_thrift_get_y1731_rmep_attribute(_return, y1731_rmep_oid);
    return;
  }

  void sai_thrift_get_y1731_session_lm_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t y1731_session_oid, const std::vector<sai_thrift_stat_id_t> & lm_stats_ids, const int32_t number_of_stats) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_y1731_session_lm_stats(_return, y1731_session_oid, lm_stats_ids, number_of_stats);
    }
    ifaces_[i]->sai_thrift_get_y1731_session_lm_stats(_return, y1731_session_oid, lm_stats_ids, number_of_stats);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_port(const std::string& port_name, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_port(port_name, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_port(port_name, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_port(const sai_thrift_object_id_t port_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_port(port_oid);
    }
    return ifaces_[i]->sai_thrift_remove_port(port_oid);
  }

  sai_thrift_object_id_t sai_thrift_create_ptp_domain(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ptp_domain(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ptp_domain(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_ptp_domain(const sai_thrift_object_id_t ptp_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ptp_domain(ptp_oid);
    }
    return ifaces_[i]->sai_thrift_remove_ptp_domain(ptp_oid);
  }

  sai_thrift_status_t sai_thrift_set_ptp_domain_attribute(const sai_thrift_object_id_t ptp_oid, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ptp_domain_attribute(ptp_oid, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_ptp_domain_attribute(ptp_oid, thrift_attr);
  }

  void sai_thrift_get_ptp_domain_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ptp_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ptp_domain_attribute(_return, ptp_oid);
    }
    ifaces_[i]->sai_thrift_get_ptp_domain_attribute(_return, ptp_oid);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_es(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_es(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_es(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_es(const sai_thrift_object_id_t es_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_es(es_oid);
    }
    return ifaces_[i]->sai_thrift_remove_es(es_oid);
  }

  sai_thrift_status_t sai_thrift_set_es_attribute(const sai_thrift_object_id_t es_oid, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_es_attribute(es_oid, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_es_attribute(es_oid, thrift_attr);
  }

  void sai_thrift_get_es_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t es_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_es_attribute(_return, es_oid);
    }
    ifaces_[i]->sai_thrift_get_es_attribute(_return, es_oid);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class switch_sai_rpcConcurrentClient : virtual public switch_sai_rpcIf {
 public:
  switch_sai_rpcConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  switch_sai_rpcConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  sai_thrift_status_t sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_port_attribute(const int32_t seqid);
  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_id);
  int32_t send_sai_thrift_get_port_attribute(const sai_thrift_object_id_t port_id);
  void recv_sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_port_stats(const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_port_stats(std::vector<int64_t> & _return, const int32_t seqid);
  void sai_thrift_get_port_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_port_stats_ext(const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_port_stats_ext(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id);
  int32_t send_sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id);
  sai_thrift_status_t recv_sai_thrift_clear_port_all_stats(const int32_t seqid);
  sai_thrift_status_t sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_id, const int32_t number_of_counters, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids);
  int32_t send_sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_id, const int32_t number_of_counters, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids);
  sai_thrift_status_t recv_sai_thrift_clear_port_stats(const int32_t seqid);
  sai_thrift_status_t sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_fdb_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  int32_t send_sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  sai_thrift_status_t recv_sai_thrift_delete_fdb_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_flush_fdb_entries(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_fdb_entry_attribute(const int32_t seqid);
  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  int32_t send_sai_thrift_get_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  void recv_sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  int32_t send_sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  sai_thrift_status_t recv_sai_thrift_remove_vlan(const int32_t seqid);
  void sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_vlan_stats(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const int32_t seqid);
  void sai_thrift_get_vlan_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_vlan_stats_ext(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_vlan_stats_ext(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_vlan_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan_member(const int32_t seqid);
  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_id);
  int32_t send_sai_thrift_get_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id);
  void recv_sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id);
  int32_t send_sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id);
  sai_thrift_status_t recv_sai_thrift_remove_vlan_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_vlan_attribute(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_vlan_member_attribute(const int32_t seqid);
  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_id);
  int32_t send_sai_thrift_get_vlan_attribute(const sai_thrift_object_id_t vlan_id);
  void recv_sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_vlan_id(sai_thrift_result_t& _return, const sai_thrift_object_id_t vlan_id);
  int32_t send_sai_thrift_get_vlan_id(const sai_thrift_object_id_t vlan_id);
  void recv_sai_thrift_get_vlan_id(sai_thrift_result_t& _return, const int32_t seqid);
  void sai_thrift_create_vlan_members(sai_thrift_results_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  int32_t send_sai_thrift_create_vlan_members(const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  void recv_sai_thrift_create_vlan_members(sai_thrift_results_t& _return, const int32_t seqid);
  void sai_thrift_remove_vlan_members(sai_thrift_status_list_t& _return, const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode);
  int32_t send_sai_thrift_remove_vlan_members(const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode);
  void recv_sai_thrift_remove_vlan_members(sai_thrift_status_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_virtual_router(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id);
  int32_t send_sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id);
  sai_thrift_status_t recv_sai_thrift_remove_virtual_router(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_virtual_router_attribute(const int32_t seqid);
  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vr_id);
  int32_t send_sai_thrift_get_virtual_router_attribute(const sai_thrift_object_id_t vr_id);
  void recv_sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_route(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry);
  int32_t send_sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry);
  sai_thrift_status_t recv_sai_thrift_remove_route(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_route_attribute(const int32_t seqid);
  void sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& thrift_route_entry);
  int32_t send_sai_thrift_get_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry);
  void recv_sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_create_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  int32_t send_sai_thrift_create_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  sai_thrift_status_t recv_sai_thrift_create_routes(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode);
  int32_t send_sai_thrift_remove_routes(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode);
  sai_thrift_status_t recv_sai_thrift_remove_routes(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_routes_attribute(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const int8_t mode);
  int32_t send_sai_thrift_set_routes_attribute(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const std::vector<sai_thrift_attribute_t> & thrift_attr_list, const int8_t mode);
  sai_thrift_status_t recv_sai_thrift_set_routes_attribute(const int32_t seqid);
  void sai_thrift_get_routes_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode);
  int32_t send_sai_thrift_get_routes_attribute(const std::vector<sai_thrift_route_entry_t> & thrift_route_entry_list, const int8_t mode);
  void recv_sai_thrift_get_routes_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_router_interface(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id);
  int32_t send_sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id);
  sai_thrift_status_t recv_sai_thrift_remove_router_interface(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_router_interface_attribute(const int32_t seqid);
  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rif_id);
  int32_t send_sai_thrift_get_router_interface_attribute(const sai_thrift_object_id_t rif_id);
  void recv_sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_router_interface_get_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_router_interface_get_stats(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_router_interface_get_stats(std::vector<int64_t> & _return, const int32_t seqid);
  void sai_thrift_router_interface_get_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  int32_t send_sai_thrift_router_interface_get_stats_ext(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_router_interface_get_stats_ext(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_router_interface_clear_stats(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_router_interface_clear_stats(const sai_thrift_object_id_t rif_id, const std::vector<sai_thrift_router_interface_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_router_interface_clear_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id);
  int32_t send_sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id);
  sai_thrift_status_t recv_sai_thrift_remove_next_hop(const int32_t seqid);
  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_id);
  int32_t send_sai_thrift_get_next_hop_attribute(const sai_thrift_object_id_t next_hop_id);
  void recv_sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid);
  int32_t send_sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid);
  sai_thrift_status_t recv_sai_thrift_remove_next_hop_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_next_hop_group_attribute(const int32_t seqid);
  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_oid);
  int32_t send_sai_thrift_get_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid);
  void recv_sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid);
  int32_t send_sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid);
  sai_thrift_status_t recv_sai_thrift_remove_next_hop_group_member(const int32_t seqid);
  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_member_oid);
  int32_t send_sai_thrift_get_next_hop_group_member_attribute(const sai_thrift_object_id_t nhop_group_member_oid);
  void recv_sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id);
  int32_t send_sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id);
  sai_thrift_status_t recv_sai_thrift_remove_lag(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_lag_attribute(const int32_t seqid);
  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_id);
  int32_t send_sai_thrift_get_lag_attribute(const sai_thrift_object_id_t lag_id);
  void recv_sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id);
  int32_t send_sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id);
  sai_thrift_status_t recv_sai_thrift_remove_lag_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_lag_member_attribute(const int32_t seqid);
  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_id);
  int32_t send_sai_thrift_get_lag_member_attribute(const sai_thrift_object_id_t lag_member_id);
  void recv_sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_stp_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id);
  int32_t send_sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id);
  sai_thrift_status_t recv_sai_thrift_remove_stp_entry(const int32_t seqid);
  void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_id);
  int32_t send_sai_thrift_get_stp_attribute(const sai_thrift_object_id_t stp_id);
  void recv_sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_stp_port(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_id);
  int32_t send_sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_id);
  sai_thrift_status_t recv_sai_thrift_remove_stp_port(const int32_t seqid);
  void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_port_id);
  int32_t send_sai_thrift_get_stp_port_attribute(const sai_thrift_object_id_t stp_port_id);
  void recv_sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state);
  int32_t send_sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state);
  sai_thrift_status_t recv_sai_thrift_set_stp_port_state(const int32_t seqid);
  sai_thrift_port_stp_port_state_t sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id);
  int32_t send_sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id);
  sai_thrift_port_stp_port_state_t recv_sai_thrift_get_stp_port_state(const int32_t seqid);
  void sai_thrift_create_stp_ports(sai_thrift_results_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  int32_t send_sai_thrift_create_stp_ports(const std::vector<sai_thrift_attribute_t> & thrift_attr_lists, const std::vector<int32_t> & thrift_attr_count_lists, const int8_t mode);
  void recv_sai_thrift_create_stp_ports(sai_thrift_results_t& _return, const int32_t seqid);
  void sai_thrift_remove_stp_ports(sai_thrift_status_list_t& _return, const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode);
  int32_t send_sai_thrift_remove_stp_ports(const std::vector<sai_thrift_object_id_t> & thrift_object_id_list, const int8_t mode);
  void recv_sai_thrift_remove_stp_ports(sai_thrift_status_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_neighbor_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  int32_t send_sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  sai_thrift_status_t recv_sai_thrift_remove_neighbor_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_all_neighbor_entry();
  int32_t send_sai_thrift_remove_all_neighbor_entry();
  sai_thrift_status_t recv_sai_thrift_remove_all_neighbor_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_neighbor_entry_attribute(const int32_t seqid);
  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  int32_t send_sai_thrift_get_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  void recv_sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const std::vector<int32_t> & thrift_attr_ids);
  int32_t send_sai_thrift_get_switch_attribute(const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return);
  int32_t send_sai_thrift_get_port_list_by_front_port();
  void recv_sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_get_cpu_port_id();
  int32_t send_sai_thrift_get_cpu_port_id();
  sai_thrift_object_id_t recv_sai_thrift_get_cpu_port_id(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_get_default_trap_group();
  int32_t send_sai_thrift_get_default_trap_group();
  sai_thrift_object_id_t recv_sai_thrift_get_default_trap_group(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_get_default_router_id();
  int32_t send_sai_thrift_get_default_router_id();
  sai_thrift_object_id_t recv_sai_thrift_get_default_router_id(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_get_default_1q_bridge_id();
  int32_t send_sai_thrift_get_default_1q_bridge_id();
  sai_thrift_object_id_t recv_sai_thrift_get_default_1q_bridge_id(const int32_t seqid);
  void sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return);
  int32_t send_sai_thrift_get_default_vlan_id();
  void recv_sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_get_port_id_by_front_port(const std::string& port_name);
  int32_t send_sai_thrift_get_port_id_by_front_port(const std::string& port_name);
  sai_thrift_object_id_t recv_sai_thrift_get_port_id_by_front_port(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute);
  int32_t send_sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute);
  sai_thrift_status_t recv_sai_thrift_set_switch_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_switch();
  int32_t send_sai_thrift_create_switch();
  sai_thrift_object_id_t recv_sai_thrift_create_switch(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_switch();
  int32_t send_sai_thrift_remove_switch();
  sai_thrift_status_t recv_sai_thrift_remove_switch(const int32_t seqid);
  void sai_thrift_get_switch_stats(std::vector<int64_t> & _return, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_switch_stats(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_switch_stats(std::vector<int64_t> & _return, const int32_t seqid);
  void sai_thrift_get_switch_stats_ext(std::vector<int64_t> & _return, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_switch_stats_ext(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_switch_stats_ext(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_clear_switch_stats(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_clear_switch_stats(const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_switch_stats(const int32_t seqid);
  void sai_thrift_create_bridge_port(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void recv_sai_thrift_create_bridge_port(sai_thrift_result_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id);
  int32_t send_sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id);
  sai_thrift_status_t recv_sai_thrift_remove_bridge_port(const int32_t seqid);
  void sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return, const sai_thrift_object_id_t bridge_id);
  int32_t send_sai_thrift_get_bridge_port_list(const sai_thrift_object_id_t bridge_id);
  void recv_sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return, const int32_t seqid);
  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_id);
  int32_t send_sai_thrift_get_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id);
  void recv_sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_bridge_port_attribute(const int32_t seqid);
  void sai_thrift_create_bridge(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void recv_sai_thrift_create_bridge(sai_thrift_result_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id);
  int32_t send_sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id);
  sai_thrift_status_t recv_sai_thrift_remove_bridge(const int32_t seqid);
  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_id);
  int32_t send_sai_thrift_get_bridge_attribute(const sai_thrift_object_id_t bridge_id);
  void recv_sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_bridge_attribute(const int32_t seqid);
  void sai_thrift_get_bridge_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_bridge_port_stats(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_bridge_port_stats(std::vector<int64_t> & _return, const int32_t seqid);
  void sai_thrift_get_bridge_port_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_bridge_port_stats_ext(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_bridge_port_stats_ext(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_id, const std::vector<sai_thrift_bridge_port_stat_counter_t> & thrift_counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_bridge_port_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id);
  int32_t send_sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif(const int32_t seqid);
  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hif_id);
  int32_t send_sai_thrift_get_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id);
  void recv_sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_table_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  int32_t send_sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif_table_entry(const int32_t seqid);
  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  int32_t send_sai_thrift_get_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  void recv_sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_table_entry_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  int32_t send_sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif_trap_group(const int32_t seqid);
  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  int32_t send_sai_thrift_get_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  void recv_sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_trap_group_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id);
  int32_t send_sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif_trap(const int32_t seqid);
  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_id);
  int32_t send_sai_thrift_get_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id);
  void recv_sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_trap_attribute(const int32_t seqid);
  sai_thrift_status_t sai_thrift_send_hostif_packet(const sai_thrift_object_id_t thrift_hif_id, const std::string& packet_data, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_send_hostif_packet(const sai_thrift_object_id_t thrift_hif_id, const std::string& packet_data, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_send_hostif_packet(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id);
  int32_t send_sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_table(const int32_t seqid);
  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids);
  int32_t send_sai_thrift_get_acl_table_attribute(const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry);
  int32_t send_sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry);
  sai_thrift_status_t recv_sai_thrift_remove_acl_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_acl_entry_attribute(const int32_t seqid);
  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  int32_t send_sai_thrift_get_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id);
  int32_t send_sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_table_group(const int32_t seqid);
  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_id);
  int32_t send_sai_thrift_get_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_id);
  void recv_sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id);
  int32_t send_sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_table_group_member(const int32_t seqid);
  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_id);
  int32_t send_sai_thrift_get_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_id);
  void recv_sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_counter(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id);
  int32_t send_sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_counter(const int32_t seqid);
  void sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids);
  int32_t send_sai_thrift_get_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_range(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_id);
  int32_t send_sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_range(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hash(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id);
  int32_t send_sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id);
  sai_thrift_status_t recv_sai_thrift_remove_hash(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hash_attribute(const int32_t seqid);
  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hash_id);
  int32_t send_sai_thrift_get_hash_attribute(const sai_thrift_object_id_t thrift_hash_id);
  void recv_sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id);
  int32_t send_sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_udf_group(const int32_t seqid);
  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_group_id);
  int32_t send_sai_thrift_get_udf_group_attribute(const sai_thrift_object_id_t thrift_udf_group_id);
  void recv_sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_match(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id);
  int32_t send_sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id);
  sai_thrift_status_t recv_sai_thrift_remove_udf_match(const int32_t seqid);
  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_match_id);
  int32_t send_sai_thrift_get_udf_match_attribute(const sai_thrift_object_id_t thrift_udf_match_id);
  void recv_sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id);
  int32_t send_sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id);
  sai_thrift_status_t recv_sai_thrift_remove_udf(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_udf_attribute(const int32_t seqid);
  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_id);
  int32_t send_sai_thrift_get_udf_attribute(const sai_thrift_object_id_t thrift_udf_id);
  void recv_sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_twamp_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_twamp_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_twamp_session(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_twamp_session(const sai_thrift_object_id_t session_id);
  int32_t send_sai_thrift_remove_twamp_session(const sai_thrift_object_id_t session_id);
  sai_thrift_status_t recv_sai_thrift_remove_twamp_session(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_twamp_attribute(const sai_thrift_object_id_t thrift_twamp_session_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_twamp_attribute(const sai_thrift_object_id_t thrift_twamp_session_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_twamp_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_mirror_session(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id);
  int32_t send_sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id);
  sai_thrift_status_t recv_sai_thrift_remove_mirror_session(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_mirror_attribute(const int32_t seqid);
  void sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_mirror_id);
  int32_t send_sai_thrift_get_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id);
  void recv_sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_inseg_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  int32_t send_sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  sai_thrift_status_t recv_sai_thrift_remove_inseg_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_inseg_entry_attribute(const int32_t seqid);
  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  int32_t send_sai_thrift_get_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  void recv_sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_dump_log(const std::string& dump_file_name);
  int32_t send_sai_thrift_dump_log(const std::string& dump_file_name);
  sai_thrift_status_t recv_sai_thrift_dump_log(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_policer(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id);
  int32_t send_sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id);
  sai_thrift_status_t recv_sai_thrift_remove_policer(const int32_t seqid);
  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_policer_id);
  int32_t send_sai_thrift_get_policer_attribute(const sai_thrift_object_id_t thrift_policer_id);
  void recv_sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_policer_attribute(const int32_t seqid);
  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  int32_t send_sai_thrift_get_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  void recv_sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  int32_t send_sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  sai_thrift_status_t recv_sai_thrift_clear_policer_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler_profile(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id);
  int32_t send_sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id);
  sai_thrift_status_t recv_sai_thrift_remove_scheduler_profile(const int32_t seqid);
  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_scheduler_id);
  int32_t send_sai_thrift_get_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id);
  void recv_sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_scheduler_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id);
  int32_t send_sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_scheduler_group(const int32_t seqid);
  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_id);
  int32_t send_sai_thrift_get_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id);
  void recv_sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_scheduler_group_attribute(const int32_t seqid);
  void sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_queue_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_queue(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id);
  int32_t send_sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id);
  sai_thrift_status_t recv_sai_thrift_remove_queue(const int32_t seqid);
  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_id);
  int32_t send_sai_thrift_get_queue_attribute(const sai_thrift_object_id_t queue_id);
  void recv_sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_queue_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_buffer_profile(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id);
  int32_t send_sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id);
  sai_thrift_status_t recv_sai_thrift_remove_buffer_profile(const int32_t seqid);
  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_id);
  int32_t send_sai_thrift_get_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id);
  void recv_sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_buffer_profile_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_pool_profile(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_priority_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id);
  int32_t send_sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_priority_group(const int32_t seqid);
  void sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t priority_group_id);
  int32_t send_sai_thrift_get_priority_group_attribute(const sai_thrift_object_id_t priority_group_id);
  void recv_sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_priority_group_attribute(const int32_t seqid);
  void sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_pg_stats(const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_wred_profile(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id);
  int32_t send_sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id);
  sai_thrift_status_t recv_sai_thrift_remove_wred_profile(const int32_t seqid);
  void sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_id);
  int32_t send_sai_thrift_get_wred_attribute_profile(const sai_thrift_object_id_t wred_id);
  void recv_sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_wred_attribute_profile(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_qos_map(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id);
  int32_t send_sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id);
  sai_thrift_status_t recv_sai_thrift_remove_qos_map(const int32_t seqid);
  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_id);
  int32_t send_sai_thrift_get_qos_map_attribute(const sai_thrift_object_id_t qos_map_id);
  void recv_sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_qos_map_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id);
  int32_t send_sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id);
  sai_thrift_status_t recv_sai_thrift_remove_l2mc_group(const int32_t seqid);
  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id);
  int32_t send_sai_thrift_get_l2mc_group_attribute(const sai_thrift_object_id_t grp_id);
  void recv_sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id);
  int32_t send_sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id);
  sai_thrift_status_t recv_sai_thrift_remove_l2mc_group_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_l2mc_group_member_attribute(const int32_t seqid);
  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id);
  int32_t send_sai_thrift_get_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id);
  void recv_sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_l2mc_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  int32_t send_sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  sai_thrift_status_t recv_sai_thrift_remove_l2mc_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_l2mc_entry_attribute(const int32_t seqid);
  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  int32_t send_sai_thrift_get_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  void recv_sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_mcast_fdb_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  int32_t send_sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  sai_thrift_status_t recv_sai_thrift_remove_mcast_fdb_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_mcast_fdb_entry_attribute(const int32_t seqid);
  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  int32_t send_sai_thrift_get_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  void recv_sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id);
  int32_t send_sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id);
  sai_thrift_status_t recv_sai_thrift_remove_ipmc_group(const int32_t seqid);
  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id);
  int32_t send_sai_thrift_get_ipmc_group_attribute(const sai_thrift_object_id_t grp_id);
  void recv_sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id);
  int32_t send_sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id);
  sai_thrift_status_t recv_sai_thrift_remove_ipmc_group_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_ipmc_group_member_attribute(const int32_t seqid);
  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id);
  int32_t send_sai_thrift_get_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id);
  void recv_sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id);
  int32_t send_sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id);
  sai_thrift_status_t recv_sai_thrift_remove_rpf_group(const int32_t seqid);
  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id);
  int32_t send_sai_thrift_get_rpf_group_attribute(const sai_thrift_object_id_t grp_id);
  void recv_sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id);
  int32_t send_sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id);
  sai_thrift_status_t recv_sai_thrift_remove_rpf_group_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_rpf_group_member_attribute(const int32_t seqid);
  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id);
  int32_t send_sai_thrift_get_rpf_group_member_attribute(const sai_thrift_object_id_t member_id);
  void recv_sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_ipmc_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  int32_t send_sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  sai_thrift_status_t recv_sai_thrift_remove_ipmc_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_ipmc_entry_attribute(const int32_t seqid);
  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  int32_t send_sai_thrift_get_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  void recv_sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_samplepacket(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id);
  int32_t send_sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id);
  sai_thrift_status_t recv_sai_thrift_remove_samplepacket(const int32_t seqid);
  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_id);
  int32_t send_sai_thrift_get_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id);
  void recv_sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_samplepacket_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id);
  int32_t send_sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel_map_entry(const int32_t seqid);
  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_id);
  int32_t send_sai_thrift_get_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id);
  void recv_sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_map_entry_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id);
  int32_t send_sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel_map(const int32_t seqid);
  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_id);
  int32_t send_sai_thrift_get_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id);
  void recv_sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_map_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id);
  int32_t send_sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel(const int32_t seqid);
  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids);
  int32_t send_sai_thrift_get_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_attribute(const int32_t seqid);
  void sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_tunnel_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_term_table_entry(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id);
  int32_t send_sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel_term_table_entry(const int32_t seqid);
  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  int32_t send_sai_thrift_get_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_term_table_entry_attribute(const int32_t seqid);
  void sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_id);
  int32_t send_sai_thrift_get_cpu_packet_attribute(const sai_thrift_object_id_t switch_id);
  void recv_sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return);
  int32_t send_sai_thrift_get_cpu_packet_count();
  void recv_sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return, const int32_t seqid);
  void sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return);
  int32_t send_sai_thrift_clear_cpu_packet_info();
  void recv_sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level);
  int32_t send_sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level);
  sai_thrift_status_t recv_sai_thrift_log_set(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_isolation_group(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_isolation_group(const sai_thrift_object_id_t iso_group_oid);
  int32_t send_sai_thrift_remove_isolation_group(const sai_thrift_object_id_t iso_group_oid);
  sai_thrift_status_t recv_sai_thrift_remove_isolation_group(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_isolation_group_member(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t member_oid);
  int32_t send_sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t member_oid);
  sai_thrift_status_t recv_sai_thrift_remove_isolation_group_member(const int32_t seqid);
  void sai_thrift_get_isolation_group_attributes(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t iso_group_oid);
  int32_t send_sai_thrift_get_isolation_group_attributes(const sai_thrift_object_id_t iso_group_oid);
  void recv_sai_thrift_get_isolation_group_attributes(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_isolation_group_member_attributes(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_oid);
  int32_t send_sai_thrift_get_isolation_group_member_attributes(const sai_thrift_object_id_t member_oid);
  void recv_sai_thrift_get_isolation_group_member_attributes(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_counter(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid);
  int32_t send_sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid);
  sai_thrift_status_t recv_sai_thrift_remove_counter(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_counter_attribute(const sai_thrift_object_id_t thrift_counter_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_counter_attribute(const sai_thrift_object_id_t thrift_counter_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_counter_attribute(const int32_t seqid);
  void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_counter_id);
  int32_t send_sai_thrift_get_counter_attribute(const sai_thrift_object_id_t thrift_counter_id);
  void recv_sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_counter_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_counter_stats(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_counter_stats(std::vector<int64_t> & _return, const int32_t seqid);
  void sai_thrift_get_counter_stats_ext(std::vector<int64_t> & _return, const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  int32_t send_sai_thrift_get_counter_stats_ext(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & counter_ids, const int8_t mode, const int32_t number_of_counters);
  void recv_sai_thrift_get_counter_stats_ext(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & thrift_counter_ids, const int32_t number_of_counters);
  int32_t send_sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_id, const std::vector<sai_thrift_stat_id_t> & thrift_counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_counter_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_debug_counter(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid);
  int32_t send_sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid);
  sai_thrift_status_t recv_sai_thrift_remove_debug_counter(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t thrift_debug_counter_id, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t thrift_debug_counter_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_debug_counter_attribute(const int32_t seqid);
  void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_debug_counter_id);
  int32_t send_sai_thrift_get_debug_counter_attribute(const sai_thrift_object_id_t thrift_debug_counter_id);
  void recv_sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_status_t sai_thrift_create_nat(const sai_thrift_nat_entry_t& thrift_nat_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_nat(const sai_thrift_nat_entry_t& thrift_nat_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_nat(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_nat(const sai_thrift_nat_entry_t& thrift_nat_entry);
  int32_t send_sai_thrift_remove_nat(const sai_thrift_nat_entry_t& thrift_nat_entry);
  sai_thrift_status_t recv_sai_thrift_remove_nat(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_nat_attribute(const sai_thrift_nat_entry_t& thrift_nat_entry, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_nat_attribute(const sai_thrift_nat_entry_t& thrift_nat_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_nat_attribute(const int32_t seqid);
  void sai_thrift_get_nat_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_nat_entry_t& thrift_nat_entry);
  int32_t send_sai_thrift_get_nat_attribute(const sai_thrift_nat_entry_t& thrift_nat_entry);
  void recv_sai_thrift_get_nat_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_bfd(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_bfd(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_bfd(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_bfd(const sai_thrift_object_id_t bfd_oid);
  int32_t send_sai_thrift_remove_bfd(const sai_thrift_object_id_t bfd_oid);
  sai_thrift_status_t recv_sai_thrift_remove_bfd(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_bfd_attribute(const sai_thrift_object_id_t bfd_oid, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_bfd_attribute(const sai_thrift_object_id_t bfd_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_bfd_attribute(const int32_t seqid);
  void sai_thrift_get_bfd_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bfd_oid);
  int32_t send_sai_thrift_get_bfd_attribute(const sai_thrift_object_id_t bfd_oid);
  void recv_sai_thrift_get_bfd_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_y1731_meg(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_y1731_meg(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_y1731_meg(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_y1731_meg(const sai_thrift_object_id_t y1731_meg_oid);
  int32_t send_sai_thrift_remove_y1731_meg(const sai_thrift_object_id_t y1731_meg_oid);
  sai_thrift_status_t recv_sai_thrift_remove_y1731_meg(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_y1731_meg_attribute(const sai_thrift_object_id_t y1731_meg_oid, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_y1731_meg_attribute(const sai_thrift_object_id_t y1731_meg_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_y1731_meg_attribute(const int32_t seqid);
  void sai_thrift_get_y1731_meg_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_meg_oid);
  int32_t send_sai_thrift_get_y1731_meg_attribute(const sai_thrift_object_id_t y1731_meg_oid);
  void recv_sai_thrift_get_y1731_meg_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_y1731_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_y1731_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_y1731_session(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_y1731_session(const sai_thrift_object_id_t y1731_session_oid);
  int32_t send_sai_thrift_remove_y1731_session(const sai_thrift_object_id_t y1731_session_oid);
  sai_thrift_status_t recv_sai_thrift_remove_y1731_session(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_y1731_session_attribute(const sai_thrift_object_id_t y1731_session_oid, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_y1731_session_attribute(const sai_thrift_object_id_t y1731_session_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_y1731_session_attribute(const int32_t seqid);
  void sai_thrift_get_y1731_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_session_oid);
  int32_t send_sai_thrift_get_y1731_session_attribute(const sai_thrift_object_id_t y1731_session_oid);
  void recv_sai_thrift_get_y1731_session_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_y1731_rmep(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_y1731_rmep(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_y1731_rmep(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_y1731_rmep(const sai_thrift_object_id_t y1731_rmep_oid);
  int32_t send_sai_thrift_remove_y1731_rmep(const sai_thrift_object_id_t y1731_rmep_oid);
  sai_thrift_status_t recv_sai_thrift_remove_y1731_rmep(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_y1731_rmep_attribute(const sai_thrift_object_id_t y1731_rmep_oid, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_y1731_rmep_attribute(const sai_thrift_object_id_t y1731_rmep_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_y1731_rmep_attribute(const int32_t seqid);
  void sai_thrift_get_y1731_rmep_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t y1731_rmep_oid);
  int32_t send_sai_thrift_get_y1731_rmep_attribute(const sai_thrift_object_id_t y1731_rmep_oid);
  void recv_sai_thrift_get_y1731_rmep_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_y1731_session_lm_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t y1731_session_oid, const std::vector<sai_thrift_stat_id_t> & lm_stats_ids, const int32_t number_of_stats);
  int32_t send_sai_thrift_get_y1731_session_lm_stats(const sai_thrift_object_id_t y1731_session_oid, const std::vector<sai_thrift_stat_id_t> & lm_stats_ids, const int32_t number_of_stats);
  void recv_sai_thrift_get_y1731_session_lm_stats(std::vector<int64_t> & _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_port(const std::string& port_name, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_port(const std::string& port_name, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_port(const sai_thrift_object_id_t port_oid);
  int32_t send_sai_thrift_remove_port(const sai_thrift_object_id_t port_oid);
  sai_thrift_status_t recv_sai_thrift_remove_port(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ptp_domain(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_ptp_domain(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ptp_domain(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_ptp_domain(const sai_thrift_object_id_t ptp_oid);
  int32_t send_sai_thrift_remove_ptp_domain(const sai_thrift_object_id_t ptp_oid);
  sai_thrift_status_t recv_sai_thrift_remove_ptp_domain(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_ptp_domain_attribute(const sai_thrift_object_id_t ptp_oid, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_ptp_domain_attribute(const sai_thrift_object_id_t ptp_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_ptp_domain_attribute(const int32_t seqid);
  void sai_thrift_get_ptp_domain_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ptp_oid);
  int32_t send_sai_thrift_get_ptp_domain_attribute(const sai_thrift_object_id_t ptp_oid);
  void recv_sai_thrift_get_ptp_domain_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_es(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  int32_t send_sai_thrift_create_es(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_es(const int32_t seqid);
  sai_thrift_status_t sai_thrift_remove_es(const sai_thrift_object_id_t es_oid);
  int32_t send_sai_thrift_remove_es(const sai_thrift_object_id_t es_oid);
  sai_thrift_status_t recv_sai_thrift_remove_es(const int32_t seqid);
  sai_thrift_status_t sai_thrift_set_es_attribute(const sai_thrift_object_id_t es_oid, const sai_thrift_attribute_t& thrift_attr);
  int32_t send_sai_thrift_set_es_attribute(const sai_thrift_object_id_t es_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_es_attribute(const int32_t seqid);
  void sai_thrift_get_es_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t es_oid);
  int32_t send_sai_thrift_get_es_attribute(const sai_thrift_object_id_t es_oid);
  void recv_sai_thrift_get_es_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
