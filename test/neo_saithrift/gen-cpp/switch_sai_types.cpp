/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "switch_sai_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace switch_sai {


sai_thrift_fdb_entry_t::~sai_thrift_fdb_entry_t() noexcept {
}


void sai_thrift_fdb_entry_t::__set_mac_address(const sai_thrift_mac_t& val) {
  this->mac_address = val;
}

void sai_thrift_fdb_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_fdb_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac_address);
          this->__isset.mac_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_fdb_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_fdb_entry_t");

  xfer += oprot->writeFieldBegin("mac_address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mac_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_fdb_entry_t &a, sai_thrift_fdb_entry_t &b) {
  using ::std::swap;
  swap(a.mac_address, b.mac_address);
  swap(a.bv_id, b.bv_id);
  swap(a.__isset, b.__isset);
}

sai_thrift_fdb_entry_t::sai_thrift_fdb_entry_t(const sai_thrift_fdb_entry_t& other0) {
  mac_address = other0.mac_address;
  bv_id = other0.bv_id;
  __isset = other0.__isset;
}
sai_thrift_fdb_entry_t& sai_thrift_fdb_entry_t::operator=(const sai_thrift_fdb_entry_t& other1) {
  mac_address = other1.mac_address;
  bv_id = other1.bv_id;
  __isset = other1.__isset;
  return *this;
}
void sai_thrift_fdb_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_fdb_entry_t(";
  out << "mac_address=" << to_string(mac_address);
  out << ", " << "bv_id=" << to_string(bv_id);
  out << ")";
}


sai_thrift_vlan_port_t::~sai_thrift_vlan_port_t() noexcept {
}


void sai_thrift_vlan_port_t::__set_port_id(const sai_thrift_object_id_t val) {
  this->port_id = val;
}

void sai_thrift_vlan_port_t::__set_tagging_mode(const sai_thrift_vlan_tagging_mode_t val) {
  this->tagging_mode = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_port_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_vlan_port_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tagging_mode);
          this->__isset.tagging_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vlan_port_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_vlan_port_t");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagging_mode", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->tagging_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_vlan_port_t &a, sai_thrift_vlan_port_t &b) {
  using ::std::swap;
  swap(a.port_id, b.port_id);
  swap(a.tagging_mode, b.tagging_mode);
  swap(a.__isset, b.__isset);
}

sai_thrift_vlan_port_t::sai_thrift_vlan_port_t(const sai_thrift_vlan_port_t& other2) {
  port_id = other2.port_id;
  tagging_mode = other2.tagging_mode;
  __isset = other2.__isset;
}
sai_thrift_vlan_port_t& sai_thrift_vlan_port_t::operator=(const sai_thrift_vlan_port_t& other3) {
  port_id = other3.port_id;
  tagging_mode = other3.tagging_mode;
  __isset = other3.__isset;
  return *this;
}
void sai_thrift_vlan_port_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_vlan_port_t(";
  out << "port_id=" << to_string(port_id);
  out << ", " << "tagging_mode=" << to_string(tagging_mode);
  out << ")";
}


sai_thrift_ip_t::~sai_thrift_ip_t() noexcept {
}


void sai_thrift_ip_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
__isset.ip4 = true;
}

void sai_thrift_ip_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
__isset.ip6 = true;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_t");

  if (this->__isset.ip4) {
    xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->ip4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip6) {
    xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->ip6);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_t &a, sai_thrift_ip_t &b) {
  using ::std::swap;
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_t::sai_thrift_ip_t(const sai_thrift_ip_t& other4) {
  ip4 = other4.ip4;
  ip6 = other4.ip6;
  __isset = other4.__isset;
}
sai_thrift_ip_t& sai_thrift_ip_t::operator=(const sai_thrift_ip_t& other5) {
  ip4 = other5.ip4;
  ip6 = other5.ip6;
  __isset = other5.__isset;
  return *this;
}
void sai_thrift_ip_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_t(";
  out << "ip4="; (__isset.ip4 ? (out << to_string(ip4)) : (out << "<null>"));
  out << ", " << "ip6="; (__isset.ip6 ? (out << to_string(ip6)) : (out << "<null>"));
  out << ")";
}


sai_thrift_ip_address_t::~sai_thrift_ip_address_t() noexcept {
}


void sai_thrift_ip_address_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_address_t::__set_addr(const sai_thrift_ip_t& val) {
  this->addr = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_address_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_address_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_address_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_address_t &a, sai_thrift_ip_address_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_address_t::sai_thrift_ip_address_t(const sai_thrift_ip_address_t& other6) {
  addr_family = other6.addr_family;
  addr = other6.addr;
  __isset = other6.__isset;
}
sai_thrift_ip_address_t& sai_thrift_ip_address_t::operator=(const sai_thrift_ip_address_t& other7) {
  addr_family = other7.addr_family;
  addr = other7.addr;
  __isset = other7.__isset;
  return *this;
}
void sai_thrift_ip_address_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_address_t(";
  out << "addr_family=" << to_string(addr_family);
  out << ", " << "addr=" << to_string(addr);
  out << ")";
}


sai_thrift_ip_prefix_t::~sai_thrift_ip_prefix_t() noexcept {
}


void sai_thrift_ip_prefix_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_prefix_t::__set_addr(const sai_thrift_ip_t& val) {
  this->addr = val;
}

void sai_thrift_ip_prefix_t::__set_mask(const sai_thrift_ip_t& val) {
  this->mask = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_prefix_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_prefix_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_prefix_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_prefix_t &a, sai_thrift_ip_prefix_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.mask, b.mask);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_prefix_t::sai_thrift_ip_prefix_t(const sai_thrift_ip_prefix_t& other8) {
  addr_family = other8.addr_family;
  addr = other8.addr;
  mask = other8.mask;
  __isset = other8.__isset;
}
sai_thrift_ip_prefix_t& sai_thrift_ip_prefix_t::operator=(const sai_thrift_ip_prefix_t& other9) {
  addr_family = other9.addr_family;
  addr = other9.addr;
  mask = other9.mask;
  __isset = other9.__isset;
  return *this;
}
void sai_thrift_ip_prefix_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_prefix_t(";
  out << "addr_family=" << to_string(addr_family);
  out << ", " << "addr=" << to_string(addr);
  out << ", " << "mask=" << to_string(mask);
  out << ")";
}


sai_thrift_object_list_t::~sai_thrift_object_list_t() noexcept {
}


void sai_thrift_object_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_object_list_t::__set_object_id_list(const std::vector<sai_thrift_object_id_t> & val) {
  this->object_id_list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_object_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_object_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->object_id_list.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->object_id_list.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->object_id_list[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.object_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_object_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_object_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("object_id_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->object_id_list.size()));
    std::vector<sai_thrift_object_id_t> ::const_iterator _iter15;
    for (_iter15 = this->object_id_list.begin(); _iter15 != this->object_id_list.end(); ++_iter15)
    {
      xfer += oprot->writeI64((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_object_list_t &a, sai_thrift_object_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.object_id_list, b.object_id_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_object_list_t::sai_thrift_object_list_t(const sai_thrift_object_list_t& other16) {
  count = other16.count;
  object_id_list = other16.object_id_list;
  __isset = other16.__isset;
}
sai_thrift_object_list_t& sai_thrift_object_list_t::operator=(const sai_thrift_object_list_t& other17) {
  count = other17.count;
  object_id_list = other17.object_id_list;
  __isset = other17.__isset;
  return *this;
}
void sai_thrift_object_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_object_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "object_id_list=" << to_string(object_id_list);
  out << ")";
}


sai_thrift_vlan_list_t::~sai_thrift_vlan_list_t() noexcept {
}


void sai_thrift_vlan_list_t::__set_vlan_count(const int32_t val) {
  this->vlan_count = val;
}

void sai_thrift_vlan_list_t::__set_vlan_list(const std::vector<sai_thrift_vlan_id_t> & val) {
  this->vlan_list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_vlan_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vlan_count);
          this->__isset.vlan_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vlan_list.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->vlan_list.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readI16(this->vlan_list[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vlan_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vlan_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_vlan_list_t");

  xfer += oprot->writeFieldBegin("vlan_count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->vlan_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vlan_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->vlan_list.size()));
    std::vector<sai_thrift_vlan_id_t> ::const_iterator _iter23;
    for (_iter23 = this->vlan_list.begin(); _iter23 != this->vlan_list.end(); ++_iter23)
    {
      xfer += oprot->writeI16((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_vlan_list_t &a, sai_thrift_vlan_list_t &b) {
  using ::std::swap;
  swap(a.vlan_count, b.vlan_count);
  swap(a.vlan_list, b.vlan_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_vlan_list_t::sai_thrift_vlan_list_t(const sai_thrift_vlan_list_t& other24) {
  vlan_count = other24.vlan_count;
  vlan_list = other24.vlan_list;
  __isset = other24.__isset;
}
sai_thrift_vlan_list_t& sai_thrift_vlan_list_t::operator=(const sai_thrift_vlan_list_t& other25) {
  vlan_count = other25.vlan_count;
  vlan_list = other25.vlan_list;
  __isset = other25.__isset;
  return *this;
}
void sai_thrift_vlan_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_vlan_list_t(";
  out << "vlan_count=" << to_string(vlan_count);
  out << ", " << "vlan_list=" << to_string(vlan_list);
  out << ")";
}


sai_thrift_s32_list_t::~sai_thrift_s32_list_t() noexcept {
}


void sai_thrift_s32_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_s32_list_t::__set_s32list(const std::vector<int32_t> & val) {
  this->s32list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_s32_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_s32_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->s32list.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->s32list.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += iprot->readI32(this->s32list[_i30]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.s32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_s32_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_s32_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->s32list.size()));
    std::vector<int32_t> ::const_iterator _iter31;
    for (_iter31 = this->s32list.begin(); _iter31 != this->s32list.end(); ++_iter31)
    {
      xfer += oprot->writeI32((*_iter31));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_s32_list_t &a, sai_thrift_s32_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.s32list, b.s32list);
  swap(a.__isset, b.__isset);
}

sai_thrift_s32_list_t::sai_thrift_s32_list_t(const sai_thrift_s32_list_t& other32) {
  count = other32.count;
  s32list = other32.s32list;
  __isset = other32.__isset;
}
sai_thrift_s32_list_t& sai_thrift_s32_list_t::operator=(const sai_thrift_s32_list_t& other33) {
  count = other33.count;
  s32list = other33.s32list;
  __isset = other33.__isset;
  return *this;
}
void sai_thrift_s32_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_s32_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "s32list=" << to_string(s32list);
  out << ")";
}


sai_thrift_status_list_t::~sai_thrift_status_list_t() noexcept {
}


void sai_thrift_status_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_status_list_t::__set_status_list(const std::vector<sai_thrift_status_t> & val) {
  this->status_list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_status_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_status_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->status_list.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->status_list.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += iprot->readI32(this->status_list[_i38]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.status_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_status_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_status_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->status_list.size()));
    std::vector<sai_thrift_status_t> ::const_iterator _iter39;
    for (_iter39 = this->status_list.begin(); _iter39 != this->status_list.end(); ++_iter39)
    {
      xfer += oprot->writeI32((*_iter39));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_status_list_t &a, sai_thrift_status_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.status_list, b.status_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_status_list_t::sai_thrift_status_list_t(const sai_thrift_status_list_t& other40) {
  count = other40.count;
  status_list = other40.status_list;
  __isset = other40.__isset;
}
sai_thrift_status_list_t& sai_thrift_status_list_t::operator=(const sai_thrift_status_list_t& other41) {
  count = other41.count;
  status_list = other41.status_list;
  __isset = other41.__isset;
  return *this;
}
void sai_thrift_status_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_status_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "status_list=" << to_string(status_list);
  out << ")";
}


sai_thrift_route_entry_list_t::~sai_thrift_route_entry_list_t() noexcept {
}


void sai_thrift_route_entry_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_route_entry_list_t::__set_thrift_route_entry_list(const std::vector<sai_thrift_route_entry_t> & val) {
  this->thrift_route_entry_list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_route_entry_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_route_entry_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_route_entry_list.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->thrift_route_entry_list.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += this->thrift_route_entry_list[_i46].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_route_entry_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_route_entry_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_route_entry_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_route_entry_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_route_entry_list.size()));
    std::vector<sai_thrift_route_entry_t> ::const_iterator _iter47;
    for (_iter47 = this->thrift_route_entry_list.begin(); _iter47 != this->thrift_route_entry_list.end(); ++_iter47)
    {
      xfer += (*_iter47).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_route_entry_list_t &a, sai_thrift_route_entry_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.thrift_route_entry_list, b.thrift_route_entry_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_route_entry_list_t::sai_thrift_route_entry_list_t(const sai_thrift_route_entry_list_t& other48) {
  count = other48.count;
  thrift_route_entry_list = other48.thrift_route_entry_list;
  __isset = other48.__isset;
}
sai_thrift_route_entry_list_t& sai_thrift_route_entry_list_t::operator=(const sai_thrift_route_entry_list_t& other49) {
  count = other49.count;
  thrift_route_entry_list = other49.thrift_route_entry_list;
  __isset = other49.__isset;
  return *this;
}
void sai_thrift_route_entry_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_route_entry_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "thrift_route_entry_list=" << to_string(thrift_route_entry_list);
  out << ")";
}


sai_thrift_acl_mask_t::~sai_thrift_acl_mask_t() noexcept {
}


void sai_thrift_acl_mask_t::__set_u8(const int8_t val) {
  this->u8 = val;
__isset.u8 = true;
}

void sai_thrift_acl_mask_t::__set_s8(const int8_t val) {
  this->s8 = val;
__isset.s8 = true;
}

void sai_thrift_acl_mask_t::__set_u16(const int16_t val) {
  this->u16 = val;
__isset.u16 = true;
}

void sai_thrift_acl_mask_t::__set_s16(const int16_t val) {
  this->s16 = val;
__isset.s16 = true;
}

void sai_thrift_acl_mask_t::__set_u32(const int32_t val) {
  this->u32 = val;
__isset.u32 = true;
}

void sai_thrift_acl_mask_t::__set_s32(const int32_t val) {
  this->s32 = val;
__isset.s32 = true;
}

void sai_thrift_acl_mask_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
__isset.mac = true;
}

void sai_thrift_acl_mask_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
__isset.ip4 = true;
}

void sai_thrift_acl_mask_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
__isset.ip6 = true;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_mask_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_mask_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_mask_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_mask_t");

  if (this->__isset.u8) {
    xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
    xfer += oprot->writeByte(this->u8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s8) {
    xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
    xfer += oprot->writeByte(this->s8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u16) {
    xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->u16);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s16) {
    xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
    xfer += oprot->writeI16(this->s16);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u32) {
    xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->u32);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s32) {
    xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->s32);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mac) {
    xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->mac);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip4) {
    xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->ip4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip6) {
    xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->ip6);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_mask_t &a, sai_thrift_acl_mask_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_mask_t::sai_thrift_acl_mask_t(const sai_thrift_acl_mask_t& other50) {
  u8 = other50.u8;
  s8 = other50.s8;
  u16 = other50.u16;
  s16 = other50.s16;
  u32 = other50.u32;
  s32 = other50.s32;
  mac = other50.mac;
  ip4 = other50.ip4;
  ip6 = other50.ip6;
  __isset = other50.__isset;
}
sai_thrift_acl_mask_t& sai_thrift_acl_mask_t::operator=(const sai_thrift_acl_mask_t& other51) {
  u8 = other51.u8;
  s8 = other51.s8;
  u16 = other51.u16;
  s16 = other51.s16;
  u32 = other51.u32;
  s32 = other51.s32;
  mac = other51.mac;
  ip4 = other51.ip4;
  ip6 = other51.ip6;
  __isset = other51.__isset;
  return *this;
}
void sai_thrift_acl_mask_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_mask_t(";
  out << "u8="; (__isset.u8 ? (out << to_string(u8)) : (out << "<null>"));
  out << ", " << "s8="; (__isset.s8 ? (out << to_string(s8)) : (out << "<null>"));
  out << ", " << "u16="; (__isset.u16 ? (out << to_string(u16)) : (out << "<null>"));
  out << ", " << "s16="; (__isset.s16 ? (out << to_string(s16)) : (out << "<null>"));
  out << ", " << "u32="; (__isset.u32 ? (out << to_string(u32)) : (out << "<null>"));
  out << ", " << "s32="; (__isset.s32 ? (out << to_string(s32)) : (out << "<null>"));
  out << ", " << "mac="; (__isset.mac ? (out << to_string(mac)) : (out << "<null>"));
  out << ", " << "ip4="; (__isset.ip4 ? (out << to_string(ip4)) : (out << "<null>"));
  out << ", " << "ip6="; (__isset.ip6 ? (out << to_string(ip6)) : (out << "<null>"));
  out << ")";
}


sai_thrift_acl_data_t::~sai_thrift_acl_data_t() noexcept {
}


void sai_thrift_acl_data_t::__set_u8(const int8_t val) {
  this->u8 = val;
__isset.u8 = true;
}

void sai_thrift_acl_data_t::__set_s8(const int8_t val) {
  this->s8 = val;
__isset.s8 = true;
}

void sai_thrift_acl_data_t::__set_u16(const int16_t val) {
  this->u16 = val;
__isset.u16 = true;
}

void sai_thrift_acl_data_t::__set_s16(const int16_t val) {
  this->s16 = val;
__isset.s16 = true;
}

void sai_thrift_acl_data_t::__set_u32(const int32_t val) {
  this->u32 = val;
__isset.u32 = true;
}

void sai_thrift_acl_data_t::__set_s32(const int32_t val) {
  this->s32 = val;
__isset.s32 = true;
}

void sai_thrift_acl_data_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
__isset.mac = true;
}

void sai_thrift_acl_data_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
__isset.ip4 = true;
}

void sai_thrift_acl_data_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
__isset.ip6 = true;
}

void sai_thrift_acl_data_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
__isset.oid = true;
}

void sai_thrift_acl_data_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
__isset.objlist = true;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_data_t");

  if (this->__isset.u8) {
    xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
    xfer += oprot->writeByte(this->u8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s8) {
    xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
    xfer += oprot->writeByte(this->s8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u16) {
    xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->u16);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s16) {
    xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
    xfer += oprot->writeI16(this->s16);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u32) {
    xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->u32);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s32) {
    xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->s32);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mac) {
    xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->mac);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip4) {
    xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->ip4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip6) {
    xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->ip6);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oid) {
    xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->oid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.objlist) {
    xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->objlist.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_data_t &a, sai_thrift_acl_data_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_data_t::sai_thrift_acl_data_t(const sai_thrift_acl_data_t& other52) {
  u8 = other52.u8;
  s8 = other52.s8;
  u16 = other52.u16;
  s16 = other52.s16;
  u32 = other52.u32;
  s32 = other52.s32;
  mac = other52.mac;
  ip4 = other52.ip4;
  ip6 = other52.ip6;
  oid = other52.oid;
  objlist = other52.objlist;
  __isset = other52.__isset;
}
sai_thrift_acl_data_t& sai_thrift_acl_data_t::operator=(const sai_thrift_acl_data_t& other53) {
  u8 = other53.u8;
  s8 = other53.s8;
  u16 = other53.u16;
  s16 = other53.s16;
  u32 = other53.u32;
  s32 = other53.s32;
  mac = other53.mac;
  ip4 = other53.ip4;
  ip6 = other53.ip6;
  oid = other53.oid;
  objlist = other53.objlist;
  __isset = other53.__isset;
  return *this;
}
void sai_thrift_acl_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_data_t(";
  out << "u8="; (__isset.u8 ? (out << to_string(u8)) : (out << "<null>"));
  out << ", " << "s8="; (__isset.s8 ? (out << to_string(s8)) : (out << "<null>"));
  out << ", " << "u16="; (__isset.u16 ? (out << to_string(u16)) : (out << "<null>"));
  out << ", " << "s16="; (__isset.s16 ? (out << to_string(s16)) : (out << "<null>"));
  out << ", " << "u32="; (__isset.u32 ? (out << to_string(u32)) : (out << "<null>"));
  out << ", " << "s32="; (__isset.s32 ? (out << to_string(s32)) : (out << "<null>"));
  out << ", " << "mac="; (__isset.mac ? (out << to_string(mac)) : (out << "<null>"));
  out << ", " << "ip4="; (__isset.ip4 ? (out << to_string(ip4)) : (out << "<null>"));
  out << ", " << "ip6="; (__isset.ip6 ? (out << to_string(ip6)) : (out << "<null>"));
  out << ", " << "oid="; (__isset.oid ? (out << to_string(oid)) : (out << "<null>"));
  out << ", " << "objlist="; (__isset.objlist ? (out << to_string(objlist)) : (out << "<null>"));
  out << ")";
}


sai_thrift_acl_field_data_t::~sai_thrift_acl_field_data_t() noexcept {
}


void sai_thrift_acl_field_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_field_data_t::__set_mask(const sai_thrift_acl_mask_t& val) {
  this->mask = val;
}

void sai_thrift_acl_field_data_t::__set_data(const sai_thrift_acl_data_t& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_field_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_field_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_field_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_field_data_t &a, sai_thrift_acl_field_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.mask, b.mask);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_field_data_t::sai_thrift_acl_field_data_t(const sai_thrift_acl_field_data_t& other54) {
  enable = other54.enable;
  mask = other54.mask;
  data = other54.data;
  __isset = other54.__isset;
}
sai_thrift_acl_field_data_t& sai_thrift_acl_field_data_t::operator=(const sai_thrift_acl_field_data_t& other55) {
  enable = other55.enable;
  mask = other55.mask;
  data = other55.data;
  __isset = other55.__isset;
  return *this;
}
void sai_thrift_acl_field_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_field_data_t(";
  out << "enable=" << to_string(enable);
  out << ", " << "mask=" << to_string(mask);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


sai_thrift_acl_parameter_t::~sai_thrift_acl_parameter_t() noexcept {
}


void sai_thrift_acl_parameter_t::__set_u8(const int8_t val) {
  this->u8 = val;
__isset.u8 = true;
}

void sai_thrift_acl_parameter_t::__set_s8(const int8_t val) {
  this->s8 = val;
__isset.s8 = true;
}

void sai_thrift_acl_parameter_t::__set_u16(const int16_t val) {
  this->u16 = val;
__isset.u16 = true;
}

void sai_thrift_acl_parameter_t::__set_s16(const int16_t val) {
  this->s16 = val;
__isset.s16 = true;
}

void sai_thrift_acl_parameter_t::__set_u32(const int32_t val) {
  this->u32 = val;
__isset.u32 = true;
}

void sai_thrift_acl_parameter_t::__set_s32(const int32_t val) {
  this->s32 = val;
__isset.s32 = true;
}

void sai_thrift_acl_parameter_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
__isset.mac = true;
}

void sai_thrift_acl_parameter_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
__isset.ip4 = true;
}

void sai_thrift_acl_parameter_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
__isset.ip6 = true;
}

void sai_thrift_acl_parameter_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
__isset.oid = true;
}

void sai_thrift_acl_parameter_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
__isset.objlist = true;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_parameter_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_parameter_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_parameter_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_parameter_t");

  if (this->__isset.u8) {
    xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
    xfer += oprot->writeByte(this->u8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s8) {
    xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
    xfer += oprot->writeByte(this->s8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u16) {
    xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->u16);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s16) {
    xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
    xfer += oprot->writeI16(this->s16);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u32) {
    xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->u32);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s32) {
    xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->s32);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mac) {
    xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->mac);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip4) {
    xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->ip4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip6) {
    xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->ip6);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oid) {
    xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->oid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.objlist) {
    xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->objlist.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_parameter_t &a, sai_thrift_acl_parameter_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_parameter_t::sai_thrift_acl_parameter_t(const sai_thrift_acl_parameter_t& other56) {
  u8 = other56.u8;
  s8 = other56.s8;
  u16 = other56.u16;
  s16 = other56.s16;
  u32 = other56.u32;
  s32 = other56.s32;
  mac = other56.mac;
  ip4 = other56.ip4;
  ip6 = other56.ip6;
  oid = other56.oid;
  objlist = other56.objlist;
  __isset = other56.__isset;
}
sai_thrift_acl_parameter_t& sai_thrift_acl_parameter_t::operator=(const sai_thrift_acl_parameter_t& other57) {
  u8 = other57.u8;
  s8 = other57.s8;
  u16 = other57.u16;
  s16 = other57.s16;
  u32 = other57.u32;
  s32 = other57.s32;
  mac = other57.mac;
  ip4 = other57.ip4;
  ip6 = other57.ip6;
  oid = other57.oid;
  objlist = other57.objlist;
  __isset = other57.__isset;
  return *this;
}
void sai_thrift_acl_parameter_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_parameter_t(";
  out << "u8="; (__isset.u8 ? (out << to_string(u8)) : (out << "<null>"));
  out << ", " << "s8="; (__isset.s8 ? (out << to_string(s8)) : (out << "<null>"));
  out << ", " << "u16="; (__isset.u16 ? (out << to_string(u16)) : (out << "<null>"));
  out << ", " << "s16="; (__isset.s16 ? (out << to_string(s16)) : (out << "<null>"));
  out << ", " << "u32="; (__isset.u32 ? (out << to_string(u32)) : (out << "<null>"));
  out << ", " << "s32="; (__isset.s32 ? (out << to_string(s32)) : (out << "<null>"));
  out << ", " << "mac="; (__isset.mac ? (out << to_string(mac)) : (out << "<null>"));
  out << ", " << "ip4="; (__isset.ip4 ? (out << to_string(ip4)) : (out << "<null>"));
  out << ", " << "ip6="; (__isset.ip6 ? (out << to_string(ip6)) : (out << "<null>"));
  out << ", " << "oid="; (__isset.oid ? (out << to_string(oid)) : (out << "<null>"));
  out << ", " << "objlist="; (__isset.objlist ? (out << to_string(objlist)) : (out << "<null>"));
  out << ")";
}


sai_thrift_acl_action_data_t::~sai_thrift_acl_action_data_t() noexcept {
}


void sai_thrift_acl_action_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_action_data_t::__set_parameter(const sai_thrift_acl_parameter_t& val) {
  this->parameter = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_action_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameter.read(iprot);
          this->__isset.parameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_action_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_action_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameter", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->parameter.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_action_data_t &a, sai_thrift_acl_action_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.parameter, b.parameter);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_action_data_t::sai_thrift_acl_action_data_t(const sai_thrift_acl_action_data_t& other58) {
  enable = other58.enable;
  parameter = other58.parameter;
  __isset = other58.__isset;
}
sai_thrift_acl_action_data_t& sai_thrift_acl_action_data_t::operator=(const sai_thrift_acl_action_data_t& other59) {
  enable = other59.enable;
  parameter = other59.parameter;
  __isset = other59.__isset;
  return *this;
}
void sai_thrift_acl_action_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_action_data_t(";
  out << "enable=" << to_string(enable);
  out << ", " << "parameter=" << to_string(parameter);
  out << ")";
}


sai_thrift_u8_list_t::~sai_thrift_u8_list_t() noexcept {
}


void sai_thrift_u8_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_u8_list_t::__set_u8list(const std::vector<int8_t> & val) {
  this->u8list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u8_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u8_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->u8list.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->u8list.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += iprot->readByte(this->u8list[_i64]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.u8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u8_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u8_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->u8list.size()));
    std::vector<int8_t> ::const_iterator _iter65;
    for (_iter65 = this->u8list.begin(); _iter65 != this->u8list.end(); ++_iter65)
    {
      xfer += oprot->writeByte((*_iter65));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u8_list_t &a, sai_thrift_u8_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.u8list, b.u8list);
  swap(a.__isset, b.__isset);
}

sai_thrift_u8_list_t::sai_thrift_u8_list_t(const sai_thrift_u8_list_t& other66) {
  count = other66.count;
  u8list = other66.u8list;
  __isset = other66.__isset;
}
sai_thrift_u8_list_t& sai_thrift_u8_list_t::operator=(const sai_thrift_u8_list_t& other67) {
  count = other67.count;
  u8list = other67.u8list;
  __isset = other67.__isset;
  return *this;
}
void sai_thrift_u8_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u8_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "u8list=" << to_string(u8list);
  out << ")";
}


sai_thrift_s8_list_t::~sai_thrift_s8_list_t() noexcept {
}


void sai_thrift_s8_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_s8_list_t::__set_s8list(const std::vector<int8_t> & val) {
  this->s8list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_s8_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_s8_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->s8list.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            xfer += iprot->readListBegin(_etype71, _size68);
            this->s8list.resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              xfer += iprot->readByte(this->s8list[_i72]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.s8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_s8_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_s8_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->s8list.size()));
    std::vector<int8_t> ::const_iterator _iter73;
    for (_iter73 = this->s8list.begin(); _iter73 != this->s8list.end(); ++_iter73)
    {
      xfer += oprot->writeByte((*_iter73));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_s8_list_t &a, sai_thrift_s8_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.s8list, b.s8list);
  swap(a.__isset, b.__isset);
}

sai_thrift_s8_list_t::sai_thrift_s8_list_t(const sai_thrift_s8_list_t& other74) {
  count = other74.count;
  s8list = other74.s8list;
  __isset = other74.__isset;
}
sai_thrift_s8_list_t& sai_thrift_s8_list_t::operator=(const sai_thrift_s8_list_t& other75) {
  count = other75.count;
  s8list = other75.s8list;
  __isset = other75.__isset;
  return *this;
}
void sai_thrift_s8_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_s8_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "s8list=" << to_string(s8list);
  out << ")";
}


sai_thrift_u32_list_t::~sai_thrift_u32_list_t() noexcept {
}


void sai_thrift_u32_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_u32_list_t::__set_u32list(const std::vector<int32_t> & val) {
  this->u32list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u32_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->u32list.clear();
            uint32_t _size76;
            ::apache::thrift::protocol::TType _etype79;
            xfer += iprot->readListBegin(_etype79, _size76);
            this->u32list.resize(_size76);
            uint32_t _i80;
            for (_i80 = 0; _i80 < _size76; ++_i80)
            {
              xfer += iprot->readI32(this->u32list[_i80]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.u32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u32_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u32_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->u32list.size()));
    std::vector<int32_t> ::const_iterator _iter81;
    for (_iter81 = this->u32list.begin(); _iter81 != this->u32list.end(); ++_iter81)
    {
      xfer += oprot->writeI32((*_iter81));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u32_list_t &a, sai_thrift_u32_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.u32list, b.u32list);
  swap(a.__isset, b.__isset);
}

sai_thrift_u32_list_t::sai_thrift_u32_list_t(const sai_thrift_u32_list_t& other82) {
  count = other82.count;
  u32list = other82.u32list;
  __isset = other82.__isset;
}
sai_thrift_u32_list_t& sai_thrift_u32_list_t::operator=(const sai_thrift_u32_list_t& other83) {
  count = other83.count;
  u32list = other83.u32list;
  __isset = other83.__isset;
  return *this;
}
void sai_thrift_u32_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u32_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "u32list=" << to_string(u32list);
  out << ")";
}


sai_thrift_qos_map_params_t::~sai_thrift_qos_map_params_t() noexcept {
}


void sai_thrift_qos_map_params_t::__set_tc(const int8_t val) {
  this->tc = val;
}

void sai_thrift_qos_map_params_t::__set_dscp(const int8_t val) {
  this->dscp = val;
}

void sai_thrift_qos_map_params_t::__set_dot1p(const int8_t val) {
  this->dot1p = val;
}

void sai_thrift_qos_map_params_t::__set_prio(const int8_t val) {
  this->prio = val;
}

void sai_thrift_qos_map_params_t::__set_pg(const int8_t val) {
  this->pg = val;
}

void sai_thrift_qos_map_params_t::__set_queue_index(const int8_t val) {
  this->queue_index = val;
}

void sai_thrift_qos_map_params_t::__set_color(const int8_t val) {
  this->color = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_params_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_qos_map_params_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tc);
          this->__isset.tc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dscp);
          this->__isset.dscp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dot1p);
          this->__isset.dot1p = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->prio);
          this->__isset.prio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->pg);
          this->__isset.pg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->queue_index);
          this->__isset.queue_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_params_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_params_t");

  xfer += oprot->writeFieldBegin("tc", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->tc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dscp", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->dscp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dot1p", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->dot1p);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prio", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->prio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pg", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->pg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queue_index", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->queue_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_qos_map_params_t &a, sai_thrift_qos_map_params_t &b) {
  using ::std::swap;
  swap(a.tc, b.tc);
  swap(a.dscp, b.dscp);
  swap(a.dot1p, b.dot1p);
  swap(a.prio, b.prio);
  swap(a.pg, b.pg);
  swap(a.queue_index, b.queue_index);
  swap(a.color, b.color);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_params_t::sai_thrift_qos_map_params_t(const sai_thrift_qos_map_params_t& other84) {
  tc = other84.tc;
  dscp = other84.dscp;
  dot1p = other84.dot1p;
  prio = other84.prio;
  pg = other84.pg;
  queue_index = other84.queue_index;
  color = other84.color;
  __isset = other84.__isset;
}
sai_thrift_qos_map_params_t& sai_thrift_qos_map_params_t::operator=(const sai_thrift_qos_map_params_t& other85) {
  tc = other85.tc;
  dscp = other85.dscp;
  dot1p = other85.dot1p;
  prio = other85.prio;
  pg = other85.pg;
  queue_index = other85.queue_index;
  color = other85.color;
  __isset = other85.__isset;
  return *this;
}
void sai_thrift_qos_map_params_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_qos_map_params_t(";
  out << "tc=" << to_string(tc);
  out << ", " << "dscp=" << to_string(dscp);
  out << ", " << "dot1p=" << to_string(dot1p);
  out << ", " << "prio=" << to_string(prio);
  out << ", " << "pg=" << to_string(pg);
  out << ", " << "queue_index=" << to_string(queue_index);
  out << ", " << "color=" << to_string(color);
  out << ")";
}


sai_thrift_qos_map_t::~sai_thrift_qos_map_t() noexcept {
}


void sai_thrift_qos_map_t::__set_key(const sai_thrift_qos_map_params_t& val) {
  this->key = val;
}

void sai_thrift_qos_map_t::__set_value(const sai_thrift_qos_map_params_t& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_qos_map_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->key.read(iprot);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_t");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_qos_map_t &a, sai_thrift_qos_map_t &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_t::sai_thrift_qos_map_t(const sai_thrift_qos_map_t& other86) {
  key = other86.key;
  value = other86.value;
  __isset = other86.__isset;
}
sai_thrift_qos_map_t& sai_thrift_qos_map_t::operator=(const sai_thrift_qos_map_t& other87) {
  key = other87.key;
  value = other87.value;
  __isset = other87.__isset;
  return *this;
}
void sai_thrift_qos_map_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_qos_map_t(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


sai_thrift_qos_map_list_t::~sai_thrift_qos_map_list_t() noexcept {
}


void sai_thrift_qos_map_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_qos_map_list_t::__set_map_list(const std::vector<sai_thrift_qos_map_t> & val) {
  this->map_list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_qos_map_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->map_list.clear();
            uint32_t _size88;
            ::apache::thrift::protocol::TType _etype91;
            xfer += iprot->readListBegin(_etype91, _size88);
            this->map_list.resize(_size88);
            uint32_t _i92;
            for (_i92 = 0; _i92 < _size88; ++_i92)
            {
              xfer += this->map_list[_i92].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.map_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("map_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->map_list.size()));
    std::vector<sai_thrift_qos_map_t> ::const_iterator _iter93;
    for (_iter93 = this->map_list.begin(); _iter93 != this->map_list.end(); ++_iter93)
    {
      xfer += (*_iter93).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_qos_map_list_t &a, sai_thrift_qos_map_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.map_list, b.map_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_list_t::sai_thrift_qos_map_list_t(const sai_thrift_qos_map_list_t& other94) {
  count = other94.count;
  map_list = other94.map_list;
  __isset = other94.__isset;
}
sai_thrift_qos_map_list_t& sai_thrift_qos_map_list_t::operator=(const sai_thrift_qos_map_list_t& other95) {
  count = other95.count;
  map_list = other95.map_list;
  __isset = other95.__isset;
  return *this;
}
void sai_thrift_qos_map_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_qos_map_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "map_list=" << to_string(map_list);
  out << ")";
}


sai_thrift_u32_range_t::~sai_thrift_u32_range_t() noexcept {
}


void sai_thrift_u32_range_t::__set_min(const int32_t val) {
  this->min = val;
}

void sai_thrift_u32_range_t::__set_max(const int32_t val) {
  this->max = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_range_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u32_range_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->min);
          this->__isset.min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max);
          this->__isset.max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u32_range_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u32_range_t");

  xfer += oprot->writeFieldBegin("min", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u32_range_t &a, sai_thrift_u32_range_t &b) {
  using ::std::swap;
  swap(a.min, b.min);
  swap(a.max, b.max);
  swap(a.__isset, b.__isset);
}

sai_thrift_u32_range_t::sai_thrift_u32_range_t(const sai_thrift_u32_range_t& other96) {
  min = other96.min;
  max = other96.max;
  __isset = other96.__isset;
}
sai_thrift_u32_range_t& sai_thrift_u32_range_t::operator=(const sai_thrift_u32_range_t& other97) {
  min = other97.min;
  max = other97.max;
  __isset = other97.__isset;
  return *this;
}
void sai_thrift_u32_range_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u32_range_t(";
  out << "min=" << to_string(min);
  out << ", " << "max=" << to_string(max);
  out << ")";
}


sai_thrift_timeoffset_t::~sai_thrift_timeoffset_t() noexcept {
}


void sai_thrift_timeoffset_t::__set_flag(const int8_t val) {
  this->flag = val;
}

void sai_thrift_timeoffset_t::__set_value(const int32_t val) {
  this->value = val;
}

void sai_thrift_timeoffset_t::__set_type(const int8_t val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_timeoffset_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_timeoffset_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->flag);
          this->__isset.flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_timeoffset_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_timeoffset_t");

  xfer += oprot->writeFieldBegin("flag", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_timeoffset_t &a, sai_thrift_timeoffset_t &b) {
  using ::std::swap;
  swap(a.flag, b.flag);
  swap(a.value, b.value);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

sai_thrift_timeoffset_t::sai_thrift_timeoffset_t(const sai_thrift_timeoffset_t& other98) {
  flag = other98.flag;
  value = other98.value;
  type = other98.type;
  __isset = other98.__isset;
}
sai_thrift_timeoffset_t& sai_thrift_timeoffset_t::operator=(const sai_thrift_timeoffset_t& other99) {
  flag = other99.flag;
  value = other99.value;
  type = other99.type;
  __isset = other99.__isset;
  return *this;
}
void sai_thrift_timeoffset_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_timeoffset_t(";
  out << "flag=" << to_string(flag);
  out << ", " << "value=" << to_string(value);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


sai_thrift_timespec_t::~sai_thrift_timespec_t() noexcept {
}


void sai_thrift_timespec_t::__set_tv_sec(const int64_t val) {
  this->tv_sec = val;
}

void sai_thrift_timespec_t::__set_tv_nsec(const int32_t val) {
  this->tv_nsec = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_timespec_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_timespec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tv_sec);
          this->__isset.tv_sec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tv_nsec);
          this->__isset.tv_nsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_timespec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_timespec_t");

  xfer += oprot->writeFieldBegin("tv_sec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tv_sec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tv_nsec", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tv_nsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_timespec_t &a, sai_thrift_timespec_t &b) {
  using ::std::swap;
  swap(a.tv_sec, b.tv_sec);
  swap(a.tv_nsec, b.tv_nsec);
  swap(a.__isset, b.__isset);
}

sai_thrift_timespec_t::sai_thrift_timespec_t(const sai_thrift_timespec_t& other100) {
  tv_sec = other100.tv_sec;
  tv_nsec = other100.tv_nsec;
  __isset = other100.__isset;
}
sai_thrift_timespec_t& sai_thrift_timespec_t::operator=(const sai_thrift_timespec_t& other101) {
  tv_sec = other101.tv_sec;
  tv_nsec = other101.tv_nsec;
  __isset = other101.__isset;
  return *this;
}
void sai_thrift_timespec_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_timespec_t(";
  out << "tv_sec=" << to_string(tv_sec);
  out << ", " << "tv_nsec=" << to_string(tv_nsec);
  out << ")";
}


sai_thrift_captured_timespec_t::~sai_thrift_captured_timespec_t() noexcept {
}


void sai_thrift_captured_timespec_t::__set_timestamp(const sai_thrift_timespec_t& val) {
  this->timestamp = val;
}

void sai_thrift_captured_timespec_t::__set_secquence_id(const int16_t val) {
  this->secquence_id = val;
}

void sai_thrift_captured_timespec_t::__set_port_id(const sai_thrift_object_id_t val) {
  this->port_id = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_captured_timespec_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_captured_timespec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timestamp.read(iprot);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->secquence_id);
          this->__isset.secquence_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_captured_timespec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_captured_timespec_t");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->timestamp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("secquence_id", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->secquence_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_captured_timespec_t &a, sai_thrift_captured_timespec_t &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.secquence_id, b.secquence_id);
  swap(a.port_id, b.port_id);
  swap(a.__isset, b.__isset);
}

sai_thrift_captured_timespec_t::sai_thrift_captured_timespec_t(const sai_thrift_captured_timespec_t& other102) {
  timestamp = other102.timestamp;
  secquence_id = other102.secquence_id;
  port_id = other102.port_id;
  __isset = other102.__isset;
}
sai_thrift_captured_timespec_t& sai_thrift_captured_timespec_t::operator=(const sai_thrift_captured_timespec_t& other103) {
  timestamp = other103.timestamp;
  secquence_id = other103.secquence_id;
  port_id = other103.port_id;
  __isset = other103.__isset;
  return *this;
}
void sai_thrift_captured_timespec_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_captured_timespec_t(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "secquence_id=" << to_string(secquence_id);
  out << ", " << "port_id=" << to_string(port_id);
  out << ")";
}


sai_thrift_attribute_value_t::~sai_thrift_attribute_value_t() noexcept {
}


void sai_thrift_attribute_value_t::__set_booldata(const bool val) {
  this->booldata = val;
__isset.booldata = true;
}

void sai_thrift_attribute_value_t::__set_chardata(const std::string& val) {
  this->chardata = val;
__isset.chardata = true;
}

void sai_thrift_attribute_value_t::__set_u8(const int8_t val) {
  this->u8 = val;
__isset.u8 = true;
}

void sai_thrift_attribute_value_t::__set_s8(const int8_t val) {
  this->s8 = val;
__isset.s8 = true;
}

void sai_thrift_attribute_value_t::__set_u16(const int16_t val) {
  this->u16 = val;
__isset.u16 = true;
}

void sai_thrift_attribute_value_t::__set_s16(const int16_t val) {
  this->s16 = val;
__isset.s16 = true;
}

void sai_thrift_attribute_value_t::__set_u32(const int32_t val) {
  this->u32 = val;
__isset.u32 = true;
}

void sai_thrift_attribute_value_t::__set_s32(const int32_t val) {
  this->s32 = val;
__isset.s32 = true;
}

void sai_thrift_attribute_value_t::__set_u64(const int64_t val) {
  this->u64 = val;
__isset.u64 = true;
}

void sai_thrift_attribute_value_t::__set_s64(const int64_t val) {
  this->s64 = val;
__isset.s64 = true;
}

void sai_thrift_attribute_value_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
__isset.mac = true;
}

void sai_thrift_attribute_value_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
__isset.oid = true;
}

void sai_thrift_attribute_value_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
__isset.ip4 = true;
}

void sai_thrift_attribute_value_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
__isset.ip6 = true;
}

void sai_thrift_attribute_value_t::__set_ipaddr(const sai_thrift_ip_address_t& val) {
  this->ipaddr = val;
__isset.ipaddr = true;
}

void sai_thrift_attribute_value_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
__isset.objlist = true;
}

void sai_thrift_attribute_value_t::__set_vlanlist(const sai_thrift_vlan_list_t& val) {
  this->vlanlist = val;
__isset.vlanlist = true;
}

void sai_thrift_attribute_value_t::__set_aclfield(const sai_thrift_acl_field_data_t& val) {
  this->aclfield = val;
__isset.aclfield = true;
}

void sai_thrift_attribute_value_t::__set_aclaction(const sai_thrift_acl_action_data_t& val) {
  this->aclaction = val;
__isset.aclaction = true;
}

void sai_thrift_attribute_value_t::__set_u8list(const sai_thrift_u8_list_t& val) {
  this->u8list = val;
__isset.u8list = true;
}

void sai_thrift_attribute_value_t::__set_s8list(const sai_thrift_s8_list_t& val) {
  this->s8list = val;
__isset.s8list = true;
}

void sai_thrift_attribute_value_t::__set_u32list(const sai_thrift_u32_list_t& val) {
  this->u32list = val;
__isset.u32list = true;
}

void sai_thrift_attribute_value_t::__set_s32list(const sai_thrift_s32_list_t& val) {
  this->s32list = val;
__isset.s32list = true;
}

void sai_thrift_attribute_value_t::__set_qosmap(const sai_thrift_qos_map_list_t& val) {
  this->qosmap = val;
__isset.qosmap = true;
}

void sai_thrift_attribute_value_t::__set_u32range(const sai_thrift_u32_range_t& val) {
  this->u32range = val;
__isset.u32range = true;
}

void sai_thrift_attribute_value_t::__set_timeoffset(const sai_thrift_timeoffset_t& val) {
  this->timeoffset = val;
__isset.timeoffset = true;
}

void sai_thrift_attribute_value_t::__set_timespec(const sai_thrift_timespec_t& val) {
  this->timespec = val;
__isset.timespec = true;
}

void sai_thrift_attribute_value_t::__set_captured_timespec(const sai_thrift_captured_timespec_t& val) {
  this->captured_timespec = val;
__isset.captured_timespec = true;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_value_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attribute_value_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->booldata);
          this->__isset.booldata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chardata);
          this->__isset.chardata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->u64);
          this->__isset.u64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->s64);
          this->__isset.s64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipaddr.read(iprot);
          this->__isset.ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vlanlist.read(iprot);
          this->__isset.vlanlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclfield.read(iprot);
          this->__isset.aclfield = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclaction.read(iprot);
          this->__isset.aclaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u8list.read(iprot);
          this->__isset.u8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->s8list.read(iprot);
          this->__isset.s8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u32list.read(iprot);
          this->__isset.u32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->s32list.read(iprot);
          this->__isset.s32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->qosmap.read(iprot);
          this->__isset.qosmap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u32range.read(iprot);
          this->__isset.u32range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timeoffset.read(iprot);
          this->__isset.timeoffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timespec.read(iprot);
          this->__isset.timespec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->captured_timespec.read(iprot);
          this->__isset.captured_timespec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_value_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attribute_value_t");

  if (this->__isset.booldata) {
    xfer += oprot->writeFieldBegin("booldata", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->booldata);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.chardata) {
    xfer += oprot->writeFieldBegin("chardata", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->chardata);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u8) {
    xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->u8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s8) {
    xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->s8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u16) {
    xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->u16);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s16) {
    xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->s16);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u32) {
    xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->u32);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s32) {
    xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->s32);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u64) {
    xfer += oprot->writeFieldBegin("u64", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->u64);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s64) {
    xfer += oprot->writeFieldBegin("s64", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->s64);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mac) {
    xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->mac);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oid) {
    xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->oid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip4) {
    xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->ip4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip6) {
    xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->ip6);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ipaddr) {
    xfer += oprot->writeFieldBegin("ipaddr", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->ipaddr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.objlist) {
    xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->objlist.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vlanlist) {
    xfer += oprot->writeFieldBegin("vlanlist", ::apache::thrift::protocol::T_STRUCT, 17);
    xfer += this->vlanlist.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.aclfield) {
    xfer += oprot->writeFieldBegin("aclfield", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->aclfield.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.aclaction) {
    xfer += oprot->writeFieldBegin("aclaction", ::apache::thrift::protocol::T_STRUCT, 19);
    xfer += this->aclaction.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u8list) {
    xfer += oprot->writeFieldBegin("u8list", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->u8list.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s8list) {
    xfer += oprot->writeFieldBegin("s8list", ::apache::thrift::protocol::T_STRUCT, 21);
    xfer += this->s8list.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u32list) {
    xfer += oprot->writeFieldBegin("u32list", ::apache::thrift::protocol::T_STRUCT, 22);
    xfer += this->u32list.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s32list) {
    xfer += oprot->writeFieldBegin("s32list", ::apache::thrift::protocol::T_STRUCT, 23);
    xfer += this->s32list.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.qosmap) {
    xfer += oprot->writeFieldBegin("qosmap", ::apache::thrift::protocol::T_STRUCT, 24);
    xfer += this->qosmap.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u32range) {
    xfer += oprot->writeFieldBegin("u32range", ::apache::thrift::protocol::T_STRUCT, 25);
    xfer += this->u32range.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timeoffset) {
    xfer += oprot->writeFieldBegin("timeoffset", ::apache::thrift::protocol::T_STRUCT, 26);
    xfer += this->timeoffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timespec) {
    xfer += oprot->writeFieldBegin("timespec", ::apache::thrift::protocol::T_STRUCT, 27);
    xfer += this->timespec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.captured_timespec) {
    xfer += oprot->writeFieldBegin("captured_timespec", ::apache::thrift::protocol::T_STRUCT, 28);
    xfer += this->captured_timespec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attribute_value_t &a, sai_thrift_attribute_value_t &b) {
  using ::std::swap;
  swap(a.booldata, b.booldata);
  swap(a.chardata, b.chardata);
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.u64, b.u64);
  swap(a.s64, b.s64);
  swap(a.mac, b.mac);
  swap(a.oid, b.oid);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.ipaddr, b.ipaddr);
  swap(a.objlist, b.objlist);
  swap(a.vlanlist, b.vlanlist);
  swap(a.aclfield, b.aclfield);
  swap(a.aclaction, b.aclaction);
  swap(a.u8list, b.u8list);
  swap(a.s8list, b.s8list);
  swap(a.u32list, b.u32list);
  swap(a.s32list, b.s32list);
  swap(a.qosmap, b.qosmap);
  swap(a.u32range, b.u32range);
  swap(a.timeoffset, b.timeoffset);
  swap(a.timespec, b.timespec);
  swap(a.captured_timespec, b.captured_timespec);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_value_t::sai_thrift_attribute_value_t(const sai_thrift_attribute_value_t& other104) {
  booldata = other104.booldata;
  chardata = other104.chardata;
  u8 = other104.u8;
  s8 = other104.s8;
  u16 = other104.u16;
  s16 = other104.s16;
  u32 = other104.u32;
  s32 = other104.s32;
  u64 = other104.u64;
  s64 = other104.s64;
  mac = other104.mac;
  oid = other104.oid;
  ip4 = other104.ip4;
  ip6 = other104.ip6;
  ipaddr = other104.ipaddr;
  objlist = other104.objlist;
  vlanlist = other104.vlanlist;
  aclfield = other104.aclfield;
  aclaction = other104.aclaction;
  u8list = other104.u8list;
  s8list = other104.s8list;
  u32list = other104.u32list;
  s32list = other104.s32list;
  qosmap = other104.qosmap;
  u32range = other104.u32range;
  timeoffset = other104.timeoffset;
  timespec = other104.timespec;
  captured_timespec = other104.captured_timespec;
  __isset = other104.__isset;
}
sai_thrift_attribute_value_t& sai_thrift_attribute_value_t::operator=(const sai_thrift_attribute_value_t& other105) {
  booldata = other105.booldata;
  chardata = other105.chardata;
  u8 = other105.u8;
  s8 = other105.s8;
  u16 = other105.u16;
  s16 = other105.s16;
  u32 = other105.u32;
  s32 = other105.s32;
  u64 = other105.u64;
  s64 = other105.s64;
  mac = other105.mac;
  oid = other105.oid;
  ip4 = other105.ip4;
  ip6 = other105.ip6;
  ipaddr = other105.ipaddr;
  objlist = other105.objlist;
  vlanlist = other105.vlanlist;
  aclfield = other105.aclfield;
  aclaction = other105.aclaction;
  u8list = other105.u8list;
  s8list = other105.s8list;
  u32list = other105.u32list;
  s32list = other105.s32list;
  qosmap = other105.qosmap;
  u32range = other105.u32range;
  timeoffset = other105.timeoffset;
  timespec = other105.timespec;
  captured_timespec = other105.captured_timespec;
  __isset = other105.__isset;
  return *this;
}
void sai_thrift_attribute_value_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attribute_value_t(";
  out << "booldata="; (__isset.booldata ? (out << to_string(booldata)) : (out << "<null>"));
  out << ", " << "chardata="; (__isset.chardata ? (out << to_string(chardata)) : (out << "<null>"));
  out << ", " << "u8="; (__isset.u8 ? (out << to_string(u8)) : (out << "<null>"));
  out << ", " << "s8="; (__isset.s8 ? (out << to_string(s8)) : (out << "<null>"));
  out << ", " << "u16="; (__isset.u16 ? (out << to_string(u16)) : (out << "<null>"));
  out << ", " << "s16="; (__isset.s16 ? (out << to_string(s16)) : (out << "<null>"));
  out << ", " << "u32="; (__isset.u32 ? (out << to_string(u32)) : (out << "<null>"));
  out << ", " << "s32="; (__isset.s32 ? (out << to_string(s32)) : (out << "<null>"));
  out << ", " << "u64="; (__isset.u64 ? (out << to_string(u64)) : (out << "<null>"));
  out << ", " << "s64="; (__isset.s64 ? (out << to_string(s64)) : (out << "<null>"));
  out << ", " << "mac="; (__isset.mac ? (out << to_string(mac)) : (out << "<null>"));
  out << ", " << "oid="; (__isset.oid ? (out << to_string(oid)) : (out << "<null>"));
  out << ", " << "ip4="; (__isset.ip4 ? (out << to_string(ip4)) : (out << "<null>"));
  out << ", " << "ip6="; (__isset.ip6 ? (out << to_string(ip6)) : (out << "<null>"));
  out << ", " << "ipaddr="; (__isset.ipaddr ? (out << to_string(ipaddr)) : (out << "<null>"));
  out << ", " << "objlist="; (__isset.objlist ? (out << to_string(objlist)) : (out << "<null>"));
  out << ", " << "vlanlist="; (__isset.vlanlist ? (out << to_string(vlanlist)) : (out << "<null>"));
  out << ", " << "aclfield="; (__isset.aclfield ? (out << to_string(aclfield)) : (out << "<null>"));
  out << ", " << "aclaction="; (__isset.aclaction ? (out << to_string(aclaction)) : (out << "<null>"));
  out << ", " << "u8list="; (__isset.u8list ? (out << to_string(u8list)) : (out << "<null>"));
  out << ", " << "s8list="; (__isset.s8list ? (out << to_string(s8list)) : (out << "<null>"));
  out << ", " << "u32list="; (__isset.u32list ? (out << to_string(u32list)) : (out << "<null>"));
  out << ", " << "s32list="; (__isset.s32list ? (out << to_string(s32list)) : (out << "<null>"));
  out << ", " << "qosmap="; (__isset.qosmap ? (out << to_string(qosmap)) : (out << "<null>"));
  out << ", " << "u32range="; (__isset.u32range ? (out << to_string(u32range)) : (out << "<null>"));
  out << ", " << "timeoffset="; (__isset.timeoffset ? (out << to_string(timeoffset)) : (out << "<null>"));
  out << ", " << "timespec="; (__isset.timespec ? (out << to_string(timespec)) : (out << "<null>"));
  out << ", " << "captured_timespec="; (__isset.captured_timespec ? (out << to_string(captured_timespec)) : (out << "<null>"));
  out << ")";
}


sai_thrift_attribute_t::~sai_thrift_attribute_t() noexcept {
}


void sai_thrift_attribute_t::__set_id(const int32_t val) {
  this->id = val;
}

void sai_thrift_attribute_t::__set_value(const sai_thrift_attribute_value_t& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attribute_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attribute_t");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attribute_t &a, sai_thrift_attribute_t &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_t::sai_thrift_attribute_t(const sai_thrift_attribute_t& other106) {
  id = other106.id;
  value = other106.value;
  __isset = other106.__isset;
}
sai_thrift_attribute_t& sai_thrift_attribute_t::operator=(const sai_thrift_attribute_t& other107) {
  id = other107.id;
  value = other107.value;
  __isset = other107.__isset;
  return *this;
}
void sai_thrift_attribute_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attribute_t(";
  out << "id=" << to_string(id);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


sai_thrift_route_entry_t::~sai_thrift_route_entry_t() noexcept {
}


void sai_thrift_route_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_route_entry_t::__set_destination(const sai_thrift_ip_prefix_t& val) {
  this->destination = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_route_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_route_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_route_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_route_entry_t");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_route_entry_t &a, sai_thrift_route_entry_t &b) {
  using ::std::swap;
  swap(a.vr_id, b.vr_id);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_route_entry_t::sai_thrift_route_entry_t(const sai_thrift_route_entry_t& other108) {
  vr_id = other108.vr_id;
  destination = other108.destination;
  __isset = other108.__isset;
}
sai_thrift_route_entry_t& sai_thrift_route_entry_t::operator=(const sai_thrift_route_entry_t& other109) {
  vr_id = other109.vr_id;
  destination = other109.destination;
  __isset = other109.__isset;
  return *this;
}
void sai_thrift_route_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_route_entry_t(";
  out << "vr_id=" << to_string(vr_id);
  out << ", " << "destination=" << to_string(destination);
  out << ")";
}


sai_thrift_neighbor_entry_t::~sai_thrift_neighbor_entry_t() noexcept {
}


void sai_thrift_neighbor_entry_t::__set_rif_id(const sai_thrift_object_id_t val) {
  this->rif_id = val;
}

void sai_thrift_neighbor_entry_t::__set_ip_address(const sai_thrift_ip_address_t& val) {
  this->ip_address = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_neighbor_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_neighbor_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rif_id);
          this->__isset.rif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip_address.read(iprot);
          this->__isset.ip_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_neighbor_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_neighbor_entry_t");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->rif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip_address", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ip_address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_neighbor_entry_t &a, sai_thrift_neighbor_entry_t &b) {
  using ::std::swap;
  swap(a.rif_id, b.rif_id);
  swap(a.ip_address, b.ip_address);
  swap(a.__isset, b.__isset);
}

sai_thrift_neighbor_entry_t::sai_thrift_neighbor_entry_t(const sai_thrift_neighbor_entry_t& other110) {
  rif_id = other110.rif_id;
  ip_address = other110.ip_address;
  __isset = other110.__isset;
}
sai_thrift_neighbor_entry_t& sai_thrift_neighbor_entry_t::operator=(const sai_thrift_neighbor_entry_t& other111) {
  rif_id = other111.rif_id;
  ip_address = other111.ip_address;
  __isset = other111.__isset;
  return *this;
}
void sai_thrift_neighbor_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_neighbor_entry_t(";
  out << "rif_id=" << to_string(rif_id);
  out << ", " << "ip_address=" << to_string(ip_address);
  out << ")";
}


sai_thrift_ipmc_entry_t::~sai_thrift_ipmc_entry_t() noexcept {
}


void sai_thrift_ipmc_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_ipmc_entry_t::__set_type(const sai_thrift_ipmc_entry_type_t val) {
  this->type = val;
}

void sai_thrift_ipmc_entry_t::__set_source(const sai_thrift_ip_address_t& val) {
  this->source = val;
}

void sai_thrift_ipmc_entry_t::__set_destination(const sai_thrift_ip_address_t& val) {
  this->destination = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ipmc_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ipmc_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->source.read(iprot);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ipmc_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ipmc_entry_t");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->source.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ipmc_entry_t &a, sai_thrift_ipmc_entry_t &b) {
  using ::std::swap;
  swap(a.vr_id, b.vr_id);
  swap(a.type, b.type);
  swap(a.source, b.source);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_ipmc_entry_t::sai_thrift_ipmc_entry_t(const sai_thrift_ipmc_entry_t& other112) {
  vr_id = other112.vr_id;
  type = other112.type;
  source = other112.source;
  destination = other112.destination;
  __isset = other112.__isset;
}
sai_thrift_ipmc_entry_t& sai_thrift_ipmc_entry_t::operator=(const sai_thrift_ipmc_entry_t& other113) {
  vr_id = other113.vr_id;
  type = other113.type;
  source = other113.source;
  destination = other113.destination;
  __isset = other113.__isset;
  return *this;
}
void sai_thrift_ipmc_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ipmc_entry_t(";
  out << "vr_id=" << to_string(vr_id);
  out << ", " << "type=" << to_string(type);
  out << ", " << "source=" << to_string(source);
  out << ", " << "destination=" << to_string(destination);
  out << ")";
}


sai_thrift_l2mc_entry_t::~sai_thrift_l2mc_entry_t() noexcept {
}


void sai_thrift_l2mc_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}

void sai_thrift_l2mc_entry_t::__set_type(const sai_thrift_l2mc_entry_type_t val) {
  this->type = val;
}

void sai_thrift_l2mc_entry_t::__set_source(const sai_thrift_ip_address_t& val) {
  this->source = val;
}

void sai_thrift_l2mc_entry_t::__set_destination(const sai_thrift_ip_address_t& val) {
  this->destination = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_l2mc_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_l2mc_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->source.read(iprot);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_l2mc_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_l2mc_entry_t");

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->source.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_l2mc_entry_t &a, sai_thrift_l2mc_entry_t &b) {
  using ::std::swap;
  swap(a.bv_id, b.bv_id);
  swap(a.type, b.type);
  swap(a.source, b.source);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_l2mc_entry_t::sai_thrift_l2mc_entry_t(const sai_thrift_l2mc_entry_t& other114) {
  bv_id = other114.bv_id;
  type = other114.type;
  source = other114.source;
  destination = other114.destination;
  __isset = other114.__isset;
}
sai_thrift_l2mc_entry_t& sai_thrift_l2mc_entry_t::operator=(const sai_thrift_l2mc_entry_t& other115) {
  bv_id = other115.bv_id;
  type = other115.type;
  source = other115.source;
  destination = other115.destination;
  __isset = other115.__isset;
  return *this;
}
void sai_thrift_l2mc_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_l2mc_entry_t(";
  out << "bv_id=" << to_string(bv_id);
  out << ", " << "type=" << to_string(type);
  out << ", " << "source=" << to_string(source);
  out << ", " << "destination=" << to_string(destination);
  out << ")";
}


sai_thrift_mcast_fdb_entry_t::~sai_thrift_mcast_fdb_entry_t() noexcept {
}


void sai_thrift_mcast_fdb_entry_t::__set_mac_address(const sai_thrift_mac_t& val) {
  this->mac_address = val;
}

void sai_thrift_mcast_fdb_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_mcast_fdb_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_mcast_fdb_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac_address);
          this->__isset.mac_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_mcast_fdb_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_mcast_fdb_entry_t");

  xfer += oprot->writeFieldBegin("mac_address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mac_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_mcast_fdb_entry_t &a, sai_thrift_mcast_fdb_entry_t &b) {
  using ::std::swap;
  swap(a.mac_address, b.mac_address);
  swap(a.bv_id, b.bv_id);
  swap(a.__isset, b.__isset);
}

sai_thrift_mcast_fdb_entry_t::sai_thrift_mcast_fdb_entry_t(const sai_thrift_mcast_fdb_entry_t& other116) {
  mac_address = other116.mac_address;
  bv_id = other116.bv_id;
  __isset = other116.__isset;
}
sai_thrift_mcast_fdb_entry_t& sai_thrift_mcast_fdb_entry_t::operator=(const sai_thrift_mcast_fdb_entry_t& other117) {
  mac_address = other117.mac_address;
  bv_id = other117.bv_id;
  __isset = other117.__isset;
  return *this;
}
void sai_thrift_mcast_fdb_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_mcast_fdb_entry_t(";
  out << "mac_address=" << to_string(mac_address);
  out << ", " << "bv_id=" << to_string(bv_id);
  out << ")";
}


sai_thrift_inseg_entry_t::~sai_thrift_inseg_entry_t() noexcept {
}


void sai_thrift_inseg_entry_t::__set_label(const int32_t val) {
  this->label = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_inseg_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_inseg_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->label);
          this->__isset.label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_inseg_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_inseg_entry_t");

  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_inseg_entry_t &a, sai_thrift_inseg_entry_t &b) {
  using ::std::swap;
  swap(a.label, b.label);
  swap(a.__isset, b.__isset);
}

sai_thrift_inseg_entry_t::sai_thrift_inseg_entry_t(const sai_thrift_inseg_entry_t& other118) {
  label = other118.label;
  __isset = other118.__isset;
}
sai_thrift_inseg_entry_t& sai_thrift_inseg_entry_t::operator=(const sai_thrift_inseg_entry_t& other119) {
  label = other119.label;
  __isset = other119.__isset;
  return *this;
}
void sai_thrift_inseg_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_inseg_entry_t(";
  out << "label=" << to_string(label);
  out << ")";
}


sai_thrift_nat_entry_t::~sai_thrift_nat_entry_t() noexcept {
}


void sai_thrift_nat_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_nat_entry_t::__set_source(const sai_thrift_ip4_t& val) {
  this->source = val;
}

void sai_thrift_nat_entry_t::__set_destination(const sai_thrift_ip4_t& val) {
  this->destination = val;
}

void sai_thrift_nat_entry_t::__set_proto(const int16_t val) {
  this->proto = val;
}

void sai_thrift_nat_entry_t::__set_l4_src_port(const sai_thrift_l4port_t val) {
  this->l4_src_port = val;
}

void sai_thrift_nat_entry_t::__set_l4_dst_port(const sai_thrift_l4port_t val) {
  this->l4_dst_port = val;
}

void sai_thrift_nat_entry_t::__set_source_mask(const sai_thrift_ip4_t& val) {
  this->source_mask = val;
}

void sai_thrift_nat_entry_t::__set_destination_mask(const sai_thrift_ip4_t& val) {
  this->destination_mask = val;
}

void sai_thrift_nat_entry_t::__set_proto_mask(const int16_t val) {
  this->proto_mask = val;
}

void sai_thrift_nat_entry_t::__set_l4_src_port_mask(const sai_thrift_l4port_t val) {
  this->l4_src_port_mask = val;
}

void sai_thrift_nat_entry_t::__set_l4_dst_port_mask(const sai_thrift_l4port_t val) {
  this->l4_dst_port_mask = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_nat_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->source);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destination);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->proto);
          this->__isset.proto = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->l4_src_port);
          this->__isset.l4_src_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->l4_dst_port);
          this->__isset.l4_dst_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->source_mask);
          this->__isset.source_mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destination_mask);
          this->__isset.destination_mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->proto_mask);
          this->__isset.proto_mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->l4_src_port_mask);
          this->__isset.l4_src_port_mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->l4_dst_port_mask);
          this->__isset.l4_dst_port_mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_nat_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_nat_entry_t");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->destination);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proto", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->proto);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l4_src_port", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->l4_src_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l4_dst_port", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->l4_dst_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source_mask", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->source_mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination_mask", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->destination_mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proto_mask", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->proto_mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l4_src_port_mask", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->l4_src_port_mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l4_dst_port_mask", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->l4_dst_port_mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_nat_entry_t &a, sai_thrift_nat_entry_t &b) {
  using ::std::swap;
  swap(a.vr_id, b.vr_id);
  swap(a.source, b.source);
  swap(a.destination, b.destination);
  swap(a.proto, b.proto);
  swap(a.l4_src_port, b.l4_src_port);
  swap(a.l4_dst_port, b.l4_dst_port);
  swap(a.source_mask, b.source_mask);
  swap(a.destination_mask, b.destination_mask);
  swap(a.proto_mask, b.proto_mask);
  swap(a.l4_src_port_mask, b.l4_src_port_mask);
  swap(a.l4_dst_port_mask, b.l4_dst_port_mask);
  swap(a.__isset, b.__isset);
}

sai_thrift_nat_entry_t::sai_thrift_nat_entry_t(const sai_thrift_nat_entry_t& other120) {
  vr_id = other120.vr_id;
  source = other120.source;
  destination = other120.destination;
  proto = other120.proto;
  l4_src_port = other120.l4_src_port;
  l4_dst_port = other120.l4_dst_port;
  source_mask = other120.source_mask;
  destination_mask = other120.destination_mask;
  proto_mask = other120.proto_mask;
  l4_src_port_mask = other120.l4_src_port_mask;
  l4_dst_port_mask = other120.l4_dst_port_mask;
  __isset = other120.__isset;
}
sai_thrift_nat_entry_t& sai_thrift_nat_entry_t::operator=(const sai_thrift_nat_entry_t& other121) {
  vr_id = other121.vr_id;
  source = other121.source;
  destination = other121.destination;
  proto = other121.proto;
  l4_src_port = other121.l4_src_port;
  l4_dst_port = other121.l4_dst_port;
  source_mask = other121.source_mask;
  destination_mask = other121.destination_mask;
  proto_mask = other121.proto_mask;
  l4_src_port_mask = other121.l4_src_port_mask;
  l4_dst_port_mask = other121.l4_dst_port_mask;
  __isset = other121.__isset;
  return *this;
}
void sai_thrift_nat_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_nat_entry_t(";
  out << "vr_id=" << to_string(vr_id);
  out << ", " << "source=" << to_string(source);
  out << ", " << "destination=" << to_string(destination);
  out << ", " << "proto=" << to_string(proto);
  out << ", " << "l4_src_port=" << to_string(l4_src_port);
  out << ", " << "l4_dst_port=" << to_string(l4_dst_port);
  out << ", " << "source_mask=" << to_string(source_mask);
  out << ", " << "destination_mask=" << to_string(destination_mask);
  out << ", " << "proto_mask=" << to_string(proto_mask);
  out << ", " << "l4_src_port_mask=" << to_string(l4_src_port_mask);
  out << ", " << "l4_dst_port_mask=" << to_string(l4_dst_port_mask);
  out << ")";
}


sai_thrift_attribute_list_t::~sai_thrift_attribute_list_t() noexcept {
}


void sai_thrift_attribute_list_t::__set_attr_list(const std::vector<sai_thrift_attribute_t> & val) {
  this->attr_list = val;
}

void sai_thrift_attribute_list_t::__set_attr_count(const int32_t val) {
  this->attr_count = val;
}

void sai_thrift_attribute_list_t::__set_status(const sai_thrift_status_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attribute_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attr_list.clear();
            uint32_t _size122;
            ::apache::thrift::protocol::TType _etype125;
            xfer += iprot->readListBegin(_etype125, _size122);
            this->attr_list.resize(_size122);
            uint32_t _i126;
            for (_i126 = 0; _i126 < _size122; ++_i126)
            {
              xfer += this->attr_list[_i126].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attr_count);
          this->__isset.attr_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attribute_list_t");

  xfer += oprot->writeFieldBegin("attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter127;
    for (_iter127 = this->attr_list.begin(); _iter127 != this->attr_list.end(); ++_iter127)
    {
      xfer += (*_iter127).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attr_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->attr_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attribute_list_t &a, sai_thrift_attribute_list_t &b) {
  using ::std::swap;
  swap(a.attr_list, b.attr_list);
  swap(a.attr_count, b.attr_count);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_list_t::sai_thrift_attribute_list_t(const sai_thrift_attribute_list_t& other128) {
  attr_list = other128.attr_list;
  attr_count = other128.attr_count;
  status = other128.status;
  __isset = other128.__isset;
}
sai_thrift_attribute_list_t& sai_thrift_attribute_list_t::operator=(const sai_thrift_attribute_list_t& other129) {
  attr_list = other129.attr_list;
  attr_count = other129.attr_count;
  status = other129.status;
  __isset = other129.__isset;
  return *this;
}
void sai_thrift_attribute_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attribute_list_t(";
  out << "attr_list=" << to_string(attr_list);
  out << ", " << "attr_count=" << to_string(attr_count);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


sai_thrift_result_data_t::~sai_thrift_result_data_t() noexcept {
}


void sai_thrift_result_data_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
__isset.objlist = true;
}

void sai_thrift_result_data_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
__isset.oid = true;
}

void sai_thrift_result_data_t::__set_u16(const int16_t val) {
  this->u16 = val;
__isset.u16 = true;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_result_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_result_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_result_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_result_data_t");

  if (this->__isset.objlist) {
    xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->objlist.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oid) {
    xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->oid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u16) {
    xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->u16);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_result_data_t &a, sai_thrift_result_data_t &b) {
  using ::std::swap;
  swap(a.objlist, b.objlist);
  swap(a.oid, b.oid);
  swap(a.u16, b.u16);
  swap(a.__isset, b.__isset);
}

sai_thrift_result_data_t::sai_thrift_result_data_t(const sai_thrift_result_data_t& other130) {
  objlist = other130.objlist;
  oid = other130.oid;
  u16 = other130.u16;
  __isset = other130.__isset;
}
sai_thrift_result_data_t& sai_thrift_result_data_t::operator=(const sai_thrift_result_data_t& other131) {
  objlist = other131.objlist;
  oid = other131.oid;
  u16 = other131.u16;
  __isset = other131.__isset;
  return *this;
}
void sai_thrift_result_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_result_data_t(";
  out << "objlist="; (__isset.objlist ? (out << to_string(objlist)) : (out << "<null>"));
  out << ", " << "oid="; (__isset.oid ? (out << to_string(oid)) : (out << "<null>"));
  out << ", " << "u16="; (__isset.u16 ? (out << to_string(u16)) : (out << "<null>"));
  out << ")";
}


sai_thrift_result_t::~sai_thrift_result_t() noexcept {
}


void sai_thrift_result_t::__set_data(const sai_thrift_result_data_t& val) {
  this->data = val;
}

void sai_thrift_result_t::__set_status(const sai_thrift_status_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_result_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_result_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_result_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_result_t");

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_result_t &a, sai_thrift_result_t &b) {
  using ::std::swap;
  swap(a.data, b.data);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

sai_thrift_result_t::sai_thrift_result_t(const sai_thrift_result_t& other132) {
  data = other132.data;
  status = other132.status;
  __isset = other132.__isset;
}
sai_thrift_result_t& sai_thrift_result_t::operator=(const sai_thrift_result_t& other133) {
  data = other133.data;
  status = other133.status;
  __isset = other133.__isset;
  return *this;
}
void sai_thrift_result_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_result_t(";
  out << "data=" << to_string(data);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


sai_thrift_results_t::~sai_thrift_results_t() noexcept {
}


void sai_thrift_results_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

void sai_thrift_results_t::__set_statuslist(const sai_thrift_status_list_t& val) {
  this->statuslist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_results_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_results_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->statuslist.read(iprot);
          this->__isset.statuslist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_results_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_results_t");

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statuslist", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->statuslist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_results_t &a, sai_thrift_results_t &b) {
  using ::std::swap;
  swap(a.objlist, b.objlist);
  swap(a.statuslist, b.statuslist);
  swap(a.__isset, b.__isset);
}

sai_thrift_results_t::sai_thrift_results_t(const sai_thrift_results_t& other134) {
  objlist = other134.objlist;
  statuslist = other134.statuslist;
  __isset = other134.__isset;
}
sai_thrift_results_t& sai_thrift_results_t::operator=(const sai_thrift_results_t& other135) {
  objlist = other135.objlist;
  statuslist = other135.statuslist;
  __isset = other135.__isset;
  return *this;
}
void sai_thrift_results_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_results_t(";
  out << "objlist=" << to_string(objlist);
  out << ", " << "statuslist=" << to_string(statuslist);
  out << ")";
}


sai_thrift_bulk_attributes_t::~sai_thrift_bulk_attributes_t() noexcept {
}


void sai_thrift_bulk_attributes_t::__set_attr_list(const std::vector<sai_thrift_attribute_t> & val) {
  this->attr_list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_bulk_attributes_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_bulk_attributes_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attr_list.clear();
            uint32_t _size136;
            ::apache::thrift::protocol::TType _etype139;
            xfer += iprot->readListBegin(_etype139, _size136);
            this->attr_list.resize(_size136);
            uint32_t _i140;
            for (_i140 = 0; _i140 < _size136; ++_i140)
            {
              xfer += this->attr_list[_i140].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_bulk_attributes_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_bulk_attributes_t");

  xfer += oprot->writeFieldBegin("attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter141;
    for (_iter141 = this->attr_list.begin(); _iter141 != this->attr_list.end(); ++_iter141)
    {
      xfer += (*_iter141).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_bulk_attributes_t &a, sai_thrift_bulk_attributes_t &b) {
  using ::std::swap;
  swap(a.attr_list, b.attr_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_bulk_attributes_t::sai_thrift_bulk_attributes_t(const sai_thrift_bulk_attributes_t& other142) {
  attr_list = other142.attr_list;
  __isset = other142.__isset;
}
sai_thrift_bulk_attributes_t& sai_thrift_bulk_attributes_t::operator=(const sai_thrift_bulk_attributes_t& other143) {
  attr_list = other143.attr_list;
  __isset = other143.__isset;
  return *this;
}
void sai_thrift_bulk_attributes_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_bulk_attributes_t(";
  out << "attr_list=" << to_string(attr_list);
  out << ")";
}

} // namespace
