# Copyright 2013-present Barefoot Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Thrift SAI interface ACL tests
"""

import socket
import sys
import pdb

from struct import pack, unpack

from switch import *

import sai_base_test
from ptf.mask import Mask

@group('acl')
class CreateAclTableGroup(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
            group_stage,
            group_bind_point_list,
            group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'
        print "acl_table_group_id:0x%lx" %acl_table_group_id

        warmboot(self.client)
        status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
        assert (status == SAI_STATUS_SUCCESS)

@group('acl')
class RemoveAclTableGroup(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
            group_stage,
            group_bind_point_list,
            group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        in_port = 23
        out_port = None
        out_ports = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        assert acl_table_id > 0, 'acl_table_id is <= 0'
        print "acl_table_id:0x%lx" %acl_table_id
    
        # setup ACL table group members
        group_member_priority = 1

        # create ACL table group members
        acl_table_group_member_id = sai_thrift_create_acl_table_group_member(self.client,
            acl_table_group_id,
            acl_table_id,
            group_member_priority)
        print "acl_table_group_member_ids:0x%lx" %acl_table_group_member_id
            
        warmboot(self.client)

        # remove acl table group member first
        status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id)
        assert (status == SAI_STATUS_SUCCESS)

        # test there is no table in group
        # remove acl table
        status = self.client.sai_thrift_remove_acl_table(acl_table_id)
        assert (status == SAI_STATUS_SUCCESS)
        #remove acl table group
        status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
        assert (status == SAI_STATUS_SUCCESS)

@group('acl')
class GetAclTableGroup(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT, SAI_ACL_BIND_POINT_TYPE_LAG]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
            group_stage,
            group_bind_point_list,
            group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT, SAI_ACL_BIND_POINT_TYPE_LAG]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        in_port = 3
        out_port = None
        out_ports = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None

        acl_table_id1 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        assert acl_table_id1 > 0, 'acl_table_id1 is <= 0'

        acl_table_id2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        assert acl_table_id2 > 0, 'acl_table_id2 is <= 0'

        # setup ACL table group members, sequential group tcam block 0~1
        group_member_priority1 = 0
        group_member_priority2 = 1

        # create ACL table group members
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
            acl_table_group_id,
            acl_table_id1,
            group_member_priority1)

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client,
            acl_table_group_id,
            acl_table_id2,
            group_member_priority2)
        print "acl_table_group_member_id1 = ", acl_table_group_member_id1
        print "acl_table_group_member_id2 = ", acl_table_group_member_id2

        warmboot(self.client)
        try:
            attrs = self.client.sai_thrift_get_acl_table_group_attribute(acl_table_group_id)
            print "status = ", attrs.status
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE:
                    print "set acl table group stage = ", group_stage
                    print "get acl table group stage = ", a.value.s32
                    if group_stage != a.value.s32:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_GROUP_ATTR_TYPE:
                    print "set acl table group type = ", group_type
                    print "get acl table group type = ", a.value.s32
                    if group_type != a.value.s32:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST:
                    print "set acl table group bind point list =  ", group_bind_point_list
                    print "get acl table group bind point list =  ", a.value.s32list.s32list
                    if group_bind_point_list != a.value.s32list.s32list:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST:
                    print "create acl table group member with this group ", [acl_table_group_member_id1, acl_table_group_member_id2]
                    print "get acl table group member with this group ", a.value.objlist.object_id_list
                    if ([acl_table_group_member_id1, acl_table_group_member_id2] != a.value.objlist.object_id_list) & ([acl_table_group_member_id2, acl_table_group_member_id1] != a.value.objlist.object_id_list):
                        raise NotImplementedError()
        finally:
            # remove acl table group member first
            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)
            # remove acl table
            status = self.client.sai_thrift_remove_acl_table(acl_table_id1)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_id2)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

@group('acl')
class CreateAclTable(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        in_port = 0
        out_port = None
        out_ports = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None

        # create acl table
        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        assert acl_table_id > 0, 'acl_table_id is <= 0'

        warmboot(self.client)

        # remove acl table
        status = self.client.sai_thrift_remove_acl_table(acl_table_id)
        assert (status == SAI_STATUS_SUCCESS)

@group('acl')
class RemoveAclTable(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        #ip qos info
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        in_port = 0
        out_port = None
        out_ports = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        assert acl_table_id > 0, 'acl_table_id is <= 0'

        entry_priority = 1
        admin_state = True

        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        assert acl_entry_id > 0, 'acl_entry_id is <= 0'
        print "acl_entry_id: 0x%lx" %acl_entry_id

        warmboot(self.client)

        # try to remove acl table
        status = self.client.sai_thrift_remove_acl_entry(acl_entry_id)
        assert (status == SAI_STATUS_SUCCESS)
        status = self.client.sai_thrift_remove_acl_table(acl_table_id)
        assert (status == SAI_STATUS_SUCCESS)

@group('acl')
class GetAclTable(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)
        port0 = port_list[0]
        port1 = port_list[1]

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = '00:22:22:22:22:22'
        mac_dst = None
        mac_src_mask = 'ff:ff:ff:ff:ff:ff'
        mac_dst_mask = None
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = True
        ip_src_mask = True
        ip_src0 = None
        ip_src0_mask = None
        ip_src1 = "192.168.0.1"
        ip_src1_mask = "255.255.255.0"
        ip_src2 = "192.168.1.1"
        ip_src2_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        #ip qos info
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol = None
        in_port = 0
        out_port = None
        out_ports = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)
        assert acl_table_id > 0, 'acl_table_id is <= 0'

        entry_priority = 1
        admin_state = True

        acl_entry_id1 = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src0, ip_src0_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port,
            dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan,
            new_scos,
            new_cvlan,
            new_ccos,
            deny_learn)
        assert acl_entry_id1 > 0, 'acl_entry_id1 is <= 0'

        acl_entry_id2 = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src1, ip_src1_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        assert acl_entry_id2 > 0, 'acl_entry_id2 is <= 0'

        admin_state = False
        acl_entry_id3 = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src2, ip_src2_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        assert acl_entry_id3 > 0, 'acl_entry_id3 is <= 0'

        attr_list_ids = [SAI_ACL_TABLE_ATTR_ACL_STAGE, SAI_ACL_TABLE_ATTR_SIZE, SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                         SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC, SAI_ACL_TABLE_ATTR_FIELD_DST_MAC, SAI_ACL_TABLE_ATTR_ENTRY_LIST,
                         SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY]
        warmboot(self.client)

        try:
            attrs = self.client.sai_thrift_get_acl_table_attribute(acl_table_id, attr_list_ids)
            print "status = ", attrs.status
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_TABLE_ATTR_ACL_STAGE:
                    print "set acl table stage = ", table_stage
                    print "get acl table stage = ", a.value.s32
                    if table_stage != a.value.s32:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_ATTR_SIZE:
                    print "set acl table size = ", 128
                    print "get acl table size = ", a.value.u32
                    if 0 != a.value.u32:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST:
                    print "set acl table bind point list =  ", table_bind_point_list
                    print "get acl table bind point list =  ", a.value.s32list.s32list
                    if table_bind_point_list != a.value.s32list.s32list:
                        raise NotImplementedError()
                # select some wanted match key fields and some not wanted to test the function
                if a.id == SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC:
                    if bool(mac_src) != a.value.booldata:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_ATTR_FIELD_DST_MAC:
                    if bool(mac_dst) != a.value.booldata:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_ATTR_ENTRY_LIST:
                    print "add entry into table ", [acl_entry_id1, acl_entry_id2, acl_entry_id3]
                    print "get member in the table ", a.value.objlist.object_id_list
                    if ([acl_entry_id1, acl_entry_id2, acl_entry_id3] != a.value.objlist.object_id_list) & ([acl_entry_id3, acl_entry_id2, acl_entry_id1] != a.value.objlist.object_id_list):
                        raise NotImplementedError()
                #there are total 3 entry but only 2 is avalible
                if a.id == SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY:
                    print "set available entry num =  ", 2
                    print "get available entry num =  ", a.value.u32
                    if 2 != a.value.u32:
                        raise NotImplementedError()
                # counter to be done

            attrs = self.client.sai_thrift_get_acl_table_attribute(acl_table_id, attr_list_ids)
            print "status = ", attrs.status
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_TABLE_ATTR_ACL_STAGE:
                    print "set acl table stage = ", table_stage
                    print "get acl table stage = ", a.value.s32
                    if table_stage != a.value.s32:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_ATTR_SIZE:
                    print "set acl table size = ", 128
                    print "get acl table size = ", a.value.u32
                    if 0 != a.value.u32:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST:
                    print "set acl table bind point list =  ", table_bind_point_list
                    print "get acl table bind point list =  ", a.value.s32list.s32list
                    if table_bind_point_list != a.value.s32list.s32list:
                        raise NotImplementedError()
                # select some wanted match key fields and some not wanted to test the function
                if a.id == SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC:
                    if bool(mac_src) != a.value.booldata:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_ATTR_FIELD_DST_MAC:
                    if bool(mac_dst) != a.value.booldata:
                        raise NotImplementedError()
                if a.id == SAI_ACL_TABLE_ATTR_ENTRY_LIST:
                    print "add entry into table ", [acl_entry_id1, acl_entry_id2, acl_entry_id3]
                    print "get member in the table ", a.value.objlist.object_id_list
                    if ([acl_entry_id1, acl_entry_id2, acl_entry_id3] != a.value.objlist.object_id_list) & ([acl_entry_id3, acl_entry_id2, acl_entry_id1] != a.value.objlist.object_id_list):
                        raise NotImplementedError()
                #there are total 3 entry but only 2 is avalible
                if a.id == SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY:
                    print "set available entry num =  ", 2
                    print "get available entry num =  ", a.value.u32
                    if 2 != a.value.u32:
                        raise NotImplementedError()
                # counter to be done
        finally:
            # remove acl entry first
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_id1)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_id2)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_id3)
            assert (status == SAI_STATUS_SUCCESS)
            # remove acl table
            status = self.client.sai_thrift_remove_acl_table(acl_table_id)
            assert (status == SAI_STATUS_SUCCESS)

class CreateAndRemoveAclTableGroupMember(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
            group_stage,
            group_bind_point_list,
            group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        in_port = 0
        out_port = None
        out_ports = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        assert acl_table_id > 0, 'acl_table_id is <= 0'

        # setup ACL table group members
        group_member_priority = 1

        # create ACL table group members
        acl_table_group_member_id = sai_thrift_create_acl_table_group_member(self.client,
            acl_table_group_id,
            acl_table_id,
            group_member_priority)
        assert acl_table_group_member_id > 0, 'acl_table_group_member_id is <= 0'

        warmboot(self.client)

        # remove acl table group member first
        status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id)
        assert (status == SAI_STATUS_SUCCESS)

        # test there is no table in group
        # remove acl table
        status = self.client.sai_thrift_remove_acl_table(acl_table_id)
        assert (status == SAI_STATUS_SUCCESS)
        #remove acl table group
        status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
        assert (status == SAI_STATUS_SUCCESS)

class GetAclTableGroupMember(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
            group_stage,
            group_bind_point_list,
            group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        in_port = 0
        out_port = None
        out_ports = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        assert acl_table_id > 0, 'acl_table_id is <= 0'

        # setup ACL table group members
        group_member_priority = 1

        # create ACL table group members
        acl_table_group_member_id = sai_thrift_create_acl_table_group_member(self.client,
            acl_table_group_id,
            acl_table_id,
            group_member_priority)
        assert acl_table_group_member_id > 0, 'acl_table_group_member_id is <= 0'

        warmboot(self.client)

        attrs = self.client.sai_thrift_get_acl_table_group_member_attribute(acl_table_group_member_id)
        print "status = ", attrs.status
        assert (attrs.status == SAI_STATUS_SUCCESS)
        for a in attrs.attr_list:
            if a.id == SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID:
                print "set acl table group member group id =  ", acl_table_group_id
                print "get acl table group member group id =  ", a.value.oid
                if acl_table_group_id != a.value.oid:
                    raise NotImplementedError()
            if a.id == SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID:
                print "set acl table group member table id =  ", acl_table_id
                print "get acl table group member table id =  ", a.value.oid
                if acl_table_id != a.value.oid:
                    raise NotImplementedError()
            if a.id == SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY:
                print "set acl table group member priority =  ", group_member_priority
                print "get acl table group member priority =  ", a.value.u32
                if group_member_priority != a.value.u32:
                    raise NotImplementedError()

        # remove acl table group member first
        status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id)
        assert (status == SAI_STATUS_SUCCESS)

        # test there is no table in group
        # remove acl table
        status = self.client.sai_thrift_remove_acl_table(acl_table_id)
        assert (status == SAI_STATUS_SUCCESS)
        #remove acl table group
        status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
        assert (status == SAI_STATUS_SUCCESS)

@group('acl')
class CreateAndRemoveAclEntry(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)
        port0 = port_list[0]
        port1 = port_list[1]

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        #ip qos info
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol = None
        in_port = 0
        out_port = None
        out_ports = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        assert acl_table_id > 0, 'acl_table_id is <= 0'

        entry_priority = 1
        admin_state = True
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        assert acl_entry_id > 0, 'acl_entry_id is <= 0'

        warmboot(self.client)

        status = self.client.sai_thrift_remove_acl_entry(acl_entry_id)
        assert (status == SAI_STATUS_SUCCESS)
        status = self.client.sai_thrift_remove_acl_table(acl_table_id)
        assert (status == SAI_STATUS_SUCCESS)

@group('acl')
class GetAclEntry(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)
        port0 = port_list[0]
        port1 = port_list[1]

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        #action = SAI_PACKET_ACTION_DROP
        action = SAI_PACKET_ACTION_COPY
        in_ports = None
        mac_src = '12:34:56:78:9A:BC'
        mac_dst = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        #ip qos info
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        in_port = 0
        out_port = None
        out_ports = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        assert acl_table_id > 0, 'acl_table_id is <= 0'

        entry_priority = 1
        admin_state = True
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        assert acl_entry_id > 0, 'acl_entry_id is <= 0'

        attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
        SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

        warmboot(self.client)
        try:
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_id, attr_list_ids)
            print "status = ", attrs.status
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    print "set acl entry table id = ", acl_table_id
                    print "get acl entry table id = ", a.value.oid
                    if acl_table_id != a.value.oid:
                        raise NotImplementedError()
                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    print "set acl entry priority = ", entry_priority
                    print "get acl entry priority = ", a.value.u32
                    if entry_priority != a.value.u32:
                        raise NotImplementedError()
                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    print "set acl entry admin state =  ", admin_state
                    print "get acl entry admin state =  ", a.value.booldata
                    if admin_state != a.value.booldata:
                        raise NotImplementedError()
                # select some wanted key fields and some not wanted to test the function
                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC:
                    print "set acl entry src mac =  ", mac_src
                    print "get acl entry src mac =  ", a.value.aclfield.data.mac
                    if mac_src.upper() != a.value.aclfield.data.mac.upper():
                        raise NotImplementedError()
                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    print "set acl entry src ip =  ", ip_src
                    print "get acl entry src ip =  ", a.value.aclfield.data.ip4
                    if ip_src != a.value.aclfield.data.ip4:
                        raise NotImplementedError()
                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    print "set acl entry packet action =  ", action
                    print "get acl entry packet action =  ", a.value.aclaction.parameter.s32
                    if action != a.value.aclaction.parameter.s32:
                        raise NotImplementedError()
        finally:
            # remove acl entry
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            assert (status == SAI_STATUS_SUCCESS)
            # remove acl table
            status = self.client.sai_thrift_remove_acl_table(acl_table_id)
            assert (status == SAI_STATUS_SUCCESS)

@group('acl')
class SclV4EntryBindPointPortTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = '00:22:22:22:22:22'
        mac_dst = router_mac
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_protocol = 6
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        in_port = 1
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        warmboot(self.client)

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(1, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

        finally:
            # unbind this ACL table from port2s object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)
            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)

@group('acl')
class SclV6EntryBindPointPortTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id = 20
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        sai_thrift_create_fdb(self.client, vlan_oid, mac_dst, port2, mac_action)

        # send the test packet(s)
        pkt = simple_tcpv6_packet(pktlen=100,
                     eth_dst=mac_dst,
                     eth_src=mac_src,
                     dl_vlan_enable=True,
                     vlan_vid=20,
                     vlan_pcp=4,
                     ipv6_src='2001:db8:85a3::8a2e:370:7334',
                     ipv6_dst='2001:db8:85a3::8a2e:370:7335',
                     ipv6_tc=0,
                     ipv6_ecn=None,
                     ipv6_dscp=None,
                     ipv6_hlim=64,
                     ipv6_fl=0,
                     tcp_sport=1234,
                     tcp_dport=80,
                     tcp_flags="S")
        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 0, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [1])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            mac_src_mask = "ff:ff:ff:ff:ff:ff"
            mac_dst_mask = "ff:ff:ff:ff:ff:ff"
            svlan_id = 20
            svlan_pri = 4
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']: # tsingma_mx
            mac_src = None
            mac_dst = None
            mac_src_mask = None
            mac_dst_mask = None
            svlan_id = None
            svlan_pri = None

        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None
        ipv6_src = '2001:db8:85a3::8a2e:370:7334'
        ipv6_src_mask = "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"
        ipv6_dst = '2001:db8:85a3::8a2e:370:7335'
        ipv6_dst_mask = "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"
        ip_protocol = 6
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        in_port = 0
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn,
            ipv6_src,
            ipv6_src_mask,
            ipv6_dst,
            ipv6_dst_mask)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        warmboot(self.client)

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(0, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(pkt, 1, default_time_out)
        finally:
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup FDB
            mac_dst = '00:22:22:22:22:22'
            sai_thrift_delete_fdb(self.client, vlan_oid, mac_dst, port2)

            self.client.sai_thrift_remove_vlan(vlan_oid)

@group('acl')
class SclV4EntryBindPointLagTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        port4 = port_list[3]

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id = 20
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        sai_thrift_create_fdb(self.client, vlan_oid, mac_dst, port4, mac_action)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=mac_dst,
            eth_src=mac_src,
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(0, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(pkt, [3])

            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(pkt, [3])

            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(2, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(pkt, [3])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        #create Linkagg and add members in it
        lag_id = sai_thrift_create_lag(self.client)
        print"lag:%u" %lag_id
        print"lag:%lu" %lag_id
        print"lag:%lx" %lag_id
        print"lag:%x" %lag_id
        lag_member_id1 = sai_thrift_create_lag_member(self.client, lag_id, port1)
        lag_member_id2 = sai_thrift_create_lag_member(self.client, lag_id, port2)

        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_LAG]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        ip_protocol = 6
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_lag_attribute(lag_id, attr)

        warmboot(self.client)

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(0, str(pkt))
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt))
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(pkt, 3, default_time_out)

            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(2, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(pkt, [3])
        finally:
            print '----------------------------------------------------------------------------------------------'

        #add new member
        lag_member_id3 = sai_thrift_create_lag_member(self.client, lag_id, port3)

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 0, str(pkt))
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 1, str(pkt))
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 2, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)
        finally:
            print '----------------------------------------------------------------------------------------------'

        #remove old member
        sai_thrift_remove_lag_member(self.client, lag_member_id2)
        sai_thrift_remove_lag_member(self.client, lag_member_id3)

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 0, str(pkt))
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)
            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 1, str(pkt))
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 2, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
        finally:
            print '----------------------------------------------------------------------------------------------'
            #keep remove lag member first!!!!
            sai_thrift_remove_lag_member(self.client, lag_member_id1)
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_lag_attribute(lag_id, attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid, mac_dst, port4)

            self.client.sai_thrift_remove_vlan(vlan_oid)

            #celanup Lag
            sai_thrift_remove_lag(self.client, lag_id)

#update packet action  SAI_PACKET_ACTION_DROP --> SAI_PACKET_ACTION_LOG
@group('acl')
class SclV4EntryUpdatePacketActionTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = '00:22:22:22:22:22'
        mac_dst = router_mac
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_protocol = 6
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        in_port = 1
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None

        admin_state = True

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 1, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( exp_pkt, 0, default_time_out)
        finally:
            print '----------------------------------------------------------------------------------------------'

        # update this entry's packet action: change from SAI_PACKET_ACTION_DROP --> SAI_PACKET_ACTION_LOG
        action = SAI_PACKET_ACTION_LOG
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

        #clear cpu count
        self.client.sai_thrift_clear_cpu_packet_info()
        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'LOG, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 1, str(pkt))
            # ensure packet is received
            # check for present of packet here!
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])

            #check for cpu count
            ret = self.client.sai_thrift_get_cpu_packet_count()
            print "receive rx packet: %d" %ret.data.u16
            if ret.data.u16 != 1:
                raise NotImplementedError()

            attrs = self.client.sai_thrift_get_cpu_packet_attribute()
            print "success to get packet attribute"
            for a in attrs.attr_list:
                if a.id == SAI_HOSTIF_PACKET_ATTR_INGRESS_PORT:
                    print "ingress port: 0x%lx" %a.value.oid
                    if port2 != a.value.oid:
                        raise NotImplementedError()
        finally:
            print '----------------------------------------------------------------------------------------------'

        # update this entry's packet action: change from SAI_PACKET_ACTION_LOG --> SAI_PACKET_ACTION_DENY #This is a combination of SAI packet action COPY_CANCEL and DROP
        action = SAI_PACKET_ACTION_DENY
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

        #clear cpu count
        self.client.sai_thrift_clear_cpu_packet_info()

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DENY, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 1, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( exp_pkt, 0, default_time_out)

            #check for cpu count
            ret = self.client.sai_thrift_get_cpu_packet_count()
            print "receive rx packet: %d" %ret.data.u16
            if ret.data.u16 != 0:
                raise NotImplementedError()

        finally:
            # unbind this ACL table from port2s object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)
            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)

# test deny learning action and update to become enable learning
@group('acl')
class SclV4EntryDoNotLearnActionTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        vlan_id1 = 10
        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_oid1 = sai_thrift_create_vlan(self.client, vlan_id1)

        attr_value = sai_thrift_attribute_value_t(u16=vlan_id1)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_PORT_VLAN_ID, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        sai_thrift_create_fdb(self.client, vlan_oid1, mac_dst, port2, mac_action)

        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = None
        in_ports = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label=None
        mpls_label0_ttl=None
        mpls_label0_exp=None
        mpls_label0_bos=None
        mpls_label1_label=None
        mpls_label1_ttl=None
        mpls_label1_exp=None
        mpls_label1_bos=None
        mpls_label2_label=None
        mpls_label2_ttl=None
        mpls_label2_exp=None
        mpls_label2_bos=None
        mpls_label3_label=None
        mpls_label3_ttl=None
        mpls_label3_exp=None
        mpls_label3_bos=None
        mpls_label4_label=None
        mpls_label4_ttl=None
        mpls_label4_exp=None
        mpls_label4_bos=None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol = 6
        in_port = 0
        out_port = None
        out_ports = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = True
        addr_family = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        pkt = simple_tcp_packet(eth_dst='00:22:22:22:22:22',
                                eth_src='00:11:11:11:11:11',
                                ip_dst='10.10.10.1',
                                ip_src='192.168.0.1')
        pkt1 = simple_tcp_packet(eth_dst='00:11:11:11:11:11',
                                 eth_src='00:22:22:33:33:44',
                                 ip_src='10.10.10.1',
                                 ip_dst='192.168.0.1')

        try:
            #test fdb function
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [1])
            #test learning function
            self.ctc_send_packet(1, str(pkt1))
            self.ctc_verify_no_packet(pkt1, 0, default_time_out)

        finally:
            print '----------------------------------------------------------------------------------------------'

        attr_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(enable = False))
        attr = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN, value=attr_value)
        self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attr)

        warmboot(self.client)

        try:
            #test fdb function
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [1])
            #test learning function
            self.ctc_send_packet(1, str(pkt1))
            self.ctc_verify_packets(pkt1, [0])

        finally:
            # unbind this ACL table from port2s object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid1, mac_dst, port2)

            attr_value = sai_thrift_attribute_value_t(u16=1)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_PORT_VLAN_ID, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            self.client.sai_thrift_remove_vlan(vlan_oid1)

############### ACL Test ###############
@group('acl')
class AclV4EntryBindPointVlanTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id = 20
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)

        sai_thrift_create_fdb(self.client, vlan_oid, mac_dst, port2, mac_action)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=mac_dst,
            eth_src=mac_src,
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 0, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [1])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_protocol = 6
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)

        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 0, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 1, default_time_out)
        finally:
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid, mac_dst, port2)

            self.client.sai_thrift_remove_vlan(vlan_oid)

@group('acl')
class AclV4EntryBindPointSwitchTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        port4 = port_list[3]

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id = 20
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)

        sai_thrift_create_fdb(self.client, vlan_oid, mac_dst, port4, mac_action)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=mac_dst,
            eth_src=mac_src,
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 0, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 2, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_protocol = 6
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)

        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 0, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 1, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 2, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)
        finally:
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid, mac_dst, port4)

            self.client.sai_thrift_remove_vlan(vlan_oid)

@group('acl')
class AclV4EntryPortBitMapTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        port4 = port_list[3]
        port17 = port_list[16]

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id = 20
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)

        sai_thrift_create_fdb(self.client, vlan_oid, mac_dst, port4, mac_action)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=mac_dst,
            eth_src=mac_src,
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 0, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 2, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 16, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = [port1, port2, port17]
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        ip_protocol = 6
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)

        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 0, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 1, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 2, str(pkt))
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 16, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)
        finally:
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid, mac_dst, port4)

            self.client.sai_thrift_remove_vlan(vlan_oid)

@group('acl')
class AclV4EntryUpdatePortBitMapTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        port4 = port_list[3]
        port17 = port_list[16]

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id = 20
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)

        sai_thrift_create_fdb(self.client, vlan_oid, mac_dst, port4, mac_action)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=mac_dst,
            eth_src=mac_src,
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 0, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 2, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet( 16, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = [port1, port2, port17]
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_protocol = 6
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 0, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 1, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 2, str(pkt))
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 16, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)
        finally:
            print '----------------------------------------------------------------------------------------------'

        in_port_list = [port2, port3, port17]
        acl_port_list = sai_thrift_object_list_t(count=len(in_port_list), object_id_list=in_port_list)
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(objlist=acl_port_list)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS, value=attribute_value)
        self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

        warmboot(self.client)

        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 0, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( pkt, [3])

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 1, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 2, str(pkt))
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet( 16, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet( pkt, 3, default_time_out)
        finally:
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid, mac_dst, port4)
            self.client.sai_thrift_remove_vlan(vlan_oid)

@group('acl')
class CreateParaellAclTableGroup(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
                                                               group_stage,
                                                               group_bind_point_list,
                                                               group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        # bind this ACL table to port0s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        warmboot(self.client)

        attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
        assert (status == SAI_STATUS_SUCCESS)

class CreateIgrParaAclTableGroupMember(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
            group_stage,
            group_bind_point_list,
            group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        in_port = 0
        out_port = None
        out_ports = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None

        acl_table_id0 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port)
        assert acl_table_id0 > 0, 'acl_table_id0 is <= 0'

        acl_table_id1 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port)
        assert acl_table_id1 > 0, 'acl_table_id1 is <= 0'

        acl_table_id2 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port)
        assert acl_table_id2 > 0, 'acl_table_id2 is <= 0'

        acl_table_id3 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port)
        assert acl_table_id3 > 0, 'acl_table_id3 is <= 0'

        # setup ACL table group members
        group_member_priority0 = 0

        # create ACL table group members
        acl_table_group_member_id0 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id0,
                                                                              group_member_priority0)
        assert acl_table_group_member_id0 > 0, 'acl_table_group_member_id0 is <= 0'

        group_member_priority1 = 1

        # create ACL table group members
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id1,
                                                                              group_member_priority1)
        assert acl_table_group_member_id1 > 0, 'acl_table_group_member_id1 is <= 0'

        group_member_priority2 = 2

        # create ACL table group members
        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id2,
                                                                              group_member_priority2)
        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            assert acl_table_group_member_id2 > 0, 'acl_table_group_member_id2 is <= 0'
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']: # tsingma_mx
            assert acl_table_group_member_id2 == 0, 'acl_table_group_member_id2 is != 0'

        group_member_priority3 = 3

        # create ACL table group members
        acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id3,
                                                                              group_member_priority3)
        assert acl_table_group_member_id3 == 0, 'acl_table_group_member_id3 is != 0'

        # bind this ACL table to port0s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        warmboot(self.client)

        attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        # remove acl table group member first
        status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id0)
        assert (status == SAI_STATUS_SUCCESS)

        status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
        assert (status == SAI_STATUS_SUCCESS)

        if 'tsingma' == testutils.test_params_get()['chipname']:
            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

        # test there is no table in group
        # remove acl table
        status = self.client.sai_thrift_remove_acl_table(acl_table_id0)
        assert (status == SAI_STATUS_SUCCESS)

        status = self.client.sai_thrift_remove_acl_table(acl_table_id1)
        assert (status == SAI_STATUS_SUCCESS)

        status = self.client.sai_thrift_remove_acl_table(acl_table_id2)
        assert (status == SAI_STATUS_SUCCESS)

        status = self.client.sai_thrift_remove_acl_table(acl_table_id3)
        assert (status == SAI_STATUS_SUCCESS)

        #remove acl table group
        status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
        assert (status == SAI_STATUS_SUCCESS)

class CreateEgrParaAclTableGroupMember(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_EGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
            group_stage,
            group_bind_point_list,
            group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        # create ACL table
        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.0"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        in_port = None
        out_port = 0
        out_ports = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None

        acl_table_id0 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port)
        assert acl_table_id0 > 0, 'acl_table_id0 is <= 0'

        acl_table_id1 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port)
        assert acl_table_id1 > 0, 'acl_table_id1 is <= 0'

        acl_table_id2 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port)
        assert acl_table_id2 > 0, 'acl_table_id2 is <= 0'

        acl_table_id3 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port)
        assert acl_table_id3 > 0, 'acl_table_id3 is <= 0'

        # setup ACL table group members
        group_member_priority0 = 0

        # create ACL table group members
        acl_table_group_member_id0 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id0,
                                                                              group_member_priority0)
        assert acl_table_group_member_id0 > 0, 'acl_table_group_member_id0 is <= 0'

        group_member_priority1 = 1

        # create ACL table group members
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id1,
                                                                              group_member_priority1)
        assert acl_table_group_member_id1 > 0, 'acl_table_group_member_id1 is <= 0'

        group_member_priority2 = 2

        # create ACL table group members
        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id2,
                                                                              group_member_priority2)
        assert acl_table_group_member_id2 > 0, 'acl_table_group_member_id2 is <= 0'

        group_member_priority3 = 3

        # create ACL table group members
        acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id3,
                                                                              group_member_priority3)
        assert acl_table_group_member_id3 == 0, 'acl_table_group_member_id3 is > 0'

        # bind this ACL table to port0s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        warmboot(self.client)

        # remove acl table group member first
        status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id0)
        assert (status == SAI_STATUS_SUCCESS)

        status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
        assert (status == SAI_STATUS_SUCCESS)

        status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
        assert (status == SAI_STATUS_SUCCESS)

        #status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
        #assert (status == SAI_STATUS_ITEM_NOT_FOUND)

        # test there is no table in group
        # remove acl table
        status = self.client.sai_thrift_remove_acl_table(acl_table_id0)
        assert (status == SAI_STATUS_SUCCESS)

        status = self.client.sai_thrift_remove_acl_table(acl_table_id1)
        assert (status == SAI_STATUS_SUCCESS)

        status = self.client.sai_thrift_remove_acl_table(acl_table_id2)
        assert (status == SAI_STATUS_SUCCESS)

        status = self.client.sai_thrift_remove_acl_table(acl_table_id3)
        assert (status == SAI_STATUS_SUCCESS)

        attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        #remove acl table group
        status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
        assert (status == SAI_STATUS_SUCCESS)

class CreateIgrSeqAclMaxTable(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print ''

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
            group_stage,
            group_bind_point_list,
            group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=1
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        ip_protocol = 6
        in_port = 0
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id_list = []
        acl_entry_id_list = []
        acl_table_group_member_id_list = []

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
          member = 512
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']: # tsingma_mx
          member = 2048

        for a in range(0, member):

            svlan_id = a
            acl_table_id = sai_thrift_create_acl_table(self.client,
                                                       table_stage,
                                                       table_bind_point_list,
                                                       addr_family,
                                                       mac_src,
                                                       mac_dst,
                                                       ip_src,
                                                       ip_dst,
                                                       in_ports,
                                                       out_ports,
                                                       in_port,
                                                       out_port,
                                                       svlan_id,
                                                       svlan_pri,
                                                       svlan_cfi,
                                                       cvlan_id,
                                                       cvlan_pri,
                                                       cvlan_cfi,
                                                       ip_type,
                                                       mpls_label0_label,
                                                       mpls_label0_ttl,
                                                       mpls_label0_exp,
                                                       mpls_label0_bos,
                                                       mpls_label1_label,
                                                       mpls_label1_ttl,
                                                       mpls_label1_exp,
                                                       mpls_label1_bos,
                                                       mpls_label2_label,
                                                       mpls_label2_ttl,
                                                       mpls_label2_exp,
                                                       mpls_label2_bos,
                                                       mpls_label3_label,
                                                       mpls_label3_ttl,
                                                       mpls_label3_exp,
                                                       mpls_label3_bos,
                                                       mpls_label4_label,
                                                       mpls_label4_ttl,
                                                       mpls_label4_exp,
                                                       mpls_label4_bos,
                                                       ip_protocol,
                                                       src_l4_port,
                                                       dst_l4_port,
                                                       ipv6_src,
                                                       ipv6_dst,
                                                       ip_tos,
                                                       ip_ecn,
                                                       ip_dscp,
                                                       ip_ttl)
            assert acl_table_id > 0, 'acl_table_id is <= 0'
            acl_table_id_list.append(acl_table_id)
            print 'append acl_table_id_list[', a, "]:0x%lx" %acl_table_id_list[a]

            acl_entry_id = sai_thrift_create_acl_entry(self.client,
                                                       acl_table_id,
                                                       entry_priority,
                                                       admin_state,
                                                       action, addr_family,
                                                       mac_src, mac_src_mask,
                                                       mac_dst, mac_dst_mask,
                                                       svlan_id, svlan_pri,
                                                       svlan_cfi, cvlan_id,
                                                       cvlan_pri, cvlan_cfi,
                                                       ip_type,
                                                       mpls_label0_label,
                                                       mpls_label0_ttl,
                                                       mpls_label0_exp,
                                                       mpls_label0_bos,
                                                       mpls_label1_label,
                                                       mpls_label1_ttl,
                                                       mpls_label1_exp,
                                                       mpls_label1_bos,
                                                       mpls_label2_label,
                                                       mpls_label2_ttl,
                                                       mpls_label2_exp,
                                                       mpls_label2_bos,
                                                       mpls_label3_label,
                                                       mpls_label3_ttl,
                                                       mpls_label3_exp,
                                                       mpls_label3_bos,
                                                       mpls_label4_label,
                                                       mpls_label4_ttl,
                                                       mpls_label4_exp,
                                                       mpls_label4_bos,
                                                       ip_src, ip_src_mask,
                                                       ip_dst, ip_dst_mask,
                                                       ip_protocol,
                                                       ip_tos, ip_ecn,
                                                       ip_dscp, ip_ttl,
                                                       in_ports, out_ports,
                                                       in_port, out_port,
                                                       src_l4_port, dst_l4_port,
                                                       ingress_mirror_id,
                                                       egress_mirror_id,
                                                       new_svlan, new_scos,
                                                       new_cvlan, new_ccos,
                                                       deny_learn)
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'
            acl_entry_id_list.append(acl_entry_id)
            print 'append acl_entry_id_list[', a, "]:0x%lx" %acl_entry_id_list[a]

            # setup ACL table group members
            group_member_priority = a

            # create ACL table group members
            acl_table_group_member_id = sai_thrift_create_acl_table_group_member(self.client,
                                                                                 acl_table_group_id,
                                                                                 acl_table_id,
                                                                                 group_member_priority)
            assert acl_table_group_member_id > 0, 'acl_table_group_member_id is <= 0'
            acl_table_group_member_id_list.append(acl_table_group_member_id)

        # bind this ACL table to port0s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        warmboot(self.client)

        attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        for a in range(0, member):
            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id_list[a])
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_id_list[a])
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_id_list[a])
            assert (status == SAI_STATUS_SUCCESS)

        #remove acl table group
        status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
        assert (status == SAI_STATUS_SUCCESS)

@group('acl')
class IgrParaAclEntryBindPointVlanTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
                                                               group_stage,
                                                               group_bind_point_list,
                                                               group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id = 20
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)

        sai_thrift_create_fdb(self.client, vlan_oid, mac_dst, port2, mac_action)

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_FORWARD
        in_ports = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=1
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        ip_protocol = 6
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id0 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port,
                                                    ipv6_src,
                                                    ipv6_dst,
                                                    ip_tos,
                                                    ip_ecn,
                                                    ip_dscp,
                                                    ip_ttl)
        assert acl_table_id0 > 0, 'acl_entry_id0 is <= 0'

        acl_table_id1 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port,
                                                    ipv6_src,
                                                    ipv6_dst,
                                                    ip_tos,
                                                    ip_ecn,
                                                    ip_dscp,
                                                    ip_ttl)
        assert acl_table_id1 > 0, 'acl_entry_id1 is <= 0'

        new_scos = 2
        new_ccos = 1
        acl_entry_id0 = sai_thrift_create_acl_entry(self.client,
                                                    acl_table_id0,
                                                    entry_priority,
                                                    admin_state,
                                                    action, addr_family,
                                                    mac_src, mac_src_mask,
                                                    mac_dst, mac_dst_mask,
                                                    svlan_id, svlan_pri,
                                                    svlan_cfi, cvlan_id,
                                                    cvlan_pri, cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_src, ip_src_mask,
                                                    ip_dst, ip_dst_mask,
                                                    ip_protocol,
                                                    ip_tos, ip_ecn,
                                                    ip_dscp, ip_ttl,
                                                    in_ports, out_ports,
                                                    in_port, out_port,
                                                    src_l4_port, dst_l4_port,
                                                    ingress_mirror_id,
                                                    egress_mirror_id,
                                                    new_svlan, new_scos,
                                                    new_cvlan, new_ccos,
                                                    deny_learn)
        assert acl_entry_id0 > 0, 'acl_entry_id0 is <= 0'

        new_scos = None
        new_ccos = None
        deny_learn = True
        acl_entry_id1 = sai_thrift_create_acl_entry(self.client,
                                                    acl_table_id1,
                                                    entry_priority,
                                                    admin_state,
                                                    action, addr_family,
                                                    mac_src, mac_src_mask,
                                                    mac_dst, mac_dst_mask,
                                                    svlan_id, svlan_pri,
                                                    svlan_cfi, cvlan_id,
                                                    cvlan_pri, cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_src, ip_src_mask,
                                                    ip_dst, ip_dst_mask,
                                                    ip_protocol,
                                                    ip_tos, ip_ecn,
                                                    ip_dscp, ip_ttl,
                                                    in_ports, out_ports,
                                                    in_port, out_port,
                                                    src_l4_port, dst_l4_port,
                                                    ingress_mirror_id,
                                                    egress_mirror_id,
                                                    new_svlan, new_scos,
                                                    new_cvlan, new_ccos,
                                                    deny_learn)
        assert acl_entry_id1 > 0, 'acl_entry_id1 is <= 0'

        # setup ACL table group members
        group_member_priority = None

        # create ACL table group members
        acl_table_group_member_id0 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id0,
                                                                              group_member_priority)
        assert acl_table_group_member_id0 > 0, 'acl_table_group_member_id0 is <= 0'

          # create ACL table group members
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id1,
                                                                              group_member_priority)
        assert acl_table_group_member_id1 > 0, 'acl_table_group_member_id1 is <= 0'

        # bind this ACL group to vlan object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
        attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)

        self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

        warmboot(self.client)

        # send the test packet(s)
        tx_pkt1 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=4,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=2,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        tx_pkt2 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_src,
                                         eth_src=mac_dst,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=4,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=2,
                                         dl_vlan_cfi=1,
                                         ip_dst='192.168.0.1',
                                         ip_src='10.10.10.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=80,
                                         tcp_dport=1234)

        rx_pkt1 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=2,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=1,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        rx_pkt2 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_src,
                                         eth_src=mac_dst,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=2,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=1,
                                         dl_vlan_cfi=1,
                                         ip_dst='192.168.0.1',
                                         ip_src='10.10.10.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=80,
                                         tcp_dport=1234)

        try:
            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(0, str(tx_pkt1))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(rx_pkt1, [1])

            #self.ctc_send_packet(1, str(tx_pkt2))
            #self.ctc_verify_no_packet(rx_pkt2, 0, default_time_out)

        finally:
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            # remove acl table group member first
            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id0)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id0)
            self.client.sai_thrift_remove_acl_entry(acl_entry_id1)

            self.client.sai_thrift_remove_acl_table(acl_table_id0)
            self.client.sai_thrift_remove_acl_table(acl_table_id1)

            #remove acl table group
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid, mac_dst, port2)
            self.client.sai_thrift_remove_vlan(vlan_oid)

@group('acl')
class IgrSeqAclEntryBindPointVlanPrioTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create ACL table group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client,
                                                               group_stage,
                                                               group_bind_point_list,
                                                               group_type)
        assert acl_table_group_id > 0, 'acl_table_group_id is <= 0'

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id = 20
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        sai_thrift_create_fdb(self.client, vlan_oid, mac_dst, port2, mac_action)

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_FORWARD
        in_ports = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=1
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        ip_protocol = 6
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id0 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port,
                                                    ipv6_src,
                                                    ipv6_dst,
                                                    ip_tos,
                                                    ip_ecn,
                                                    ip_dscp,
                                                    ip_ttl)
        assert acl_table_id0 > 0, 'acl_entry_id0 is <= 0'

        acl_table_id1 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port,
                                                    ipv6_src,
                                                    ipv6_dst,
                                                    ip_tos,
                                                    ip_ecn,
                                                    ip_dscp,
                                                    ip_ttl)

        assert acl_table_id1 > 0, 'acl_entry_id1 is <= 0'

        new_scos = 2
        new_ccos = 1
        acl_entry_id0 = sai_thrift_create_acl_entry(self.client,
                                                    acl_table_id0,
                                                    entry_priority,
                                                    admin_state,
                                                    action, addr_family,
                                                    mac_src, mac_src_mask,
                                                    mac_dst, mac_dst_mask,
                                                    svlan_id, svlan_pri,
                                                    svlan_cfi, cvlan_id,
                                                    cvlan_pri, cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_src, ip_src_mask,
                                                    ip_dst, ip_dst_mask,
                                                    ip_protocol,
                                                    ip_tos, ip_ecn,
                                                    ip_dscp, ip_ttl,
                                                    in_ports, out_ports,
                                                    in_port, out_port,
                                                    src_l4_port, dst_l4_port,
                                                    ingress_mirror_id,
                                                    egress_mirror_id,
                                                    new_svlan, new_scos,
                                                    new_cvlan, new_ccos,
                                                    deny_learn)
        assert acl_entry_id0 > 0, 'acl_entry_id0 is <= 0'

        new_scos = None
        new_ccos = None
        deny_learn = True
        acl_entry_id1 = sai_thrift_create_acl_entry(self.client,
                                                    acl_table_id1,
                                                    entry_priority,
                                                    admin_state,
                                                    action, addr_family,
                                                    mac_src, mac_src_mask,
                                                    mac_dst, mac_dst_mask,
                                                    svlan_id, svlan_pri,
                                                    svlan_cfi, cvlan_id,
                                                    cvlan_pri, cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_src, ip_src_mask,
                                                    ip_dst, ip_dst_mask,
                                                    ip_protocol,
                                                    ip_tos, ip_ecn,
                                                    ip_dscp, ip_ttl,
                                                    in_ports, out_ports,
                                                    in_port, out_port,
                                                    src_l4_port, dst_l4_port,
                                                    ingress_mirror_id,
                                                    egress_mirror_id,
                                                    new_svlan, new_scos,
                                                    new_cvlan, new_ccos,
                                                    deny_learn)
        assert acl_entry_id1 > 0, 'acl_entry_id1 is <= 0'

        # setup ACL table group members
        group_member_priority = 1

        # create ACL table group members
        acl_table_group_member_id0 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id0,
                                                                              group_member_priority)
        assert acl_table_group_member_id0 > 0, 'acl_table_group_member_id0 is <= 0'

        group_member_priority = 0
          # create ACL table group members
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id,
                                                                              acl_table_id1,
                                                                              group_member_priority)
        assert acl_table_group_member_id1 > 0, 'acl_table_group_member_id1 is <= 0'

        # bind this ACL group to vlan object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
        attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)

        self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

        warmboot(self.client)

        # send the test packet(s)
        tx_pkt1 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=4,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=2,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        tx_pkt2 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_src,
                                         eth_src=mac_dst,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=2,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=1,
                                         dl_vlan_cfi=1,
                                         ip_dst='192.168.0.1',
                                         ip_src='10.10.10.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=80,
                                         tcp_dport=1234)

        rx_pkt1 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=2,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=1,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        rx_pkt2 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_src,
                                         eth_src=mac_dst,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=2,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=1,
                                         dl_vlan_cfi=1,
                                         ip_dst='192.168.0.1',
                                         ip_src='10.10.10.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=80,
                                         tcp_dport=1234)


        try:
            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(0, str(tx_pkt1))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(rx_pkt1, [1])

            self.ctc_send_packet(1, str(tx_pkt2))
            self.ctc_verify_packets(rx_pkt2, [0])

        finally:
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            # remove acl table group member first
            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id0)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id0)
            self.client.sai_thrift_remove_acl_entry(acl_entry_id1)

            self.client.sai_thrift_remove_acl_table(acl_table_id0)
            self.client.sai_thrift_remove_acl_table(acl_table_id1)

            #remove acl table group
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid, mac_dst, port2)

            self.client.sai_thrift_remove_vlan(vlan_oid)

@group('acl')
class IgrParaAclEntryPrioBetweenBindPointsTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        # setup ACL table group
        group_stage = SAI_ACL_STAGE_INGRESS

        group_bind_point_list0 = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create ACL table group
        acl_table_group_id0 = sai_thrift_create_acl_table_group(self.client,
                                                                group_stage,
                                                                group_bind_point_list0,
                                                                group_type)
        assert acl_table_group_id0 > 0, 'acl_table_group_id0 is <= 0'

        group_bind_point_list1 = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create ACL table group
        acl_table_group_id1 = sai_thrift_create_acl_table_group(self.client,
                                                                group_stage,
                                                                group_bind_point_list1,
                                                                group_type)
        assert acl_table_group_id1 > 0, 'acl_table_group_id1 is <= 0'

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id = 20
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)

        sai_thrift_create_fdb(self.client, vlan_oid, mac_dst, port2, mac_action)

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_FORWARD
        in_ports = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=1
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        ip_protocol = 6
        in_port = 0
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        addr_family = None

        acl_table_id0 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port,
                                                    ipv6_src,
                                                    ipv6_dst,
                                                    ip_tos,
                                                    ip_ecn,
                                                    ip_dscp,
                                                    ip_ttl)
        assert acl_table_id0 > 0, 'acl_entry_id0 is <= 0'

        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        acl_table_id1 = sai_thrift_create_acl_table(self.client,
                                                    table_stage,
                                                    table_bind_point_list,
                                                    addr_family,
                                                    mac_src,
                                                    mac_dst,
                                                    ip_src,
                                                    ip_dst,
                                                    in_ports,
                                                    out_ports,
                                                    in_port,
                                                    out_port,
                                                    svlan_id,
                                                    svlan_pri,
                                                    svlan_cfi,
                                                    cvlan_id,
                                                    cvlan_pri,
                                                    cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_protocol,
                                                    src_l4_port,
                                                    dst_l4_port,
                                                    ipv6_src,
                                                    ipv6_dst,
                                                    ip_tos,
                                                    ip_ecn,
                                                    ip_dscp,
                                                    ip_ttl)
        assert acl_table_id1 > 0, 'acl_entry_id1 is <= 0'

        new_scos = 5
        new_ccos = 3
        acl_entry_id0 = sai_thrift_create_acl_entry(self.client,
                                                    acl_table_id0,
                                                    entry_priority,
                                                    admin_state,
                                                    action, addr_family,
                                                    mac_src, mac_src_mask,
                                                    mac_dst, mac_dst_mask,
                                                    svlan_id, svlan_pri,
                                                    svlan_cfi, cvlan_id,
                                                    cvlan_pri, cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_src, ip_src_mask,
                                                    ip_dst, ip_dst_mask,
                                                    ip_protocol,
                                                    ip_tos, ip_ecn,
                                                    ip_dscp, ip_ttl,
                                                    in_ports, out_ports,
                                                    in_port, out_port,
                                                    src_l4_port, dst_l4_port,
                                                    ingress_mirror_id,
                                                    egress_mirror_id,
                                                    new_svlan, new_scos,
                                                    new_cvlan, new_ccos,
                                                    deny_learn)
        assert acl_entry_id0 > 0, 'acl_entry_id0 is <= 0'

        new_scos = 6
        new_ccos = 4
        acl_entry_id1 = sai_thrift_create_acl_entry(self.client,
                                                    acl_table_id1,
                                                    entry_priority,
                                                    admin_state,
                                                    action, addr_family,
                                                    mac_src, mac_src_mask,
                                                    mac_dst, mac_dst_mask,
                                                    svlan_id, svlan_pri,
                                                    svlan_cfi, cvlan_id,
                                                    cvlan_pri, cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_src, ip_src_mask,
                                                    ip_dst, ip_dst_mask,
                                                    ip_protocol,
                                                    ip_tos, ip_ecn,
                                                    ip_dscp, ip_ttl,
                                                    in_ports, out_ports,
                                                    in_port, out_port,
                                                    src_l4_port, dst_l4_port,
                                                    ingress_mirror_id,
                                                    egress_mirror_id,
                                                    new_svlan, new_scos,
                                                    new_cvlan, new_ccos,
                                                    deny_learn)
        assert acl_entry_id1 > 0, 'acl_entry_id1 is <= 0'

        # setup ACL table group members
        group_member_priority = None

        # create ACL table group members
        acl_table_group_member_id0 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id0,
                                                                              acl_table_id0,
                                                                              group_member_priority)
        assert acl_table_group_member_id0 > 0, 'acl_table_group_member_id0 is <= 0'

        # create ACL table group members
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                              acl_table_group_id1,
                                                                              acl_table_id1,
                                                                              group_member_priority)
        assert acl_table_group_member_id1 > 0, 'acl_table_group_member_id1 is <= 0'

        # bind this ACL table to port0s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id0)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        # bind this ACL group to vlan object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id1)
        attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

        warmboot(self.client)

        # send the test packet(s)
        tx_pkt1 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=4,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=2,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        tx_pkt2 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=4,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=2,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        rx_pkt1 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=5,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=3,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        rx_pkt2 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=6,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=4,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        try:
            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(0, str(tx_pkt1))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(rx_pkt1, [1])

        finally:
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            # remove acl table group member first
            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id0)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id0)
            self.client.sai_thrift_remove_acl_entry(acl_entry_id1)

            self.client.sai_thrift_remove_acl_table(acl_table_id0)
            self.client.sai_thrift_remove_acl_table(acl_table_id1)

            #remove acl table group
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id0)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id1)
            assert (status == SAI_STATUS_SUCCESS)

            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid, mac_dst, port2)

            self.client.sai_thrift_remove_vlan(vlan_oid)

@group('acl')
class AclV4EntryRangeTypeTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        mac_src = '00:11:11:11:11:11'
        mac_dst = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        # the relationship between vlan id and vlan_oid
        vlan_id0 = 2
        vlan_oid0 = sai_thrift_create_vlan(self.client, vlan_id0)

        vlan_id1 = 20
        vlan_oid1 = sai_thrift_create_vlan(self.client, vlan_id1)

        acl_range_type_list = [SAI_ACL_RANGE_TYPE_OUTER_VLAN]
        acl_range_min = 2
        acl_range_max = 3
        acl_range_id0 = sai_thrift_create_acl_range(self.client, SAI_ACL_RANGE_TYPE_OUTER_VLAN, SAI_ACL_STAGE_INGRESS, acl_range_min, acl_range_max)
        acl_range_id_list0 = [acl_range_id0]
        print "acl_range_id0:0x%lx" %acl_range_id0

        acl_range_min = 20
        acl_range_max = 21
        acl_range_id1 = sai_thrift_create_acl_range(self.client, SAI_ACL_RANGE_TYPE_OUTER_VLAN, SAI_ACL_STAGE_INGRESS, acl_range_min, acl_range_max)
        acl_range_id_list1 = [acl_range_id1]
        print "acl_range_id1:0x%lx" %acl_range_id1

        sai_thrift_create_fdb(self.client, vlan_oid0, mac_dst, port2, mac_action)
        sai_thrift_create_fdb(self.client, vlan_oid1, mac_dst, port2, mac_action)

        # send the test packet(s)
        tx_pkt0 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=2,
                                         dl_vlan_pcp_outer=4,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=2,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        tx_pkt1 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=4,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=2,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        rx_pkt0 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=2,
                                         dl_vlan_pcp_outer=4,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=2,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        rx_pkt1 = simple_qinq_tcp_packet(pktlen=100,
                                         eth_dst=mac_dst,
                                         eth_src=mac_src,
                                         dl_vlan_outer=20,
                                         dl_vlan_pcp_outer=4,
                                         dl_vlan_cfi_outer=1,
                                         vlan_vid=10,
                                         vlan_pcp=2,
                                         dl_vlan_cfi=1,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=64,
                                         tcp_sport=1234,
                                         tcp_dport=80)

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=2
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=1
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        ip_protocol = 6
        in_port = 0
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        admin_state = True
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = True
        addr_family = None
        range_type = 1
        ingress_samplepacket = None

        acl_table_id = sai_thrift_create_acl_table(self.client,
                                                   table_stage,
                                                   table_bind_point_list,
                                                   addr_family,
                                                   mac_src,
                                                   mac_dst,
                                                   ip_src,
                                                   ip_dst,
                                                   in_ports,
                                                   out_ports,
                                                   in_port,
                                                   out_port,
                                                   svlan_id,
                                                   svlan_pri,
                                                   svlan_cfi,
                                                   cvlan_id,
                                                   cvlan_pri,
                                                   cvlan_cfi,
                                                   ip_type,
                                                   mpls_label0_label,
                                                   mpls_label0_ttl,
                                                   mpls_label0_exp,
                                                   mpls_label0_bos,
                                                   mpls_label1_label,
                                                   mpls_label1_ttl,
                                                   mpls_label1_exp,
                                                   mpls_label1_bos,
                                                   mpls_label2_label,
                                                   mpls_label2_ttl,
                                                   mpls_label2_exp,
                                                   mpls_label2_bos,
                                                   mpls_label3_label,
                                                   mpls_label3_ttl,
                                                   mpls_label3_exp,
                                                   mpls_label3_bos,
                                                   mpls_label4_label,
                                                   mpls_label4_ttl,
                                                   mpls_label4_exp,
                                                   mpls_label4_bos,
                                                   ip_protocol,
                                                   src_l4_port,
                                                   dst_l4_port,
                                                   ipv6_src,
                                                   ipv6_dst,
                                                   ip_tos,
                                                   ip_ecn,
                                                   ip_dscp,
                                                   ip_ttl,
                                                   acl_range_type_list)

        svlan_id=2
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=1

        action = SAI_PACKET_ACTION_DROP
        acl_entry_id0 = sai_thrift_create_acl_entry(self.client,
                                                    acl_table_id,
                                                    entry_priority,
                                                    admin_state,
                                                    action, addr_family,
                                                    mac_src, mac_src_mask,
                                                    mac_dst, mac_dst_mask,
                                                    svlan_id, svlan_pri,
                                                    svlan_cfi, cvlan_id,
                                                    cvlan_pri, cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_src, ip_src_mask,
                                                    ip_dst, ip_dst_mask,
                                                    ip_protocol,
                                                    ip_tos, ip_ecn,
                                                    ip_dscp, ip_ttl,
                                                    in_ports, out_ports,
                                                    in_port, out_port,
                                                    src_l4_port, dst_l4_port,
                                                    ingress_mirror_id,
                                                    egress_mirror_id,
                                                    new_svlan, new_scos,
                                                    new_cvlan, new_ccos,
                                                    deny_learn,
                                                    ingress_samplepacket,
                                                    acl_range_id_list0)

        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=1

        action = SAI_PACKET_ACTION_FORWARD
        acl_entry_id1 = sai_thrift_create_acl_entry(self.client,
                                                    acl_table_id,
                                                    entry_priority,
                                                    admin_state,
                                                    action, addr_family,
                                                    mac_src, mac_src_mask,
                                                    mac_dst, mac_dst_mask,
                                                    svlan_id, svlan_pri,
                                                    svlan_cfi, cvlan_id,
                                                    cvlan_pri, cvlan_cfi,
                                                    ip_type,
                                                    mpls_label0_label,
                                                    mpls_label0_ttl,
                                                    mpls_label0_exp,
                                                    mpls_label0_bos,
                                                    mpls_label1_label,
                                                    mpls_label1_ttl,
                                                    mpls_label1_exp,
                                                    mpls_label1_bos,
                                                    mpls_label2_label,
                                                    mpls_label2_ttl,
                                                    mpls_label2_exp,
                                                    mpls_label2_bos,
                                                    mpls_label3_label,
                                                    mpls_label3_ttl,
                                                    mpls_label3_exp,
                                                    mpls_label3_bos,
                                                    mpls_label4_label,
                                                    mpls_label4_ttl,
                                                    mpls_label4_exp,
                                                    mpls_label4_bos,
                                                    ip_src, ip_src_mask,
                                                    ip_dst, ip_dst_mask,
                                                    ip_protocol,
                                                    ip_tos, ip_ecn,
                                                    ip_dscp, ip_ttl,
                                                    in_ports, out_ports,
                                                    in_port, out_port,
                                                    src_l4_port, dst_l4_port,
                                                    ingress_mirror_id,
                                                    egress_mirror_id,
                                                    new_svlan, new_scos,
                                                    new_cvlan, new_ccos,
                                                    deny_learn,
                                                    ingress_samplepacket,
                                                    acl_range_id_list0)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_table_id is <= 0'
            assert acl_entry_id0 > 0, 'acl_entry_id0 is <= 0'
            assert acl_entry_id1 > 0, 'acl_entry_id1 is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(0, str(tx_pkt0))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(rx_pkt0, 1, default_time_out)

            self.ctc_send_packet(0, str(tx_pkt1))
            self.ctc_verify_packets(rx_pkt1, [1])

        finally:
            # unbind this ACL table from vlan object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id0)
            self.client.sai_thrift_remove_acl_entry(acl_entry_id1)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup FDB
            sai_thrift_delete_fdb(self.client, vlan_oid0, mac_dst, port2)
            sai_thrift_delete_fdb(self.client, vlan_oid1, mac_dst, port2)

            self.client.sai_thrift_remove_acl_range(acl_range_id0)
            self.client.sai_thrift_remove_acl_range(acl_range_id1)
            self.client.sai_thrift_remove_vlan(vlan_oid0)
            self.client.sai_thrift_remove_vlan(vlan_oid1)

@group('acl')
class AclV4EntryRedirectActionTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)
        rif_id3 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port3, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_addr2 = '10.10.10.2'
        ip_mask = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        #dmac2 = '00:11:22:33:44:56'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        sai_thrift_create_neighbor(self.client, addr_family, rif_id2, ip_addr2, dmac1)
        sai_thrift_create_neighbor(self.client, addr_family, rif_id3, ip_addr2, dmac1)

        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        nhop2 = sai_thrift_create_nhop(self.client, addr_family, ip_addr2, rif_id2)
        nhop3 = sai_thrift_create_nhop(self.client, addr_family, ip_addr2, rif_id3)

        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask, nhop1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr2, ip_mask, nhop2)

        # send the test packet(s)
        pkt0 = simple_qinq_tcp_packet(pktlen=100,
                                      eth_dst=router_mac,
                                      eth_src='00:22:22:22:22:22',
                                      dl_vlan_outer=20,
                                      dl_vlan_pcp_outer=4,
                                      dl_vlan_cfi_outer=1,
                                      vlan_vid=10,
                                      vlan_pcp=2,
                                      dl_vlan_cfi=1,
                                      ip_dst='10.10.10.1',
                                      ip_src='192.168.0.1',
                                      ip_tos=5,
                                      ip_ecn=1,
                                      ip_dscp=1,
                                      ip_ttl=64,
                                      tcp_sport=1234,
                                      tcp_dport=80)

        pkt1 = simple_qinq_tcp_packet(pktlen=100,
                                      eth_dst=router_mac,
                                      eth_src='00:22:22:22:22:22',
                                      dl_vlan_outer=20,
                                      dl_vlan_pcp_outer=4,
                                      dl_vlan_cfi_outer=1,
                                      vlan_vid=10,
                                      vlan_pcp=2,
                                      dl_vlan_cfi=1,
                                      ip_dst='10.10.10.2',
                                      ip_src='192.168.0.1',
                                      ip_tos=5,
                                      ip_ecn=1,
                                      ip_dscp=1,
                                      ip_ttl=64,
                                      tcp_sport=1234,
                                      tcp_dport=80)

        exp_pkt0 = simple_tcp_packet(pktlen=92,
                                     eth_dst='00:11:22:33:44:55',
                                     eth_src=router_mac,
                                     ip_dst='10.10.10.1',
                                     ip_src='192.168.0.1',
                                     ip_tos=5,
                                     ip_ecn=1,
                                     ip_dscp=1,
                                     ip_ttl=63,
                                     tcp_sport=1234,
                                     tcp_dport=80)

        exp_pkt1 = simple_tcp_packet(pktlen=92,
                                     eth_dst='00:11:22:33:44:55',
                                     eth_src=router_mac,
                                     ip_dst='10.10.10.2',
                                     ip_src='192.168.0.1',
                                     ip_tos=5,
                                     ip_ecn=1,
                                     ip_dscp=1,
                                     ip_ttl=63,
                                     tcp_sport=1234,
                                     tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt0))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(exp_pkt0, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = None
        in_ports = None
        mac_src = '00:22:22:22:22:22'
        mac_dst = router_mac
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        ip_protocol = 6
        in_port = 1
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True
        ingress_samplepacket = None
        acl_range_id_list = None
        redirect = nhop3

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl)

        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn,
            ipv6_src,
            ipv6_src_mask,
            ipv6_dst,
            ipv6_dst_mask,
            ingress_samplepacket,
            acl_range_id_list, redirect)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        warmboot(self.client)
        try:
            print '#### ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.2 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt1))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.2 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(exp_pkt1, [2])

        finally:
            # unbind this ACL table from port2s object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)
            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)
            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask, nhop1)
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr2, ip_mask, nhop2)
            self.client.sai_thrift_remove_next_hop(nhop1)
            self.client.sai_thrift_remove_next_hop(nhop2)
            self.client.sai_thrift_remove_next_hop(nhop3)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id2, ip_addr2, dmac1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id3, ip_addr2, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_router_interface(rif_id3)
            self.client.sai_thrift_remove_virtual_router(vr_id)


###udf test
@group('acl')
class ACLTableUDFBindPointPortTest(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        pkt1 = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
            
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt1 = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=62,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])

        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = [port1, port2]
        #mac_src = '00:22:22:22:22:22'
        #mac_dst = router_mac
        mac_src = None
        mac_dst = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        #svlan_id=20
        #svlan_pri=4
        #svlan_cfi=1
        #cvlan_id=10
        #cvlan_pri=2
        #cvlan_cfi=None
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type=None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src=None
        ip_src_mask=None
        ip_dst=None
        ip_dst_mask=None
        ipv6_src=None
        ipv6_src_mask=None
        ipv6_dst=None
        ipv6_dst_mask=None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol=None
        in_port=None
        out_port=None
        out_ports=None
        src_l4_port=None
        dst_l4_port=None
        acl_range_type_list=None
        ingress_mirror_id=None
        egress_mirror_id=None
        ingress_samplepacket=None
        acl_range_id_list=None
        redirect=None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True

        udf0 = ctypes.c_int8(0)
        udf1 = ctypes.c_int8(1)
        udf2 = ctypes.c_int8(0)
        udf3 = ctypes.c_int8(0)

        udf4 = ctypes.c_int8(64)
        udf5 = ctypes.c_int8(6)
        udf6 = ctypes.c_int8(165)
        udf7 = ctypes.c_int8(240)

        udf8 = ctypes.c_int8(192)
        udf9 = ctypes.c_int8(168)
        udf10 = ctypes.c_int8(0)
        udf11 = ctypes.c_int8(1)

        udf12 = ctypes.c_int8(10)
        udf13 = ctypes.c_int8(10)
        udf14 = ctypes.c_int8(10)
        udf15 = ctypes.c_int8(1)

        group_type = SAI_UDF_GROUP_TYPE_GENERIC
        
        if 'tsingma' == testutils.test_params_get()['chipname']:
            group_length = 4
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
            group_length = 2

        print "Create udf group: udf_group_type = SAI_UDF_GROUP_ATTR_TYPE, group_length = SAI_UDF_GROUP_ATTR_LENGTH "
        udf_group_id = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id = 0x%lx" %udf_group_id

        udf_group_id1 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id1 = 0x%lx" %udf_group_id1

        udf_group_id2 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id2 = 0x%lx" %udf_group_id2

        udf_group_id3 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id3 = 0x%lx" %udf_group_id3

        udf_group_id4 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id4 = 0x%lx" %udf_group_id4

        udf_group_id5 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id5 = 0x%lx" %udf_group_id5

        udf_group_id6 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id6 = 0x%lx" %udf_group_id6

        udf_group_id7 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id7 = 0x%lx" %udf_group_id7

        #ipv4
        ether_type = 0x0800
        ether_type_mask = U16MASKFULL
        #tcp
        l3_header_protocol = 6
        l3_header_protocol_mask = U8MASKFULL
        #gre
        gre_type = None
        gre_type_mask = None
        #l4 port
        l4_src_port = 1234
        l4_src_port_mask = U16MASKFULL
        l4_dst_port = 80
        l4_dst_port_mask = U16MASKFULL
        #mpls label num
        mpls_label_num = None
        #entry proirity
        priority = 0

        udf_match_id = sai_thrift_create_udf_match(self.client,
                                                   ether_type,
                                                   ether_type_mask,
                                                   l3_header_protocol,
                                                   l3_header_protocol_mask,
                                                   gre_type,
                                                   gre_type_mask,
                                                   l4_src_port,
                                                   l4_src_port_mask,
                                                   l4_dst_port,
                                                   l4_dst_port_mask,
                                                   mpls_label_num,
                                                   priority)

        if 'tsingma' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 6
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 10
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id4 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id4 > 0, 'udf_entry_id4 is <= 0'
            print "udf_entry_id4 = 0x%lx" %udf_entry_id4

            base = SAI_UDF_BASE_L3
            offset = 14
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id5 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id5 > 0, 'udf_entry_id5 is <= 0'
            print "udf_entry_id5 = 0x%lx" %udf_entry_id5

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id6 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id6, base, offset, hash_mask_list)
            assert udf_entry_id6 > 0, 'udf_entry_id6 is <= 0'
            print "udf_entry_id6 = 0x%lx" %udf_entry_id6

            base = SAI_UDF_BASE_L3
            offset = 18
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id7 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id7, base, offset, hash_mask_list)
            assert udf_entry_id7 > 0, 'udf_entry_id7 is <= 0'
            print "udf_entry_id7 = 0x%lx" %udf_entry_id7

        acl_attr_list = []
        # acl key field

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id1)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id2)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id3)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id4)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id5)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id6)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id7)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_id = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = 0x%lx" %acl_table_id)
        assert(acl_table_id != SAI_NULL_OBJECT_ID)

        # acl entry info
        action = SAI_PACKET_ACTION_DROP
        entry_priority = 1
        admin_state = True

        acl_attr_list = []
        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        if 'tsingma' == testutils.test_params_get()['chipname']:

            user_define_filed_group_data = [udf0.value, udf1.value, udf2.value, udf3.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf4.value, udf5.value, udf6.value, udf7.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf8.value, udf9.value, udf10.value, udf11.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf12.value, udf13.value, udf14.value, udf15.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
            acl_attr_list.append(attribute)

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

            user_define_filed_group_data = [udf0.value, udf1.value]
            user_define_filed_group_mask = [-1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf2.value, udf3.value]
            user_define_filed_group_mask = [-1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf4.value, udf5.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf6.value, udf7.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf8.value, udf9.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf10.value, udf11.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf12.value, udf13.value]
            user_define_filed_group_mask = [-1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf14.value, udf15.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
            acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_id = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = 0x%lx" %acl_entry_id)
        assert(acl_entry_id != SAI_NULL_OBJECT_ID)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(1, str(pkt))

            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

            user_define_filed_group_data = [0, 0]
            user_define_filed_group_mask = [0, 0]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
            self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(1, str(pkt))
            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

            print '#### ACL \'Permit, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt1))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets(exp_pkt1, [0])

            udf4 = ctypes.c_int8(63)
            udf5 = ctypes.c_int8(6)
            #change to correct header checksum
            udf6 = ctypes.c_int8(166)
            udf7 = ctypes.c_int8(240)

            if 'tsingma' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [udf4.value, udf5.value, udf6.value, udf7.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
                user_define_filed_group_data = [udf4.value, udf5.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'Permit, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                self.ctc_send_packet(1, str(pkt1))
                print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_packets(exp_pkt1, [0])

                user_define_filed_group_data = [udf6.value, udf7.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt1))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt1, 0, default_time_out)

        finally:
            # unbind this ACL table from switch object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)

            self.client.sai_thrift_remove_udf(udf_entry_id)
            self.client.sai_thrift_remove_udf(udf_entry_id1)
            self.client.sai_thrift_remove_udf(udf_entry_id2)
            self.client.sai_thrift_remove_udf(udf_entry_id3)
            if 'tsingma_mx' == testutils.test_params_get()['chipname']:
                self.client.sai_thrift_remove_udf(udf_entry_id4)
                self.client.sai_thrift_remove_udf(udf_entry_id5)
                self.client.sai_thrift_remove_udf(udf_entry_id6)
                self.client.sai_thrift_remove_udf(udf_entry_id7)
            self.client.sai_thrift_remove_udf_match(udf_match_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id1)
            self.client.sai_thrift_remove_udf_group(udf_group_id2)
            self.client.sai_thrift_remove_udf_group(udf_group_id3)
            self.client.sai_thrift_remove_udf_group(udf_group_id4)
            self.client.sai_thrift_remove_udf_group(udf_group_id5)
            self.client.sai_thrift_remove_udf_group(udf_group_id6)
            self.client.sai_thrift_remove_udf_group(udf_group_id7)


class func_01_create_acl_range_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        range_type = SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE
        stage = SAI_ACL_STAGE_INGRESS
        range_min = 1234
        range_max = 5678

        try:
            acl_range_oid = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
            sys_logging("create acl range = %d" %acl_range_oid)
            assert(acl_range_oid != SAI_NULL_OBJECT_ID )

        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid)
            assert (status == SAI_STATUS_SUCCESS)

class func_02_create_same_acl_range_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        range_type = SAI_ACL_RANGE_TYPE_OUTER_VLAN
        stage = SAI_ACL_STAGE_INGRESS
        range_min = 123
        range_max = 456

        try:

            acl_range_oid = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
            sys_logging("create acl range = %d" %acl_range_oid)
            assert(acl_range_oid != SAI_NULL_OBJECT_ID )

            acl_range_oid_2 = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
            sys_logging("create acl range = %d" %acl_range_oid_2)
            assert(acl_range_oid_2 == SAI_NULL_OBJECT_ID )

            #assert(acl_range_oid != acl_range_oid_2 )

        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid)
            assert (status == SAI_STATUS_SUCCESS)
            #status = self.client.sai_thrift_remove_acl_range(acl_range_oid_2)
            #assert (status == SAI_STATUS_SUCCESS)


class func_03_create_multi_acl_range_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        try:

            range_type = SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE
            stage = SAI_ACL_STAGE_INGRESS
            range_min = 1111
            range_max = 2222
            acl_range_oid = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
            sys_logging("create acl range = %d" %acl_range_oid)
            assert(acl_range_oid != SAI_NULL_OBJECT_ID )

            range_type = SAI_ACL_RANGE_TYPE_L4_DST_PORT_RANGE
            range_min = 3333
            range_max = 4444
            acl_range_oid_2 = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
            sys_logging("create acl range = %d" %acl_range_oid_2)
            assert(acl_range_oid_2 != SAI_NULL_OBJECT_ID )

            range_type = SAI_ACL_RANGE_TYPE_OUTER_VLAN
            range_min = 1
            range_max = 2048
            acl_range_oid_3 = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
            sys_logging("create acl range = %d" %acl_range_oid_3)
            assert(acl_range_oid_3 != SAI_NULL_OBJECT_ID )

            range_type = SAI_ACL_RANGE_TYPE_INNER_VLAN
            range_min = 2049
            range_max = 4094
            acl_range_oid_4 = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
            sys_logging("create acl range = %d" %acl_range_oid_4)
            assert(acl_range_oid_4 != SAI_NULL_OBJECT_ID )

            range_type = SAI_ACL_RANGE_TYPE_PACKET_LENGTH
            range_min = 64
            range_max = 9600
            acl_range_oid_5 = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
            sys_logging("create acl range = %d" %acl_range_oid_5)
            assert(acl_range_oid_5 != SAI_NULL_OBJECT_ID )


        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid_2)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid_3)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid_4)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid_5)
            assert (status == SAI_STATUS_SUCCESS)



class func_04_create_max_acl_range_fn (sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        range_type = SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE
        stage = SAI_ACL_STAGE_INGRESS
        range_min = 1111
        range_max = 2222
        acl_range_oid = range(13)

        try:

            for a in range(0,13):
                if a != 12:
                    acl_range_oid[a] = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
                    sys_logging("create acl range = %d" %acl_range_oid[a])
                    assert(acl_range_oid[a] != SAI_NULL_OBJECT_ID )
                else:
                    acl_range_oid[a] = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
                    sys_logging("create acl range = %d" %acl_range_oid[a])
                    assert(acl_range_oid[a] == SAI_NULL_OBJECT_ID )

        finally:
            sys_logging("clear config")
            for a in range(0,12):
                status = self.client.sai_thrift_remove_acl_range(acl_range_oid[a])
                assert (status == SAI_STATUS_SUCCESS)


class func_05_remove_acl_range_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        range_type = SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE
        stage = SAI_ACL_STAGE_INGRESS
        range_min = 1234
        range_max = 5678

        try:

            acl_range_oid = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
            sys_logging("create acl range = %d" %acl_range_oid)
            assert(acl_range_oid != SAI_NULL_OBJECT_ID )

            status = self.client.sai_thrift_remove_acl_range(acl_range_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_range(acl_range_oid)
            assert (status == SAI_STATUS_SUCCESS)

        finally:

            sys_logging("clear config")



class func_06_set_and_get_acl_range_attr_fn (sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        range_type = SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE
        stage = SAI_ACL_STAGE_INGRESS
        range_min = 1111
        range_max = 2222
        acl_range_oid = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
        sys_logging("create acl range = %d" %acl_range_oid)
        assert(acl_range_oid != SAI_NULL_OBJECT_ID )

        range_type = SAI_ACL_RANGE_TYPE_L4_DST_PORT_RANGE
        range_min = 3333
        range_max = 4444
        acl_range_oid_2 = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
        sys_logging("create acl range = %d" %acl_range_oid_2)
        assert(acl_range_oid_2 != SAI_NULL_OBJECT_ID )

        range_type = SAI_ACL_RANGE_TYPE_OUTER_VLAN
        range_min = 1
        range_max = 2048
        acl_range_oid_3 = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
        sys_logging("create acl range = %d" %acl_range_oid_3)
        assert(acl_range_oid_3 != SAI_NULL_OBJECT_ID )

        range_type = SAI_ACL_RANGE_TYPE_INNER_VLAN
        range_min = 2049
        range_max = 4094
        acl_range_oid_4 = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
        sys_logging("create acl range = %d" %acl_range_oid_4)
        assert(acl_range_oid_4 != SAI_NULL_OBJECT_ID )

        range_type = SAI_ACL_RANGE_TYPE_PACKET_LENGTH
        range_min = 64
        range_max = 9600
        acl_range_oid_5 = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
        sys_logging("create acl range = %d" %acl_range_oid_5)
        assert(acl_range_oid_5 != SAI_NULL_OBJECT_ID )

        try:

            sys_logging(" get acl range attr")
            attrs = self.client.sai_thrift_get_acl_range_attribute(acl_range_oid)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_RANGE_ATTR_TYPE:
                    sys_logging("get SAI_ACL_RANGE_ATTR_TYPE = %d" %a.value.s32)
                    assert(SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE == a.value.s32 )

                if a.id == SAI_ACL_RANGE_ATTR_STAGE:
                    sys_logging("get SAI_ACL_RANGE_ATTR_STAGE = %d" %a.value.s32)
                    assert(stage == a.value.s32 )

                if a.id == SAI_ACL_RANGE_ATTR_LIMIT:
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Min = %d" %a.value.u32range.min)
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Max = %d" %a.value.u32range.max)
                    assert(1111 == a.value.u32range.min )
                    assert(2222 == a.value.u32range.max )

            sys_logging(" get acl range attr")
            attrs = self.client.sai_thrift_get_acl_range_attribute(acl_range_oid_2)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_RANGE_ATTR_TYPE:
                    sys_logging("get SAI_ACL_RANGE_ATTR_TYPE = %d" %a.value.s32)
                    assert(SAI_ACL_RANGE_TYPE_L4_DST_PORT_RANGE == a.value.s32 )

                if a.id == SAI_ACL_RANGE_ATTR_LIMIT:
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Min = %d" %a.value.u32range.min)
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Max = %d" %a.value.u32range.max)
                    assert(3333 == a.value.u32range.min )
                    assert(4444 == a.value.u32range.max )

            sys_logging(" get acl range attr")
            attrs = self.client.sai_thrift_get_acl_range_attribute(acl_range_oid_3)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_RANGE_ATTR_TYPE:
                    sys_logging("get SAI_ACL_RANGE_ATTR_TYPE = %d" %a.value.s32)
                    assert(SAI_ACL_RANGE_TYPE_OUTER_VLAN == a.value.s32 )

                if a.id == SAI_ACL_RANGE_ATTR_LIMIT:
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Min = %d" %a.value.u32range.min)
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Max = %d" %a.value.u32range.max)
                    assert(1 == a.value.u32range.min )
                    assert(2048 == a.value.u32range.max )

            sys_logging(" get acl range attr")
            attrs = self.client.sai_thrift_get_acl_range_attribute(acl_range_oid_4)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_RANGE_ATTR_TYPE:
                    sys_logging("get SAI_ACL_RANGE_ATTR_TYPE = %d" %a.value.s32)
                    assert(SAI_ACL_RANGE_TYPE_INNER_VLAN == a.value.s32 )

                if a.id == SAI_ACL_RANGE_ATTR_LIMIT:
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Min = %d" %a.value.u32range.min)
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Max = %d" %a.value.u32range.max)
                    assert(2049 == a.value.u32range.min )
                    assert(4094 == a.value.u32range.max )

            sys_logging(" get acl range attr")
            attrs = self.client.sai_thrift_get_acl_range_attribute(acl_range_oid_5)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_RANGE_ATTR_TYPE:
                    sys_logging("get SAI_ACL_RANGE_ATTR_TYPE = %d" %a.value.s32)
                    assert(SAI_ACL_RANGE_TYPE_PACKET_LENGTH == a.value.s32 )

                if a.id == SAI_ACL_RANGE_ATTR_LIMIT:
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Min = %d" %a.value.u32range.min)
                    sys_logging("get SAI_ACL_RANGE_ATTR_LIMIT Max = %d" %a.value.u32range.max)
                    assert(64 == a.value.u32range.min )
                    assert(9600 == a.value.u32range.max )


        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid_2)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid_3)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid_4)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_range(acl_range_oid_5)
            assert (status == SAI_STATUS_SUCCESS)


class func_07_create_acl_table_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        try:

            sys_logging(" create acl table ")

            acl_table_oid = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)

            sys_logging("create acl table = %d" %acl_table_oid)
            assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        finally:

            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

#comment: not check same acl table
class func_08_create_same_acl_table_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        try:

            sys_logging(" create acl table ")

            acl_table_oid = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)

            sys_logging("create acl table = %d" %acl_table_oid)
            assert(acl_table_oid != SAI_NULL_OBJECT_ID )

            acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)

            sys_logging("create acl table = %d" %acl_table_oid_2)
            assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

            assert(acl_table_oid_2 != acl_table_oid )

        finally:

            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)



class func_09_create_multi_acl_table_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        try:

            sys_logging(" create acl table ")

            acl_table_oid = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)

            sys_logging("create acl table = %d" %acl_table_oid)
            assert(acl_table_oid != SAI_NULL_OBJECT_ID )

            table_stage = SAI_ACL_STAGE_EGRESS
            in_port = None
            out_port = port1

            acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)

            sys_logging("create acl table = %d" %acl_table_oid_2)
            assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

            assert(acl_table_oid_2 != acl_table_oid )

        finally:

            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)


class func_10_create_max_acl_table_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        acl_table_oid = range(32769)

        try:

            sys_logging(" create acl table ")

            for a in range(0,32769):

                acl_table_oid[a] = sai_thrift_create_acl_table(self.client,
                    table_stage,
                    table_bind_point_list,
                    addr_family,
                    mac_src,
                    mac_dst,
                    ip_src,
                    ip_dst,
                    in_ports,
                    out_ports,
                    in_port,
                    out_port,
                    svlan_id,
                    svlan_pri,
                    svlan_cfi,
                    cvlan_id,
                    cvlan_pri,
                    cvlan_cfi,
                    ip_type,
                    mpls_label0_label,
                    mpls_label0_ttl,
                    mpls_label0_exp,
                    mpls_label0_bos,
                    mpls_label1_label,
                    mpls_label1_ttl,
                    mpls_label1_exp,
                    mpls_label1_bos,
                    mpls_label2_label,
                    mpls_label2_ttl,
                    mpls_label2_exp,
                    mpls_label2_bos,
                    mpls_label3_label,
                    mpls_label3_ttl,
                    mpls_label3_exp,
                    mpls_label3_bos,
                    mpls_label4_label,
                    mpls_label4_ttl,
                    mpls_label4_exp,
                    mpls_label4_bos,
                    ip_protocol,
                    src_l4_port,
                    dst_l4_port)

                if a != 32768:
                    sys_logging("create acl table = %d" %acl_table_oid[a])
                    assert(acl_table_oid[a] != SAI_NULL_OBJECT_ID )
                else:
                    sys_logging("create acl table = %d" %acl_table_oid[a])
                    assert(acl_table_oid[a] == SAI_NULL_OBJECT_ID )

        finally:
            sys_logging("clear config")
            for a in range(0,32768):
                status = self.client.sai_thrift_remove_acl_table(acl_table_oid[a])
                assert (status == SAI_STATUS_SUCCESS)

class func_11_remove_acl_table_fn (sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        try:

            sys_logging(" create acl table ")

            acl_table_oid = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)

            sys_logging("create acl table = %d" %acl_table_oid)
            assert(acl_table_oid != SAI_NULL_OBJECT_ID )

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

        finally:

            sys_logging("clear config")


class func_12_set_and_get_acl_table_attr_fn (sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        sys_logging(" create acl table ")

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        try:

            sys_logging(" get acl table attr")

            attr_list_ids = [SAI_ACL_TABLE_ATTR_ACL_STAGE, SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, SAI_ACL_TABLE_ATTR_SIZE]

            attrs = self.client.sai_thrift_get_acl_table_attribute(acl_table_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_TABLE_ATTR_ACL_STAGE:
                    sys_logging("get SAI_ACL_TABLE_ATTR_ACL_STAGE = %d" %a.value.s32)
                    assert(table_stage == a.value.s32 )

                if a.id == SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST:
                    sys_logging("get SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST count = %d" %a.value.s32list.count)
                    assert(len(table_bind_point_list) == a.value.s32list.count )
                    assert(table_bind_point_list == a.value.s32list.s32list)

                if a.id == SAI_ACL_TABLE_ATTR_SIZE:
                    sys_logging("get SAI_ACL_TABLE_ATTR_SIZE = %d" %a.value.u32)
                    assert(0 == a.value.u32 )


        finally:

            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)


class func_13_create_acl_counter_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        sys_logging(" create acl table ")

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        try:
            acl_counter_oid = sai_thrift_create_acl_counter(self.client, acl_table_oid)
            sys_logging("create acl counter = %d" %acl_counter_oid)
            assert(acl_counter_oid != SAI_NULL_OBJECT_ID )

        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

#comment: not check same acl counter
class func_14_create_same_acl_counter_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        sys_logging(" create acl table ")

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        try:

            acl_counter_oid = sai_thrift_create_acl_counter(self.client, acl_table_oid)
            sys_logging("create acl counter = %d" %acl_counter_oid)
            assert(acl_counter_oid != SAI_NULL_OBJECT_ID )

            acl_counter_oid_2 = sai_thrift_create_acl_counter(self.client, acl_table_oid)
            sys_logging("create acl counter = %d" %acl_counter_oid_2)
            assert(acl_counter_oid_2 != SAI_NULL_OBJECT_ID )

        finally:

            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid_2)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)



class func_15_create_multi_acl_counter_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        sys_logging(" create acl table ")

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID)

        table_stage = SAI_ACL_STAGE_EGRESS
        in_port = None
        out_port = port1

        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        assert(acl_table_oid_2 != acl_table_oid )

        try:

            acl_counter_oid = sai_thrift_create_acl_counter(self.client, acl_table_oid)
            sys_logging("create acl counter = %d" %acl_counter_oid)
            assert(acl_counter_oid != SAI_NULL_OBJECT_ID )

            acl_counter_oid_2 = sai_thrift_create_acl_counter(self.client, acl_table_oid_2)
            sys_logging("create acl counter = %d" %acl_counter_oid_2)
            assert(acl_counter_oid_2 != SAI_NULL_OBJECT_ID )

            assert(acl_counter_oid != acl_counter_oid_2 )

        finally:

            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid_2)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

class func_16_create_max_acl_counter_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)
        port1 = port_list[0]
        vlan_oid_list = []
        table_oid_list = []
        entry_oid_list = []
        counter_oid_list = []

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            counter_max_num = 1024
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']: # tsingma_mx
            counter_max_num = 2048

        # the relationship between vlan id and vlan_oid
        for v in range(1, (counter_max_num+1)):
            vlan_oid = sai_thrift_create_vlan(self.client, (v+100))
            sys_logging("create vlan %d = 0x%lx" %((v+100), vlan_oid))
            assert(vlan_oid != SAI_NULL_OBJECT_ID)
            vlan_oid_list.append(vlan_oid)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = None
        out_port = None
        svlan_id = True
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        sys_logging(" create acl table ")
        for t in range(1, (counter_max_num+1)):
            table_oid = sai_thrift_create_acl_table(self.client,
                            table_stage,
                            table_bind_point_list,
                            addr_family,
                            mac_src,
                            mac_dst,
                            ip_src,
                            ip_dst,
                            in_ports,
                            out_ports,
                            in_port,
                            out_port,
                            svlan_id,
                            svlan_pri,
                            svlan_cfi,
                            cvlan_id,
                            cvlan_pri,
                            cvlan_cfi,
                            ip_type,
                            mpls_label0_label,
                            mpls_label0_ttl,
                            mpls_label0_exp,
                            mpls_label0_bos,
                            mpls_label1_label,
                            mpls_label1_ttl,
                            mpls_label1_exp,
                            mpls_label1_bos,
                            mpls_label2_label,
                            mpls_label2_ttl,
                            mpls_label2_exp,
                            mpls_label2_bos,
                            mpls_label3_label,
                            mpls_label3_ttl,
                            mpls_label3_exp,
                            mpls_label3_bos,
                            mpls_label4_label,
                            mpls_label4_ttl,
                            mpls_label4_exp,
                            mpls_label4_bos,
                            ip_protocol,
                            src_l4_port,
                            dst_l4_port)
            assert(table_oid != SAI_NULL_OBJECT_ID)
            table_oid_list.append(table_oid)
            sys_logging("create table %d = 0x%lx" %(t, table_oid))

        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = None
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type=None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src=None
        ip_src_mask=None
        ip_dst=None
        ip_dst_mask=None
        ipv6_src=None
        ipv6_src_mask=None
        ipv6_dst=None
        ipv6_dst_mask=None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol=None
        in_port=None
        out_port=None
        out_ports=None
        src_l4_port=None
        dst_l4_port=None
        acl_range_type_list=None
        ingress_mirror=None
        egress_mirror=None
        ingress_samplepacket=None
        acl_range_id_list=None
        redirect=None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True

        sys_logging(" create acl entry ")
        for e in range(1, (counter_max_num+1)):
            sys_logging("create entry %d = table_oid:0x%lx, vlan_oid:0x%lx" %(e, table_oid_list[(e-1)], vlan_oid_list[(e-1)]))
            entry_oid = sai_thrift_create_acl_entry(self.client,
                            table_oid_list[(e-1)],
                            entry_priority,
                            admin_state,
                            action, addr_family,
                            mac_src, mac_src_mask,
                            mac_dst, mac_dst_mask,
                            (e+100),
                            svlan_pri,
                            svlan_cfi,
                            cvlan_id,
                            cvlan_pri,
                            cvlan_cfi,
                            ip_type,
                            mpls_label0_label,
                            mpls_label0_ttl,
                            mpls_label0_exp,
                            mpls_label0_bos,
                            mpls_label1_label,
                            mpls_label1_ttl,
                            mpls_label1_exp,
                            mpls_label1_bos,
                            mpls_label2_label,
                            mpls_label2_ttl,
                            mpls_label2_exp,
                            mpls_label2_bos,
                            mpls_label3_label,
                            mpls_label3_ttl,
                            mpls_label3_exp,
                            mpls_label3_bos,
                            mpls_label4_label,
                            mpls_label4_ttl,
                            mpls_label4_exp,
                            mpls_label4_bos,
                            ip_src, ip_src_mask,
                            ip_dst, ip_dst_mask,
                            ip_protocol,
                            ip_tos, ip_ecn,
                            ip_dscp, ip_ttl,
                            in_ports, out_ports,
                            in_port, out_port,
                            src_l4_port, dst_l4_port,
                            ingress_mirror,
                            egress_mirror,
                            new_svlan, new_scos,
                            new_cvlan, new_ccos,
                            deny_learn)
            assert(entry_oid != SAI_NULL_OBJECT_ID)
            entry_oid_list.append(entry_oid)
            sys_logging("create entry %d = 0x%lx" %(e, entry_oid))

        try:
            for c in range(1, (counter_max_num+1)):
                counter_oid = sai_thrift_create_acl_counter(self.client, table_oid_list[(c-1)])
                assert(counter_oid != SAI_NULL_OBJECT_ID)
                counter_oid_list.append(counter_oid)
                sys_logging("create acl counter %d = 0x%lx" %(c, counter_oid))

            for t in range(1, (counter_max_num+1)):
                sys_logging(" bind this ACL table 0x%lx to vlan %d" %(table_oid_list[(t-1)], (t+100)))
                attr_value = sai_thrift_attribute_value_t(oid=table_oid_list[(t-1)])
                attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
                status = self.client.sai_thrift_set_vlan_attribute(vlan_oid_list[t-1], attr)
                sys_logging("bind ACL table 0x%lx status %d" %(table_oid_list[(t-1)], status))
                assert (status == SAI_STATUS_SUCCESS)

        finally:
            sys_logging("clear config")

            for t in range(1, (counter_max_num+1)):
                attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
                attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
                status = self.client.sai_thrift_set_vlan_attribute(vlan_oid_list[t-1], attr)
                sys_logging("unbind ACL table 0x%lx status %d" %(table_oid_list[(t-1)], status))
                assert (status == SAI_STATUS_SUCCESS)

            for e in range(1, (counter_max_num+1)):
                sys_logging("remove entry: 0x%lx" %entry_oid_list[(e-1)])
                status = self.client.sai_thrift_remove_acl_entry(entry_oid_list[(e-1)])
                assert (status == SAI_STATUS_SUCCESS)

            for t in range(1, (counter_max_num+1)):
                sys_logging("remove table: 0x%lx" %table_oid_list[(t-1)])
                status = self.client.sai_thrift_remove_acl_table(table_oid_list[(t-1)])
                assert (status == SAI_STATUS_SUCCESS)

            for c in range(1, (counter_max_num+1)):
                sys_logging("remove counter: 0x%lx" %counter_oid_list[(c-1)])
                status = self.client.sai_thrift_remove_acl_counter(counter_oid_list[(c-1)])
                assert (status == SAI_STATUS_SUCCESS)

            for v in range(1, (counter_max_num+1)):
                sys_logging("remove vlan: 0x%lx" %vlan_oid_list[(v-1)])
                status = self.client.sai_thrift_remove_vlan(vlan_oid_list[(v-1)])
                assert (status == SAI_STATUS_SUCCESS)

class func_17_remove_acl_counter_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        sys_logging(" create acl table ")

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        try:

            acl_counter_oid = sai_thrift_create_acl_counter(self.client, acl_table_oid)
            sys_logging("create acl counter = %d" %acl_counter_oid)
            assert(acl_counter_oid != SAI_NULL_OBJECT_ID )

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid)
            assert (status == SAI_STATUS_SUCCESS)

        finally:

            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)


class func_18_set_and_get_acl_counter_attr_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        sys_logging(" create acl table ")

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        acl_counter_oid = sai_thrift_create_acl_counter(self.client, acl_table_oid)
        sys_logging("create acl counter = %d" %acl_counter_oid)
        assert(acl_counter_oid != SAI_NULL_OBJECT_ID )

        try:

            attrs = self.client.sai_thrift_get_acl_counter_attribute(acl_counter_oid)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_COUNTER_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_PACKETS:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_PACKETS = %d" %a.value.u64)
                    assert(0 == a.value.u64 )

                if a.id == SAI_ACL_COUNTER_ATTR_BYTES:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_BYTES = %d" %a.value.u64)
                    assert(0 == a.value.u64 )

            attr_value = sai_thrift_attribute_value_t(u64=0)
            attr = sai_thrift_attribute_t(id=SAI_ACL_COUNTER_ATTR_PACKETS, value=attr_value)
            self.client.sai_thrift_set_acl_counter_attribute(acl_counter_oid, attr)

            attr_value = sai_thrift_attribute_value_t(u64=0)
            attr = sai_thrift_attribute_t(id=SAI_ACL_COUNTER_ATTR_BYTES, value=attr_value)
            self.client.sai_thrift_set_acl_counter_attribute(acl_counter_oid, attr)

        finally:

            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)


class func_19_create_acl_group_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        try:
            # create acl group
            acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
            sys_logging("create acl group = %d" %acl_table_group_id)
            assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

#comment: not check same acl group
class func_20_create_same_acl_group_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        try:
            # create acl group
            acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
            sys_logging("create acl group = %d" %acl_table_group_id)
            assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

            acl_table_group_id_2 = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
            sys_logging("create acl group = %d" %acl_table_group_id_2)
            assert(acl_table_group_id_2 != SAI_NULL_OBJECT_ID )

            assert(acl_table_group_id != acl_table_group_id_2 )

        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id_2)
            assert (status == SAI_STATUS_SUCCESS)


class func_21_create_multi_acl_group_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        try:
            # create acl group
            acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
            sys_logging("create acl group = %d" %acl_table_group_id)
            assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

            group_stage = SAI_ACL_STAGE_EGRESS
            group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
            group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

            acl_table_group_id_2 = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
            sys_logging("create acl group = %d" %acl_table_group_id_2)
            assert(acl_table_group_id_2 != SAI_NULL_OBJECT_ID )

            assert(acl_table_group_id != acl_table_group_id_2 )

        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id_2)
            assert (status == SAI_STATUS_SUCCESS)


class func_22_create_max_acl_group_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL
        acl_table_group_id = range(1025)

        try:
            # create acl group
            for a in range(1025):
                acl_table_group_id[a] = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
                sys_logging("create acl group = %d" %acl_table_group_id[a])
                if a != 1024:
                    assert(acl_table_group_id[a] != SAI_NULL_OBJECT_ID )
                else:
                    assert(acl_table_group_id[a] == SAI_NULL_OBJECT_ID )


        finally:
            sys_logging("clear config")
            for a in range(1024):
                status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id[a])
                assert (status == SAI_STATUS_SUCCESS)

class func_23_remove_acl_group_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        try:
            # create acl group
            acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
            sys_logging("create acl group = %d" %acl_table_group_id)
            assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

        finally:
            sys_logging("clear config")


class func_24_set_and_get_acl_group_attr_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_EGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = None
        out_port = port1
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        sys_logging(" create acl table ")

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        # acl group member info
        group_member_priority1 = 0

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
            acl_table_group_id,
            acl_table_oid,
            group_member_priority1)

        group_member_list = [acl_table_group_member_id1]

        try:

            attrs = self.client.sai_thrift_get_acl_table_group_attribute(acl_table_group_id)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE:
                    sys_logging("get SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE = %d" %a.value.s32)
                    assert(group_stage == a.value.s32 )

                if a.id == SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST:
                    sys_logging("get SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST count = %d" %a.value.s32list.count)
                    assert(len(group_bind_point_list) == a.value.s32list.count )
                    assert(group_bind_point_list == a.value.s32list.s32list)

                if a.id == SAI_ACL_TABLE_GROUP_ATTR_TYPE:
                    sys_logging("get SAI_ACL_TABLE_GROUP_ATTR_TYPE = %d" %a.value.s32)
                    assert(group_type == a.value.s32 )

                if a.id == SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST:
                    sys_logging("get SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST count= %d" %a.value.objlist.count)
                    assert(len(group_member_list) == a.value.objlist.count )
                    assert(group_member_list == a.value.objlist.object_id_list )

        finally:

            sys_logging("clear config")

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)



class func_25_create_acl_group_member_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        sys_logging(" create acl table ")

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        try:

            # acl group member info
            group_member_priority1 = 100

            # create acl group member
            acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid,
                group_member_priority1)

            sys_logging("create acl table = %d" %acl_table_group_member_id1)
            assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )


        finally:

            sys_logging("clear config")

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)


class func_26_create_same_acl_group_member_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        try:

            # acl group member info
            group_member_priority1 = 100
            group_member_priority2 = 200

            # create acl group member
            acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid,
                group_member_priority1)

            sys_logging("create acl group member = %d" %acl_table_group_member_id1)
            assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

            acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid,
                group_member_priority1)

            sys_logging("create acl group member = %d" %acl_table_group_member_id2)
            assert(acl_table_group_member_id2 == SAI_NULL_OBJECT_ID )

            acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid,
                group_member_priority2)

            sys_logging("create acl group member = %d" %acl_table_group_member_id3)
            assert(acl_table_group_member_id3 == SAI_NULL_OBJECT_ID )

        finally:

            sys_logging("clear config")

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)




class func_26_create_same_acl_group_member_fn_PARALLEL(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        try:

            # acl group member info
            group_member_priority1 = 100
            group_member_priority2 = 200

            # create acl group member
            acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid,
                group_member_priority1)

            sys_logging("create acl group member = %d" %acl_table_group_member_id1)
            assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

            acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid,
                group_member_priority1)

            sys_logging("create acl group member  = %d" %acl_table_group_member_id2)
            assert(acl_table_group_member_id2 == SAI_NULL_OBJECT_ID )

            acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid,
                group_member_priority2)

            sys_logging("create acl group member  = %d" %acl_table_group_member_id3)
            assert(acl_table_group_member_id3 == SAI_NULL_OBJECT_ID )

        finally:

            sys_logging("clear config")

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)


class func_27_create_multi_acl_group_member_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        port1 = port_list[0]
        port2 = port_list[1]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        in_port = port2
        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        try:

            # acl group member info
            group_member_priority1 = 100
            group_member_priority2 = 200

            # create acl group member
            acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid,
                group_member_priority1)

            sys_logging("create acl group member = %d" %acl_table_group_member_id1)
            assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )


            acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid_2,
                group_member_priority2)

            sys_logging("create acl group member = %d" %acl_table_group_member_id2)
            assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

            assert(acl_table_group_member_id2 != acl_table_group_member_id1 )

        finally:

            sys_logging("clear config")

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)


class func_28_create_max_acl_group_member_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            max_group_member = 1024
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']: # tsingma_mx
            max_group_member = 2048

        acl_table_oid = range(max_group_member+1)
        acl_group_member_oid = range(max_group_member+1)

        try:

            for a in range(max_group_member+1):

                acl_table_oid[a] = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)

                sys_logging("create acl table = %d" %acl_table_oid[a])
                assert(acl_table_oid[a] != SAI_NULL_OBJECT_ID )

                group_member_priority = a

                acl_group_member_oid[a] = sai_thrift_create_acl_table_group_member(self.client,
                    acl_table_group_id,
                    acl_table_oid[a],
                    group_member_priority)

                sys_logging("create acl group member = %d" %acl_group_member_oid[a])

                if a < max_group_member:
                    assert(acl_group_member_oid[a] != SAI_NULL_OBJECT_ID )
                else:
                    assert(acl_group_member_oid[a] == SAI_NULL_OBJECT_ID )

        finally:

            sys_logging("clear config")

            for a in range(max_group_member):
                status = self.client.sai_thrift_remove_acl_table_group_member(acl_group_member_oid[a])
                assert (status == SAI_STATUS_SUCCESS)
                status = self.client.sai_thrift_remove_acl_table(acl_table_oid[a])
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid[max_group_member])
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)


#parallel group max member num 3
class func_28_create_max_acl_group_member_fn_PARALLEL(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            group_member = 3
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']: # tsingma_mx
            group_member = 2

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        acl_table_oid = range(group_member+1)
        acl_group_member_oid = range(group_member+1)

        try:

            for a in range(group_member+1):
                acl_table_oid[a] = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)

                sys_logging("create acl table = %d" %acl_table_oid[a])
                assert(acl_table_oid[a] != SAI_NULL_OBJECT_ID )

                group_member_priority = a

                acl_group_member_oid[a] = sai_thrift_create_acl_table_group_member(self.client,
                    acl_table_group_id,
                    acl_table_oid[a],
                    group_member_priority)

                sys_logging("create acl group member = %d" %acl_group_member_oid[a])

                if a < group_member:
                    assert(acl_group_member_oid[a] != SAI_NULL_OBJECT_ID )
                else:
                    assert(acl_group_member_oid[a] == SAI_NULL_OBJECT_ID )

        finally:

            sys_logging("clear config")

            for a in range(group_member):
                status = self.client.sai_thrift_remove_acl_table_group_member(acl_group_member_oid[a])
                assert (status == SAI_STATUS_SUCCESS)
                status = self.client.sai_thrift_remove_acl_table(acl_table_oid[a])
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid[group_member])
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)


class func_29_remove_acl_group_member_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        try:
            # acl group member info
            group_member_priority1 = 100

            # create acl group member
            acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
                acl_table_group_id,
                acl_table_oid,
                group_member_priority1)

            sys_logging("create acl group member = %d" %acl_table_group_member_id1)
            assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

        finally:

            sys_logging("clear config")

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)


class func_30_set_and_get_acl_group_member_attr_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        port1 = port_list[0]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        mac_src = None
        mac_dst = None
        ip_src = None
        ip_dst = None
        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None
        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        group_member_priority1 = 100
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client,
            acl_table_group_id,
            acl_table_oid,
            group_member_priority1)

        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        try:
            attrs = self.client.sai_thrift_get_acl_table_group_member_attribute(acl_table_group_member_id1)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID:
                    sys_logging("get SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID = %d" %a.value.oid)
                    assert(acl_table_group_id == a.value.oid )

                if a.id == SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID:
                    sys_logging("get SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(group_member_priority1 == a.value.u32 )

        finally:

            sys_logging("clear config")

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)



class func_31_create_acl_entry_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[1]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = SAI_PACKET_ACTION_COPY
        addr_family = None

        mac_src = '12:34:56:78:9A:BC'
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        try:

            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)


#comment: not check same acl entry
class func_32_create_same_acl_entry_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[1]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = SAI_PACKET_ACTION_COPY
        addr_family = None

        mac_src = '12:34:56:78:9A:BC'
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        try:

            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            assert(acl_entry_oid_2 != acl_entry_oid )

        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)


class func_33_create_multi_acl_entry_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[1]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = SAI_PACKET_ACTION_COPY
        addr_family = None

        mac_src = '12:34:56:78:9A:BC'
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        try:

            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            mac_src = '00:00:00:00:00:01'
            mac_src_mask = "ff:ff:ff:ff:ff:ff"

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            assert(acl_entry_oid_2 != acl_entry_oid )

        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)


# ACL_DEFAULT_TABLE_SIZE is 128
class func_34_create_max_acl_entry_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[1]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = SAI_PACKET_ACTION_COPY
        addr_family = None

        mac_src = '12:34:56:78:9A:BC'
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True
        entry_size = 128
        acl_entry_oid = range(entry_size+1)

        try:

            for a in range(entry_size+1):

                acl_entry_oid[a] = sai_thrift_create_acl_entry(self.client,
                    acl_table_oid,
                    entry_priority,
                    admin_state,
                    action, addr_family,
                    mac_src, mac_src_mask,
                    mac_dst, mac_dst_mask,
                    svlan_id, svlan_pri,
                    svlan_cfi, cvlan_id,
                    cvlan_pri, cvlan_cfi,
                    ip_type,
                    mpls_label0_label,
                    mpls_label0_ttl,
                    mpls_label0_exp,
                    mpls_label0_bos,
                    mpls_label1_label,
                    mpls_label1_ttl,
                    mpls_label1_exp,
                    mpls_label1_bos,
                    mpls_label2_label,
                    mpls_label2_ttl,
                    mpls_label2_exp,
                    mpls_label2_bos,
                    mpls_label3_label,
                    mpls_label3_ttl,
                    mpls_label3_exp,
                    mpls_label3_bos,
                    mpls_label4_label,
                    mpls_label4_ttl,
                    mpls_label4_exp,
                    mpls_label4_bos,
                    ip_src, ip_src_mask,
                    ip_dst, ip_dst_mask,
                    ip_protocol,
                    ip_tos, ip_ecn,
                    ip_dscp, ip_ttl,
                    in_ports, out_ports,
                    in_port, out_port,
                    src_l4_port, dst_l4_port,
                    ingress_mirror,
                    egress_mirror,
                    new_svlan, new_scos,
                    new_cvlan, new_ccos,
                    deny_learn)

                sys_logging("create acl entry = %d" %acl_entry_oid[a])

                if a != entry_size:
                    assert(acl_entry_oid[a] != SAI_NULL_OBJECT_ID )
                else:
                    assert(acl_entry_oid[a] == SAI_NULL_OBJECT_ID )

        finally:

            sys_logging("clear config")
            for a in range(entry_size):
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid[a])
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)



class func_35_remove_acl_entry_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[1]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = SAI_PACKET_ACTION_COPY
        addr_family = None

        mac_src = '12:34:56:78:9A:BC'
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        try:

            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)


        finally:
            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)



class func_36_set_and_get_acl_entry_attr_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[1]

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = SAI_PACKET_ACTION_COPY
        addr_family = None

        mac_src = '12:34:56:78:9A:BC'
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID)

        try:
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC, SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC = %s" %a.value.aclfield.data.mac)
                    assert(mac_src.upper() == a.value.aclfield.data.mac.upper() )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = %s" %a.value.aclfield.data.oid)
                    assert( in_port == a.value.aclfield.data.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )


            entry_priority =  100
            attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
            self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid, attribute)

            mac_src = '11:22:33:44:55:66'
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(data = sai_thrift_acl_data_t(mac=mac_src), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC, value=attribute_value)
            self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid, attribute)

            action = SAI_PACKET_ACTION_LOG
            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
            self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid, attribute)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC, SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC = %s" %a.value.aclfield.data.mac)
                    assert(mac_src.upper() == a.value.aclfield.data.mac.upper() )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = %s" %a.value.aclfield.data.oid)
                    assert( in_port == a.value.aclfield.data.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

        finally:

            sys_logging("clear config")
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)


class func_37_port_bind_remove_table_before_its_entry_compatible_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        #ip qos info
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        in_port = 0
        out_port = None
        out_ports = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None

        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID)

        warmboot(self.client)
        try:
            # bind this ACL table to port1s object id
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            entry_priority = 1
            admin_state = True

            ip_src = "192.168.0.1"
            acl_entry_oid1 = sai_thrift_create_acl_entry(self.client,
                                                         acl_table_oid,
                                                         entry_priority,
                                                         admin_state,
                                                         action, addr_family,
                                                         mac_src, mac_src_mask,
                                                         mac_dst, mac_dst_mask,
                                                         svlan_id, svlan_pri,
                                                         svlan_cfi, cvlan_id,
                                                         cvlan_pri, cvlan_cfi,
                                                         ip_type,
                                                         mpls_label0_label,
                                                         mpls_label0_ttl,
                                                         mpls_label0_exp,
                                                         mpls_label0_bos,
                                                         mpls_label1_label,
                                                         mpls_label1_ttl,
                                                         mpls_label1_exp,
                                                         mpls_label1_bos,
                                                         mpls_label2_label,
                                                         mpls_label2_ttl,
                                                         mpls_label2_exp,
                                                         mpls_label2_bos,
                                                         mpls_label3_label,
                                                         mpls_label3_ttl,
                                                         mpls_label3_exp,
                                                         mpls_label3_bos,
                                                         mpls_label4_label,
                                                         mpls_label4_ttl,
                                                         mpls_label4_exp,
                                                         mpls_label4_bos,
                                                         ip_src, ip_src_mask,
                                                         ip_dst, ip_dst_mask,
                                                         ip_protocol,
                                                         ip_tos, ip_ecn,
                                                         ip_dscp, ip_ttl,
                                                         in_ports, out_ports,
                                                         in_port, out_port,
                                                         src_l4_port, dst_l4_port,
                                                         ingress_mirror_id,
                                                         egress_mirror_id,
                                                         new_svlan, new_scos,
                                                         new_cvlan, new_ccos,
                                                         deny_learn)
            sys_logging("create acl entry = %d" %acl_entry_oid1)
            assert(acl_entry_oid1 != SAI_NULL_OBJECT_ID)

            ip_src = "192.168.0.2"
            acl_entry_oid2 = sai_thrift_create_acl_entry(self.client,
                                                         acl_table_oid,
                                                         entry_priority,
                                                         admin_state,
                                                         action, addr_family,
                                                         mac_src, mac_src_mask,
                                                         mac_dst, mac_dst_mask,
                                                         svlan_id, svlan_pri,
                                                         svlan_cfi, cvlan_id,
                                                         cvlan_pri, cvlan_cfi,
                                                         ip_type,
                                                         mpls_label0_label,
                                                         mpls_label0_ttl,
                                                         mpls_label0_exp,
                                                         mpls_label0_bos,
                                                         mpls_label1_label,
                                                         mpls_label1_ttl,
                                                         mpls_label1_exp,
                                                         mpls_label1_bos,
                                                         mpls_label2_label,
                                                         mpls_label2_ttl,
                                                         mpls_label2_exp,
                                                         mpls_label2_bos,
                                                         mpls_label3_label,
                                                         mpls_label3_ttl,
                                                         mpls_label3_exp,
                                                         mpls_label3_bos,
                                                         mpls_label4_label,
                                                         mpls_label4_ttl,
                                                         mpls_label4_exp,
                                                         mpls_label4_bos,
                                                         ip_src, ip_src_mask,
                                                         ip_dst, ip_dst_mask,
                                                         ip_protocol,
                                                         ip_tos, ip_ecn,
                                                         ip_dscp, ip_ttl,
                                                         in_ports, out_ports,
                                                         in_port, out_port,
                                                         src_l4_port, dst_l4_port,
                                                         ingress_mirror_id,
                                                         egress_mirror_id,
                                                         new_svlan, new_scos,
                                                         new_cvlan, new_ccos,
                                                         deny_learn)
            sys_logging("create acl entry = %d" %acl_entry_oid2)
            assert(acl_entry_oid2 != SAI_NULL_OBJECT_ID)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            #attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID]
            #attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            #print "status = ", attrs.status
            #assert (attrs.status != SAI_STATUS_SUCCESS)
            #
            #attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            #print "status = ", attrs.status
            #assert (attrs.status != SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid2)
            assert (status == SAI_STATUS_SUCCESS)

        finally:
            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)


class func_38_group_per_table_per_entry_counter_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):
        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_oid = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_oid)
        assert(acl_table_group_oid != SAI_NULL_OBJECT_ID)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid1 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid1)
        assert(acl_table_oid1 != SAI_NULL_OBJECT_ID)

        acl_counter_oid1 = sai_thrift_create_acl_counter(self.client, acl_table_oid1)
        sys_logging("create acl counter oid1 = 0x%lx" %acl_counter_oid1)
        assert(acl_counter_oid1 != SAI_NULL_OBJECT_ID)

        acl_counter_oid2 = sai_thrift_create_acl_counter(self.client, acl_table_oid1)
        sys_logging("create acl counter oid2 = 0x%lx" %acl_counter_oid2)
        assert(acl_counter_oid2 != SAI_NULL_OBJECT_ID)

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid2 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid2)
        assert(acl_table_oid2 != SAI_NULL_OBJECT_ID)

        acl_counter_oid3 = sai_thrift_create_acl_counter(self.client, acl_table_oid2)
        sys_logging("create acl counter oid3 = 0x%lx" %acl_counter_oid3)
        assert(acl_counter_oid3 != SAI_NULL_OBJECT_ID)

        acl_counter_oid4 = sai_thrift_create_acl_counter(self.client, acl_table_oid2)
        sys_logging("create acl counter oid4 = 0x%lx" %acl_counter_oid4)
        assert(acl_counter_oid4 != SAI_NULL_OBJECT_ID)

        group_member_priority = 100
        # create ACL table group members
        acl_table_group_member_oid1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid,
                                                                               acl_table_oid1,
                                                                               group_member_priority)
        assert acl_table_group_member_oid1 > 0, 'acl_table_group_member_oid1 is <= 0'
        sys_logging("create table group member oid1 = 0x%lx" %acl_table_group_member_oid1)

        group_member_priority = 200
        # create ACL table group members
        acl_table_group_member_oid2 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid,
                                                                               acl_table_oid2,
                                                                               group_member_priority)
        assert acl_table_group_member_oid2 > 0, 'acl_table_group_member_oid2 is <= 0'
        sys_logging("create table group member oid2 = 0x%lx" %acl_table_group_member_oid2)

        #table1 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_dst = "10.1.1.1"
        ipv4_dst_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv4
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_dst), mask =sai_thrift_acl_mask_t(ip4=ipv4_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid1 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid1)
        assert(acl_entry_oid1 != SAI_NULL_OBJECT_ID)

        #table1 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_src = "192.168.0.1"
        ipv4_src_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ip
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid2 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid2)
        assert(acl_entry_oid2 != SAI_NULL_OBJECT_ID)

        #table2 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_dst = "2012:1111:1111:1111:1111:1111:1111:1111"
        ipv6_dst_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_dst), mask =sai_thrift_acl_mask_t(ip6=ipv6_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid3), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid3 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid3)
        assert(acl_entry_oid3 != SAI_NULL_OBJECT_ID)

        #table2 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_src = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipv6_src_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_src), mask =sai_thrift_acl_mask_t(ip6=ipv6_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        # packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid4), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid4 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid4)
        assert(acl_entry_oid4 != SAI_NULL_OBJECT_ID)

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        warmboot(self.client)
        try:
            sys_logging(" step3: get acl entry attr info  ")
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid3 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid4 == a.value.aclaction.parameter.oid)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid3 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == SAI_ACL_IP_TYPE_IPV6ANY)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid4 == a.value.aclaction.parameter.oid)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid3 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid4 == a.value.aclaction.parameter.oid)
                    
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid3)
            assert (status == SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid4 == a.value.aclaction.parameter.oid)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid4)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid4)
            assert (status == SAI_STATUS_SUCCESS)

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid2)
            assert (status == SAI_STATUS_SUCCESS)
            
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_oid)
            assert (status == SAI_STATUS_SUCCESS)


class func_39_group_per_table_share_entry_counter_remove_entry_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):
        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_oid = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_oid)
        assert(acl_table_group_oid != SAI_NULL_OBJECT_ID)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid1 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid1)
        assert(acl_table_oid1 != SAI_NULL_OBJECT_ID)

        acl_counter_oid1 = sai_thrift_create_acl_counter(self.client, acl_table_oid1)
        sys_logging("create acl counter oid1 = 0x%lx" %acl_counter_oid1)
        assert(acl_counter_oid1 != SAI_NULL_OBJECT_ID)

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid2 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid2)
        assert(acl_table_oid2 != SAI_NULL_OBJECT_ID)

        acl_counter_oid2 = sai_thrift_create_acl_counter(self.client, acl_table_oid2)
        sys_logging("create acl counter oid3 = 0x%lx" %acl_counter_oid2)
        assert(acl_counter_oid2 != SAI_NULL_OBJECT_ID)

        group_member_priority = 100
        # create ACL table group members
        acl_table_group_member_oid1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid,
                                                                               acl_table_oid1,
                                                                               group_member_priority)
        assert acl_table_group_member_oid1 > 0, 'acl_table_group_member_oid1 is <= 0'
        sys_logging("create table group member oid1 = 0x%lx" %acl_table_group_member_oid1)

        group_member_priority = 200
        # create ACL table group members
        acl_table_group_member_oid2 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid,
                                                                               acl_table_oid2,
                                                                               group_member_priority)
        assert acl_table_group_member_oid2 > 0, 'acl_table_group_member_oid2 is <= 0'
        sys_logging("create table group member oid2 = 0x%lx" %acl_table_group_member_oid2)

        #table1 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_dst = "10.1.1.1"
        ipv4_dst_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv4
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_dst), mask =sai_thrift_acl_mask_t(ip4=ipv4_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid1 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid1)
        assert(acl_entry_oid1 != SAI_NULL_OBJECT_ID)

        #table1 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_src = "192.168.0.1"
        ipv4_src_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ip
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid2 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid2)
        assert(acl_entry_oid2 != SAI_NULL_OBJECT_ID)

        #table2 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_dst = "2012:1111:1111:1111:1111:1111:1111:1111"
        ipv6_dst_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_dst), mask =sai_thrift_acl_mask_t(ip6=ipv6_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid3 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid3)
        assert(acl_entry_oid3 != SAI_NULL_OBJECT_ID)

        #table2 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_src = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipv6_src_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_src), mask =sai_thrift_acl_mask_t(ip6=ipv6_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        # packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid4 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid4)
        assert(acl_entry_oid4 != SAI_NULL_OBJECT_ID)

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        warmboot(self.client)
        try:
            sys_logging(" step3: get acl entry attr info  ")
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP,
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid1)
            assert (status != SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == SAI_ACL_IP_TYPE_IPV6ANY)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == SAI_ACL_IP_TYPE_IPV6ANY)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid2)
            assert (status != SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == SAI_ACL_IP_TYPE_IPV6ANY)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid4)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid2)
            assert (status == SAI_STATUS_SUCCESS)

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid2)
            assert (status == SAI_STATUS_SUCCESS)
            
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_oid)
            assert (status == SAI_STATUS_SUCCESS)


class func_40_paraell_group_per_table_per_entry_counter_reorder_group_member_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):
        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_oid1 = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group oid1 = 0x%lx" %acl_table_group_oid1)
        assert(acl_table_group_oid1 != SAI_NULL_OBJECT_ID)

        acl_table_group_oid2 = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group oid2 = 0x%lx" %acl_table_group_oid2)
        assert(acl_table_group_oid2 != SAI_NULL_OBJECT_ID)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid1 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid1)
        assert(acl_table_oid1 != SAI_NULL_OBJECT_ID)

        acl_counter_oid1 = sai_thrift_create_acl_counter(self.client, acl_table_oid1)
        sys_logging("create acl counter oid1 = 0x%lx" %acl_counter_oid1)
        assert(acl_counter_oid1 != SAI_NULL_OBJECT_ID)

        acl_counter_oid2 = sai_thrift_create_acl_counter(self.client, acl_table_oid1)
        sys_logging("create acl counter oid2 = 0x%lx" %acl_counter_oid2)
        assert(acl_counter_oid2 != SAI_NULL_OBJECT_ID)

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid2 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid2)
        assert(acl_table_oid2 != SAI_NULL_OBJECT_ID)

        acl_counter_oid3 = sai_thrift_create_acl_counter(self.client, acl_table_oid2)
        sys_logging("create acl counter oid3 = 0x%lx" %acl_counter_oid3)
        assert(acl_counter_oid3 != SAI_NULL_OBJECT_ID)

        acl_counter_oid4 = sai_thrift_create_acl_counter(self.client, acl_table_oid2)
        sys_logging("create acl counter oid4 = 0x%lx" %acl_counter_oid4)
        assert(acl_counter_oid4 != SAI_NULL_OBJECT_ID)

        group_member_priority = 0
        # create ACL table group members
        acl_table_group_member_oid1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid1,
                                                                               acl_table_oid1,
                                                                               group_member_priority)
        assert acl_table_group_member_oid1 > 0, 'acl_table_group_member_oid1 is <= 0'
        sys_logging("create table group member oid1 = 0x%lx" %acl_table_group_member_oid1)

        group_member_priority = 0
        # create ACL table group members
        acl_table_group_member_oid2 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid1,
                                                                               acl_table_oid2,
                                                                               group_member_priority)
        assert acl_table_group_member_oid2 > 0, 'acl_table_group_member_oid2 is <= 0'
        sys_logging("create table group member oid2 = 0x%lx" %acl_table_group_member_oid2)

        group_member_priority = 0
        # create ACL table group members
        acl_table_group_member_oid3 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid2,
                                                                               acl_table_oid1,
                                                                               group_member_priority)
        assert acl_table_group_member_oid3 > 0, 'acl_table_group_member_oid3 is <= 0'
        sys_logging("create table group member oid3 = 0x%lx" %acl_table_group_member_oid3)

        group_member_priority = 0
        # create ACL table group members
        acl_table_group_member_oid4 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid2,
                                                                               acl_table_oid2,
                                                                               group_member_priority)
        assert acl_table_group_member_oid4 > 0, 'acl_table_group_member_oid4 is <= 0'
        sys_logging("create table group member oid4 = 0x%lx" %acl_table_group_member_oid4)

        #table1 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_dst = "10.1.1.1"
        ipv4_dst_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv4
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_dst), mask =sai_thrift_acl_mask_t(ip4=ipv4_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid1 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry oid1 = 0x%lx" %acl_entry_oid1)
        assert(acl_entry_oid1 != SAI_NULL_OBJECT_ID)

        #table1 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_src = "192.168.0.1"
        ipv4_src_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ip
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid2 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry oid2 = 0x%lx" %acl_entry_oid2)
        assert(acl_entry_oid2 != SAI_NULL_OBJECT_ID)

        #table2 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_dst = "2012:1111:1111:1111:1111:1111:1111:1111"
        ipv6_dst_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_dst), mask =sai_thrift_acl_mask_t(ip6=ipv6_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid3), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid3 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry oid3 = 0x%lx" %acl_entry_oid3)
        assert(acl_entry_oid3 != SAI_NULL_OBJECT_ID)

        #table2 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_src = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipv6_src_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_src), mask =sai_thrift_acl_mask_t(ip6=ipv6_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        # packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid4), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid4 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry oid4 = 0x%lx" %acl_entry_oid4)
        assert(acl_entry_oid4 != SAI_NULL_OBJECT_ID)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid1)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        status = self.client.sai_thrift_set_port_attribute(port1, attr)
        assert (status == SAI_STATUS_SUCCESS)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid2)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        status = self.client.sai_thrift_set_port_attribute(port2, attr)
        assert (status == SAI_STATUS_SUCCESS)

        warmboot(self.client)
        try:
            sys_logging(" step3: get acl entry attr info  ")
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = 0x%lx" %a.value.aclfield.data.oid)
                    assert(port1 == a.value.aclfield.data.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = 0x%lx" %a.value.aclfield.data.oid)
                    assert(port1 == a.value.aclfield.data.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = 0x%lx" %a.value.aclfield.data.oid)
                    assert(port2 == a.value.aclfield.data.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid3 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = 0x%lx" %a.value.aclfield.data.oid)
                    assert(port2 == a.value.aclfield.data.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid4 == a.value.aclaction.parameter.oid)


            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid4)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid1)
            assert (status != SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid2)
            assert (status != SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid3)
            assert (status != SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid4)
            assert (status != SAI_STATUS_SUCCESS)


            group_member_priority = 0
            # create ACL table group members
            acl_table_group_member_oid1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                                   acl_table_group_oid1,
                                                                                   acl_table_oid2,
                                                                                   group_member_priority)
            assert acl_table_group_member_oid1 > 0, 'acl_table_group_member_oid1 is <= 0'
            sys_logging("create table group member oid1 = 0x%lx" %acl_table_group_member_oid1)

            group_member_priority = 0
            # create ACL table group members
            acl_table_group_member_oid2 = sai_thrift_create_acl_table_group_member(self.client,
                                                                                   acl_table_group_oid1,
                                                                                   acl_table_oid1,
                                                                                   group_member_priority)
            assert acl_table_group_member_oid2 > 0, 'acl_table_group_member_oid2 is <= 0'
            sys_logging("create table group member oid2 = 0x%lx" %acl_table_group_member_oid2)

            group_member_priority = 0
            # create ACL table group members
            acl_table_group_member_oid3 = sai_thrift_create_acl_table_group_member(self.client,
                                                                                   acl_table_group_oid2,
                                                                                   acl_table_oid2,
                                                                                   group_member_priority)
            assert acl_table_group_member_oid3 > 0, 'acl_table_group_member_oid3 is <= 0'
            sys_logging("create table group member oid3 = 0x%lx" %acl_table_group_member_oid3)

            group_member_priority = 0
            # create ACL table group members
            acl_table_group_member_oid4 = sai_thrift_create_acl_table_group_member(self.client,
                                                                                   acl_table_group_oid2,
                                                                                   acl_table_oid1,
                                                                                   group_member_priority)
            assert acl_table_group_member_oid4 > 0, 'acl_table_group_member_oid4 is <= 0'
            sys_logging("create table group member oid4 = 0x%lx" %acl_table_group_member_oid4)


            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid3), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid1, attribute)
            assert (status != SAI_STATUS_SUCCESS)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid4), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid2, attribute)
            assert (status != SAI_STATUS_SUCCESS)


            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid1, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            attrs = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid2, attribute)
            assert (status == SAI_STATUS_SUCCESS)


            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid3, attribute)
            assert (status != SAI_STATUS_SUCCESS)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid4, attribute)
            assert (status != SAI_STATUS_SUCCESS)


            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid4), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid3, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid3), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            attrs = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid4, attribute)
            assert (status == SAI_STATUS_SUCCESS)


            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = 0x%lx" %a.value.aclfield.data.oid)
                    assert(port2 == a.value.aclfield.data.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = 0x%lx" %a.value.aclfield.data.oid)
                    assert(port2 == a.value.aclfield.data.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = 0x%lx" %a.value.aclfield.data.oid)
                    assert(port1 == a.value.aclfield.data.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid4 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = 0x%lx" %a.value.aclfield.data.oid)
                    assert(port1 == a.value.aclfield.data.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid3 == a.value.aclaction.parameter.oid)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=SAI_NULL_OBJECT_ID), enable = False))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid1, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=SAI_NULL_OBJECT_ID), enable = False))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid2, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=SAI_NULL_OBJECT_ID), enable = False))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid3, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=SAI_NULL_OBJECT_ID), enable = False))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            attrs = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid4, attribute)
            assert (status == SAI_STATUS_SUCCESS)

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid4)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid2)
            assert (status == SAI_STATUS_SUCCESS)
            
            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_oid2)
            assert (status == SAI_STATUS_SUCCESS)


class func_41_unbound_group_per_table_share_entry_counter_set_update_unset_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):
        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_oid = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_oid)
        assert(acl_table_group_oid != SAI_NULL_OBJECT_ID)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid1 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid1)
        assert(acl_table_oid1 != SAI_NULL_OBJECT_ID)

        acl_counter_oid1 = sai_thrift_create_acl_counter(self.client, acl_table_oid1)
        sys_logging("create acl counter oid1 = 0x%lx" %acl_counter_oid1)
        assert(acl_counter_oid1 != SAI_NULL_OBJECT_ID)

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid2 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid2)
        assert(acl_table_oid2 != SAI_NULL_OBJECT_ID)

        acl_counter_oid2 = sai_thrift_create_acl_counter(self.client, acl_table_oid2)
        sys_logging("create acl counter oid3 = 0x%lx" %acl_counter_oid2)
        assert(acl_counter_oid2 != SAI_NULL_OBJECT_ID)

        group_member_priority = 100
        # create ACL table group members
        acl_table_group_member_oid1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid,
                                                                               acl_table_oid1,
                                                                               group_member_priority)
        assert acl_table_group_member_oid1 > 0, 'acl_table_group_member_oid1 is <= 0'
        sys_logging("create table group member oid1 = 0x%lx" %acl_table_group_member_oid1)

        group_member_priority = 200
        # create ACL table group members
        acl_table_group_member_oid2 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid,
                                                                               acl_table_oid2,
                                                                               group_member_priority)
        assert acl_table_group_member_oid2 > 0, 'acl_table_group_member_oid2 is <= 0'
        sys_logging("create table group member oid2 = 0x%lx" %acl_table_group_member_oid2)

        #table1 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_dst = "10.1.1.1"
        ipv4_dst_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv4
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_dst), mask =sai_thrift_acl_mask_t(ip4=ipv4_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid1 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid1)
        assert(acl_entry_oid1 != SAI_NULL_OBJECT_ID)

        #table1 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_src = "192.168.0.1"
        ipv4_src_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ip
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid2 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid2)
        assert(acl_entry_oid2 != SAI_NULL_OBJECT_ID)

        #table2 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_dst = "2012:1111:1111:1111:1111:1111:1111:1111"
        ipv6_dst_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_dst), mask =sai_thrift_acl_mask_t(ip6=ipv6_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid3 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid3)
        assert(acl_entry_oid3 != SAI_NULL_OBJECT_ID)

        #table2 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_src = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipv6_src_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_src), mask =sai_thrift_acl_mask_t(ip6=ipv6_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        # packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid4 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid4)
        assert(acl_entry_oid4 != SAI_NULL_OBJECT_ID)

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        warmboot(self.client)
        try:
            sys_logging(" step3: get acl entry attr info  ")
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = False))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid1, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid1)
            assert (status != SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == SAI_ACL_IP_TYPE_IPV6ANY)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = False))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid2, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = False))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid3, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid2)
            assert (status != SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == SAI_ACL_IP_TYPE_IPV6ANY)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = False))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid4, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid4)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid2)
            assert (status == SAI_STATUS_SUCCESS)

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_oid)
            assert (status == SAI_STATUS_SUCCESS)


class func_42_binding_group_per_table_share_entry_counter_unset_update_set_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):
        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_oid = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_oid)
        assert(acl_table_group_oid != SAI_NULL_OBJECT_ID)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid1 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid1)
        assert(acl_table_oid1 != SAI_NULL_OBJECT_ID)

        acl_counter_oid1 = sai_thrift_create_acl_counter(self.client, acl_table_oid1)
        sys_logging("create acl counter oid1 = 0x%lx" %acl_counter_oid1)
        assert(acl_counter_oid1 != SAI_NULL_OBJECT_ID)

        acl_attr_list = []
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid2 = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = %d" %acl_table_oid2)
        assert(acl_table_oid2 != SAI_NULL_OBJECT_ID)

        acl_counter_oid2 = sai_thrift_create_acl_counter(self.client, acl_table_oid2)
        sys_logging("create acl counter oid3 = 0x%lx" %acl_counter_oid2)
        assert(acl_counter_oid2 != SAI_NULL_OBJECT_ID)

        group_member_priority = 100
        # create ACL table group members
        acl_table_group_member_oid1 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid,
                                                                               acl_table_oid1,
                                                                               group_member_priority)
        assert acl_table_group_member_oid1 > 0, 'acl_table_group_member_oid1 is <= 0'
        sys_logging("create table group member oid1 = 0x%lx" %acl_table_group_member_oid1)

        group_member_priority = 200
        # create ACL table group members
        acl_table_group_member_oid2 = sai_thrift_create_acl_table_group_member(self.client,
                                                                               acl_table_group_oid,
                                                                               acl_table_oid2,
                                                                               group_member_priority)
        assert acl_table_group_member_oid2 > 0, 'acl_table_group_member_oid2 is <= 0'
        sys_logging("create table group member oid2 = 0x%lx" %acl_table_group_member_oid2)

        #table1 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_dst = "10.1.1.1"
        ipv4_dst_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv4
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_dst), mask =sai_thrift_acl_mask_t(ip4=ipv4_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=SAI_NULL_OBJECT_ID), enable = False))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid1 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid1)
        assert(acl_entry_oid1 != SAI_NULL_OBJECT_ID)

        #table1 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_src = "192.168.0.1"
        ipv4_src_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ip
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=SAI_NULL_OBJECT_ID), enable = False))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid2 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid2)
        assert(acl_entry_oid2 != SAI_NULL_OBJECT_ID)

        #table2 entry1 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_dst = "2012:1111:1111:1111:1111:1111:1111:1111"
        ipv6_dst_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # dst ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_dst), mask =sai_thrift_acl_mask_t(ip6=ipv6_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=SAI_NULL_OBJECT_ID), enable = False))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid3 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid3)
        assert(acl_entry_oid3 != SAI_NULL_OBJECT_ID)

        #table2 entry2 info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_src = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipv6_src_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_src), mask =sai_thrift_acl_mask_t(ip6=ipv6_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        # packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action), enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=SAI_NULL_OBJECT_ID), enable = False))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_oid4 = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = %d" %acl_entry_oid4)
        assert(acl_entry_oid4 != SAI_NULL_OBJECT_ID)

        warmboot(self.client)
        try:
            sys_logging(" step3: get acl entry attr info  ")
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid1, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid1)
            assert (status != SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == SAI_ACL_IP_TYPE_IPV6ANY)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid1), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid2, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid1)
            assert (status != SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid3, attribute)
            assert (status == SAI_STATUS_SUCCESS)
            
            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid2)
            assert (status != SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == SAI_ACL_IP_TYPE_IPV6ANY)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(SAI_NULL_OBJECT_ID == a.value.aclaction.parameter.oid)

            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid2), enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, value=attribute_value)
            status = self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid4, attribute)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid2)
            assert (status != SAI_STATUS_SUCCESS)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid1, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid2, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid1 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV4ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid1 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid3, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, 
                             SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid4, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            for a in attrs.attr_list:
                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = 0x%lx" %a.value.oid)
                    assert(acl_table_oid2 == a.value.oid)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(SAI_ACL_IP_TYPE_IPV6ANY == a.value.aclfield.data.s32)

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6)

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = 0x%lx" %a.value.aclaction.parameter.oid)
                    assert(acl_counter_oid2 == a.value.aclaction.parameter.oid)

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_oid)
            assert (status == SAI_STATUS_SUCCESS)


class scenario_01_table_bind_port_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_UNTAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_UNTAGGED)

        attr_value = sai_thrift_attribute_value_t(u16=vlan_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_PORT_VLAN_ID, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step2: bind this ACL table to port  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            sys_logging(" step3: match drop acl entry ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            sys_logging(" step4: insert log acl entry ")

            entry_priority = 2
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step6: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step7: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step8: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            attr_value = sai_thrift_attribute_value_t(u16=1)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_PORT_VLAN_ID, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_02_table_bind_port_egress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_UNTAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_UNTAGGED)

        attr_value = sai_thrift_attribute_value_t(u16=vlan_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_PORT_VLAN_ID, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        # acl table info
        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step2: bind this ACL table to port  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            sys_logging(" step3: match drop acl entry ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            sys_logging(" step4: insert log acl entry ")

            entry_priority = 2
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step6: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step7: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step8: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            attr_value = sai_thrift_attribute_value_t(u16=1)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_PORT_VLAN_ID, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_03_seq_group_bind_port_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_UNTAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_UNTAGGED)

        attr_value = sai_thrift_attribute_value_t(u16=vlan_id)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_PORT_VLAN_ID, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        # acl group member info
        group_member_priority1 = 100

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)

        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        group_member_priority2 = 200
        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)

        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

        entry_priority = 10
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step2: bind this ACL group to port  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            sys_logging(" step3: match drop acl entry ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            sys_logging(" step4: insert log acl entry ")

            entry_priority = 5
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step6: insert trap acl entry ")

            entry_priority = 6
            admin_state = True
            action = SAI_PACKET_ACTION_TRAP

            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

            sys_logging(" step7: match trap acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step8: remove trap acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step9: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step10: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step11: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            attr_value = sai_thrift_attribute_value_t(u16=1)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_PORT_VLAN_ID, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_04_seq_group_bind_port_egress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_EGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        try:
            # create acl group
            acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
            sys_logging("create acl group = %d" %acl_table_group_id)
            assert(acl_table_group_id == SAI_NULL_OBJECT_ID )

        finally:

            sys_logging("clear config")

class scenario_05_par_group_bind_port_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment
        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None
        acl_table_oid_list = []

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            num = 3
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']: # tsingma_mx
            num = 2

        for t in range(num):
            # create acl table
            acl_table_oid = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)
            sys_logging("create acl table[%d] = %d" %(t, acl_table_oid))
            assert(acl_table_oid != SAI_NULL_OBJECT_ID)
            acl_table_oid_list.append(acl_table_oid)

        acl_table_group_member_id_list = []
        # create acl group member
        for t in range(num):
            group_member_priority = ((t+1)*100)
            acl_table_group_member_id = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_list[t], group_member_priority)
            sys_logging("create acl group member[%d] = %d" %(t, acl_table_group_member_id))
            assert(acl_table_group_member_id != SAI_NULL_OBJECT_ID)
            acl_table_group_member_id_list.append(acl_table_group_member_id)

        acl_entry_oid_list = []
        # create acl entry
        for t in range(num):
            entry_priority = (t+1)
            admin_state = True
            new_scos = (t+1)
            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_list[t],
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)
            sys_logging("create acl entry[%d] = %d" %(t, acl_entry_oid))
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID)
            acl_entry_oid_list.append(acl_entry_oid)

        warmboot(self.client)
        try:
            rx_pkt_list = []
            tx_pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            for t in range(num):
                pkt = simple_tcp_packet(eth_dst=mac2,
                                        eth_src=mac1,
                                        dl_vlan_enable=True,
                                        vlan_vid=vlan_id,
                                        vlan_pcp=(t+1),
                                        ip_dst='10.0.0.1',
                                        ip_id=101,
                                        ip_ttl=64)
                rx_pkt_list.append(pkt)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [1])

            sys_logging(" step2: bind this ACL group to port  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            for t in range(num):
                sys_logging(" step%d: match acl entry %d" %((3+(t*2)), (t+1)))

                self.ctc_send_packet(0, str(pkt))
                self.ctc_verify_packets(rx_pkt_list[t], [1])
    
                if t < (num-1):
                    sys_logging(" step%d: remove acl entry %d and match acl entry %d" %((3+(t*2)+1), (t+1), (t+2)))
                else:
                    sys_logging(" step%d: remove acl entry %d and none acl entry and normal forwarding" %((3+(t*2)+1), (t+1)))
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_list[t])
                assert(status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [1])

            sys_logging(" step%d: add acl entry 3 again" %(3+(num*2)))
            entry_priority = num
            admin_state = True
            new_scos = num
            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_list[(num-1)],
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)
            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID)

            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(rx_pkt_list[(num-1)], [1])

        finally:
            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            for t in range(num):
                status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id_list[t])
                assert (status == SAI_STATUS_SUCCESS)

            for t in range(num):
                status = self.client.sai_thrift_remove_acl_table(acl_table_oid_list[t])
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_05_par_group_bind_port_ingress_test_ad_merge(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        chipname = testutils.test_params_get()['chipname']
        sys_logging("### -----chipname = %s----- ###" %chipname)

        # basic forwarding environment
        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_3)
        assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID)

        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID)

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID)

        acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
        sys_logging("create acl group member = %d" %acl_table_group_member_id3)
        if chipname == 'tsingma':
            assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID)
        else:
            assert(acl_table_group_member_id3 == SAI_NULL_OBJECT_ID)

        # create acl entry
        entry_priority = 1
        admin_state = True
        action = SAI_PACKET_ACTION_DROP
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 2
        admin_state = True
        action = SAI_PACKET_ACTION_LOG
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        if chipname == 'tsingma':
            entry_priority = 3
            admin_state = True
            action =  SAI_PACKET_ACTION_TRAP
            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                                                          acl_table_oid_3,
                                                          entry_priority,
                                                          admin_state,
                                                          action, addr_family,
                                                          mac_src, mac_src_mask,
                                                          mac_dst, mac_dst_mask,
                                                          svlan_id, svlan_pri,
                                                          svlan_cfi, cvlan_id,
                                                          cvlan_pri, cvlan_cfi,
                                                          ip_type,
                                                          mpls_label0_label,
                                                          mpls_label0_ttl,
                                                          mpls_label0_exp,
                                                          mpls_label0_bos,
                                                          mpls_label1_label,
                                                          mpls_label1_ttl,
                                                          mpls_label1_exp,
                                                          mpls_label1_bos,
                                                          mpls_label2_label,
                                                          mpls_label2_ttl,
                                                          mpls_label2_exp,
                                                          mpls_label2_bos,
                                                          mpls_label3_label,
                                                          mpls_label3_ttl,
                                                          mpls_label3_exp,
                                                          mpls_label3_bos,
                                                          mpls_label4_label,
                                                          mpls_label4_ttl,
                                                          mpls_label4_exp,
                                                          mpls_label4_bos,
                                                          ip_src, ip_src_mask,
                                                          ip_dst, ip_dst_mask,
                                                          ip_protocol,
                                                          ip_tos, ip_ecn,
                                                          ip_dscp, ip_ttl,
                                                          in_ports, out_ports,
                                                          in_port, out_port,
                                                          src_l4_port, dst_l4_port,
                                                          ingress_mirror,
                                                          egress_mirror,
                                                          new_svlan, new_scos,
                                                          new_cvlan, new_ccos,
                                                          deny_learn)
            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID)

        warmboot(self.client)
        try:
            step = 1
            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step%u: none acl , packet will forwarding  " %step)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: bind this ACL group to port  " %step)

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            step = step + 1
            sys_logging(" step%u: ad merge result is trap " %step)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            if chipname == 'tsingma':
                step = step + 1
                sys_logging(" step%u: remove acl entry 3 and ad merge result is still trap " %step)

                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
                assert (status == SAI_STATUS_SUCCESS)

                self.client.sai_thrift_clear_cpu_packet_info()
                self.ctc_send_packet(0, str(pkt))
                self.ctc_verify_no_packet( pkt, 1)
                ret = self.client.sai_thrift_get_cpu_packet_count()
                sys_logging ("receive rx packet %d" %ret.data.u16)
                assert (ret.data.u16 == 1)
                self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: remove acl entry 1 and ad merge result is log" %step)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: remove acl entry 2 and normal forwarding " %step)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: add acl entry 1 again" %step)

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_DROP
            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

        finally:
            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            if chipname == 'tsingma':
                status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_06_par_group_bind_port_egress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_EGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )


        acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_3)
        assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID )


        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
        sys_logging("create acl group member = %d" %acl_table_group_member_id3)
        assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID )

        # create acl entry
        entry_priority = 1
        admin_state = True
        new_scos = 1
        new_svlan = vlan_id
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 2
        admin_state = True
        new_scos = 2
        new_svlan = vlan_id
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        entry_priority = 3
        admin_state = True
        new_scos = 3
        new_svlan = vlan_id
        acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_3,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_3)
        assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=1,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt2 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=2,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt3 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=3,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step2: bind this ACL group to port  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            sys_logging(" step3: match acl entry 1")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt1, [1])

            sys_logging(" step4: remove acl entry 1 and match acl entry 2")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt2, [1])

            sys_logging(" step5: remove acl entry 2 and match acl entry 3")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt3, [1])

            sys_logging(" step6: remove acl entry 3 and normal forwarding ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step7: add acl entry 3 again")

            entry_priority = 3
            admin_state = True
            new_svlan = 100
            new_scos = 3
            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_3,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt3, [1])

        finally:

            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_06_par_group_bind_port_egress_test_ad_merge(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_EGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )


        acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_3)
        assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID )


        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
        sys_logging("create acl group member = %d" %acl_table_group_member_id3)
        assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID )

        # create acl entry
        entry_priority = 1
        admin_state = True
        action = SAI_PACKET_ACTION_DROP
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 2
        admin_state = True
        action = SAI_PACKET_ACTION_LOG
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        entry_priority = 3
        admin_state = True
        action =  SAI_PACKET_ACTION_TRAP
        acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_3,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_3)
        assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step2: bind this ACL group to port  ")

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            sys_logging(" step3: ad merge result is trap ")

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step4: remove acl entry 3 and ad merge result is still trap ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step5: remove acl entry 1 and ad merge result is log")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step6: remove acl entry 2 and normal forwarding ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step7: add acl entry 1 again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_DROP
            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)








class scenario_07_table_bind_vlan_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step2: bind this ACL table to vlan  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            sys_logging(" step3: match drop acl entry ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            sys_logging(" step4: insert log acl entry ")

            entry_priority = 2
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()
            sys_logging(" step6: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step7: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step8: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            # unbind this ACL table from vlan
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)






class scenario_08_table_bind_vlan_egress_test (sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl table info
        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step2: bind this ACL table to vlan  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            sys_logging(" step3: match drop acl entry ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            sys_logging(" step4: insert log acl entry ")

            entry_priority = 2
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()
            sys_logging(" step6: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step7: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step8: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_09_seq_group_bind_vlan_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        # acl group member info
        group_member_priority1 = 100

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)

        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        group_member_priority2 = 200
        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)

        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

        entry_priority = 10
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step2: bind this ACL group to vlan  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            sys_logging(" step3: match drop acl entry ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            sys_logging(" step4: insert log acl entry ")

            entry_priority = 5
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step6: insert trap acl entry ")

            entry_priority = 6
            admin_state = True
            action = SAI_PACKET_ACTION_TRAP

            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

            sys_logging(" step7: match trap acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step8: remove trap acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step9: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step10: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step11: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)







class scenario_10_seq_group_bind_vlan_egress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # acl group info
        group_stage = SAI_ACL_STAGE_EGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        try:
            # create acl group
            acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
            sys_logging("create acl group = %d" %acl_table_group_id)
            assert(acl_table_group_id == SAI_NULL_OBJECT_ID )

        finally:

            sys_logging("clear config")


class scenario_11_par_group_bind_vlan_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)
        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID)

        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        if 'tsingma' == testutils.test_params_get()['chipname']:
            acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)
            sys_logging("create acl table = %d" %acl_table_oid_3)
            assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID)

        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

        if 'tsingma' == testutils.test_params_get()['chipname']:
            acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
            sys_logging("create acl group member = %d" %acl_table_group_member_id3)
            assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID)

        # create acl entry
        entry_priority = 1
        admin_state = True
        new_scos = 1
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 2
        admin_state = True
        new_scos = 2
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID)

        if 'tsingma' == testutils.test_params_get()['chipname']:
            entry_priority = 3
            admin_state = True
            new_scos = 3
            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_3,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)
            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID)

        warmboot(self.client)
        try:
            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=mac2,
                                     eth_src=mac1,
                                     dl_vlan_enable=True,
                                     vlan_vid=vlan_id,
                                     vlan_pcp=1,
                                     ip_dst='10.0.0.1',
                                     ip_id=101,
                                     ip_ttl=64)

            pkt2 = simple_tcp_packet(eth_dst=mac2,
                                     eth_src=mac1,
                                     dl_vlan_enable=True,
                                     vlan_vid=vlan_id,
                                     vlan_pcp=2,
                                     ip_dst='10.0.0.1',
                                     ip_id=101,
                                     ip_ttl=64)

            pkt3 = simple_tcp_packet(eth_dst=mac2,
                                     eth_src=mac1,
                                     dl_vlan_enable=True,
                                     vlan_vid=vlan_id,
                                     vlan_pcp=3,
                                     ip_dst='10.0.0.1',
                                     ip_id=101,
                                     ip_ttl=64)

            step = 1
            sys_logging(" step%u: none acl , packet will forwarding  " %step)
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [1])

            step = step + 1
            sys_logging(" step%u: bind this ACL group to vlan  " %step)
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            step = step + 1
            sys_logging(" step%u: match acl entry 1" %step)
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt1, [1])

            step = step + 1
            sys_logging(" step%u: remove acl entry 1 and match acl entry 2" %step)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt2, [1])

            if 'tsingma' == testutils.test_params_get()['chipname']:
                step = step + 1
                sys_logging(" step%u: remove acl entry 2 and match acl entry 3" %step)

                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
                assert (status == SAI_STATUS_SUCCESS)

                self.ctc_send_packet( 0, str(pkt))
                self.ctc_verify_packets( pkt3, [1])

                step = step + 1
                sys_logging(" step%u: remove acl entry 3 and normal forwarding " %step)
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
                assert (status == SAI_STATUS_SUCCESS)

                self.ctc_send_packet(0, str(pkt))
                self.ctc_verify_packets(pkt, [1])
            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
                step = step + 1
                sys_logging(" step%u: remove acl entry 2 and normal forwarding " %step)
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
                assert (status == SAI_STATUS_SUCCESS)

                self.ctc_send_packet(0, str(pkt))
                self.ctc_verify_packets(pkt, [1])

            if 'tsingma' == testutils.test_params_get()['chipname']:
                step = step + 1
                sys_logging(" step%u: add acl entry 3 again" %step)

                entry_priority = 3
                admin_state = True
                new_scos = 3
                acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                    acl_table_oid_3,
                    entry_priority,
                    admin_state,
                    action, addr_family,
                    mac_src, mac_src_mask,
                    mac_dst, mac_dst_mask,
                    svlan_id, svlan_pri,
                    svlan_cfi, cvlan_id,
                    cvlan_pri, cvlan_cfi,
                    ip_type,
                    mpls_label0_label,
                    mpls_label0_ttl,
                    mpls_label0_exp,
                    mpls_label0_bos,
                    mpls_label1_label,
                    mpls_label1_ttl,
                    mpls_label1_exp,
                    mpls_label1_bos,
                    mpls_label2_label,
                    mpls_label2_ttl,
                    mpls_label2_exp,
                    mpls_label2_bos,
                    mpls_label3_label,
                    mpls_label3_ttl,
                    mpls_label3_exp,
                    mpls_label3_bos,
                    mpls_label4_label,
                    mpls_label4_ttl,
                    mpls_label4_exp,
                    mpls_label4_bos,
                    ip_src, ip_src_mask,
                    ip_dst, ip_dst_mask,
                    ip_protocol,
                    ip_tos, ip_ecn,
                    ip_dscp, ip_ttl,
                    in_ports, out_ports,
                    in_port, out_port,
                    src_l4_port, dst_l4_port,
                    ingress_mirror,
                    egress_mirror,
                    new_svlan, new_scos,
                    new_cvlan, new_ccos,
                    deny_learn)

                sys_logging("create acl entry = %d" %acl_entry_oid_3)
                assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

                self.ctc_send_packet( 0, str(pkt))
                self.ctc_verify_packets( pkt3, [1])
            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
                step = step + 1
                sys_logging(" step%u: add acl entry 2 again" %step)

                entry_priority = 2
                admin_state = True
                new_scos = 2
                acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                    acl_table_oid_2,
                    entry_priority,
                    admin_state,
                    action, addr_family,
                    mac_src, mac_src_mask,
                    mac_dst, mac_dst_mask,
                    svlan_id, svlan_pri,
                    svlan_cfi, cvlan_id,
                    cvlan_pri, cvlan_cfi,
                    ip_type,
                    mpls_label0_label,
                    mpls_label0_ttl,
                    mpls_label0_exp,
                    mpls_label0_bos,
                    mpls_label1_label,
                    mpls_label1_ttl,
                    mpls_label1_exp,
                    mpls_label1_bos,
                    mpls_label2_label,
                    mpls_label2_ttl,
                    mpls_label2_exp,
                    mpls_label2_bos,
                    mpls_label3_label,
                    mpls_label3_ttl,
                    mpls_label3_exp,
                    mpls_label3_bos,
                    mpls_label4_label,
                    mpls_label4_ttl,
                    mpls_label4_exp,
                    mpls_label4_bos,
                    ip_src, ip_src_mask,
                    ip_dst, ip_dst_mask,
                    ip_protocol,
                    ip_tos, ip_ecn,
                    ip_dscp, ip_ttl,
                    in_ports, out_ports,
                    in_port, out_port,
                    src_l4_port, dst_l4_port,
                    ingress_mirror,
                    egress_mirror,
                    new_svlan, new_scos,
                    new_cvlan, new_ccos,
                    deny_learn)
                sys_logging("create acl entry = %d" %acl_entry_oid_2)
                assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID)

                self.ctc_send_packet(0, str(pkt))
                self.ctc_verify_packets(pkt2, [1])

        finally:
            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
                assert (status == SAI_STATUS_SUCCESS)
            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_11_par_group_bind_vlan_ingress_test_ad_merge(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)
        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID)

        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)
        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID)

        if 'tsingma' == testutils.test_params_get()['chipname']:
            acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)
            sys_logging("create acl table = %d" %acl_table_oid_3)
            assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID)

        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID)

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID)

        if 'tsingma' == testutils.test_params_get()['chipname']:
            acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
            sys_logging("create acl group member = %d" %acl_table_group_member_id3)
            assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID)

        # create acl entry
        entry_priority = 1
        admin_state = True
        action = SAI_PACKET_ACTION_DROP
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID)

        entry_priority = 2
        admin_state = True
        action = SAI_PACKET_ACTION_LOG
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        if 'tsingma' == testutils.test_params_get()['chipname']:
            entry_priority = 3
            admin_state = True
            action =  SAI_PACKET_ACTION_TRAP
            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_3,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)
            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID)

        warmboot(self.client)
        try:
            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            step = 1
            sys_logging(" step%u: none acl , packet will forwarding  " %step)
            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: bind this ACL group to vlan  " %step)
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            step = step + 1
            sys_logging(" step%u: ad merge result is trap " %step)
            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            if 'tsingma' == testutils.test_params_get()['chipname']:
                step = step + 1
                sys_logging(" step%u: remove acl entry 3 and ad merge result is still trap " %step)
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
                assert(status == SAI_STATUS_SUCCESS)

                self.client.sai_thrift_clear_cpu_packet_info()
                self.ctc_send_packet(0, str(pkt))
                self.ctc_verify_no_packet(pkt, 1)
                ret = self.client.sai_thrift_get_cpu_packet_count()
                sys_logging ("receive rx packet %d" %ret.data.u16)
                assert(ret.data.u16 == 1)
                self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: remove acl entry 1 and ad merge result is log" %step)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: remove acl entry 2 and normal forwarding " %step)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: add acl entry 1 again" %step)
            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_DROP
            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_no_packet(pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging("receive rx packet %d" %ret.data.u16)
            assert(ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

        finally:
            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_12_par_group_bind_vlan_egress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_EGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )


        acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_3)
        assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID )


        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
        sys_logging("create acl group member = %d" %acl_table_group_member_id3)
        assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID )

        # create acl entry
        entry_priority = 1
        admin_state = True
        new_scos = 1
        new_svlan = vlan_id
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 2
        admin_state = True
        new_scos = 2
        new_svlan = vlan_id
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        entry_priority = 3
        admin_state = True
        new_scos = 3
        new_svlan = vlan_id
        acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_3,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_3)
        assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=1,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt2 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=2,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt3 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=3,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step2: bind this ACL group to vlan  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            sys_logging(" step3: match acl entry 1")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt1, [1])


            sys_logging(" step4: remove acl entry 1 and match acl entry 2")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt2, [1])

            sys_logging(" step5: remove acl entry 2 and match acl entry 3")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt3, [1])

            sys_logging(" step6: remove acl entry 3 and normal forwarding ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step7: add acl entry 3 again")

            entry_priority = 3
            admin_state = True
            new_svlan = 100
            new_scos = 3
            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_3,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt3, [1])

        finally:

            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_12_par_group_bind_vlan_egress_test_ad_merge(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_EGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )


        acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_3)
        assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID )


        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
        sys_logging("create acl group member = %d" %acl_table_group_member_id3)
        assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID )

        # create acl entry
        entry_priority = 1
        admin_state = True
        action = SAI_PACKET_ACTION_DROP
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 2
        admin_state = True
        action = SAI_PACKET_ACTION_LOG
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        entry_priority = 3
        admin_state = True
        action =  SAI_PACKET_ACTION_TRAP
        acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_3,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_3)
        assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step2: bind this ACL group to vlan  ")

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            sys_logging(" step3: ad merge result is trap ")

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step4: remove acl entry 3 and ad merge result is still trap ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step5: remove acl entry 1 and ad merge result is log")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step6: remove acl entry 2 and normal forwarding ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step7: add acl entry 1 again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_DROP
            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_13_table_bind_lag_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        port4 = port_list[3]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        lag_oid = sai_thrift_create_lag(self.client)
        lag_member_id1 = sai_thrift_create_lag_member(self.client, lag_oid, port1)
        lag_member_id2 = sai_thrift_create_lag_member(self.client, lag_oid, port2)

        lag_bridge_oid = sai_thrift_create_bport_by_lag(self.client, lag_oid)

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        is_lag = 1
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, lag_bridge_oid, SAI_VLAN_TAGGING_MODE_TAGGED,is_lag)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port3, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_LAG]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = lag_oid
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])

            sys_logging(" step2: bind this ACL table to lag  ")
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_lag_attribute(lag_oid, attr)

            sys_logging(" step3: match drop acl entry ")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 2)

            sys_logging(" step4: insert log acl entry ")

            entry_priority = 2
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" add lag member ")

            lag_member_id3 = sai_thrift_create_lag_member(self.client, lag_oid, port4)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 3, str(pkt))
            self.ctc_verify_packets( pkt, [2])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" remove lag member ")

            sai_thrift_remove_lag_member(self.client, lag_member_id3)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 3, str(pkt))
            #self.ctc_verify_packets( pkt, [2])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step6: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 2)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step7: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step8: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_lag_attribute(lag_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)

            sai_thrift_remove_bport_by_lag(self.client, lag_bridge_oid)
            sai_thrift_remove_lag_member(self.client, lag_member_id1)
            sai_thrift_remove_lag_member(self.client, lag_member_id2)

            sai_thrift_remove_lag(self.client, lag_oid)


#class scenario_14_table_bind_lag_egress_test(sai_base_test.ThriftInterfaceDataPlane):


class scenario_15_seq_group_bind_lag_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        port4 = port_list[3]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        lag_oid = sai_thrift_create_lag(self.client)
        lag_member_id1 = sai_thrift_create_lag_member(self.client, lag_oid, port1)
        lag_member_id2 = sai_thrift_create_lag_member(self.client, lag_oid, port2)

        lag_bridge_oid = sai_thrift_create_bport_by_lag(self.client, lag_oid)

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        is_lag = 1
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, lag_bridge_oid, SAI_VLAN_TAGGING_MODE_TAGGED,is_lag)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port3, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_LAG]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_LAG]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = lag_oid
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        # acl group member info
        group_member_priority1 = 100

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)

        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        group_member_priority2 = 200
        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)

        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

        entry_priority = 10
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])

            sys_logging(" step2: bind this ACL group to lag  ")

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_lag_attribute(lag_oid, attr)

            sys_logging(" step3: match drop acl entry ")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 2)

            sys_logging(" step4: insert log acl entry ")

            entry_priority = 5
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step6: insert trap acl entry ")

            entry_priority = 6
            admin_state = True
            action = SAI_PACKET_ACTION_TRAP

            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

            sys_logging(" step7: match trap acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 2)

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" add lag member ")

            lag_member_id3 = sai_thrift_create_lag_member(self.client, lag_oid, port4)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 3, str(pkt))
            self.ctc_verify_no_packet( pkt, 2)

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" remove lag member ")

            sai_thrift_remove_lag_member(self.client, lag_member_id3)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 3, str(pkt))
            #self.ctc_verify_no_packet( pkt, 2)

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step8: remove trap acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step9: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 2)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step10: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step11: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_lag_attribute(lag_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)

            sai_thrift_remove_bport_by_lag(self.client, lag_bridge_oid)
            sai_thrift_remove_lag_member(self.client, lag_member_id1)
            sai_thrift_remove_lag_member(self.client, lag_member_id2)

            sai_thrift_remove_lag(self.client, lag_oid)


class scenario_17_par_group_bind_lag_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)
        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        port4 = port_list[3]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        lag_oid = sai_thrift_create_lag(self.client)
        lag_member_id1 = sai_thrift_create_lag_member(self.client, lag_oid, port1)
        lag_member_id2 = sai_thrift_create_lag_member(self.client, lag_oid, port2)

        lag_bridge_oid = sai_thrift_create_bport_by_lag(self.client, lag_oid)

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        is_lag = 1
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, lag_bridge_oid, SAI_VLAN_TAGGING_MODE_TAGGED,is_lag)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port3, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_LAG]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_LAG]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = lag_oid
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)
            sys_logging("create acl table = %d" %acl_table_oid_3)
            assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID)

        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID)

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID)

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
            sys_logging("create acl group member = %d" %acl_table_group_member_id3)
            assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID)

        # create acl entry
        entry_priority = 1
        admin_state = True
        new_scos = 1
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 2
        admin_state = True
        new_scos = 2
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            entry_priority = 3
            admin_state = True
            new_scos = 3
            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_3,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID)

        warmboot(self.client)
        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=1,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt2 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=2,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt3 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=3,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            step = 1
            sys_logging(" step%u: none acl , packet will forwarding  " %step)
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [2])

            step = step + 1
            sys_logging(" step%u: bind this ACL group to lag  " %step)
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_lag_attribute(lag_oid, attr)

            step = step + 1
            sys_logging(" step%u: match acl entry 1" %step)
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt1, [2])

            sys_logging(" add lag member ")
            lag_member_id3 = sai_thrift_create_lag_member(self.client, lag_oid, port4)

            self.ctc_send_packet(3, str(pkt))
            self.ctc_verify_packets(pkt1, [2])

            sys_logging(" remove lag member ")

            sai_thrift_remove_lag_member(self.client, lag_member_id3)
            bport_oid = sai_thrift_get_bridge_port_by_port(self.client, port4)

            value = 1
            attr_value = sai_thrift_attribute_value_t(booldata=value)
            attr = sai_thrift_attribute_t(id=SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING, value=attr_value)
            self.client.sai_thrift_set_bridge_port_attribute(bport_oid, attr)


            self.ctc_send_packet(3, str(pkt))
            self.ctc_verify_no_packet(pkt1, 2)

            step = step + 1
            sys_logging(" step%u: remove acl entry 1 and match acl entry 2" %step)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt2, [2])

            if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
                step = step + 1
                sys_logging(" step%u: remove acl entry 2 and match acl entry 3" %step)

                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
                assert (status == SAI_STATUS_SUCCESS)

                self.ctc_send_packet(0, str(pkt))
                self.ctc_verify_packets(pkt3, [2])

                step = step + 1
                sys_logging(" step%u: remove acl entry 3 and normal forwarding " %step)

                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
                assert (status == SAI_STATUS_SUCCESS)

                self.ctc_send_packet(0, str(pkt))
                self.ctc_verify_packets(pkt, [2])

            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:      # tsingma
                step = step + 1
                sys_logging(" step%u: remove acl entry 2 and normal forwarding " %step)

                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
                assert (status == SAI_STATUS_SUCCESS)

                self.ctc_send_packet(0, str(pkt))
                self.ctc_verify_packets(pkt, [2])

            if 'tsingma' == testutils.test_params_get()['chipname']:
                step = step + 1
                sys_logging(" step%u: add acl entry 3 again" %step)

                entry_priority = 3
                admin_state = True
                new_scos = 3
                acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                    acl_table_oid_3,
                    entry_priority,
                    admin_state,
                    action, addr_family,
                    mac_src, mac_src_mask,
                    mac_dst, mac_dst_mask,
                    svlan_id, svlan_pri,
                    svlan_cfi, cvlan_id,
                    cvlan_pri, cvlan_cfi,
                    ip_type,
                    mpls_label0_label,
                    mpls_label0_ttl,
                    mpls_label0_exp,
                    mpls_label0_bos,
                    mpls_label1_label,
                    mpls_label1_ttl,
                    mpls_label1_exp,
                    mpls_label1_bos,
                    mpls_label2_label,
                    mpls_label2_ttl,
                    mpls_label2_exp,
                    mpls_label2_bos,
                    mpls_label3_label,
                    mpls_label3_ttl,
                    mpls_label3_exp,
                    mpls_label3_bos,
                    mpls_label4_label,
                    mpls_label4_ttl,
                    mpls_label4_exp,
                    mpls_label4_bos,
                    ip_src, ip_src_mask,
                    ip_dst, ip_dst_mask,
                    ip_protocol,
                    ip_tos, ip_ecn,
                    ip_dscp, ip_ttl,
                    in_ports, out_ports,
                    in_port, out_port,
                    src_l4_port, dst_l4_port,
                    ingress_mirror,
                    egress_mirror,
                    new_svlan, new_scos,
                    new_cvlan, new_ccos,
                    deny_learn)
                sys_logging("create acl entry = %d" %acl_entry_oid_3)
                assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

                self.ctc_send_packet( 0, str(pkt))
                self.ctc_verify_packets( pkt3, [2])

            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
                step = step + 1
                sys_logging(" step%u: add acl entry 2 again" %step)

                entry_priority = 2
                admin_state = True
                new_scos = 2
                acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                    acl_table_oid_2,
                    entry_priority,
                    admin_state,
                    action, addr_family,
                    mac_src, mac_src_mask,
                    mac_dst, mac_dst_mask,
                    svlan_id, svlan_pri,
                    svlan_cfi, cvlan_id,
                    cvlan_pri, cvlan_cfi,
                    ip_type,
                    mpls_label0_label,
                    mpls_label0_ttl,
                    mpls_label0_exp,
                    mpls_label0_bos,
                    mpls_label1_label,
                    mpls_label1_ttl,
                    mpls_label1_exp,
                    mpls_label1_bos,
                    mpls_label2_label,
                    mpls_label2_ttl,
                    mpls_label2_exp,
                    mpls_label2_bos,
                    mpls_label3_label,
                    mpls_label3_ttl,
                    mpls_label3_exp,
                    mpls_label3_bos,
                    mpls_label4_label,
                    mpls_label4_ttl,
                    mpls_label4_exp,
                    mpls_label4_bos,
                    ip_src, ip_src_mask,
                    ip_dst, ip_dst_mask,
                    ip_protocol,
                    ip_tos, ip_ecn,
                    ip_dscp, ip_ttl,
                    in_ports, out_ports,
                    in_port, out_port,
                    src_l4_port, dst_l4_port,
                    ingress_mirror,
                    egress_mirror,
                    new_svlan, new_scos,
                    new_cvlan, new_ccos,
                    deny_learn)
                sys_logging("create acl entry = %d" %acl_entry_oid_2)
                assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

                self.ctc_send_packet( 0, str(pkt))
                self.ctc_verify_packets( pkt2, [2])

        finally:
            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_lag_attribute(lag_oid, attr)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
                assert (status == SAI_STATUS_SUCCESS)
            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)

            sai_thrift_remove_bport_by_lag(self.client, lag_bridge_oid)
            sai_thrift_remove_lag_member(self.client, lag_member_id1)
            sai_thrift_remove_lag_member(self.client, lag_member_id2)

            sai_thrift_remove_lag(self.client, lag_oid)


class scenario_17_par_group_bind_lag_ingress_test_ad_merge(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment
        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        port4 = port_list[3]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        lag_oid = sai_thrift_create_lag(self.client)
        lag_member_id1 = sai_thrift_create_lag_member(self.client, lag_oid, port1)
        lag_member_id2 = sai_thrift_create_lag_member(self.client, lag_oid, port2)

        lag_bridge_oid = sai_thrift_create_bport_by_lag(self.client, lag_oid)
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        is_lag = 1
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, lag_bridge_oid, SAI_VLAN_TAGGING_MODE_TAGGED,is_lag)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port3, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_LAG]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_LAG]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = lag_oid
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table2 = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
                table_stage,
                table_bind_point_list,
                addr_family,
                mac_src,
                mac_dst,
                ip_src,
                ip_dst,
                in_ports,
                out_ports,
                in_port,
                out_port,
                svlan_id,
                svlan_pri,
                svlan_cfi,
                cvlan_id,
                cvlan_pri,
                cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_protocol,
                src_l4_port,
                dst_l4_port)
            sys_logging("create acl table3 = %d" %acl_table_oid_3)
            assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID)

        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID)

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID)

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
            sys_logging("create acl group member = %d" %acl_table_group_member_id3)
            assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID)

        # create acl entry
        entry_priority = 1
        admin_state = True
        action = SAI_PACKET_ACTION_DROP
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 2
        admin_state = True
        action = SAI_PACKET_ACTION_LOG
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)
        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            entry_priority = 3
            admin_state = True
            action =  SAI_PACKET_ACTION_TRAP
            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_3,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)
            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID)

        warmboot(self.client)
        try:
            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            step = 1
            sys_logging(" step%u: none acl , packet will forwarding  " %step)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt, [2])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: bind this ACL group to port  " %step)

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_lag_attribute(lag_oid, attr)

            step = step + 1
            sys_logging(" step%u: ad merge result is trap " %step)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 2)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            if 'tsingma' == testutils.test_params_get()['chipname']:
                step = step + 1
                sys_logging(" step%u: remove acl entry 3 and ad merge result is still trap " %step)

                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
                assert (status == SAI_STATUS_SUCCESS)

                self.client.sai_thrift_clear_cpu_packet_info()
                self.ctc_send_packet( 0, str(pkt))
                self.ctc_verify_no_packet( pkt, 2)
                ret = self.client.sai_thrift_get_cpu_packet_count()
                sys_logging ("receive rx packet %d" %ret.data.u16)
                assert (ret.data.u16 == 1)
                self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: remove acl entry 1 and ad merge result is log" %step)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: remove acl entry 2 and normal forwarding " %step)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            step = step + 1
            sys_logging(" step%u: add acl entry 1 again" %step)

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_DROP
            acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 2)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_LAG_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_lag_attribute(lag_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)

            sai_thrift_remove_bport_by_lag(self.client, lag_bridge_oid)
            sai_thrift_remove_lag_member(self.client, lag_member_id1)
            sai_thrift_remove_lag_member(self.client, lag_member_id2)

            sai_thrift_remove_lag(self.client, lag_oid)


class scenario_19_table_bind_switch_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = None
        mac_src_mask = None
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=mac1,
                                    eth_src=mac2,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            sys_logging(" step2: bind this ACL table to switch ")

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            sys_logging(" step3: match drop acl entry ")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_no_packet( pkt1, 0)


            sys_logging(" step4: insert log acl entry ")

            entry_priority = 2
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step6: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_no_packet( pkt1, 0)

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step7: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step8: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_21_seq_group_bind_switch_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]

        action = SAI_PACKET_ACTION_DROP
        addr_family = None

        mac_src = None
        mac_src_mask = None
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        # acl group member info
        group_member_priority1 = 100

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)

        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        group_member_priority2 = 200
        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)

        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )

        entry_priority = 10
        admin_state = True

        # create acl entry
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=mac1,
                                    eth_src=mac2,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            sys_logging(" step2: bind this ACL group to switch  ")

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            sys_logging(" step3: match drop acl entry ")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_no_packet( pkt1, 0)

            sys_logging(" step4: insert log acl entry ")

            entry_priority = 5
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            sys_logging(" step5: match log acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step6: insert trap acl entry ")

            entry_priority = 6
            admin_state = True
            action = SAI_PACKET_ACTION_TRAP

            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

            sys_logging(" step7: match trap acl entry  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_no_packet( pkt1, 0)

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step8: remove trap acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step9: remove log acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_no_packet( pkt1, 0)

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step10: remove drop acl entry  ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            sys_logging(" step11: add log acl entry again")

            entry_priority = 1
            admin_state = True
            action = SAI_PACKET_ACTION_LOG

            acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid_2,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_2)
            assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_23_par_group_bind_switch_ingress_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID )

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]

        action = None
        addr_family = None

        mac_src = None
        mac_src_mask = None
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = None
        out_port = None

        svlan_id = vlan_id
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_3)
        assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID )


        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 == SAI_NULL_OBJECT_ID )

        #acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
        #sys_logging("create acl group member = %d" %acl_table_group_member_id3)
        #assert(acl_table_group_member_id3 == SAI_NULL_OBJECT_ID )

        # create acl entry
        entry_priority = 3
        admin_state = True
        new_scos = 1
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )


        entry_priority = 2
        admin_state = True
        new_scos = 2
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True
        new_scos = 3
        acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_3)
        assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )


        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=1,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt2 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=2,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            pkt3 = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=3,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step2: bind this ACL group to switch  ")

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)


            sys_logging(" step3: match acl entry 1")

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt1, [1])


            sys_logging(" step4: remove acl entry 1 and match acl entry 2")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt2, [1])

            sys_logging(" step5: remove acl entry 2 and match acl entry 3")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt3, [1])

            sys_logging(" step6: remove acl entry 3 and normal forwarding ")

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            sys_logging(" step7: add acl entry 3 again")

            entry_priority = 1
            admin_state = True
            new_scos = 3
            acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
                acl_table_oid,
                entry_priority,
                admin_state,
                action, addr_family,
                mac_src, mac_src_mask,
                mac_dst, mac_dst_mask,
                svlan_id, svlan_pri,
                svlan_cfi, cvlan_id,
                cvlan_pri, cvlan_cfi,
                ip_type,
                mpls_label0_label,
                mpls_label0_ttl,
                mpls_label0_exp,
                mpls_label0_bos,
                mpls_label1_label,
                mpls_label1_ttl,
                mpls_label1_exp,
                mpls_label1_bos,
                mpls_label2_label,
                mpls_label2_ttl,
                mpls_label2_exp,
                mpls_label2_bos,
                mpls_label3_label,
                mpls_label3_ttl,
                mpls_label3_exp,
                mpls_label3_bos,
                mpls_label4_label,
                mpls_label4_ttl,
                mpls_label4_exp,
                mpls_label4_bos,
                ip_src, ip_src_mask,
                ip_dst, ip_dst_mask,
                ip_protocol,
                ip_tos, ip_ecn,
                ip_dscp, ip_ttl,
                in_ports, out_ports,
                in_port, out_port,
                src_l4_port, dst_l4_port,
                ingress_mirror,
                egress_mirror,
                new_svlan, new_scos,
                new_cvlan, new_ccos,
                deny_learn)

            sys_logging("create acl entry = %d" %acl_entry_oid_3)
            assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt3, [1])

        finally:

            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

            #status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            #assert (status == SAI_STATUS_SUCCESS)

            #status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
            #assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_25_src_ipv6_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_src = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipv6_src_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_src), mask =sai_thrift_acl_mask_t(ip6=ipv6_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = ipv6_src
        ipsa_not_match = "2001:1111:1111:1111:1111:1111:1111:2222"
        ipda = "2012:1111:1111:1111:1111:1111:1111:1111"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            pkt1 = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa_not_match,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step5: send packet test again ")

            ipv6_src = ipsa_not_match
            ipv6_src_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_src), mask =sai_thrift_acl_mask_t(ip6=ipv6_src_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, value=attribute_value)
            self.client.sai_thrift_set_acl_entry_attribute(acl_entry_oid, attribute)
            
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6]
            
            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)
            
            for a in attrs.attr_list:
            
                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_src == a.value.aclfield.data.ip6 )
            
            pkt = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)
            
            pkt1 = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa_not_match,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)
            
            self.client.sai_thrift_clear_cpu_packet_info()
            
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()
            
            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])
            
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()
            
            self.client.sai_thrift_clear_cpu_packet_info()
            
        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_26_dst_ipv6_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_dst = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipv6_dst_mask = "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_dst), mask =sai_thrift_acl_mask_t(ip6=ipv6_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipda = ipv6_dst
        ipda_not_match = "2001:1111:1111:1111:1111:1111:1111:2222"
        ipsa = "2012:1111:1111:1111:1111:1111:1111:1111"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = %s" %a.value.aclfield.data.ip6)
                    assert(ipv6_dst == a.value.aclfield.data.ip6 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            pkt1 = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda_not_match,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_27_src_mac_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        src_mac = '00:11:11:11:11:11'
        src_mac_mask = "ff:ff:ff:ff:ff:ff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # src mac
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(mac=src_mac), mask = sai_thrift_acl_mask_t(mac=src_mac_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = src_mac
        macda = '00:22:22:22:22:22'
        mac_sa_not_match = '00:33:33:33:33:33'
        ipsa = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipda = "2012:1111:1111:1111:1111:1111:1111:1111"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC = %s" %a.value.aclfield.data.mac)
                    assert(src_mac == a.value.aclfield.data.mac )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            pkt1 = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=mac_sa_not_match,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_28_dst_mac_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_MAC,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        dst_mac = '00:11:11:11:11:11'
        dst_mac_mask = "ff:ff:ff:ff:ff:ff"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # src mac
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(mac=dst_mac), mask = sai_thrift_acl_mask_t(mac=dst_mac_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macda = dst_mac
        macsa = '00:22:22:22:22:22'
        mac_da_not_match = '00:33:33:33:33:33'
        ipsa = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipda = "2012:1111:1111:1111:1111:1111:1111:1111"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC = %s" %a.value.aclfield.data.mac)
                    assert(dst_mac == a.value.aclfield.data.mac )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            pkt1 = simple_tcpv6_packet(eth_dst=mac_da_not_match,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_29_src_ipv4_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_src = "10.1.1.1"
        ipv4_src_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = ipv4_src
        ipsa_not_match = "20.1.1.1"
        ipda = "30.1.1.1"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa_not_match,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)





class scenario_30_dst_ipv4_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_dst = "10.1.1.1"
        ipv4_dst_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_dst), mask =sai_thrift_acl_mask_t(ip4=ipv4_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipda = ipv4_dst
        ipda_not_match = "20.1.1.1"
        ipsa = "30.1.1.1"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_dst == a.value.aclfield.data.ip4 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda_not_match,
                                    ip_id=101,
                                    ip_ttl=64)


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_31_outer_vlan_id_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        svlan_id = vlan_id
        svlan_id_mask = -1
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=svlan_id), mask =sai_thrift_acl_mask_t(u16=svlan_id_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        svlan_id_not_match = 200
        cvlan_id = 300

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID = %s" %a.value.aclfield.data.u16)
                    assert(svlan_id == a.value.aclfield.data.u16 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=svlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=svlan_id_not_match,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)



            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_no_packet( pkt1, 1)

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_32_outer_vlan_cos_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        svlan_id_cos = 5
        svlan_id_cos_mask = -1
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=svlan_id_cos), mask =sai_thrift_acl_mask_t(u8=svlan_id_cos_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        svlan_id_cos_not_match = 6
        cvlan_id = 300

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI = %s" %a.value.aclfield.data.u8)
                    assert(svlan_id_cos == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=svlan_id_cos,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=svlan_id_cos_not_match,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)



            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_33_outer_vlan_cfi_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_CFI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        svlan_id_cfi = 1
        svlan_id_cfi_mask = -1
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=svlan_id_cfi), mask =sai_thrift_acl_mask_t(u8=svlan_id_cfi_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        svlan_id_cfg_not_match = 0
        cvlan_id = 300

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI = %s" %a.value.aclfield.data.u8)
                    assert(svlan_id_cfi == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=5,
                dl_vlan_cfi_outer=svlan_id_cfi,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=5,
                dl_vlan_cfi_outer=svlan_id_cfg_not_match,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)



            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)






class scenario_34_inner_vlan_id_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        cvlan_id = 200
        cvlan_id_mask = -1
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=cvlan_id), mask =sai_thrift_acl_mask_t(u16=cvlan_id_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        cvlan_id_not_match = 300


        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID = %s" %a.value.aclfield.data.u16)
                    assert(cvlan_id == a.value.aclfield.data.u16 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id_not_match,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)



            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_35_inner_vlan_cos_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        cvlan_id_cos = 5
        cvlan_id_cos_mask = -1
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=cvlan_id_cos), mask =sai_thrift_acl_mask_t(u8=cvlan_id_cos_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        cvlan_id_cos_not_match = 6
        cvlan_id = 200

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI = %s" %a.value.aclfield.data.u8)
                    assert(cvlan_id_cos == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=cvlan_id_cos,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=cvlan_id_cos_not_match,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)



            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_36_inner_vlan_cfi_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_CFI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        cvlan_id_cfi = 1
        cvlan_id_cfi_mask = -1
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=cvlan_id_cfi), mask =sai_thrift_acl_mask_t(u8=cvlan_id_cfi_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        cvlan_id_cfg_not_match = 0
        cvlan_id = 300

        warmboot(self.client)

        try:
            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI = %s" %a.value.aclfield.data.u8)
                    assert(cvlan_id_cfi == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=5,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=cvlan_id_cfi,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=5,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=cvlan_id_cfg_not_match,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)



            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_37_ipv4_dscp_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DSCP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_dscp = 10
        ipv4_dscp_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ipv4_dscp), mask =sai_thrift_acl_mask_t(u8=ipv4_dscp_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DSCP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"
        ipv4_dscp_not_match = 11


        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_DSCP, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_DSCP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_DSCP = %s" %a.value.aclfield.data.u8)
                    assert(ipv4_dscp == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_dscp=ipv4_dscp,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_dscp=ipv4_dscp_not_match,
                                    ip_id=101,
                                    ip_ttl=64)


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_38_ipv4_ecn_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ECN,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_ecn = 1
        ipv4_ecn_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ipv4_ecn), mask =sai_thrift_acl_mask_t(u8=ipv4_ecn_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ECN, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"
        ipv4_ecn_not_match = 0

        warmboot(self.client)
        try:

            sys_logging(" step3: get acl entry attr info  ")
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_ECN, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ECN:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ECN = %s" %a.value.aclfield.data.u8)
                    assert(ipv4_ecn == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_ecn=ipv4_ecn,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_ecn=ipv4_ecn_not_match,
                                    ip_id=101,
                                    ip_ttl=64)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)

class scenario_39_ipv4_tos_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_TOS,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_tos = 64
        ipv4_tos_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ipv4_tos), mask =sai_thrift_acl_mask_t(u8=ipv4_tos_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_TOS, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"
        ipv4_tos_not_match = 63


        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_TOS, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_TOS:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_TOS = %s" %a.value.aclfield.data.u8)
                    assert(ipv4_tos == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=ipv4_tos,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=ipv4_tos_not_match,
                                    ip_id=101,
                                    ip_ttl=64)


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_40_ipv4_ttl_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_TTL,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_ttl = 64
        ipv4_ttl_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ipv4_ttl), mask =sai_thrift_acl_mask_t(u8=ipv4_ttl_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_TTL, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"
        ipv4_ttl_not_match = 63

        warmboot(self.client)
        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_TTL, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_TTL:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_TTL = %s" %a.value.aclfield.data.u8)
                    assert(ipv4_ttl == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=ipv4_ttl)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=ipv4_ttl_not_match)


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_41_ipv4_frag_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_FRAG,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ipv4_frag = SAI_ACL_IP_FRAG_ANY
        ipv4_frag_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ipv4_frag), mask =sai_thrift_acl_mask_t(s32=ipv4_frag_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"

        warmboot(self.client)

        try:
            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG = %s" %a.value.aclfield.data.s32)
                    assert(ipv4_frag == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_frag=1,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64)


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_42_tcp_flag_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_TCP_FLAGS,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ip_protocol = 6
        ip_protocol_mask = -1

        tcp_flag = 16
        tcp_flag_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ip_protocol), mask =sai_thrift_acl_mask_t(u8=ip_protocol_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=tcp_flag), mask =sai_thrift_acl_mask_t(u8=tcp_flag_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL = %s" %a.value.aclfield.data.u8)
                    assert(ip_protocol == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS = %s" %a.value.aclfield.data.u8)
                    assert(tcp_flag == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            '''
            urg = 32
            ack = 16
            psh = 8
            rst = 4
            syn = 2
            fin = 1
            '''

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64,
                                    tcp_flags=tcp_flag)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64,
                                    tcp_flags=1)


            print pkt.show()

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_43_tcp_src_port_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ip_protocol = 6
        ip_protocol_mask = -1

        tcp_src_port = 1234
        tcp_src_port_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ip_protocol), mask =sai_thrift_acl_mask_t(u8=ip_protocol_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=tcp_src_port), mask =sai_thrift_acl_mask_t(u16=tcp_src_port_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"

        tcp_src_port_not_match = 1235

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL = %s" %a.value.aclfield.data.u8)
                    assert(ip_protocol == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT = %s" %a.value.aclfield.data.u16)
                    assert(tcp_src_port == a.value.aclfield.data.u16 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64,
                                    tcp_sport=tcp_src_port)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64,
                                    tcp_sport=tcp_src_port_not_match)


            print pkt.show()

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)






class scenario_44_tcp_dst_port_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ip_protocol = 6
        ip_protocol_mask = -1

        tcp_des_port = 5678
        tcp_des_port_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ip_protocol), mask =sai_thrift_acl_mask_t(u8=ip_protocol_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=tcp_des_port), mask =sai_thrift_acl_mask_t(u16=tcp_des_port_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"

        tcp_des_port_not_match = 5679

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL = %s" %a.value.aclfield.data.u8)
                    assert(ip_protocol == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT = %s" %a.value.aclfield.data.u16)
                    assert(tcp_des_port == a.value.aclfield.data.u16 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64,
                                    tcp_dport=tcp_des_port)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64,
                                    tcp_dport=tcp_des_port_not_match)


            print pkt.show()

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_45_ether_type_port_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        ether_type = 0x0800
        ether_type_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ether type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=ether_type), mask =sai_thrift_acl_mask_t(u16=ether_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"
        ipv6sa = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipv6da = "2012:1111:1111:1111:1111:1111:1111:1111"


        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE = %s" %a.value.aclfield.data.u16)
                    assert(ether_type == a.value.aclfield.data.u16 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipv6da,
                                    ipv6_src=ipv6sa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)



            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)








class scenario_46_ipv6_flow_label_port_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IPV6_FLOW_LABEL,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1

        flow_label = 12345
        flow_label_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u32=flow_label), mask =sai_thrift_acl_mask_t(u32=flow_label_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "2001:1111:1111:1111:1111:1111:1111:2222"
        ipda = "2012:1111:1111:1111:1111:1111:1111:1111"

        flow_label_not_match = 12346

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL = %s" %a.value.aclfield.data.u32)
                    assert(flow_label == a.value.aclfield.data.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    ipv6_fl=flow_label,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            pkt1 = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    ipv6_fl=flow_label_not_match,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_47_icmp_type_port_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ICMP_CODE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ip_protocol = 1
        ip_protocol_mask = -1

        icmp_type = 8
        icmp_type_mask = -1

        icmp_code = 0
        icmp_code_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ip_protocol), mask =sai_thrift_acl_mask_t(u8=ip_protocol_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=icmp_type), mask =sai_thrift_acl_mask_t(u8=icmp_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=icmp_code), mask =sai_thrift_acl_mask_t(u8=icmp_code_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "30.1.1.1"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE, SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE = %s" %a.value.aclfield.data.u8)
                    assert(icmp_type == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE = %s" %a.value.aclfield.data.u8)
                    assert(icmp_code == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_icmp_packet(pktlen=60,
                      eth_dst=macda,
                      eth_src=macsa,
                      dl_vlan_enable=True,
                      vlan_vid=vlan_id,
                      vlan_pcp=0,
                      ip_src=ipsa,
                      ip_dst=ipda,
                      ip_tos=0,
                      ip_ecn=None,
                      ip_dscp=None,
                      ip_ttl=64,
                      ip_id=1,
                      icmp_type=8,
                      icmp_code=0,
                      icmp_data='')

            pkt1 = simple_icmp_packet(pktlen=60,
                      eth_dst=macda,
                      eth_src=macsa,
                      dl_vlan_enable=True,
                      vlan_vid=vlan_id,
                      vlan_pcp=0,
                      ip_src=ipsa,
                      ip_dst=ipda,
                      ip_tos=0,
                      ip_ecn=None,
                      ip_dscp=None,
                      ip_ttl=64,
                      ip_id=1,
                      icmp_type=0,
                      icmp_code=0,
                      icmp_data='')


            pkt2 = simple_icmp_packet(pktlen=60,
                      eth_dst=macda,
                      eth_src=macsa,
                      dl_vlan_enable=True,
                      vlan_vid=vlan_id,
                      vlan_pcp=0,
                      ip_src=ipsa,
                      ip_dst=ipda,
                      ip_tos=0,
                      ip_ecn=None,
                      ip_dscp=None,
                      ip_ttl=64,
                      ip_id=1,
                      icmp_type=8,
                      icmp_code=1,
                      icmp_data='')


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            self.ctc_send_packet( 0, str(pkt2))
            self.ctc_verify_packets( pkt2, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_48_icmpv6_type_port_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IPV6_NEXT_HEADER,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_CODE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1

        ipv6_next_header = 58
        ipv6_next_header_mask = -1

        icmp_type = 1
        icmp_type_mask = -1

        icmp_code = 0
        icmp_code_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ipv6_next_header), mask =sai_thrift_acl_mask_t(u8=ipv6_next_header_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=icmp_type), mask =sai_thrift_acl_mask_t(u8=icmp_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=icmp_code), mask =sai_thrift_acl_mask_t(u8=icmp_code_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipv6sa = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipv6da = "2012:1111:1111:1111:1111:1111:1111:1111"

        warmboot(self.client)
        try:

            sys_logging(" step3: get acl entry attr info  ")
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE, SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER,
            SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE, SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER = %s" %a.value.aclfield.data.u8)
                    assert(ipv6_next_header == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE = %s" %a.value.aclfield.data.u8)
                    assert(icmp_type == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE = %s" %a.value.aclfield.data.u8)
                    assert(icmp_code == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_icmpv6_packet(pktlen=100,
                         eth_dst=macda,
                         eth_src=macsa,
                         dl_vlan_enable=True,
                         vlan_vid=vlan_id,
                         vlan_pcp=0,
                         ipv6_src=ipv6sa,
                         ipv6_dst=ipv6da,
                         ipv6_tc=0,
                         ipv6_ecn=None,
                         ipv6_dscp=None,
                         ipv6_hlim=64,
                         ipv6_fl=0,
                         icmp_type=icmp_type,
                         icmp_code=icmp_code)

            pkt1 = simple_icmpv6_packet(pktlen=100,
                         eth_dst=macda,
                         eth_src=macsa,
                         dl_vlan_enable=True,
                         vlan_vid=vlan_id,
                         vlan_pcp=0,
                         ipv6_src=ipv6sa,
                         ipv6_dst=ipv6da,
                         ipv6_tc=0,
                         ipv6_ecn=None,
                         ipv6_dscp=None,
                         ipv6_hlim=64,
                         ipv6_fl=0,
                         icmp_type=1,
                         icmp_code=1)

            pkt2 = simple_icmpv6_packet(pktlen=100,
                         eth_dst=macda,
                         eth_src=macsa,
                         dl_vlan_enable=True,
                         vlan_vid=vlan_id,
                         vlan_pcp=0,
                         ipv6_src=ipv6sa,
                         ipv6_dst=ipv6da,
                         ipv6_tc=0,
                         ipv6_ecn=None,
                         ipv6_dscp=None,
                         ipv6_hlim=64,
                         ipv6_fl=0,
                         icmp_type=0,
                         icmp_code=0)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            self.ctc_send_packet( 0, str(pkt2))
            self.ctc_verify_packets( pkt2, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()
            self.client.sai_thrift_clear_cpu_packet_info()

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)

'''
class scenario_49_packet_vlan_port_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_PACKET_VLAN,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        packet_vlan = SAI_PACKET_VLAN_DOUBLE_TAG
        packet_vlan_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=packet_vlan), mask =sai_thrift_acl_mask_t(s32=packet_vlan_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID)

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        svlan_id = vlan_id
        cvlan_id = 200

        warmboot(self.client)

        # sdk cli
        # chip global-cfg acl-property direction ingress l2-type-as-vlan-num 1
        # not support after discussion

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN = %s" %a.value.aclfield.data.s32)
                    assert(packet_vlan == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=svlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=svlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()
            self.client.sai_thrift_clear_cpu_packet_info()

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)
'''

class scenario_50_mpls0_label_port_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        acl_attr_list = []
        port1 = port_list[1]
        port2 = port_list[2]
        port3 = port_list[3]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''
        addr_family = SAI_IP_ADDR_FAMILY_IPV4

        ip_da = '5.5.5.1'
        ip_da2 = '5.5.5.2'
        dmac = '00:55:55:55:55:55'
        dmac2 = '00:55:55:55:55:66'
        ip_addr1_subnet = '10.10.10.1'
        ip_addr2_subnet = '20.20.20.1'
        ip_mask = '255.255.255.0'

        label1 = 100
        label2 = 200
        label3 = 300

        label_list = [(label1<<12) | 32]
        pop_nums = 0
        packet_action = SAI_PACKET_ACTION_FORWARD


        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)

        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)


        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_da, dmac)

        next_hop2 = sai_thrift_create_mpls_nhop(self.client, addr_family, ip_da, rif_id1, label_list, outseg_ttl_mode= SAI_OUTSEG_TTL_MODE_UNIFORM, outseg_type = SAI_OUTSEG_TYPE_SWAP)

        sai_thrift_create_inseg_entry(self.client, label2, pop_nums, None, next_hop2, packet_action)

        mpls1 = [{'label':200,'tc':0,'ttl':32,'s':1}]
        ip_only_pkt1 = simple_ip_only_packet(pktlen=86,
                                ip_src='1.1.1.2',
                                ip_dst=ip_addr1_subnet,
                                ip_ttl=64,
                                ip_id=105,
                                ip_ihl=5
                                )

        pkt1 = simple_mpls_packet(
                                eth_dst=router_mac,
                                eth_src='00:11:11:11:11:33',
                                mpls_type=0x8847,
                                mpls_tags= mpls1,
                                inner_frame = ip_only_pkt1)

        mpls2 = [{'label':100,'tc':0,'ttl':31,'s':1}]
        #sai bug,actually label ttl should be 31 ,ip ttl should be 64
        ip_only_pkt2 = simple_ip_only_packet(pktlen=86,
                                ip_src='1.1.1.2',
                                ip_dst=ip_addr1_subnet,
                                ip_ttl=64,
                                ip_id=105,
                                ip_ihl=5
                                )

        pkt2 = simple_mpls_packet(
                                eth_dst=dmac,
                                eth_src=router_mac,
                                mpls_type=0x8847,
                                mpls_tags= mpls2,
                                inner_frame = ip_only_pkt2)




        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_LABEL,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        ether_type = 0x8847
        ether_type_mask = -1

        u16 = ctypes.c_int16(ether_type)

        mpls0_label = 200
        mpls0_label_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=u16.value), mask =sai_thrift_acl_mask_t(u16=ether_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)



        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u32=mpls0_label), mask =sai_thrift_acl_mask_t(u32=mpls0_label_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port2, attr)

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL, SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE = %s" %a.value.aclfield.data.u16)
                    u161 = ctypes.c_uint16(a.value.aclfield.data.u16)
                    assert(ether_type == u161.value )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL = %s" %a.value.aclfield.data.u32)
                    assert(mpls0_label == a.value.aclfield.data.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 2, str(pkt1))
            self.ctc_verify_packets( pkt2, [1])


            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port2, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            mpls2 = sai_thrift_inseg_entry_t(label2)
            self.client.sai_thrift_remove_inseg_entry(mpls2)

            self.client.sai_thrift_remove_next_hop(next_hop2)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_da, dmac)

            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)

            self.client.sai_thrift_remove_virtual_router(vr_id)



class scenario_51_acl_range_port_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_range_type_list = [SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE,SAI_ACL_RANGE_TYPE_L4_DST_PORT_RANGE]

        acl_range_list = sai_thrift_s32_list_t(count=len(acl_range_type_list), s32list=acl_range_type_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_range_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_RANGE_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #attribute_value = sai_thrift_attribute_value_t(booldata=1)
        #attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT,
        #                                   value=attribute_value)
        #acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        range_type = SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE
        stage = SAI_ACL_STAGE_INGRESS
        range_min = 1234
        range_max = 5678

        acl_range_oid = sai_thrift_create_acl_range(self.client, range_type, stage, range_min, range_max)
        sys_logging("create acl range = %d" %acl_range_oid)
        assert(acl_range_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ip_protocol = 6
        ip_protocol_mask = -1

        tcp_src_port = 1234
        tcp_src_port_mask = -1

        acl_range_oid_list = [acl_range_oid]

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ip_protocol), mask =sai_thrift_acl_mask_t(u8=ip_protocol_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, value=attribute_value)
        acl_attr_list.append(attribute)

        #attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=tcp_src_port), mask =sai_thrift_acl_mask_t(u16=tcp_src_port_mask)))
        #attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT, value=attribute_value)
        #acl_attr_list.append(attribute)

        acl_range_list = sai_thrift_object_list_t(count=len(acl_range_oid_list), object_id_list=acl_range_oid_list)
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(objlist=acl_range_list), mask =sai_thrift_acl_mask_t(u8=0)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"

        tcp_src_port_match1 = 1234
        tcp_src_port_match2 = 5678
        tcp_src_port_not_match = 5679

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_TABLE_ID, SAI_ACL_ENTRY_ATTR_PRIORITY, SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
            SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_PRIORITY:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_PRIORITY = %d" %a.value.u32)
                    assert(entry_priority == a.value.u32 )

                if a.id == SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ADMIN_STATE = %d" %a.value.booldata)
                    assert(admin_state == a.value.booldata )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = %s" %a.value.aclfield.data.s32)
                    assert(ip_type == a.value.aclfield.data.s32 )

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL = %s" %a.value.aclfield.data.u8)
                    assert(ip_protocol == a.value.aclfield.data.u8 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64,
                                    tcp_sport=tcp_src_port_match1)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64,
                                    tcp_sport=tcp_src_port_match2)

            pkt2 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_tos=0,
                                    ip_id=101,
                                    ip_ttl=64,
                                    tcp_sport=tcp_src_port_not_match)

            print pkt.show()

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt2))
            self.ctc_verify_packets( pkt2, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_range(acl_range_oid)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_52_port_metadata_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field
        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_PORT_USER_META,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        port_metadata = 10
        port_metadata_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u32=port_metadata), mask =sai_thrift_acl_mask_t(u32=port_metadata_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID)

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"

        attrs = self.client.sai_thrift_get_port_attribute(port1)
        for a in attrs.attr_list:

            if a.id == SAI_PORT_ATTR_META_DATA:
                sys_logging("### SAI_PORT_ATTR_META_DATA = %d ###"  %a.value.u32)
                assert (0 == a.value.u32)

        attr_value = sai_thrift_attribute_value_t(u32=port_metadata)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_META_DATA, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        warmboot(self.client)

        try:
            sys_logging(" step3: get acl entry attr info  ")
            attr_list_ids = [SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META = %s" %a.value.aclfield.data.u32)
                    assert(port_metadata == a.value.aclfield.data.u32 )

            attrs = self.client.sai_thrift_get_port_attribute(port1)

            for a in attrs.attr_list:

                if a.id == SAI_PORT_ATTR_META_DATA:
                    sys_logging("### SAI_PORT_ATTR_META_DATA = %d ###"  %a.value.u32)
                    assert (port_metadata == a.value.u32)

            sys_logging(" step4: send packet test ")
            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_dscp=10,
                                    ip_id=101,
                                    ip_ttl=64)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step5: change port metadata and send packet test again")

            port_metadata = 20
            attr_value = sai_thrift_attribute_value_t(u32=port_metadata)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_META_DATA, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            attrs = self.client.sai_thrift_get_port_attribute(port1)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_PORT_ATTR_META_DATA:
                    sys_logging("### SAI_PORT_ATTR_META_DATA = %d ###"  %a.value.u32)
                    assert (port_metadata == a.value.u32)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            port_metadata = 0
            attr_value = sai_thrift_attribute_value_t(u32=port_metadata)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_META_DATA, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_53_vlan_metadata_key_bind_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_VLAN_USER_META,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        vlan_metadata = 10
        vlan_metadata_mask = -1

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u32=vlan_metadata), mask =sai_thrift_acl_mask_t(u32=vlan_metadata_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to vlan  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"


        attrs = self.client.sai_thrift_get_vlan_attribute(vlan_oid)
        for a in attrs.attr_list:

            if a.id == SAI_VLAN_ATTR_META_DATA:
                sys_logging("###SAI_VLAN_ATTR_META_DATA = %d ###" %a.value.u32)
                if 0 != a.value.u32:
                    raise NotImplementedError()

        attr_value = sai_thrift_attribute_value_t(u32=vlan_metadata)
        attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_META_DATA, value=attr_value)
        status = self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)


        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META = %s" %a.value.aclfield.data.u32)
                    assert(vlan_metadata == a.value.aclfield.data.u32 )

            attrs = self.client.sai_thrift_get_vlan_attribute(vlan_oid)
            for a in attrs.attr_list:

                if a.id == SAI_VLAN_ATTR_META_DATA:
                    sys_logging("###SAI_VLAN_ATTR_META_DATA = %d ###" %a.value.u32)
                    if vlan_metadata != a.value.u32:
                        raise NotImplementedError()

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_dscp=10,
                                    ip_id=101,
                                    ip_ttl=64)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step5: change port metadata and send packet test again")

            vlan_metadata = 20
            attr_value = sai_thrift_attribute_value_t(u32=vlan_metadata)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_META_DATA, value=attr_value)
            status = self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            attrs = self.client.sai_thrift_get_vlan_attribute(vlan_oid)
            for a in attrs.attr_list:

                if a.id == SAI_VLAN_ATTR_META_DATA:
                    sys_logging("###SAI_VLAN_ATTR_META_DATA = %d ###" %a.value.u32)
                    if vlan_metadata != a.value.u32:
                        raise NotImplementedError()


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            vlan_metadata = 0
            attr_value = sai_thrift_attribute_value_t(u32=vlan_metadata)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_META_DATA, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_54_both_direction_for_port_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")


        sys_logging(" ### ingress table 1 ###")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table1 = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_attr_list = []

        sys_logging(" ### egress table 2 ###")

        # acl table info

        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid_2 = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table2 = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )


        sys_logging(" ### ingress acl entry 1 ###")

        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ipv4_src = "10.1.1.1"
        ipv4_src_mask = "255.255.255.255"

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ip
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )



        sys_logging(" ### egress acl entry 2 ###")

        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ipv4_dst = ipv4_src
        ipv4_dst_mask = "255.255.255.255"

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid_2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ip
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_dst), mask =sai_thrift_acl_mask_t(ip4=ipv4_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid_2 = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )



        sys_logging(" step2: bind this ACL table to port  ")

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid_2)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)



        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = ipv4_src
        ipda = "20.1.1.1"

        warmboot(self.client)

        try:

            sys_logging(" step3: get port attr ")

            attrs = self.client.sai_thrift_get_port_attribute(port1)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_PORT_ATTR_INGRESS_ACL:
                    sys_logging("### SAI_PORT_ATTR_INGRESS_ACL = %d ###"  %a.value.oid)
                    assert (acl_table_oid == a.value.oid)

                if a.id == SAI_PORT_ATTR_EGRESS_ACL:
                    sys_logging("### SAI_PORT_ATTR_EGRESS_ACL = %d ###"  %a.value.oid)
                    assert (acl_table_oid_2 == a.value.oid)


            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macsa,
                                    eth_src=macda,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipda,
                                    ip_dst=ipsa,
                                    ip_id=101,
                                    ip_ttl=64)


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_55_par_group_add_and_remove_group_member_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        # basic forwarding environment

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_id = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_id)
        assert(acl_table_group_id != SAI_NULL_OBJECT_ID)

        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )


        acl_table_oid_3 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_3)
        assert(acl_table_oid_3 != SAI_NULL_OBJECT_ID )


        # acl group member info
        group_member_priority1 = 100
        group_member_priority2 = 200
        group_member_priority3 = 300

        # create acl group member
        acl_table_group_member_id1 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid, group_member_priority1)
        sys_logging("create acl group member = %d" %acl_table_group_member_id1)
        assert(acl_table_group_member_id1 != SAI_NULL_OBJECT_ID )

        acl_table_group_member_id2 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_2, group_member_priority2)
        sys_logging("create acl group member = %d" %acl_table_group_member_id2)
        assert(acl_table_group_member_id2 != SAI_NULL_OBJECT_ID )


        # create acl entry
        entry_priority = 1
        admin_state = True
        action = SAI_PACKET_ACTION_DROP
        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 2
        admin_state = True
        action = SAI_PACKET_ACTION_LOG
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        entry_priority = 3
        admin_state = True
        action =  SAI_PACKET_ACTION_TRAP
        acl_entry_oid_3 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_3,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_3)
        assert(acl_entry_oid_3 != SAI_NULL_OBJECT_ID )

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)

            sys_logging(" step1: none acl , packet will forwarding  ")

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 0)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step2: bind this ACL group to port  ")

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_id)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            sys_logging(" step3: ad merge result is trap ")

            self.client.sai_thrift_clear_cpu_packet_info()
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)
            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            assert (ret.data.u16 == 1)
            self.client.sai_thrift_clear_cpu_packet_info()

            sys_logging(" step4: add group member 3  ")

            if 'tsingma' == testutils.test_params_get()['chipname']:
                acl_table_group_member_id3 = sai_thrift_create_acl_table_group_member(self.client, acl_table_group_id, acl_table_oid_3, group_member_priority3)
                sys_logging("create acl group member = %d" %acl_table_group_member_id3)
                assert(acl_table_group_member_id3 != SAI_NULL_OBJECT_ID)

            sys_logging(" step5: remove group member 1  ")

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            assert (status == SAI_STATUS_SUCCESS)

        finally:

            sys_logging("clear config")


            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            #status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id1)
            #assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id2)
            assert (status == SAI_STATUS_SUCCESS)

            if 'tsingma' == testutils.test_params_get()['chipname']:
                status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_id3)
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_3)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_id)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_56_get_acl_counter_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")


        sys_logging(" ### ingress table 1 ###")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table1 = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )

        acl_counter_oid = sai_thrift_create_acl_counter(self.client, acl_table_oid)
        sys_logging("create acl counter = %d" %acl_counter_oid)
        assert(acl_counter_oid != SAI_NULL_OBJECT_ID )


        acl_attr_list = []

        sys_logging(" ### egress table 2 ###")

        # acl table info

        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid_2 = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table2 = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        acl_counter_oid_2 = sai_thrift_create_acl_counter(self.client, acl_table_oid_2)
        sys_logging("create acl counter = %d" %acl_counter_oid_2)
        assert(acl_counter_oid_2 != SAI_NULL_OBJECT_ID )


        sys_logging(" ### ingress acl entry 1 ###")

        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ipv4_src = "10.1.1.1"
        ipv4_src_mask = "255.255.255.255"

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ip
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #acl counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )



        sys_logging(" ### egress acl entry 2 ###")

        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ipv4_dst = ipv4_src
        ipv4_dst_mask = "255.255.255.255"

        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid_2)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ip
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_dst), mask =sai_thrift_acl_mask_t(ip4=ipv4_dst_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #acl counter
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=acl_counter_oid_2),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_COUNTER,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        # create entry entry
        acl_entry_oid_2 = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )



        sys_logging(" step2: bind this ACL table to port  ")

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid_2)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)



        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = ipv4_src
        ipda = "20.1.1.1"

        warmboot(self.client)

        try:

            sys_logging(" step3: get port attr ")

            attrs = self.client.sai_thrift_get_port_attribute(port1)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_PORT_ATTR_INGRESS_ACL:
                    sys_logging("### SAI_PORT_ATTR_INGRESS_ACL = %d ###"  %a.value.oid)
                    assert (acl_table_oid == a.value.oid)

                if a.id == SAI_PORT_ATTR_EGRESS_ACL:
                    sys_logging("### SAI_PORT_ATTR_EGRESS_ACL = %d ###"  %a.value.oid)
                    assert (acl_table_oid_2 == a.value.oid)


            sys_logging(" step4: get counter stats ")


            attrs = self.client.sai_thrift_get_acl_counter_attribute(acl_counter_oid)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_COUNTER_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_PACKETS:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_PACKETS = %d" %a.value.u64)
                    assert(0 == a.value.u64 )

                if a.id == SAI_ACL_COUNTER_ATTR_BYTES:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_BYTES = %d" %a.value.u64)
                    assert(0 == a.value.u64 )


            attrs = self.client.sai_thrift_get_acl_counter_attribute(acl_counter_oid_2)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_COUNTER_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid_2 == a.value.oid )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_PACKETS:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_PACKETS = %d" %a.value.u64)
                    assert(0 == a.value.u64 )

                if a.id == SAI_ACL_COUNTER_ATTR_BYTES:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_BYTES = %d" %a.value.u64)
                    assert(0 == a.value.u64 )


            sys_logging(" step5: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macsa,
                                    eth_src=macda,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipda,
                                    ip_dst=ipsa,
                                    ip_id=101,
                                    ip_ttl=64)


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 1, str(pkt1))
            self.ctc_verify_packets( pkt1, [0])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step6: get counter stats again")


            attrs = self.client.sai_thrift_get_acl_counter_attribute(acl_counter_oid)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_COUNTER_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid == a.value.oid )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_PACKETS:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_PACKETS = %d" %a.value.u64)
                    assert(1 == a.value.u64 )

                if a.id == SAI_ACL_COUNTER_ATTR_BYTES:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_BYTES = %d" %a.value.u64)
                    assert(104 == a.value.u64 )


            attrs = self.client.sai_thrift_get_acl_counter_attribute(acl_counter_oid_2)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_COUNTER_ATTR_TABLE_ID:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_TABLE_ID = %d" %a.value.oid)
                    assert(acl_table_oid_2 == a.value.oid )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT = %d" %a.value.booldata)
                    assert(True == a.value.booldata )

                if a.id == SAI_ACL_COUNTER_ATTR_PACKETS:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_PACKETS = %d" %a.value.u64)
                    assert(1 == a.value.u64 )

                if a.id == SAI_ACL_COUNTER_ATTR_BYTES:
                    sys_logging("get SAI_ACL_COUNTER_ATTR_BYTES = %d" %a.value.u64)
                    assert(104 == a.value.u64 )


        finally:

            sys_logging("clear config")


            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_EGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_counter(acl_counter_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)


class scenario_57_action_for_redirect_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ipv4_src = "10.1.1.1"
        ipv4_src_mask = "255.255.255.255"

        action = port3

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = ipv4_src
        ipsa_not_match = "20.1.1.1"
        ipda = "30.1.1.1"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT = %d" %a.value.aclaction.parameter.oid)
                    assert(action == a.value.aclaction.parameter.oid )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa_not_match,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)


            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [2])

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_58_action_for_set_inner_vlanid_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        cvlan_id = 200
        cvlan_id_mask = -1

        action = 400

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=cvlan_id), mask =sai_thrift_acl_mask_t(u16=cvlan_id_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(u16=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        cvlan_id_not_match = 300


        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID = %d" %a.value.aclaction.parameter.u16)
                    assert(action == a.value.aclaction.parameter.u16 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id_not_match,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt2 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=action,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)



            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt2, [1])


            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])


        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_59_action_for_set_inner_vlanpri_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        cvlan_id_cos = 5
        cvlan_id_cos_mask = -1

        action = 7

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=cvlan_id_cos), mask =sai_thrift_acl_mask_t(u8=cvlan_id_cos_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(u8=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        cvlan_id_cos_not_match = 6
        cvlan_id = 200

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI = %d" %a.value.aclaction.parameter.u8)
                    assert(action == a.value.aclaction.parameter.u8 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=cvlan_id_cos,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=cvlan_id_cos_not_match,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt2 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=action,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)


            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt2, [1])

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])


        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_60_action_for_set_outer_vlanid_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        svlan_id = vlan_id
        svlan_id_mask = -1

        action = 400

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=svlan_id), mask =sai_thrift_acl_mask_t(u16=svlan_id_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(u16=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        svlan_id_not_match = 200
        cvlan_id = 300

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID = %d" %a.value.aclaction.parameter.u16)
                    assert(action == a.value.aclaction.parameter.u16 )



            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=svlan_id,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=svlan_id_not_match,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt2 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=action,
                dl_vlan_pcp_outer=1,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt2, [1])

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_no_packet( pkt1, 1)

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)





class scenario_61_action_for_set_outer_vlanpri_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        svlan_id_cos = 5
        svlan_id_cos_mask = -1

        action = 7

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)


        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=svlan_id_cos), mask =sai_thrift_acl_mask_t(u8=svlan_id_cos_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(u8=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "10.1.1.1"
        ipda = "20.1.1.1"

        svlan_id_cos_not_match = 6
        cvlan_id = 300

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI = %d" %a.value.aclaction.parameter.u8)
                    assert(action == a.value.aclaction.parameter.u8 )

            sys_logging(" step4: send packet test ")

            pkt = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=svlan_id_cos,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt1 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=svlan_id_cos_not_match,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)

            pkt2 = simple_qinq_tcp_packet(pktlen=100,
                eth_dst=macda,
                eth_src=macsa,
                dl_vlan_outer=vlan_id,
                dl_vlan_pcp_outer=action,
                dl_vlan_cfi_outer=1,
                vlan_vid=cvlan_id,
                vlan_pcp=1,
                dl_vlan_cfi=1,
                ip_dst=ipda,
                ip_src=ipsa,
                ip_tos=5,
                ip_ecn=1,
                ip_dscp=1,
                ip_ttl=64,
                tcp_sport=1234,
                tcp_dport=80)



            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt2, [1])


            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])


        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_62_action_for_set_ipv4_dscp_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DSCP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ipv4_dscp = 10
        ipv4_dscp_mask = -1

        action = 12

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ipv4_dscp), mask =sai_thrift_acl_mask_t(u8=ipv4_dscp_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DSCP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(u8=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"
        ipv4_dscp_not_match = 11


        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP = %d" %a.value.aclaction.parameter.u8)
                    assert(action == a.value.aclaction.parameter.u8 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_dscp=ipv4_dscp,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_dscp=ipv4_dscp_not_match,
                                    ip_id=101,
                                    ip_ttl=64)
            pkt2 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_dscp=action,
                                    ip_id=101,
                                    ip_ttl=64)




            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt2, [1])


            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])


        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)

# need write EpePktProcCtl 0 ecnIgnoreCheck 1
class scenario_63_action_for_set_ipv4_ecn_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        attr_value = sai_thrift_attribute_value_t(booldata=True)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_ECN_ACTION_ENABLE, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ECN,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ipv4_ecn = 1
        ipv4_ecn_mask = -1

        action = 3

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ipv4_ecn), mask =sai_thrift_acl_mask_t(u8=ipv4_ecn_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ECN, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(u8=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = "20.1.1.1"
        ipda = "30.1.1.1"
        ipv4_ecn_not_match = 0


        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN = %d" %a.value.aclaction.parameter.u8)
                    assert(action == a.value.aclaction.parameter.u8 )

            sys_logging(" step4: send packet test ")
            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_ecn=ipv4_ecn,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_ecn=ipv4_ecn_not_match,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt2 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_ecn=action,
                                    ip_id=101,
                                    ip_ttl=64)

            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(pkt2, [1])

            self.ctc_send_packet(0, str(pkt1))
            self.ctc_verify_packets(pkt1, [1])

        finally:
            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)

            attr_value = sai_thrift_attribute_value_t(booldata=False)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_ECN_ACTION_ENABLE, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)


class scenario_64_action_for_set_trap_id_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1

        ipv4_src = "10.1.1.1"
        ipv4_src_mask = "255.255.255.255"

        action = SAI_PACKET_ACTION_COPY

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # src ipv6
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create trap oid
        # TBD

        trap_oid = SAI_NULL_OBJECT_ID

        # trap ip
        #attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(oid=trap_oid),
        #                                                                                      enable = True))
        #attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID,
        #                                   value=attribute_value)
        #acl_attr_list.append(attribute)


        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = ipv4_src
        ipsa_not_match = "20.1.1.1"
        ipda = "30.1.1.1"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID = %d" %a.value.aclaction.parameter.oid)
                    assert(trap_oid == a.value.aclaction.parameter.oid )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)

            pkt1 = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa_not_match,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)


            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)




class scenario_65_action_for_set_do_not_learn_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        # acl key field

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        src_mac = '00:11:11:11:11:11'
        src_mac_mask = "ff:ff:ff:ff:ff:ff"

        action = 1

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # src mac
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(mac=src_mac), mask = sai_thrift_acl_mask_t(mac=src_mac_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC,
                                           value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(u32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        macsa = src_mac
        macda = '00:22:22:22:22:22'
        mac_sa_not_match = '00:33:33:33:33:33'
        ipsa = "2001:1111:1111:1111:1111:1111:1111:1111"
        ipda = "2012:1111:1111:1111:1111:1111:1111:1111"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN = %d" %a.value.aclaction.parameter.u32)
                    assert(action == a.value.aclaction.parameter.u32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)

            pkt1 = simple_tcpv6_packet(eth_dst=macda,
                                    eth_src=mac_sa_not_match,
                                    ipv6_dst=ipda,
                                    ipv6_src=ipsa,
                                    ipv6_hlim=64,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id)



            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            status = sai_thrift_check_fdb_exist(self.client, vlan_oid, macsa)
            assert( 0 == status)


            self.ctc_send_packet( 0, str(pkt1))
            self.ctc_verify_packets( pkt1, [1])

            status = sai_thrift_check_fdb_exist(self.client, vlan_oid, mac_sa_not_match)
            assert( 1 == status)


        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_66_update_bind_acl_table_when_binding_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        sys_logging(" step1: basic environment ")

        vlan_id = 100
        port1 = port_list[0]
        port2 = port_list[1]

        mac1 = '00:11:11:11:11:11'
        mac2 = '00:22:22:22:22:22'
        mac_action = SAI_PACKET_ACTION_FORWARD

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)


        # acl table info
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]

        action = None
        addr_family = None

        mac_src = mac1
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst = None
        mac_dst_mask = None

        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None

        in_ports = None
        out_ports = None
        in_port = port1
        out_port = None

        svlan_id = None
        svlan_pri = None
        svlan_cfi = None
        cvlan_id = None
        cvlan_pri = None
        cvlan_cfi = None

        ip_type = SAI_ACL_IP_TYPE_IPV4ANY

        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_protocol = None
        ip_tos = None
        ip_ecn = None
        ip_dscp = None
        ip_ttl = None

        src_l4_port = None
        dst_l4_port = None

        ingress_mirror = None
        egress_mirror = None
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        deny_learn = None

        # create acl table
        acl_table_oid = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        acl_table_oid_2 = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port)

        sys_logging("create acl table = %d" %acl_table_oid_2)
        assert(acl_table_oid_2 != SAI_NULL_OBJECT_ID )

        # create acl entry
        entry_priority = 1
        admin_state = True
        action = SAI_PACKET_ACTION_DROP

        acl_entry_oid = sai_thrift_create_acl_entry(self.client,
            acl_table_oid,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        entry_priority = 1
        admin_state = True
        action = SAI_PACKET_ACTION_LOG
        acl_entry_oid_2 = sai_thrift_create_acl_entry(self.client,
            acl_table_oid_2,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror,
            egress_mirror,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        sys_logging("create acl entry = %d" %acl_entry_oid_2)
        assert(acl_entry_oid_2 != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to port  ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_port_attribute(port1, attr)

        warmboot(self.client)

        try:

            pkt = simple_tcp_packet(eth_dst=mac2,
                                    eth_src=mac1,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    vlan_pcp=0,
                                    ip_dst='10.0.0.1',
                                    ip_id=101,
                                    ip_ttl=64)



            sys_logging(" step3: send packet test  ")

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_no_packet( pkt, 1)


            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 0:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


            sys_logging(" step4: update bind acl table  ")

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid_2)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()


        finally:

            sys_logging("clear config")

            # unbind this ACL table from port
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table(acl_table_oid_2)
            assert (status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan(vlan_oid)



class scenario_67_ingress_ports_bind_vlan_test(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        port3 = port_list[2]
        acl_attr_list = []

        vlan_id = 100
        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port1, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member2 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_TAGGED)
        vlan_member3 = sai_thrift_create_vlan_member(self.client, vlan_oid, port3, SAI_VLAN_TAGGING_MODE_TAGGED)

        sys_logging(" step1: basic environment ")

        # acl table info

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_VLAN]

        # acl key field


        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IN_PORTS,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(booldata=1)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create acl table

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE,
                                            value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

        sys_logging("create acl table = %d" %acl_table_oid)
        assert(acl_table_oid != SAI_NULL_OBJECT_ID )


        # entry info
        acl_attr_list = []
        entry_priority = 1
        admin_state = True
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_src = "10.1.1.1"
        ipv4_src_mask = "255.255.255.255"
        action = SAI_PACKET_ACTION_LOG

        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
                                               value=attribute_value)
        acl_attr_list.append(attribute)

        # ip type
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
        acl_attr_list.append(attribute)


        acl_port_oid_list = [port1,port2,port3]
        acl_attr_port_oid_list = sai_thrift_object_list_t(count=len(acl_port_oid_list), object_id_list=acl_port_oid_list)
        attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(objlist=acl_attr_port_oid_list), mask =sai_thrift_acl_mask_t(u8=0)))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS, value=attribute_value)
        acl_attr_list.append(attribute)


        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
                                           value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry entry
        acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

        sys_logging("create acl entry = %d" %acl_entry_oid)
        assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

        sys_logging(" step2: bind this ACL table to vlan ")
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
        attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)


        macsa = '00:11:11:11:11:11'
        macda = '00:22:22:22:22:22'
        ipsa = ipv4_src
        ipsa_not_match = "20.1.1.1"
        ipda = "30.1.1.1"

        warmboot(self.client)

        try:

            sys_logging(" step3: get acl entry attr info  ")

            attr_list_ids = [SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION]

            # get acl entry attr
            attrs = self.client.sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list_ids)
            assert (attrs.status == SAI_STATUS_SUCCESS)

            for a in attrs.attr_list:

                if a.id == SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = %s" %a.value.aclfield.data.ip4)
                    assert(ipv4_src == a.value.aclfield.data.ip4 )

                if a.id == SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
                    sys_logging("get SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = %d" %a.value.aclaction.parameter.s32)
                    assert(action == a.value.aclaction.parameter.s32 )

            sys_logging(" step4: send packet test ")

            pkt = simple_tcp_packet(eth_dst=macda,
                                    eth_src=macsa,
                                    dl_vlan_enable=True,
                                    vlan_vid=vlan_id,
                                    ip_src=ipsa,
                                    ip_dst=ipda,
                                    ip_id=101,
                                    ip_ttl=64)

            self.client.sai_thrift_clear_cpu_packet_info()

            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( pkt, [1,2])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 1:
                raise NotImplementedError()

            self.ctc_send_packet( 1, str(pkt))
            self.ctc_verify_packets( pkt, [0,2])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 2:
                raise NotImplementedError()

            self.ctc_send_packet( 2, str(pkt))
            self.ctc_verify_packets( pkt, [0,1])

            ret = self.client.sai_thrift_get_cpu_packet_count()
            sys_logging ("receive rx packet %d" %ret.data.u16)
            if ret.data.u16 != 3:
                raise NotImplementedError()

            self.client.sai_thrift_clear_cpu_packet_info()

        finally:

            sys_logging("clear config")
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_VLAN_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_vlan_attribute(vlan_oid, attr)
            status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            assert (status == SAI_STATUS_SUCCESS)
            status = self.client.sai_thrift_remove_acl_table(acl_table_oid)
            assert (status == SAI_STATUS_SUCCESS)
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan_member(vlan_member2)
            self.client.sai_thrift_remove_vlan_member(vlan_member3)
            self.client.sai_thrift_remove_vlan(vlan_oid)


@group('acl')
class scenario_68_ipv4_entry_bind_point_ingress_interface_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            self.ctc_send_packet( 1, str(pkt))
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_ROUTER_INTF]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = '00:22:22:22:22:22'
        mac_dst = router_mac
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=20
        svlan_pri=4
        svlan_cfi=1
        cvlan_id=10
        cvlan_pri=2
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_protocol = 6
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True
        router_interface = True

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            router_interface)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, value=attr_value)
        status = self.client.sai_thrift_set_router_interface_attribute(rif_id2, attr)
        assert(status == SAI_STATUS_SUCCESS)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            self.ctc_send_packet(1, str(pkt))
            self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

        finally:
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, value=attr_value)
            status = self.client.sai_thrift_set_router_interface_attribute(rif_id2, attr)
            assert(status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)


@group('acl')
class scenario_69_ipv4_entry_bind_point_egress_interface_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            self.ctc_send_packet( 1, str(pkt))
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_ROUTER_INTF]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = router_mac
        mac_dst = '00:11:22:33:44:55'
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = "192.168.0.1"
        ip_src_mask = "255.255.255.255"
        ip_dst = '10.10.10.1'
        ip_dst_mask = "255.255.255.255"
        ipv6_src = None
        ipv6_src_mask = None
        ipv6_dst = None
        ipv6_dst_mask = None
        ip_protocol = 6
        ip_tos=5
        ip_ecn=1
        ip_dscp=1
        ip_ttl=None
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = 1234
        dst_l4_port = 80
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True
        router_interface = True

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            router_interface)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL, value=attr_value)
        status = self.client.sai_thrift_set_router_interface_attribute(rif_id1, attr)
        assert(status == SAI_STATUS_SUCCESS)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            self.ctc_send_packet(1, str(pkt))
            self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

        finally:
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL, value=attr_value)
            status = self.client.sai_thrift_set_router_interface_attribute(rif_id1, attr)
            assert(status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)

@group('acl')
class scenario_70_ipv6_entry_bind_point_ingress_interface_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV6

        ipv6_dst         = '1234:5678:9abc:def0:4422:1133:5577:99aa'
        ipv6_src         = '2000::1'
        ipv6_subnet      = '1234:5678:9abc:def0:4422:1133:5577:0'
        ipv6_subnet_mask = 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:0'
        ipv6_src_mask    = 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'

        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id2, ipv6_dst, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ipv6_dst, rif_id2)
        sai_thrift_create_route(self.client, vr_id, addr_family, ipv6_subnet, ipv6_subnet_mask, nhop1)

        pkt = simple_tcpv6_packet(eth_dst=router_mac,
                                  eth_src='00:22:22:22:22:22',
                                  ipv6_dst='1234:5678:9abc:def0:4422:1133:5577:1111',
                                  ipv6_src='2000::1',
                                  ipv6_hlim=64)
        exp_pkt = simple_tcpv6_packet(eth_dst=dmac1,
                                      eth_src=router_mac,
                                      ipv6_dst='1234:5678:9abc:def0:4422:1133:5577:1111',
                                      ipv6_src='2000::1',
                                      ipv6_hlim=63)

        try:
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( exp_pkt, [1])
        finally:
            print '----------------------------------------------------------------------------------------------'

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_ROUTER_INTF]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = '00:22:22:22:22:22'
        mac_dst = router_mac
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None
        ipv6_src = ipv6_src
        ipv6_src_mask = ipv6_src_mask
        ipv6_dst = ipv6_dst
        ipv6_dst_mask = ipv6_subnet_mask
        ip_protocol = None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True
        router_interface = True

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            router_interface)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, value=attr_value)
        status = self.client.sai_thrift_set_router_interface_attribute(rif_id1, attr)
        assert(status == SAI_STATUS_SUCCESS)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_no_packet(exp_pkt, 1, default_time_out)

        finally:
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, value=attr_value)
            status = self.client.sai_thrift_set_router_interface_attribute(rif_id1, attr)
            assert(status == SAI_STATUS_SUCCESS)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ipv6_subnet, ipv6_subnet_mask, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id2, ipv6_dst, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)


@group('acl')
class scenario_71_ipv6_entry_bind_point_egress_interface_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV6

        ipv6_dst         = '1234:5678:9abc:def0:4422:1133:5577:99aa'
        ipv6_src         = '2000::1'
        ipv6_subnet      = '1234:5678:9abc:def0:4422:1133:5577:0'
        ipv6_subnet_mask = 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:0'
        ipv6_src_mask    = 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'

        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id2, ipv6_dst, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ipv6_dst, rif_id2)
        sai_thrift_create_route(self.client, vr_id, addr_family, ipv6_subnet, ipv6_subnet_mask, nhop1)

        # send the test packet(s)
        pkt = simple_tcpv6_packet(eth_dst=router_mac,
                                  eth_src='00:22:22:22:22:22',
                                  ipv6_dst='1234:5678:9abc:def0:4422:1133:5577:1111',
                                  ipv6_src='2000::1',
                                  ipv6_hlim=64)
        exp_pkt = simple_tcpv6_packet(eth_dst=dmac1,
                                      eth_src=router_mac,
                                      ipv6_dst='1234:5678:9abc:def0:4422:1133:5577:1111',
                                      ipv6_src='2000::1',
                                      ipv6_hlim=63)

        try:
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( exp_pkt, [1])
        finally:
            print '----------------------------------------------------------------------------------------------'

        table_stage = SAI_ACL_STAGE_EGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_ROUTER_INTF]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = router_mac
        mac_dst = "00:11:22:33:44:55"
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src = None
        ip_src_mask = None
        ip_dst = None
        ip_dst_mask = None
        ipv6_src = ipv6_src
        ipv6_src_mask = ipv6_src_mask
        ipv6_dst = ipv6_dst
        ipv6_dst_mask = ipv6_subnet_mask
        ip_protocol = None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        in_port = None
        out_port = None
        out_ports = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True
        router_interface = True

        acl_table_id = sai_thrift_create_acl_table(self.client,
            table_stage,
            table_bind_point_list,
            addr_family,
            mac_src,
            mac_dst,
            ip_src,
            ip_dst,
            in_ports,
            out_ports,
            in_port,
            out_port,
            svlan_id,
            svlan_pri,
            svlan_cfi,
            cvlan_id,
            cvlan_pri,
            cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_protocol,
            src_l4_port,
            dst_l4_port,
            ipv6_src,
            ipv6_dst,
            ip_tos,
            ip_ecn,
            ip_dscp,
            ip_ttl,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            router_interface)
        acl_entry_id = sai_thrift_create_acl_entry(self.client,
            acl_table_id,
            entry_priority,
            admin_state,
            action, addr_family,
            mac_src, mac_src_mask,
            mac_dst, mac_dst_mask,
            svlan_id, svlan_pri,
            svlan_cfi, cvlan_id,
            cvlan_pri, cvlan_cfi,
            ip_type,
            mpls_label0_label,
            mpls_label0_ttl,
            mpls_label0_exp,
            mpls_label0_bos,
            mpls_label1_label,
            mpls_label1_ttl,
            mpls_label1_exp,
            mpls_label1_bos,
            mpls_label2_label,
            mpls_label2_ttl,
            mpls_label2_exp,
            mpls_label2_bos,
            mpls_label3_label,
            mpls_label3_ttl,
            mpls_label3_exp,
            mpls_label3_bos,
            mpls_label4_label,
            mpls_label4_ttl,
            mpls_label4_exp,
            mpls_label4_bos,
            ip_src, ip_src_mask,
            ip_dst, ip_dst_mask,
            ip_protocol,
            ip_tos, ip_ecn,
            ip_dscp, ip_ttl,
            in_ports, out_ports,
            in_port, out_port,
            src_l4_port, dst_l4_port,
            ingress_mirror_id,
            egress_mirror_id,
            new_svlan, new_scos,
            new_cvlan, new_ccos,
            deny_learn)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL, value=attr_value)
        status = self.client.sai_thrift_set_router_interface_attribute(rif_id2, attr)
        assert(status == SAI_STATUS_SUCCESS)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_no_packet(exp_pkt, 1, default_time_out)

        finally:
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL, value=attr_value)
            status = self.client.sai_thrift_set_router_interface_attribute(rif_id2, attr)
            assert(status == SAI_STATUS_SUCCESS)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ipv6_subnet, ipv6_subnet_mask, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id2, ipv6_dst, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)


@group('acl')
class scenario_72_bind_none_member_parallel_group_and_add_member_fn(sai_base_test.ThriftInterfaceDataPlane):

    def runTest(self):

        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        
        if 'tsingma' == testutils.test_params_get()['chipname']:      # tsingma
            member_num = 3
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']: # tsingma_mx
            member_num = 2
         
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id2, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id2)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # acl group info
        group_stage = SAI_ACL_STAGE_INGRESS
        group_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        group_type = SAI_ACL_TABLE_GROUP_TYPE_PARALLEL

        # create acl group
        acl_table_group_oid = sai_thrift_create_acl_table_group(self.client, group_stage, group_bind_point_list, group_type)
        sys_logging("create acl group = %d" %acl_table_group_oid)
        assert(acl_table_group_oid != SAI_NULL_OBJECT_ID)

        # create ACL table
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_PORT]
        #addr_family = None
        action = SAI_PACKET_ACTION_DROP
        in_ports = None
        mac_src = None
        mac_dst = None
        mac_src_mask = None
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None
        ip_src_list = ["192.168.0.1", "192.168.0.2", "192.168.0.3"]
        ip_src_mask = "255.255.255.255"
        ip_dst = None
        ip_dst_mask = None
        ip_protocol = None
        #ip qos info
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        in_port = 0
        out_port = None
        out_ports = None
        ip_protocol = None
        src_l4_port = None
        dst_l4_port = None
        ingress_mirror_id = None
        egress_mirror_id = None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None

        acl_table_oid_list = []
        for n in range(0, member_num):

            acl_table_oid = sai_thrift_create_acl_table(self.client,
                                                        table_stage,
                                                        table_bind_point_list,
                                                        addr_family,
                                                        mac_src,
                                                        mac_dst,
                                                        ip_src_list[n],
                                                        ip_dst,
                                                        in_ports,
                                                        out_ports,
                                                        in_port,
                                                        out_port,
                                                        svlan_id,
                                                        svlan_pri,
                                                        svlan_cfi,
                                                        cvlan_id,
                                                        cvlan_pri,
                                                        cvlan_cfi,
                                                        ip_type,
                                                        mpls_label0_label,
                                                        mpls_label0_ttl,
                                                        mpls_label0_exp,
                                                        mpls_label0_bos,
                                                        mpls_label1_label,
                                                        mpls_label1_ttl,
                                                        mpls_label1_exp,
                                                        mpls_label1_bos,
                                                        mpls_label2_label,
                                                        mpls_label2_ttl,
                                                        mpls_label2_exp,
                                                        mpls_label2_bos,
                                                        mpls_label3_label,
                                                        mpls_label3_ttl,
                                                        mpls_label3_exp,
                                                        mpls_label3_bos,
                                                        mpls_label4_label,
                                                        mpls_label4_ttl,
                                                        mpls_label4_exp,
                                                        mpls_label4_bos,
                                                        ip_protocol,
                                                        src_l4_port,
                                                        dst_l4_port)
            sys_logging("create acl table[%u] = 0x%lx" %(n, acl_table_oid))
            assert(acl_table_oid != SAI_NULL_OBJECT_ID)
            acl_table_oid_list.append(acl_table_oid)

        warmboot(self.client)
        try:
            # bind this ACL table to port1s object id
            attr_value = sai_thrift_attribute_value_t(oid=acl_table_group_oid)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_port_attribute(port1, attr)

            pkt1 = simple_tcp_packet(pktlen=92,
                                     eth_dst=router_mac,
                                     eth_src='00:22:22:22:22:22',
                                     ip_dst='10.10.10.1',
                                     ip_src='192.168.0.1',
                                     ip_tos=5,
                                     ip_ecn=1,
                                     ip_dscp=1,
                                     ip_ttl=64,
                                     tcp_sport=1234,
                                     tcp_dport=80)

            pkt2 = simple_tcp_packet(pktlen=92,
                                     eth_dst=router_mac,
                                     eth_src='00:22:22:22:22:22',
                                     ip_dst='10.10.10.1',
                                     ip_src='192.168.0.2',
                                     ip_tos=5,
                                     ip_ecn=1,
                                     ip_dscp=1,
                                     ip_ttl=64,
                                     tcp_sport=1234,
                                     tcp_dport=80)

            pkt3 = simple_tcp_packet(pktlen=92,
                                     eth_dst=router_mac,
                                     eth_src='00:22:22:22:22:22',
                                     ip_dst='10.10.10.1',
                                     ip_src='192.168.0.3',
                                     ip_tos=5,
                                     ip_ecn=1,
                                     ip_dscp=1,
                                     ip_ttl=64,
                                     tcp_sport=1234,
                                     tcp_dport=80)

            exp_pkt1 = simple_tcp_packet(pktlen=92,
                                         eth_dst='00:11:22:33:44:55',
                                         eth_src=router_mac,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.1',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=63,
                                         tcp_sport=1234,
                                         tcp_dport=80)

            exp_pkt2 = simple_tcp_packet(pktlen=92,
                                         eth_dst='00:11:22:33:44:55',
                                         eth_src=router_mac,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.2',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=63,
                                         tcp_sport=1234,
                                         tcp_dport=80)

            exp_pkt3 = simple_tcp_packet(pktlen=92,
                                         eth_dst='00:11:22:33:44:55',
                                         eth_src=router_mac,
                                         ip_dst='10.10.10.1',
                                         ip_src='192.168.0.3',
                                         ip_tos=5,
                                         ip_ecn=1,
                                         ip_dscp=1,
                                         ip_ttl=63,
                                         tcp_sport=1234,
                                         tcp_dport=80)

            pkt     = [pkt1, pkt2, pkt3]
            exp_pkt = [exp_pkt1, exp_pkt2, exp_pkt3]

            for n in range(0, member_num):
                self.ctc_send_packet(0, str(pkt[n]))
                self.ctc_verify_packets(exp_pkt[n], [1])

            acl_table_group_member_oid_list = []
            for n in range(0, member_num):
                # setup ACL table group members
                group_member_priority = ((n+1)*100)

                # create ACL table group members
                acl_table_group_member_oid = sai_thrift_create_acl_table_group_member(self.client,
                                                                                      acl_table_group_oid,
                                                                                      acl_table_oid_list[n],
                                                                                      group_member_priority)
                assert acl_table_group_member_oid > 0, 'acl_table_group_member_oid is <= 0'
                print "acl_table_group_member_oid[%u] 0x%lx" %(n, acl_table_group_member_oid)
                acl_table_group_member_oid_list.append(acl_table_group_member_oid)

            for n in range(0, member_num):
                self.ctc_send_packet(0, str(pkt[n]))
                self.ctc_verify_packets(exp_pkt[n], [1])

            admin_state = True
            acl_entry_oid_list = []
            for n in range(0, member_num):

                entry_priority = ((n+1)*100)
                acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                                                            acl_table_oid_list[n],
                                                            entry_priority,
                                                            admin_state,
                                                            action, addr_family,
                                                            mac_src, mac_src_mask,
                                                            mac_dst, mac_dst_mask,
                                                            svlan_id, svlan_pri,
                                                            svlan_cfi, cvlan_id,
                                                            cvlan_pri, cvlan_cfi,
                                                            ip_type,
                                                            mpls_label0_label,
                                                            mpls_label0_ttl,
                                                            mpls_label0_exp,
                                                            mpls_label0_bos,
                                                            mpls_label1_label,
                                                            mpls_label1_ttl,
                                                            mpls_label1_exp,
                                                            mpls_label1_bos,
                                                            mpls_label2_label,
                                                            mpls_label2_ttl,
                                                            mpls_label2_exp,
                                                            mpls_label2_bos,
                                                            mpls_label3_label,
                                                            mpls_label3_ttl,
                                                            mpls_label3_exp,
                                                            mpls_label3_bos,
                                                            mpls_label4_label,
                                                            mpls_label4_ttl,
                                                            mpls_label4_exp,
                                                            mpls_label4_bos,
                                                            ip_src_list[n], ip_src_mask,
                                                            ip_dst, ip_dst_mask,
                                                            ip_protocol,
                                                            ip_tos, ip_ecn,
                                                            ip_dscp, ip_ttl,
                                                            in_ports, out_ports,
                                                            in_port, out_port,
                                                            src_l4_port, dst_l4_port,
                                                            ingress_mirror_id,
                                                            egress_mirror_id,
                                                            new_svlan, new_scos,
                                                            new_cvlan, new_ccos,
                                                            deny_learn)
                sys_logging("create acl entry oid[%u] = 0x%lx" %(n, acl_entry_oid))
                assert(acl_entry_oid != SAI_NULL_OBJECT_ID)
                acl_entry_oid_list.append(acl_entry_oid)

            for n in range(0, member_num):
                self.ctc_send_packet(0, str(pkt[n]))
                self.ctc_verify_no_packet(exp_pkt[n], 1)

            for n in range(0, member_num):
                status = self.client.sai_thrift_remove_acl_entry(acl_entry_oid_list[n])
                assert (status == SAI_STATUS_SUCCESS)

                self.ctc_send_packet(0, str(pkt[n]))
                self.ctc_verify_packets(exp_pkt[n], [1])

            acl_entry_oid_list = []
            for n in range(0, member_num):

                entry_priority = ((n+1)*100)
                acl_entry_oid = sai_thrift_create_acl_entry(self.client,
                                                            acl_table_oid_list[n],
                                                            entry_priority,
                                                            admin_state,
                                                            action, addr_family,
                                                            mac_src, mac_src_mask,
                                                            mac_dst, mac_dst_mask,
                                                            svlan_id, svlan_pri,
                                                            svlan_cfi, cvlan_id,
                                                            cvlan_pri, cvlan_cfi,
                                                            ip_type,
                                                            mpls_label0_label,
                                                            mpls_label0_ttl,
                                                            mpls_label0_exp,
                                                            mpls_label0_bos,
                                                            mpls_label1_label,
                                                            mpls_label1_ttl,
                                                            mpls_label1_exp,
                                                            mpls_label1_bos,
                                                            mpls_label2_label,
                                                            mpls_label2_ttl,
                                                            mpls_label2_exp,
                                                            mpls_label2_bos,
                                                            mpls_label3_label,
                                                            mpls_label3_ttl,
                                                            mpls_label3_exp,
                                                            mpls_label3_bos,
                                                            mpls_label4_label,
                                                            mpls_label4_ttl,
                                                            mpls_label4_exp,
                                                            mpls_label4_bos,
                                                            ip_src_list[n], ip_src_mask,
                                                            ip_dst, ip_dst_mask,
                                                            ip_protocol,
                                                            ip_tos, ip_ecn,
                                                            ip_dscp, ip_ttl,
                                                            in_ports, out_ports,
                                                            in_port, out_port,
                                                            src_l4_port, dst_l4_port,
                                                            ingress_mirror_id,
                                                            egress_mirror_id,
                                                            new_svlan, new_scos,
                                                            new_cvlan, new_ccos,
                                                            deny_learn)
                sys_logging("create acl entry oid[%u] = 0x%lx" %(n, acl_entry_oid))
                assert(acl_entry_oid != SAI_NULL_OBJECT_ID)
                acl_entry_oid_list.append(acl_entry_oid)

            for n in range(0, member_num):
                self.ctc_send_packet(0, str(pkt[n]))
                self.ctc_verify_no_packet(exp_pkt[n], 1)

            for n in range(0, member_num):

                status = self.client.sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid_list[n])
                assert (status == SAI_STATUS_SUCCESS)

                self.ctc_send_packet(0, str(pkt[n]))
                self.ctc_verify_packets(exp_pkt[n], [1])

        finally:
            sys_logging("clear config")

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_PORT_ATTR_INGRESS_ACL, value=attr_value)
            status = self.client.sai_thrift_set_port_attribute(port1, attr)
            assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_set_port_attribute(port1, attr)
            assert (status == SAI_STATUS_SUCCESS)

            for n in range(0, member_num):
                status = self.client.sai_thrift_remove_acl_table(acl_table_oid_list[n])
                assert (status == SAI_STATUS_SUCCESS)

            status = self.client.sai_thrift_remove_acl_table_group(acl_table_group_oid)
            assert (status == SAI_STATUS_SUCCESS)

            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id2, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)


@group('acl')
class scenario_73_udf_group_add_update_from_min_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        pkt1 = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
            
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt1 = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=62,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = [port1, port2]
        mac_src = None
        mac_dst = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type=None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_src=None
        ip_src_mask=None
        ip_dst=None
        ip_dst_mask=None
        ipv6_src=None
        ipv6_src_mask=None
        ipv6_dst=None
        ipv6_dst_mask=None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol=None
        in_port=None
        out_port=None
        out_ports=None
        src_l4_port=None
        dst_l4_port=None
        acl_range_type_list=None
        ingress_mirror_id=None
        egress_mirror_id=None
        ingress_samplepacket=None
        acl_range_id_list=None
        redirect=None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True

        udf0 = ctypes.c_int8(0)
        udf1 = ctypes.c_int8(1)
        udf2 = ctypes.c_int8(0)
        udf3 = ctypes.c_int8(0)

        udf4 = ctypes.c_int8(64)
        udf5 = ctypes.c_int8(6)
        udf6 = ctypes.c_int8(165)
        udf7 = ctypes.c_int8(240)

        udf8 = ctypes.c_int8(192)
        udf9 = ctypes.c_int8(168)
        udf10 = ctypes.c_int8(0)
        udf11 = ctypes.c_int8(1)

        udf12 = ctypes.c_int8(10)
        udf13 = ctypes.c_int8(10)
        udf14 = ctypes.c_int8(10)
        udf15 = ctypes.c_int8(1)

        group_type = SAI_UDF_GROUP_TYPE_GENERIC
        
        if 'tsingma' == testutils.test_params_get()['chipname']:
            group_length = 4
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
            group_length = 2

        print "Create udf group: udf_group_type = SAI_UDF_GROUP_ATTR_TYPE, group_length = SAI_UDF_GROUP_ATTR_LENGTH "
        udf_group_id = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id = 0x%lx" %udf_group_id

        udf_group_id1 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id1 = 0x%lx" %udf_group_id1

        udf_group_id2 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id2 = 0x%lx" %udf_group_id2

        udf_group_id3 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id3 = 0x%lx" %udf_group_id3

        udf_group_id4 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id4 = 0x%lx" %udf_group_id4

        udf_group_id5 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id5 = 0x%lx" %udf_group_id5

        udf_group_id6 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id6 = 0x%lx" %udf_group_id6

        udf_group_id7 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id7 = 0x%lx" %udf_group_id7

        #ipv4
        ether_type = 0x0800
        ether_type_mask = U16MASKFULL
        #tcp
        l3_header_protocol = 6
        l3_header_protocol_mask = U8MASKFULL
        #gre
        gre_type = None
        gre_type_mask = None
        #l4 port
        l4_src_port = 1234
        l4_src_port_mask = U16MASKFULL
        l4_dst_port = 80
        l4_dst_port_mask = U16MASKFULL
        #mpls label num
        mpls_label_num = None
        #entry proirity
        priority = 0

        udf_match_id = sai_thrift_create_udf_match(self.client,
                                                   ether_type,
                                                   ether_type_mask,
                                                   l3_header_protocol,
                                                   l3_header_protocol_mask,
                                                   gre_type,
                                                   gre_type_mask,
                                                   l4_src_port,
                                                   l4_src_port_mask,
                                                   l4_dst_port,
                                                   l4_dst_port_mask,
                                                   mpls_label_num,
                                                   priority)

        if 'tsingma' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1, -1, -1]


            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1


            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 6
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 10
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id4 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id4 > 0, 'udf_entry_id4 is <= 0'
            print "udf_entry_id4 = 0x%lx" %udf_entry_id4

            base = SAI_UDF_BASE_L3
            offset = 14
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id5 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id5 > 0, 'udf_entry_id5 is <= 0'
            print "udf_entry_id5 = 0x%lx" %udf_entry_id5

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id6 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id6, base, offset, hash_mask_list)
            assert udf_entry_id6 > 0, 'udf_entry_id6 is <= 0'
            print "udf_entry_id6 = 0x%lx" %udf_entry_id6

            base = SAI_UDF_BASE_L3
            offset = 18
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id7 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id7, base, offset, hash_mask_list)
            assert udf_entry_id7 > 0, 'udf_entry_id7 is <= 0'
            print "udf_entry_id7 = 0x%lx" %udf_entry_id7

        acl_attr_list = []
        # acl key field

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id1)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id2)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id3)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id4)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id5)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id6)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id7)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_id = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = 0x%lx" %acl_table_id)
        assert(acl_table_id != SAI_NULL_OBJECT_ID)

        # acl entry info
        action = SAI_PACKET_ACTION_DROP
        entry_priority = 1
        admin_state = True

        acl_attr_list = []
        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_id = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = 0x%lx" %acl_entry_id)
        assert(acl_entry_id != SAI_NULL_OBJECT_ID)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)
        try:
            if 'tsingma' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [udf0.value, udf1.value, udf2.value, udf3.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                assert acl_table_id > 0, 'acl_entry_id is <= 0'
                assert acl_entry_id > 0, 'acl_entry_id is <= 0'

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))

                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf4.value, udf5.value, udf6.value, udf7.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf8.value, udf9.value, udf10.value, udf11.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf12.value, udf13.value, udf14.value, udf15.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
            
            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [udf0.value, udf1.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                assert acl_table_id > 0, 'acl_entry_id is <= 0'
                assert acl_entry_id > 0, 'acl_entry_id is <= 0'

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))

                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf2.value, udf3.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf4.value, udf5.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf6.value, udf7.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf8.value, udf9.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf10.value, udf11.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf12.value, udf13.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf14.value, udf15.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))

                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

        finally:
            # unbind this ACL table from switch object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)

            self.client.sai_thrift_remove_udf(udf_entry_id)
            self.client.sai_thrift_remove_udf(udf_entry_id1)
            self.client.sai_thrift_remove_udf(udf_entry_id2)
            self.client.sai_thrift_remove_udf(udf_entry_id3)

            if 'tsingma_mx' == testutils.test_params_get()['chipname']:
                self.client.sai_thrift_remove_udf(udf_entry_id4)
                self.client.sai_thrift_remove_udf(udf_entry_id5)
                self.client.sai_thrift_remove_udf(udf_entry_id6)
                self.client.sai_thrift_remove_udf(udf_entry_id7)

            self.client.sai_thrift_remove_udf_match(udf_match_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id1)
            self.client.sai_thrift_remove_udf_group(udf_group_id2)
            self.client.sai_thrift_remove_udf_group(udf_group_id3)
            self.client.sai_thrift_remove_udf_group(udf_group_id4)
            self.client.sai_thrift_remove_udf_group(udf_group_id5)
            self.client.sai_thrift_remove_udf_group(udf_group_id6)
            self.client.sai_thrift_remove_udf_group(udf_group_id7)


@group('acl')
class scenario_74_udf_group_add_update_from_max_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        pkt1 = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
            
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt1 = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=62,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = [port1, port2]
        mac_src = None
        mac_dst = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type=None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_src=None
        ip_src_mask=None
        ip_dst=None
        ip_dst_mask=None
        ipv6_src=None
        ipv6_src_mask=None
        ipv6_dst=None
        ipv6_dst_mask=None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol=None
        in_port=None
        out_port=None
        out_ports=None
        src_l4_port=None
        dst_l4_port=None
        acl_range_type_list=None
        ingress_mirror_id=None
        egress_mirror_id=None
        ingress_samplepacket=None
        acl_range_id_list=None
        redirect=None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True

        udf0 = ctypes.c_int8(0)
        udf1 = ctypes.c_int8(1)
        udf2 = ctypes.c_int8(0)
        udf3 = ctypes.c_int8(0)

        udf4 = ctypes.c_int8(64)
        udf5 = ctypes.c_int8(6)
        udf6 = ctypes.c_int8(165)
        udf7 = ctypes.c_int8(240)

        udf8 = ctypes.c_int8(192)
        udf9 = ctypes.c_int8(168)
        udf10 = ctypes.c_int8(0)
        udf11 = ctypes.c_int8(1)

        udf12 = ctypes.c_int8(10)
        udf13 = ctypes.c_int8(10)
        udf14 = ctypes.c_int8(10)
        udf15 = ctypes.c_int8(1)

        group_type = SAI_UDF_GROUP_TYPE_GENERIC
        
        if 'tsingma' == testutils.test_params_get()['chipname']:
            group_length = 4
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:    
            group_length = 2

        print "Create udf group: udf_group_type = SAI_UDF_GROUP_ATTR_TYPE, group_length = SAI_UDF_GROUP_ATTR_LENGTH "
        udf_group_id = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id = 0x%lx" %udf_group_id

        udf_group_id1 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id1 = 0x%lx" %udf_group_id1

        udf_group_id2 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id2 = 0x%lx" %udf_group_id2

        udf_group_id3 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id3 = 0x%lx" %udf_group_id3

        udf_group_id4 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id4 = 0x%lx" %udf_group_id4

        udf_group_id5 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id5 = 0x%lx" %udf_group_id5

        udf_group_id6 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id6 = 0x%lx" %udf_group_id6

        udf_group_id7 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id7 = 0x%lx" %udf_group_id7

        #ipv4
        ether_type = 0x0800
        ether_type_mask = U16MASKFULL
        #tcp
        l3_header_protocol = 6
        l3_header_protocol_mask = U8MASKFULL
        #gre
        gre_type = None
        gre_type_mask = None
        #l4 port
        l4_src_port = 1234
        l4_src_port_mask = U16MASKFULL
        l4_dst_port = 80
        l4_dst_port_mask = U16MASKFULL
        #mpls label num
        mpls_label_num = None
        #entry proirity
        priority = 0

        udf_match_id = sai_thrift_create_udf_match(self.client,
                                                   ether_type,
                                                   ether_type_mask,
                                                   l3_header_protocol,
                                                   l3_header_protocol_mask,
                                                   gre_type,
                                                   gre_type_mask,
                                                   l4_src_port,
                                                   l4_src_port_mask,
                                                   l4_dst_port,
                                                   l4_dst_port_mask,
                                                   mpls_label_num,
                                                   priority)

        if 'tsingma' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id6, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id7, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 6
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 10
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id4 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id4 > 0, 'udf_entry_id4 is <= 0'
            print "udf_entry_id4 = 0x%lx" %udf_entry_id4

            base = SAI_UDF_BASE_L3
            offset = 14
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id5 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id5 > 0, 'udf_entry_id5 is <= 0'
            print "udf_entry_id5 = 0x%lx" %udf_entry_id5

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id6 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id6, base, offset, hash_mask_list)
            assert udf_entry_id6 > 0, 'udf_entry_id6 is <= 0'
            print "udf_entry_id6 = 0x%lx" %udf_entry_id6

            base = SAI_UDF_BASE_L3
            offset = 18
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id7 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id7, base, offset, hash_mask_list)
            assert udf_entry_id7 > 0, 'udf_entry_id7 is <= 0'
            print "udf_entry_id7 = 0x%lx" %udf_entry_id7

        acl_attr_list = []
        # acl key field

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-7), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id1)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-6), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id2)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-5), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id3)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-4), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id4)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id5)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id6)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id7)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX), value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_id = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = 0x%lx" %acl_table_id)
        assert(acl_table_id != SAI_NULL_OBJECT_ID)

        # acl entry info
        action = SAI_PACKET_ACTION_DROP
        entry_priority = 1
        admin_state = True

        acl_attr_list = []
        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_id = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = 0x%lx" %acl_entry_id)
        assert(acl_entry_id != SAI_NULL_OBJECT_ID)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)
        try:

            if 'tsingma' == testutils.test_params_get()['chipname']:    

                user_define_filed_group_data = [udf12.value, udf13.value, udf14.value, udf15.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]
                
                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
                
                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX, value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))

                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf8.value, udf9.value, udf10.value, udf11.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]
                
                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
                
                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))

                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf4.value, udf5.value, udf6.value, udf7.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]
                
                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
                
                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))

                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf0.value, udf1.value, udf2.value, udf3.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]
                
                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
                
                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))

                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [udf14.value, udf15.value]
                user_define_filed_group_mask = [-1, -1]
                
                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
                
                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX, value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))

                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf12.value, udf13.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf10.value, udf11.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf8.value, udf9.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf6.value, udf7.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-4), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf4.value, udf5.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-5), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf2.value, udf3.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-6), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf0.value, udf1.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-7), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

        finally:
            # unbind this ACL table from switch object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)

            self.client.sai_thrift_remove_udf(udf_entry_id)
            self.client.sai_thrift_remove_udf(udf_entry_id1)
            self.client.sai_thrift_remove_udf(udf_entry_id2)
            self.client.sai_thrift_remove_udf(udf_entry_id3)
            if 'tsingma_mx' == testutils.test_params_get()['chipname']:
                self.client.sai_thrift_remove_udf(udf_entry_id4)
                self.client.sai_thrift_remove_udf(udf_entry_id5)
                self.client.sai_thrift_remove_udf(udf_entry_id6)
                self.client.sai_thrift_remove_udf(udf_entry_id7)
            self.client.sai_thrift_remove_udf_match(udf_match_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id1)
            self.client.sai_thrift_remove_udf_group(udf_group_id2)
            self.client.sai_thrift_remove_udf_group(udf_group_id3)
            self.client.sai_thrift_remove_udf_group(udf_group_id4)
            self.client.sai_thrift_remove_udf_group(udf_group_id5)
            self.client.sai_thrift_remove_udf_group(udf_group_id6)
            self.client.sai_thrift_remove_udf_group(udf_group_id7)


class scenario_75_udf_group_add_update_from_mid_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        pkt1 = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
            
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt1 = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=62,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = [port1, port2]
        mac_src = None
        mac_dst = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type=None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_src=None
        ip_src_mask=None
        ip_dst=None
        ip_dst_mask=None
        ipv6_src=None
        ipv6_src_mask=None
        ipv6_dst=None
        ipv6_dst_mask=None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol=None
        in_port=None
        out_port=None
        out_ports=None
        src_l4_port=None
        dst_l4_port=None
        acl_range_type_list=None
        ingress_mirror_id=None
        egress_mirror_id=None
        ingress_samplepacket=None
        acl_range_id_list=None
        redirect=None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True

        udf0 = ctypes.c_int8(0)
        udf1 = ctypes.c_int8(1)
        udf2 = ctypes.c_int8(0)
        udf3 = ctypes.c_int8(0)

        udf4 = ctypes.c_int8(64)
        udf5 = ctypes.c_int8(6)
        udf6 = ctypes.c_int8(165)
        udf7 = ctypes.c_int8(240)

        udf8 = ctypes.c_int8(192)
        udf9 = ctypes.c_int8(168)
        udf10 = ctypes.c_int8(0)
        udf11 = ctypes.c_int8(1)

        udf12 = ctypes.c_int8(10)
        udf13 = ctypes.c_int8(10)
        udf14 = ctypes.c_int8(10)
        udf15 = ctypes.c_int8(1)

        group_type = SAI_UDF_GROUP_TYPE_GENERIC
        
        if 'tsingma_mx' == testutils.test_params_get()['chipname']:
            group_length = 2
        elif 'tsingma' == testutils.test_params_get()['chipname']:
            group_length = 4

        print "Create udf group: udf_group_type = SAI_UDF_GROUP_ATTR_TYPE, group_length = SAI_UDF_GROUP_ATTR_LENGTH "
        udf_group_id = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id = 0x%lx" %udf_group_id

        udf_group_id1 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id1 = 0x%lx" %udf_group_id1

        udf_group_id2 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id2 = 0x%lx" %udf_group_id2

        udf_group_id3 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id3 = 0x%lx" %udf_group_id3

        udf_group_id4 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id4 = 0x%lx" %udf_group_id4

        udf_group_id5 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id5 = 0x%lx" %udf_group_id5

        udf_group_id6 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id6 = 0x%lx" %udf_group_id6

        udf_group_id7 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id7 = 0x%lx" %udf_group_id7

        #ipv4
        ether_type = 0x0800
        ether_type_mask = U16MASKFULL
        #tcp
        l3_header_protocol = 6
        l3_header_protocol_mask = U8MASKFULL
        #gre
        gre_type = None
        gre_type_mask = None
        #l4 port
        l4_src_port = 1234
        l4_src_port_mask = U16MASKFULL
        l4_dst_port = 80
        l4_dst_port_mask = U16MASKFULL
        #mpls label num
        mpls_label_num = None
        #entry proirity
        priority = 0

        udf_match_id = sai_thrift_create_udf_match(self.client,
                                                   ether_type,
                                                   ether_type_mask,
                                                   l3_header_protocol,
                                                   l3_header_protocol_mask,
                                                   gre_type,
                                                   gre_type_mask,
                                                   l4_src_port,
                                                   l4_src_port_mask,
                                                   l4_dst_port,
                                                   l4_dst_port_mask,
                                                   mpls_label_num,
                                                   priority)

        if 'tsingma' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 6
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 10
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id4 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id4 > 0, 'udf_entry_id4 is <= 0'
            print "udf_entry_id4 = 0x%lx" %udf_entry_id4

            base = SAI_UDF_BASE_L3
            offset = 14
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id5 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id5 > 0, 'udf_entry_id5 is <= 0'
            print "udf_entry_id5 = 0x%lx" %udf_entry_id5

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id6 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id6, base, offset, hash_mask_list)
            assert udf_entry_id6 > 0, 'udf_entry_id6 is <= 0'
            print "udf_entry_id6 = 0x%lx" %udf_entry_id6

            base = SAI_UDF_BASE_L3
            offset = 18
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id7 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id7, base, offset, hash_mask_list)
            assert udf_entry_id7 > 0, 'udf_entry_id7 is <= 0'
            print "udf_entry_id7 = 0x%lx" %udf_entry_id7

        acl_attr_list = []
        # acl key field

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-7), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id1)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-6), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id2)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-5), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id3)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-4), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id4)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id5)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id6)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id7)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX), value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_id = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = 0x%lx" %acl_table_id)
        assert(acl_table_id != SAI_NULL_OBJECT_ID)

        # acl entry info
        action = SAI_PACKET_ACTION_DROP
        entry_priority = 1
        admin_state = True

        acl_attr_list = []
        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_id = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = 0x%lx" %acl_entry_id)
        assert(acl_entry_id != SAI_NULL_OBJECT_ID)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)
        try:

            if 'tsingma' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [udf4.value, udf5.value, udf6.value, udf7.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-4), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf8.value, udf9.value, udf10.value, udf11.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf12.value, udf13.value, udf14.value, udf15.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf0.value, udf1.value, udf2.value, udf3.value]
                user_define_filed_group_mask = [-1, -1, -1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-5), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [udf6.value, udf7.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-4), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf8.value, udf9.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf10.value, udf11.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf4.value, udf5.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-5), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf2.value, udf3.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-6), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf12.value, udf13.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf14.value, udf15.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX, value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [udf0.value, udf1.value]
                user_define_filed_group_mask = [-1, -1]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-7), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

        finally:
            # unbind this ACL table from switch object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)

            self.client.sai_thrift_remove_udf(udf_entry_id)
            self.client.sai_thrift_remove_udf(udf_entry_id1)
            self.client.sai_thrift_remove_udf(udf_entry_id2)
            self.client.sai_thrift_remove_udf(udf_entry_id3)
            if 'tsingma_mx' == testutils.test_params_get()['chipname']:
                self.client.sai_thrift_remove_udf(udf_entry_id4)
                self.client.sai_thrift_remove_udf(udf_entry_id5)
                self.client.sai_thrift_remove_udf(udf_entry_id6)
                self.client.sai_thrift_remove_udf(udf_entry_id7)
            self.client.sai_thrift_remove_udf_match(udf_match_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id1)
            self.client.sai_thrift_remove_udf_group(udf_group_id2)
            self.client.sai_thrift_remove_udf_group(udf_group_id3)
            self.client.sai_thrift_remove_udf_group(udf_group_id4)
            self.client.sai_thrift_remove_udf_group(udf_group_id5)
            self.client.sai_thrift_remove_udf_group(udf_group_id6)
            self.client.sai_thrift_remove_udf_group(udf_group_id7)


@group('acl')
class scenario_76_udf_group_remove_update_from_min_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        pkt1 = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
            
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt1 = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=62,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = [port1, port2]
        mac_src = None
        mac_dst = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type=None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_src=None
        ip_src_mask=None
        ip_dst=None
        ip_dst_mask=None
        ipv6_src=None
        ipv6_src_mask=None
        ipv6_dst=None
        ipv6_dst_mask=None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol=None
        in_port=None
        out_port=None
        out_ports=None
        src_l4_port=None
        dst_l4_port=None
        acl_range_type_list=None
        ingress_mirror_id=None
        egress_mirror_id=None
        ingress_samplepacket=None
        acl_range_id_list=None
        redirect=None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True

        udf0 = ctypes.c_int8(0)
        udf1 = ctypes.c_int8(1)
        udf2 = ctypes.c_int8(0)
        udf3 = ctypes.c_int8(0)

        udf4 = ctypes.c_int8(64)
        udf5 = ctypes.c_int8(6)
        udf6 = ctypes.c_int8(165)
        udf7 = ctypes.c_int8(240)

        udf8 = ctypes.c_int8(192)
        udf9 = ctypes.c_int8(168)
        udf10 = ctypes.c_int8(0)
        udf11 = ctypes.c_int8(1)

        udf12 = ctypes.c_int8(10)
        udf13 = ctypes.c_int8(10)
        udf14 = ctypes.c_int8(10)
        udf15 = ctypes.c_int8(1)

        group_type = SAI_UDF_GROUP_TYPE_GENERIC

        if 'tsingma' == testutils.test_params_get()['chipname']:
            group_length = 4
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:    
            group_length = 2

        print "Create udf group: udf_group_type = SAI_UDF_GROUP_ATTR_TYPE, group_length = SAI_UDF_GROUP_ATTR_LENGTH "
        udf_group_id = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id = 0x%lx" %udf_group_id

        udf_group_id1 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id1 = 0x%lx" %udf_group_id1

        udf_group_id2 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id2 = 0x%lx" %udf_group_id2

        udf_group_id3 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id3 = 0x%lx" %udf_group_id3

        udf_group_id4 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id4 = 0x%lx" %udf_group_id4

        udf_group_id5 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id5 = 0x%lx" %udf_group_id5

        udf_group_id6 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id6 = 0x%lx" %udf_group_id6

        udf_group_id7 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id7 = 0x%lx" %udf_group_id7

        #ipv4
        ether_type = 0x0800
        ether_type_mask = U16MASKFULL
        #tcp
        l3_header_protocol = 6
        l3_header_protocol_mask = U8MASKFULL
        #gre
        gre_type = None
        gre_type_mask = None
        #l4 port
        l4_src_port = 1234
        l4_src_port_mask = U16MASKFULL
        l4_dst_port = 80
        l4_dst_port_mask = U16MASKFULL
        #mpls label num
        mpls_label_num = None
        #entry proirity
        priority = 0

        udf_match_id = sai_thrift_create_udf_match(self.client,
                                                   ether_type,
                                                   ether_type_mask,
                                                   l3_header_protocol,
                                                   l3_header_protocol_mask,
                                                   gre_type,
                                                   gre_type_mask,
                                                   l4_src_port,
                                                   l4_src_port_mask,
                                                   l4_dst_port,
                                                   l4_dst_port_mask,
                                                   mpls_label_num,
                                                   priority)

        if 'tsingma' == testutils.test_params_get()['chipname']:
    
            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 6
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 10
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id4 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id4 > 0, 'udf_entry_id4 is <= 0'
            print "udf_entry_id4 = 0x%lx" %udf_entry_id4

            base = SAI_UDF_BASE_L3
            offset = 14
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id5 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id5 > 0, 'udf_entry_id5 is <= 0'
            print "udf_entry_id5 = 0x%lx" %udf_entry_id5

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id6 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id6, base, offset, hash_mask_list)
            assert udf_entry_id6 > 0, 'udf_entry_id6 is <= 0'
            print "udf_entry_id6 = 0x%lx" %udf_entry_id6

            base = SAI_UDF_BASE_L3
            offset = 18
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id7 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id7, base, offset, hash_mask_list)
            assert udf_entry_id7 > 0, 'udf_entry_id7 is <= 0'
            print "udf_entry_id7 = 0x%lx" %udf_entry_id7

        acl_attr_list = []
        # acl key field

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id1)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id2)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id3)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id4)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id5)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id6)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id7)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_id = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = 0x%lx" %acl_table_id)
        assert(acl_table_id != SAI_NULL_OBJECT_ID)

        # acl entry info
        action = SAI_PACKET_ACTION_DROP
        entry_priority = 1
        admin_state = True

        acl_attr_list = []
        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        if 'tsingma' == testutils.test_params_get()['chipname']:

            user_define_filed_group_data = [udf0.value, udf1.value, udf2.value, udf3.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf4.value, udf5.value, udf6.value, udf7.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf8.value, udf9.value, udf10.value, udf11.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf12.value, udf13.value, udf14.value, udf15.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
            acl_attr_list.append(attribute)

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

            user_define_filed_group_data = [udf0.value, udf1.value]
            user_define_filed_group_mask = [-1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf2.value, udf3.value]
            user_define_filed_group_mask = [-1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf4.value, udf5.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf6.value, udf7.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf8.value, udf9.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf10.value, udf11.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf12.value, udf13.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf14.value, udf15.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
            acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_id = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = 0x%lx" %acl_entry_id)
        assert(acl_entry_id != SAI_NULL_OBJECT_ID)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(1, str(pkt))

            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

            if 'tsingma' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### NO ACL Applied ####'
                print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                self.ctc_send_packet(1, str(pkt))
                print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_packets( exp_pkt, [0])

            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+0), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### NO ACL Applied ####'
                print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                self.ctc_send_packet(1, str(pkt))
                print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_packets( exp_pkt, [0])

        finally:
            # unbind this ACL table from switch object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)

            self.client.sai_thrift_remove_udf(udf_entry_id)
            self.client.sai_thrift_remove_udf(udf_entry_id1)
            self.client.sai_thrift_remove_udf(udf_entry_id2)
            self.client.sai_thrift_remove_udf(udf_entry_id3)
            if 'tsingma_mx' == testutils.test_params_get()['chipname']:
                self.client.sai_thrift_remove_udf(udf_entry_id4)
                self.client.sai_thrift_remove_udf(udf_entry_id5)
                self.client.sai_thrift_remove_udf(udf_entry_id6)
                self.client.sai_thrift_remove_udf(udf_entry_id7)
            self.client.sai_thrift_remove_udf_match(udf_match_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id1)
            self.client.sai_thrift_remove_udf_group(udf_group_id2)
            self.client.sai_thrift_remove_udf_group(udf_group_id3)
            self.client.sai_thrift_remove_udf_group(udf_group_id4)
            self.client.sai_thrift_remove_udf_group(udf_group_id5)
            self.client.sai_thrift_remove_udf_group(udf_group_id6)
            self.client.sai_thrift_remove_udf_group(udf_group_id7)


@group('acl')
class scenario_77_udf_group_remove_update_from_max_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        pkt1 = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
            
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt1 = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=62,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = [port1, port2]
        mac_src = None
        mac_dst = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type=None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_src=None
        ip_src_mask=None
        ip_dst=None
        ip_dst_mask=None
        ipv6_src=None
        ipv6_src_mask=None
        ipv6_dst=None
        ipv6_dst_mask=None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol=None
        in_port=None
        out_port=None
        out_ports=None
        src_l4_port=None
        dst_l4_port=None
        acl_range_type_list=None
        ingress_mirror_id=None
        egress_mirror_id=None
        ingress_samplepacket=None
        acl_range_id_list=None
        redirect=None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True

        udf0 = ctypes.c_int8(0)
        udf1 = ctypes.c_int8(1)
        udf2 = ctypes.c_int8(0)
        udf3 = ctypes.c_int8(0)

        udf4 = ctypes.c_int8(64)
        udf5 = ctypes.c_int8(6)
        udf6 = ctypes.c_int8(165)
        udf7 = ctypes.c_int8(240)

        udf8 = ctypes.c_int8(192)
        udf9 = ctypes.c_int8(168)
        udf10 = ctypes.c_int8(0)
        udf11 = ctypes.c_int8(1)

        udf12 = ctypes.c_int8(10)
        udf13 = ctypes.c_int8(10)
        udf14 = ctypes.c_int8(10)
        udf15 = ctypes.c_int8(1)

        group_type = SAI_UDF_GROUP_TYPE_GENERIC

        if 'tsingma' == testutils.test_params_get()['chipname']:
            group_length = 4
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
            group_length = 2

        print "Create udf group: udf_group_type = SAI_UDF_GROUP_ATTR_TYPE, group_length = SAI_UDF_GROUP_ATTR_LENGTH "
        udf_group_id = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id = 0x%lx" %udf_group_id

        udf_group_id1 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id1 = 0x%lx" %udf_group_id1

        udf_group_id2 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id2 = 0x%lx" %udf_group_id2

        udf_group_id3 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id3 = 0x%lx" %udf_group_id3

        udf_group_id4 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id4 = 0x%lx" %udf_group_id4

        udf_group_id5 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id5 = 0x%lx" %udf_group_id5

        udf_group_id6 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id6 = 0x%lx" %udf_group_id6

        udf_group_id7 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id7 = 0x%lx" %udf_group_id7

        #ipv4
        ether_type = 0x0800
        ether_type_mask = U16MASKFULL
        #tcp
        l3_header_protocol = 6
        l3_header_protocol_mask = U8MASKFULL
        #gre
        gre_type = None
        gre_type_mask = None
        #l4 port
        l4_src_port = 1234
        l4_src_port_mask = U16MASKFULL
        l4_dst_port = 80
        l4_dst_port_mask = U16MASKFULL
        #mpls label num
        mpls_label_num = None
        #entry proirity
        priority = 0

        udf_match_id = sai_thrift_create_udf_match(self.client,
                                                   ether_type,
                                                   ether_type_mask,
                                                   l3_header_protocol,
                                                   l3_header_protocol_mask,
                                                   gre_type,
                                                   gre_type_mask,
                                                   l4_src_port,
                                                   l4_src_port_mask,
                                                   l4_dst_port,
                                                   l4_dst_port_mask,
                                                   mpls_label_num,
                                                   priority)

        if 'tsingma' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id6, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id7, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 6
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 10
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id4 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id4 > 0, 'udf_entry_id4 is <= 0'
            print "udf_entry_id4 = 0x%lx" %udf_entry_id4

            base = SAI_UDF_BASE_L3
            offset = 14
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id5 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id5 > 0, 'udf_entry_id5 is <= 0'
            print "udf_entry_id5 = 0x%lx" %udf_entry_id5

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id6 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id6, base, offset, hash_mask_list)
            assert udf_entry_id6 > 0, 'udf_entry_id6 is <= 0'
            print "udf_entry_id6 = 0x%lx" %udf_entry_id6

            base = SAI_UDF_BASE_L3
            offset = 18
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id7 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id7, base, offset, hash_mask_list)
            assert udf_entry_id7 > 0, 'udf_entry_id7 is <= 0'
            print "udf_entry_id7 = 0x%lx" %udf_entry_id7

        acl_attr_list = []
        # acl key field

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-7), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id1)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-6), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id2)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-5), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id3)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-4), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id4)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id5)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id6)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id7)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX), value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_id = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = 0x%lx" %acl_table_id)
        assert(acl_table_id != SAI_NULL_OBJECT_ID)

        # acl entry info
        action = SAI_PACKET_ACTION_DROP
        entry_priority = 1
        admin_state = True

        acl_attr_list = []
        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        if 'tsingma' == testutils.test_params_get()['chipname']:

            user_define_filed_group_data = [udf0.value, udf1.value, udf2.value, udf3.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf4.value, udf5.value, udf6.value, udf7.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf8.value, udf9.value, udf10.value, udf11.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf12.value, udf13.value, udf14.value, udf15.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX, value=attribute_value)
            acl_attr_list.append(attribute)

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

            user_define_filed_group_data = [udf0.value, udf1.value]
            user_define_filed_group_mask = [-1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-7), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf2.value, udf3.value]
            user_define_filed_group_mask = [-1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-6), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf4.value, udf5.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-5), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf6.value, udf7.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-4), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf8.value, udf9.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf10.value, udf11.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf12.value, udf13.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf14.value, udf15.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX, value=attribute_value)
            acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_id = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = 0x%lx" %acl_entry_id)
        assert(acl_entry_id != SAI_NULL_OBJECT_ID)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(1, str(pkt))

            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

            if 'tsingma' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX, value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### NO ACL Applied ####'
                print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                self.ctc_send_packet(1, str(pkt))
                print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_packets(exp_pkt, [0])

            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-7), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-6), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-5), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-4), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX-1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX, value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### NO ACL Applied ####'
                print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                self.ctc_send_packet(1, str(pkt))
                print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_packets( exp_pkt, [0])

        finally:
            # unbind this ACL table from switch object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)

            self.client.sai_thrift_remove_udf(udf_entry_id)
            self.client.sai_thrift_remove_udf(udf_entry_id1)
            self.client.sai_thrift_remove_udf(udf_entry_id2)
            self.client.sai_thrift_remove_udf(udf_entry_id3)
            if 'tsingma_mx' == testutils.test_params_get()['chipname']:
                self.client.sai_thrift_remove_udf(udf_entry_id4)
                self.client.sai_thrift_remove_udf(udf_entry_id5)
                self.client.sai_thrift_remove_udf(udf_entry_id6)
                self.client.sai_thrift_remove_udf(udf_entry_id7)
            self.client.sai_thrift_remove_udf_match(udf_match_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id1)
            self.client.sai_thrift_remove_udf_group(udf_group_id2)
            self.client.sai_thrift_remove_udf_group(udf_group_id3)
            self.client.sai_thrift_remove_udf_group(udf_group_id4)
            self.client.sai_thrift_remove_udf_group(udf_group_id5)
            self.client.sai_thrift_remove_udf_group(udf_group_id6)
            self.client.sai_thrift_remove_udf_group(udf_group_id7)


@group('acl')
class scenario_78_udf_group_remove_update_from_mid_test(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        print
        print '----------------------------------------------------------------------------------------------'
        print "Sending packet ptf_intf 2 -> ptf_intf 1 (192.168.0.1 ---> 10.10.10.1 [id = 105])"

        switch_init(self.client)

        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        mac = ''

        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port2, 0, v4_enabled, v6_enabled, mac)

        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_mask1 = '255.255.255.255'
        dmac1 = '00:11:22:33:44:55'
        sai_thrift_create_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id1)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)

        # send the test packet(s)
        pkt = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=64,
            tcp_sport=1234,
            tcp_dport=80)
        pkt1 = simple_qinq_tcp_packet(pktlen=100,
            eth_dst=router_mac,
            eth_src='00:22:22:22:22:22',
            dl_vlan_outer=20,
            dl_vlan_pcp_outer=4,
            dl_vlan_cfi_outer=1,
            vlan_vid=10,
            vlan_pcp=2,
            dl_vlan_cfi=1,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
            
        exp_pkt = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=63,
            tcp_sport=1234,
            tcp_dport=80)
        exp_pkt1 = simple_tcp_packet(pktlen=92,
            eth_dst='00:11:22:33:44:55',
            eth_src=router_mac,
            ip_dst='10.10.10.1',
            ip_src='192.168.0.1',
            ip_tos=5,
            ip_ecn=1,
            ip_dscp=1,
            ip_ttl=62,
            tcp_sport=1234,
            tcp_dport=80)

        try:
            print '#### NO ACL Applied ####'
            print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            self.ctc_send_packet(1, str(pkt))
            print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_packets( exp_pkt, [0])
        finally:
            print '----------------------------------------------------------------------------------------------'

        print "Sending packet ptf_intf 2 -[acl]-> ptf_intf 1 (192.168.0.1 -[acl]-> 10.10.10.1 [id = 105])"
        # setup ACL to block based on Source IP
        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_SWITCH]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        in_ports = [port1, port2]
        mac_src = None
        mac_dst = None
        mac_src_mask = "ff:ff:ff:ff:ff:ff"
        mac_dst_mask = "ff:ff:ff:ff:ff:ff"
        svlan_id=None
        svlan_pri=None
        svlan_cfi=None
        cvlan_id=None
        cvlan_pri=None
        cvlan_cfi=None
        ip_type=None
        mpls_label0_label = None
        mpls_label0_ttl = None
        mpls_label0_exp = None
        mpls_label0_bos = None
        mpls_label1_label = None
        mpls_label1_ttl = None
        mpls_label1_exp = None
        mpls_label1_bos = None
        mpls_label2_label = None
        mpls_label2_ttl = None
        mpls_label2_exp = None
        mpls_label2_bos = None
        mpls_label3_label = None
        mpls_label3_ttl = None
        mpls_label3_exp = None
        mpls_label3_bos = None
        mpls_label4_label = None
        mpls_label4_ttl = None
        mpls_label4_exp = None
        mpls_label4_bos = None

        ip_src=None
        ip_src_mask=None
        ip_dst=None
        ip_dst_mask=None
        ipv6_src=None
        ipv6_src_mask=None
        ipv6_dst=None
        ipv6_dst_mask=None
        ip_tos=None
        ip_ecn=None
        ip_dscp=None
        ip_ttl=None
        ip_protocol=None
        in_port=None
        out_port=None
        out_ports=None
        src_l4_port=None
        dst_l4_port=None
        acl_range_type_list=None
        ingress_mirror_id=None
        egress_mirror_id=None
        ingress_samplepacket=None
        acl_range_id_list=None
        redirect=None
        #add vlan edit action
        new_svlan = None
        new_scos = None
        new_cvlan = None
        new_ccos = None
        #deny learning
        deny_learn = None
        admin_state = True

        udf0 = ctypes.c_int8(0)
        udf1 = ctypes.c_int8(1)
        udf2 = ctypes.c_int8(0)
        udf3 = ctypes.c_int8(0)

        udf4 = ctypes.c_int8(64)
        udf5 = ctypes.c_int8(6)
        udf6 = ctypes.c_int8(165)
        udf7 = ctypes.c_int8(240)

        udf8 = ctypes.c_int8(192)
        udf9 = ctypes.c_int8(168)
        udf10 = ctypes.c_int8(0)
        udf11 = ctypes.c_int8(1)

        udf12 = ctypes.c_int8(10)
        udf13 = ctypes.c_int8(10)
        udf14 = ctypes.c_int8(10)
        udf15 = ctypes.c_int8(1)

        group_type = SAI_UDF_GROUP_TYPE_GENERIC
        if 'tsingma' == testutils.test_params_get()['chipname']:
            group_length = 4
        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:
            group_length = 2    

        print "Create udf group: udf_group_type = SAI_UDF_GROUP_ATTR_TYPE, group_length = SAI_UDF_GROUP_ATTR_LENGTH "
        udf_group_id = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id = 0x%lx" %udf_group_id

        udf_group_id1 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id1 = 0x%lx" %udf_group_id1

        udf_group_id2 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id2 = 0x%lx" %udf_group_id2

        udf_group_id3 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id3 = 0x%lx" %udf_group_id3

        udf_group_id4 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id4 = 0x%lx" %udf_group_id4

        udf_group_id5 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id5 = 0x%lx" %udf_group_id5

        udf_group_id6 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id6 = 0x%lx" %udf_group_id6

        udf_group_id7 = sai_thrift_create_udf_group(self.client, group_type, group_length)
        print "udf_group_id7 = 0x%lx" %udf_group_id7

        #ipv4
        ether_type = 0x0800
        ether_type_mask = U16MASKFULL
        #tcp
        l3_header_protocol = 6
        l3_header_protocol_mask = U8MASKFULL
        #gre
        gre_type = None
        gre_type_mask = None
        #l4 port
        l4_src_port = 1234
        l4_src_port_mask = U16MASKFULL
        l4_dst_port = 80
        l4_dst_port_mask = U16MASKFULL
        #mpls label num
        mpls_label_num = None
        #entry proirity
        priority = 0

        udf_match_id = sai_thrift_create_udf_match(self.client,
                                                   ether_type,
                                                   ether_type_mask,
                                                   l3_header_protocol,
                                                   l3_header_protocol_mask,
                                                   gre_type,
                                                   gre_type_mask,
                                                   l4_src_port,
                                                   l4_src_port_mask,
                                                   l4_dst_port,
                                                   l4_dst_port_mask,
                                                   mpls_label_num,
                                                   priority)

        if 'tsingma' == testutils.test_params_get()['chipname']:    

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1, -1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

        if 'tsingma_mx' == testutils.test_params_get()['chipname']:

            base = SAI_UDF_BASE_L3
            offset = 4
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id, base, offset, hash_mask_list)
            assert udf_entry_id > 0, 'udf_entry_id is <= 0'
            print "udf_entry_id = 0x%lx" %udf_entry_id

            base = SAI_UDF_BASE_L3
            offset = 6
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id1 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id1, base, offset, hash_mask_list)
            assert udf_entry_id1 > 0, 'udf_entry_id1 is <= 0'
            print "udf_entry_id1 = 0x%lx" %udf_entry_id1

            base = SAI_UDF_BASE_L3
            offset = 8
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id2 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id2, base, offset, hash_mask_list)
            assert udf_entry_id2 > 0, 'udf_entry_id2 is <= 0'
            print "udf_entry_id2 = 0x%lx" %udf_entry_id2

            base = SAI_UDF_BASE_L3
            offset = 10
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id3 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id3, base, offset, hash_mask_list)
            assert udf_entry_id3 > 0, 'udf_entry_id3 is <= 0'
            print "udf_entry_id3 = 0x%lx" %udf_entry_id3

            base = SAI_UDF_BASE_L3
            offset = 12
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id4 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id4, base, offset, hash_mask_list)
            assert udf_entry_id4 > 0, 'udf_entry_id4 is <= 0'
            print "udf_entry_id4 = 0x%lx" %udf_entry_id4

            base = SAI_UDF_BASE_L3
            offset = 14
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id5 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id5, base, offset, hash_mask_list)
            assert udf_entry_id5 > 0, 'udf_entry_id5 is <= 0'
            print "udf_entry_id5 = 0x%lx" %udf_entry_id5

            base = SAI_UDF_BASE_L3
            offset = 16
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id6 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id6, base, offset, hash_mask_list)
            assert udf_entry_id6 > 0, 'udf_entry_id6 is <= 0'
            print "udf_entry_id6 = 0x%lx" %udf_entry_id6

            base = SAI_UDF_BASE_L3
            offset = 18
            # default value
            hash_mask_list = [-1, -1]

            udf_entry_id7 =  sai_thrift_create_udf(self.client, udf_match_id, udf_group_id7, base, offset, hash_mask_list)
            assert udf_entry_id7 > 0, 'udf_entry_id7 is <= 0'
            print "udf_entry_id7 = 0x%lx" %udf_entry_id7

        acl_attr_list = []
        # acl key field

        # create acl table
        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id1)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id2)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id3)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id4)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id5)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id6)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(oid=udf_group_id7)
        attribute = sai_thrift_attribute_t(id=(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
        attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
        acl_attr_list.append(attribute)

        attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
        acl_attr_list.append(attribute)

        acl_table_id = self.client.sai_thrift_create_acl_table(acl_attr_list)
        sys_logging("create acl table = 0x%lx" %acl_table_id)
        assert(acl_table_id != SAI_NULL_OBJECT_ID)

        # acl entry info
        action = SAI_PACKET_ACTION_DROP
        entry_priority = 1
        admin_state = True

        acl_attr_list = []
        #ACL table OID
        attribute_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
        acl_attr_list.append(attribute)

        #Priority
        attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
        acl_attr_list.append(attribute)

        # Admin State
        attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
        acl_attr_list.append(attribute)

        if 'tsingma' == testutils.test_params_get()['chipname']:

            user_define_filed_group_data = [udf0.value, udf1.value, udf2.value, udf3.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf4.value, udf5.value, udf6.value, udf7.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf8.value, udf9.value, udf10.value, udf11.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf12.value, udf13.value, udf14.value, udf15.value]
            user_define_filed_group_mask = [-1, -1, -1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
            acl_attr_list.append(attribute)

        elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

            user_define_filed_group_data = [udf0.value, udf1.value]
            user_define_filed_group_mask = [-1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf2.value, udf3.value]
            user_define_filed_group_mask = [-1, -1]

            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf4.value, udf5.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf6.value, udf7.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf8.value, udf9.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
            acl_attr_list.append(attribute)
            
            user_define_filed_group_data = [udf10.value, udf11.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf12.value, udf13.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
            acl_attr_list.append(attribute)

            user_define_filed_group_data = [udf14.value, udf15.value]
            user_define_filed_group_mask = [-1, -1]
            
            user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
            user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)
            
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True,
                                                                                                data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
            attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
            acl_attr_list.append(attribute)

        #Packet action
        attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),
                                                                                              enable = True))
        attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
        acl_attr_list.append(attribute)

        # create entry
        acl_entry_id = self.client.sai_thrift_create_acl_entry(acl_attr_list)
        sys_logging("create acl entry = 0x%lx" %acl_entry_id)
        assert(acl_entry_id != SAI_NULL_OBJECT_ID)

        # bind this ACL table to port2s object id
        attr_value = sai_thrift_attribute_value_t(oid=acl_table_id)
        attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
        self.client.sai_thrift_set_switch_attribute(attr)

        warmboot(self.client)
        try:
            assert acl_table_id > 0, 'acl_entry_id is <= 0'
            assert acl_entry_id > 0, 'acl_entry_id is <= 0'

            print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
            print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
            # send the same packet
            self.ctc_send_packet(1, str(pkt))

            # ensure packet is dropped
            # check for absence of packet here!
            print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
            self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

            if 'tsingma' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0, 0, 0]
                user_define_filed_group_mask = [0, 0, 0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### NO ACL Applied ####'
                print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                self.ctc_send_packet(1, str(pkt))
                print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_packets( exp_pkt, [0])

            elif 'tsingma_mx' == testutils.test_params_get()['chipname']:

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+3), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)
     
                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+4), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+5), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+2), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+1), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+6), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN+7), value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### ACL \'DROP, src 192.168.0.1/255.255.255.0, in_ports[ptf_intf_1,2]\' Applied ####'
                print '#### Sending      ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                # send the same packet
                self.ctc_send_packet(1, str(pkt))
                # ensure packet is dropped
                # check for absence of packet here!
                print '#### NOT Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_no_packet(exp_pkt, 0, default_time_out)

                user_define_filed_group_data = [0, 0]
                user_define_filed_group_mask = [0, 0]

                user_define_filed_group_data_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_data), u8list=user_define_filed_group_data)
                user_define_filed_group_mask_list = sai_thrift_u8_list_t(count=len(user_define_filed_group_mask), u8list=user_define_filed_group_mask)

                attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = False,
                                                                                                    data = sai_thrift_acl_data_t(u8list=user_define_filed_group_data_list),
                                                                                                    mask = sai_thrift_acl_mask_t(u8list=user_define_filed_group_mask_list)))
                attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, value=attribute_value)
                self.client.sai_thrift_set_acl_entry_attribute(acl_entry_id, attribute)

                print '#### NO ACL Applied ####'
                print '#### Sending  ', router_mac, '| 00:22:22:22:22:22 | 10.10.10.1 | 192.168.0.1 | @ ptf_intf 2'
                self.ctc_send_packet(1, str(pkt))
                print '#### Expecting 00:11:22:33:44:55 |', router_mac, '| 10.10.10.1 | 192.168.0.1 | @ ptf_intf 1'
                self.ctc_verify_packets( exp_pkt, [0])

        finally:
            # unbind this ACL table from switch object id
            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_SWITCH_ATTR_INGRESS_ACL, value=attr_value)
            self.client.sai_thrift_set_switch_attribute(attr)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_id)
            self.client.sai_thrift_remove_acl_table(acl_table_id)

            # cleanup
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id1, ip_addr1, dmac1)
            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)
            self.client.sai_thrift_remove_virtual_router(vr_id)
            self.client.sai_thrift_remove_udf(udf_entry_id)
            self.client.sai_thrift_remove_udf(udf_entry_id1)
            self.client.sai_thrift_remove_udf(udf_entry_id2)
            self.client.sai_thrift_remove_udf(udf_entry_id3)
            if 'tsingma_mx' == testutils.test_params_get()['chipname']:
                self.client.sai_thrift_remove_udf(udf_entry_id4)
                self.client.sai_thrift_remove_udf(udf_entry_id5)
                self.client.sai_thrift_remove_udf(udf_entry_id6)
                self.client.sai_thrift_remove_udf(udf_entry_id7)
            self.client.sai_thrift_remove_udf_match(udf_match_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id)
            self.client.sai_thrift_remove_udf_group(udf_group_id1)
            self.client.sai_thrift_remove_udf_group(udf_group_id2)
            self.client.sai_thrift_remove_udf_group(udf_group_id3)
            self.client.sai_thrift_remove_udf_group(udf_group_id4)
            self.client.sai_thrift_remove_udf_group(udf_group_id5)
            self.client.sai_thrift_remove_udf_group(udf_group_id6)
            self.client.sai_thrift_remove_udf_group(udf_group_id7)


@group('acl')
class scenario_82_ipv4_entry_bind_ingress_phy_interface_with_virtual_router(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        vlan_id = 10
        mac = ''
        addr_family = SAI_IP_ADDR_FAMILY_IPV4
        ip_addr1 = '10.10.10.1'
        ip_addr1_subnet = '10.10.10.0'
        ip_mask1 = '255.255.255.0'
        dmac1 = '00:11:22:33:44:55'

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_UNTAGGED)
        sai_thrift_create_fdb(self.client, vlan_oid, dmac1, port2, SAI_PACKET_ACTION_FORWARD)
        
        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_VLAN, 0, vlan_oid, v4_enabled, v6_enabled, mac)

        sai_thrift_create_neighbor(self.client, addr_family, rif_id2, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id2)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1_subnet, ip_mask1, nhop1)

        pkt = simple_tcp_packet(eth_dst=router_mac,
                                eth_src='00:22:22:22:22:22',
                                ip_dst='10.10.10.30',
                                ip_src='192.168.0.1',
                                ip_id=105,
                                ip_ttl=64,
                                tcp_sport=1000,
                                tcp_dport=2000)
        exp_pkt = simple_tcp_packet(
                                eth_dst=dmac1,
                                eth_src=router_mac,
                                ip_dst='10.10.10.30',
                                ip_src='192.168.0.1',
                                ip_id=105,
                                ip_ttl=63,
                                tcp_sport=1000,
                                tcp_dport=2000)

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_ROUTER_INTF]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        ip_type = SAI_ACL_IP_TYPE_IPV4ANY
        ip_type_mask = -1
        ipv4_src = "192.168.0.1"
        ipv4_src_mask = "255.255.255.255"
        ipv4_dst = '10.10.10.30'
        ipv4_dst_mask = "255.255.255.255"
        #deny learning
        deny_learn = None
        admin_state = True
        router_interface = True
        virtual_router = True

        warmboot(self.client)
        try:
            sys_logging("======port type rif send dest ip hit v4 packet to vlan type rif======")
            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_packets(exp_pkt, [1])

            # acl table info
            table_stage = SAI_ACL_STAGE_INGRESS
            table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_ROUTER_INTERFACE]

            acl_attr_list = []
            # acl key field
            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
            acl_attr_list.append(attribute)

            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IP, value=attribute_value)
            acl_attr_list.append(attribute)

            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IP, value=attribute_value)
            acl_attr_list.append(attribute)
            
            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL, value=attribute_value)
            acl_attr_list.append(attribute)
            
            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT, value=attribute_value)
            acl_attr_list.append(attribute)

            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT, value=attribute_value)
            acl_attr_list.append(attribute)

            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_VIRTUAL_ROUTER, value=attribute_value)
            acl_attr_list.append(attribute)

            # create acl table
            attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
            acl_attr_list.append(attribute)

            acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
            attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
            acl_attr_list.append(attribute)
            
            acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

            sys_logging("create acl table = %d" %acl_table_oid)
            assert(acl_table_oid != SAI_NULL_OBJECT_ID)

            acl_attr_list = []
            #ACL table OID
            attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
            acl_attr_list.append(attribute)

            #Priority
            attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
            acl_attr_list.append(attribute)

            # Admin State
            attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
            acl_attr_list.append(attribute)

            # ip type
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
            acl_attr_list.append(attribute)

            #src ipv4
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_src), mask =sai_thrift_acl_mask_t(ip4=ipv4_src_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, value=attribute_value)
            acl_attr_list.append(attribute)

            #dst ipv4
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip4=ipv4_dst), mask =sai_thrift_acl_mask_t(ip4=ipv4_dst_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, value=attribute_value)
            acl_attr_list.append(attribute)
            
            #ip protocol
            ip_protocol = 6
            ip_protocol_mask = -1
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ip_protocol), mask =sai_thrift_acl_mask_t(u8=ip_protocol_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, value=attribute_value)
            acl_attr_list.append(attribute)
        
            #l4 src port
            tcp_src_port = 1000
            tcp_src_port_mask = -1
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=tcp_src_port), mask =sai_thrift_acl_mask_t(u16=tcp_src_port_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT, value=attribute_value)
            acl_attr_list.append(attribute)
            
            #l4 dst port
            tcp_dst_port = 2000
            tcp_dst_port_mask = -1
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=tcp_dst_port), mask =sai_thrift_acl_mask_t(u16=tcp_dst_port_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT, value=attribute_value)
            acl_attr_list.append(attribute)

            #virtual router
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(oid=vr_id), mask =sai_thrift_acl_mask_t(u8=0)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_VIRTUAL_ROUTER, value=attribute_value)
            acl_attr_list.append(attribute)

            #Packet action
            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),  enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
            acl_attr_list.append(attribute)

            # create entry entry
            acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, value=attr_value)
            status = self.client.sai_thrift_set_router_interface_attribute(rif_id1, attr)
            assert(status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_no_packet(exp_pkt, 1, default_time_out)

        finally:
            sys_logging("======clean up======")
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1_subnet, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id2, ip_addr1, dmac1)

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, value=attr_value)
            status = self.client.sai_thrift_set_router_interface_attribute(rif_id1, attr)
            assert(status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)

            self.client.sai_thrift_remove_virtual_router(vr_id)
            sai_thrift_delete_fdb(self.client, vlan_oid, dmac1, port2)
            
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan(vlan_oid)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            self.client.sai_thrift_remove_acl_table(acl_table_oid)


class scenario_83_ipv6_entry_bind_ingress_phy_interface_with_virtual_router(sai_base_test.ThriftInterfaceDataPlane):
    def runTest(self):
        switch_init(self.client)
        port1 = port_list[0]
        port2 = port_list[1]
        v4_enabled = 1
        v6_enabled = 1
        vlan_id = 10
        mac = ''
        addr_family = SAI_IP_ADDR_FAMILY_IPV6
        ip_addr1 = '1234:5678:9abc:def0:4422:1133:5577:99aa'
        ip_addr1_subnet = '1234:5678:9abc:def0:4422:1133:5577:0'
        ip_mask1 = 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:0'
        dmac1 = '00:11:22:33:44:55'

        vlan_oid = sai_thrift_create_vlan(self.client, vlan_id)
        vlan_member1 = sai_thrift_create_vlan_member(self.client, vlan_oid, port2, SAI_VLAN_TAGGING_MODE_UNTAGGED)
        sai_thrift_create_fdb(self.client, vlan_oid, dmac1, port2, SAI_PACKET_ACTION_FORWARD)
        
        vr_id = sai_thrift_create_virtual_router(self.client, v4_enabled, v6_enabled)
        rif_id1 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_PORT, port1, 0, v4_enabled, v6_enabled, mac)
        rif_id2 = sai_thrift_create_router_interface(self.client, vr_id, SAI_ROUTER_INTERFACE_TYPE_VLAN, 0, vlan_oid, v4_enabled, v6_enabled, mac)

        sai_thrift_create_neighbor(self.client, addr_family, rif_id2, ip_addr1, dmac1)
        nhop1 = sai_thrift_create_nhop(self.client, addr_family, ip_addr1, rif_id2)
        sai_thrift_create_route(self.client, vr_id, addr_family, ip_addr1_subnet, ip_mask1, nhop1)

        pkt = simple_tcpv6_packet( eth_dst=router_mac,
                                   eth_src='00:22:22:22:22:22',
                                   ipv6_dst='1234:5678:9abc:def0:4422:1133:5577:1111',
                                   ipv6_src='2000::1',
                                   ipv6_hlim=64,
                                   tcp_sport=1000,
                                    tcp_dport=2000)
        exp_pkt = simple_tcpv6_packet(
                                   eth_dst=dmac1,
                                   eth_src=router_mac,
                                   ipv6_dst='1234:5678:9abc:def0:4422:1133:5577:1111',
                                   ipv6_src='2000::1',
                                   ipv6_hlim=63,
                                   tcp_sport=1000,
                                   tcp_dport=2000)

        table_stage = SAI_ACL_STAGE_INGRESS
        table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_ROUTER_INTF]
        entry_priority = SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY
        action = SAI_PACKET_ACTION_DROP
        ip_type = SAI_ACL_IP_TYPE_IPV6ANY
        ip_type_mask = -1
        ipv6_src = '2000::1'
        ipv6_src_mask = 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:0'
        ipv6_dst = '1234:5678:9abc:def0:4422:1133:5577:1111'
        ipv6_dst_mask = 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:0'
        #deny learning
        deny_learn = None
        admin_state = True
        router_interface = True
        virtual_router = True

        warmboot(self.client)
        try:
            sys_logging("======port type rif send dest ip hit v6 packet to vlan type rif======")
            self.ctc_send_packet( 0, str(pkt))
            self.ctc_verify_packets( exp_pkt, [1])

            # acl table info
            table_stage = SAI_ACL_STAGE_INGRESS
            table_bind_point_list = [SAI_ACL_BIND_POINT_TYPE_ROUTER_INTERFACE]

            acl_attr_list = []
            # acl key field
            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
            acl_attr_list.append(attribute)

            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6, value=attribute_value)
            acl_attr_list.append(attribute)

            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6, value=attribute_value)
            acl_attr_list.append(attribute)

            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_IPV6_NEXT_HEADER, value=attribute_value)
            acl_attr_list.append(attribute)
            
            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT, value=attribute_value)
            acl_attr_list.append(attribute)

            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT, value=attribute_value)
            acl_attr_list.append(attribute)
            
            attribute_value = sai_thrift_attribute_value_t(booldata=1)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_VIRTUAL_ROUTER, value=attribute_value)
            acl_attr_list.append(attribute)

            # create acl table
            attribute_value = sai_thrift_attribute_value_t(s32=table_stage)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_STAGE, value=attribute_value)
            acl_attr_list.append(attribute)

            acl_table_bind_point_list = sai_thrift_s32_list_t(count=len(table_bind_point_list), s32list=table_bind_point_list)
            attribute_value = sai_thrift_attribute_value_t(s32list=acl_table_bind_point_list)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, value=attribute_value)
            acl_attr_list.append(attribute)

            acl_table_oid = self.client.sai_thrift_create_acl_table(acl_attr_list)

            sys_logging("create acl table = %d" %acl_table_oid)
            assert(acl_table_oid != SAI_NULL_OBJECT_ID)

            acl_attr_list = []
            #ACL table OID
            attribute_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_TABLE_ID, value=attribute_value)
            acl_attr_list.append(attribute)

            #Priority
            attribute_value = sai_thrift_attribute_value_t(u32=entry_priority)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_PRIORITY, value=attribute_value)
            acl_attr_list.append(attribute)

            # Admin State
            attribute_value = sai_thrift_attribute_value_t(booldata=admin_state)
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ADMIN_STATE, value=attribute_value)
            acl_attr_list.append(attribute)

            # ip type
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(s32=ip_type), mask = sai_thrift_acl_mask_t(s32=ip_type_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE, value=attribute_value)
            acl_attr_list.append(attribute)

            #src ipv6
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_src), mask =sai_thrift_acl_mask_t(ip4=ipv6_src_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, value=attribute_value)
            acl_attr_list.append(attribute)

            #dst ipv6
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(ip6=ipv6_dst), mask =sai_thrift_acl_mask_t(ip4=ipv6_dst_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, value=attribute_value)
            acl_attr_list.append(attribute)
            
            #ip protocol
            ip_protocol = 6
            ip_protocol_mask = -1
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u8=ip_protocol), mask =sai_thrift_acl_mask_t(u8=ip_protocol_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER, value=attribute_value)
            acl_attr_list.append(attribute)
        
            #l4 src port
            tcp_src_port = 1000
            tcp_src_port_mask = -1
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=tcp_src_port), mask =sai_thrift_acl_mask_t(u16=tcp_src_port_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT, value=attribute_value)
            acl_attr_list.append(attribute)
            
            #l4 dst port
            tcp_dst_port = 2000
            tcp_dst_port_mask = -1
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(u16=tcp_dst_port), mask =sai_thrift_acl_mask_t(u16=tcp_dst_port_mask)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT, value=attribute_value)
            acl_attr_list.append(attribute)

            #virtual router
            attribute_value = sai_thrift_attribute_value_t(aclfield=sai_thrift_acl_field_data_t(enable = True, data = sai_thrift_acl_data_t(oid=vr_id), mask =sai_thrift_acl_mask_t(u8=0)))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_FIELD_VIRTUAL_ROUTER, value=attribute_value)
            acl_attr_list.append(attribute)

            #Packet action
            attribute_value = sai_thrift_attribute_value_t(aclaction=sai_thrift_acl_action_data_t(parameter = sai_thrift_acl_parameter_t(s32=action),  enable = True))
            attribute = sai_thrift_attribute_t(id=SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, value=attribute_value)
            acl_attr_list.append(attribute)

            # create entry entry
            acl_entry_oid = self.client.sai_thrift_create_acl_entry(acl_attr_list)

            sys_logging("create acl entry = %d" %acl_entry_oid)
            assert(acl_entry_oid != SAI_NULL_OBJECT_ID )

            attr_value = sai_thrift_attribute_value_t(oid=acl_table_oid)
            attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, value=attr_value)
            status = self.client.sai_thrift_set_router_interface_attribute(rif_id1, attr)
            assert(status == SAI_STATUS_SUCCESS)

            self.ctc_send_packet(0, str(pkt))
            self.ctc_verify_no_packet(exp_pkt, 1, default_time_out)

        finally:
            sys_logging("======clean up======")
            sai_thrift_remove_route(self.client, vr_id, addr_family, ip_addr1_subnet, ip_mask1, nhop1)
            self.client.sai_thrift_remove_next_hop(nhop1)
            sai_thrift_remove_neighbor(self.client, addr_family, rif_id2, ip_addr1, dmac1)

            attr_value = sai_thrift_attribute_value_t(oid=SAI_NULL_OBJECT_ID)
            attr = sai_thrift_attribute_t(id=SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, value=attr_value)
            status = self.client.sai_thrift_set_router_interface_attribute(rif_id1, attr)
            assert(status == SAI_STATUS_SUCCESS)

            self.client.sai_thrift_remove_router_interface(rif_id1)
            self.client.sai_thrift_remove_router_interface(rif_id2)

            self.client.sai_thrift_remove_virtual_router(vr_id)
            sai_thrift_delete_fdb(self.client, vlan_oid, dmac1, port2)
            
            self.client.sai_thrift_remove_vlan_member(vlan_member1)
            self.client.sai_thrift_remove_vlan(vlan_oid)

            # cleanup ACL
            self.client.sai_thrift_remove_acl_entry(acl_entry_oid)
            self.client.sai_thrift_remove_acl_table(acl_table_oid)
