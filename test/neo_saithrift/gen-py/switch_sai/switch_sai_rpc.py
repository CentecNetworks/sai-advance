#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def sai_thrift_set_port_attribute(self, port_id, thrift_attr):
        """
        Parameters:
         - port_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_port_attribute(self, port_id):
        """
        Parameters:
         - port_id

        """
        pass

    def sai_thrift_get_port_stats(self, port_id, counter_ids, number_of_counters):
        """
        Parameters:
         - port_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_get_port_stats_ext(self, port_id, counter_ids, mode, number_of_counters):
        """
        Parameters:
         - port_id
         - counter_ids
         - mode
         - number_of_counters

        """
        pass

    def sai_thrift_clear_port_all_stats(self, port_id):
        """
        Parameters:
         - port_id

        """
        pass

    def sai_thrift_clear_port_stats(self, port_id, number_of_counters, counter_ids):
        """
        Parameters:
         - port_id
         - number_of_counters
         - counter_ids

        """
        pass

    def sai_thrift_create_fdb_entry(self, thrift_fdb_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_fdb_entry
         - thrift_attr_list

        """
        pass

    def sai_thrift_delete_fdb_entry(self, thrift_fdb_entry):
        """
        Parameters:
         - thrift_fdb_entry

        """
        pass

    def sai_thrift_flush_fdb_entries(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_set_fdb_entry_attribute(self, thrift_fdb_entry, thrift_attr):
        """
        Parameters:
         - thrift_fdb_entry
         - thrift_attr

        """
        pass

    def sai_thrift_get_fdb_entry_attribute(self, thrift_fdb_entry):
        """
        Parameters:
         - thrift_fdb_entry

        """
        pass

    def sai_thrift_create_vlan(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_vlan(self, vlan_oid):
        """
        Parameters:
         - vlan_oid

        """
        pass

    def sai_thrift_get_vlan_stats(self, vlan_id, counter_ids, number_of_counters):
        """
        Parameters:
         - vlan_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_get_vlan_stats_ext(self, vlan_id, thrift_counter_ids, mode, number_of_counters):
        """
        Parameters:
         - vlan_id
         - thrift_counter_ids
         - mode
         - number_of_counters

        """
        pass

    def sai_thrift_clear_vlan_stats(self, vlan_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - vlan_id
         - thrift_counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_create_vlan_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_get_vlan_member_attribute(self, vlan_member_id):
        """
        Parameters:
         - vlan_member_id

        """
        pass

    def sai_thrift_remove_vlan_member(self, vlan_member_id):
        """
        Parameters:
         - vlan_member_id

        """
        pass

    def sai_thrift_set_vlan_attribute(self, vlan_id, thrift_attr):
        """
        Parameters:
         - vlan_id
         - thrift_attr

        """
        pass

    def sai_thrift_set_vlan_member_attribute(self, vlan_member_id, thrift_attr):
        """
        Parameters:
         - vlan_member_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_vlan_attribute(self, vlan_id):
        """
        Parameters:
         - vlan_id

        """
        pass

    def sai_thrift_get_vlan_id(self, vlan_id):
        """
        Parameters:
         - vlan_id

        """
        pass

    def sai_thrift_create_vlan_members(self, thrift_attr_lists, thrift_attr_count_lists, mode):
        """
        Parameters:
         - thrift_attr_lists
         - thrift_attr_count_lists
         - mode

        """
        pass

    def sai_thrift_remove_vlan_members(self, thrift_object_id_list, mode):
        """
        Parameters:
         - thrift_object_id_list
         - mode

        """
        pass

    def sai_thrift_create_virtual_router(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_virtual_router(self, vr_id):
        """
        Parameters:
         - vr_id

        """
        pass

    def sai_thrift_set_virtual_router_attribute(self, vr_id, thrift_attr):
        """
        Parameters:
         - vr_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_virtual_router_attribute(self, vr_id):
        """
        Parameters:
         - vr_id

        """
        pass

    def sai_thrift_create_route(self, thrift_route_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_route_entry
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_route(self, thrift_route_entry):
        """
        Parameters:
         - thrift_route_entry

        """
        pass

    def sai_thrift_set_route_attribute(self, thrift_route_entry, thrift_attr):
        """
        Parameters:
         - thrift_route_entry
         - thrift_attr

        """
        pass

    def sai_thrift_get_route_attribute(self, thrift_route_entry):
        """
        Parameters:
         - thrift_route_entry

        """
        pass

    def sai_thrift_create_routes(self, thrift_route_entry_list, thrift_attr_list, thrift_attr_count_lists, mode):
        """
        Parameters:
         - thrift_route_entry_list
         - thrift_attr_list
         - thrift_attr_count_lists
         - mode

        """
        pass

    def sai_thrift_remove_routes(self, thrift_route_entry_list, mode):
        """
        Parameters:
         - thrift_route_entry_list
         - mode

        """
        pass

    def sai_thrift_set_routes_attribute(self, thrift_route_entry_list, thrift_attr_list, mode):
        """
        Parameters:
         - thrift_route_entry_list
         - thrift_attr_list
         - mode

        """
        pass

    def sai_thrift_get_routes_attribute(self, thrift_route_entry_list, mode):
        """
        Parameters:
         - thrift_route_entry_list
         - mode

        """
        pass

    def sai_thrift_create_router_interface(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_router_interface(self, rif_id):
        """
        Parameters:
         - rif_id

        """
        pass

    def sai_thrift_set_router_interface_attribute(self, rif_id, thrift_attr):
        """
        Parameters:
         - rif_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_router_interface_attribute(self, rif_id):
        """
        Parameters:
         - rif_id

        """
        pass

    def sai_thrift_router_interface_get_stats(self, rif_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - rif_id
         - thrift_counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_router_interface_get_stats_ext(self, rif_id, thrift_counter_ids, mode, number_of_counters):
        """
        Parameters:
         - rif_id
         - thrift_counter_ids
         - mode
         - number_of_counters

        """
        pass

    def sai_thrift_router_interface_clear_stats(self, rif_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - rif_id
         - thrift_counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_create_next_hop(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_next_hop(self, next_hop_id):
        """
        Parameters:
         - next_hop_id

        """
        pass

    def sai_thrift_get_next_hop_attribute(self, next_hop_id):
        """
        Parameters:
         - next_hop_id

        """
        pass

    def sai_thrift_create_next_hop_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_next_hop_group(self, nhop_group_oid):
        """
        Parameters:
         - nhop_group_oid

        """
        pass

    def sai_thrift_set_next_hop_group_attribute(self, nhop_group_oid, thrift_attr):
        """
        Parameters:
         - nhop_group_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_next_hop_group_attribute(self, nhop_group_oid):
        """
        Parameters:
         - nhop_group_oid

        """
        pass

    def sai_thrift_create_next_hop_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_next_hop_group_member(self, nhop_group_member_oid):
        """
        Parameters:
         - nhop_group_member_oid

        """
        pass

    def sai_thrift_get_next_hop_group_member_attribute(self, nhop_group_member_oid):
        """
        Parameters:
         - nhop_group_member_oid

        """
        pass

    def sai_thrift_get_next_hop_group_member_attribute_ecmp(self, nhop_group_member_oid):
        """
        Parameters:
         - nhop_group_member_oid

        """
        pass

    def sai_thrift_create_next_hop_group_members(self, thrift_attr_lists, thrift_attr_count_lists, mode):
        """
        Parameters:
         - thrift_attr_lists
         - thrift_attr_count_lists
         - mode

        """
        pass

    def sai_thrift_remove_next_hop_group_members(self, thrift_object_id_list, mode):
        """
        Parameters:
         - thrift_object_id_list
         - mode

        """
        pass

    def sai_thrift_create_lag(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_lag(self, lag_id):
        """
        Parameters:
         - lag_id

        """
        pass

    def sai_thrift_set_lag_attribute(self, lag_id, thrift_attr):
        """
        Parameters:
         - lag_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_lag_attribute(self, lag_id):
        """
        Parameters:
         - lag_id

        """
        pass

    def sai_thrift_create_lag_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_lag_member(self, lag_member_id):
        """
        Parameters:
         - lag_member_id

        """
        pass

    def sai_thrift_set_lag_member_attribute(self, lag_member_id, thrift_attr):
        """
        Parameters:
         - lag_member_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_lag_member_attribute(self, lag_member_id):
        """
        Parameters:
         - lag_member_id

        """
        pass

    def sai_thrift_create_stp_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_stp_entry(self, stp_id):
        """
        Parameters:
         - stp_id

        """
        pass

    def sai_thrift_get_stp_attribute(self, stp_id):
        """
        Parameters:
         - stp_id

        """
        pass

    def sai_thrift_create_stp_port(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_stp_port(self, stp_port_id):
        """
        Parameters:
         - stp_port_id

        """
        pass

    def sai_thrift_get_stp_port_attribute(self, stp_port_id):
        """
        Parameters:
         - stp_port_id

        """
        pass

    def sai_thrift_set_stp_port_state(self, stp_id, port_id, stp_port_state):
        """
        Parameters:
         - stp_id
         - port_id
         - stp_port_state

        """
        pass

    def sai_thrift_get_stp_port_state(self, stp_id, port_id):
        """
        Parameters:
         - stp_id
         - port_id

        """
        pass

    def sai_thrift_create_stp_ports(self, thrift_attr_lists, thrift_attr_count_lists, mode):
        """
        Parameters:
         - thrift_attr_lists
         - thrift_attr_count_lists
         - mode

        """
        pass

    def sai_thrift_remove_stp_ports(self, thrift_object_id_list, mode):
        """
        Parameters:
         - thrift_object_id_list
         - mode

        """
        pass

    def sai_thrift_create_neighbor_entry(self, thrift_neighbor_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_neighbor_entry
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_neighbor_entry(self, thrift_neighbor_entry):
        """
        Parameters:
         - thrift_neighbor_entry

        """
        pass

    def sai_thrift_remove_all_neighbor_entry(self):
        pass

    def sai_thrift_set_neighbor_entry_attribute(self, thrift_neighbor_entry, thrift_attr):
        """
        Parameters:
         - thrift_neighbor_entry
         - thrift_attr

        """
        pass

    def sai_thrift_get_neighbor_entry_attribute(self, thrift_neighbor_entry):
        """
        Parameters:
         - thrift_neighbor_entry

        """
        pass

    def sai_thrift_get_switch_attribute(self, thrift_attr_ids):
        """
        Parameters:
         - thrift_attr_ids

        """
        pass

    def sai_thrift_get_port_list_by_front_port(self):
        pass

    def sai_thrift_get_cpu_port_id(self):
        pass

    def sai_thrift_get_default_trap_group(self):
        pass

    def sai_thrift_get_default_router_id(self):
        pass

    def sai_thrift_get_default_1q_bridge_id(self):
        pass

    def sai_thrift_get_default_vlan_id(self):
        pass

    def sai_thrift_get_port_id_by_front_port(self, port_name):
        """
        Parameters:
         - port_name

        """
        pass

    def sai_thrift_set_switch_attribute(self, attribute):
        """
        Parameters:
         - attribute

        """
        pass

    def sai_thrift_create_switch(self):
        pass

    def sai_thrift_remove_switch(self):
        pass

    def sai_thrift_get_switch_stats(self, counter_ids, number_of_counters):
        """
        Parameters:
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_get_switch_stats_ext(self, counter_ids, mode, number_of_counters):
        """
        Parameters:
         - counter_ids
         - mode
         - number_of_counters

        """
        pass

    def sai_thrift_clear_switch_stats(self, counter_ids, number_of_counters):
        """
        Parameters:
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_create_bridge_port(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_bridge_port(self, bridge_port_id):
        """
        Parameters:
         - bridge_port_id

        """
        pass

    def sai_thrift_get_bridge_port_list(self, bridge_id):
        """
        Parameters:
         - bridge_id

        """
        pass

    def sai_thrift_get_bridge_port_attribute(self, bridge_port_id):
        """
        Parameters:
         - bridge_port_id

        """
        pass

    def sai_thrift_set_bridge_port_attribute(self, bridge_port_id, thrift_attr):
        """
        Parameters:
         - bridge_port_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_bridge(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_bridge(self, bridge_id):
        """
        Parameters:
         - bridge_id

        """
        pass

    def sai_thrift_get_bridge_attribute(self, bridge_id):
        """
        Parameters:
         - bridge_id

        """
        pass

    def sai_thrift_set_bridge_attribute(self, bridge_id, thrift_attr):
        """
        Parameters:
         - bridge_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_bridge_port_stats(self, bridge_port_id, counter_ids, number_of_counters):
        """
        Parameters:
         - bridge_port_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_get_bridge_port_stats_ext(self, bridge_port_id, thrift_counter_ids, mode, number_of_counters):
        """
        Parameters:
         - bridge_port_id
         - thrift_counter_ids
         - mode
         - number_of_counters

        """
        pass

    def sai_thrift_clear_bridge_port_stats(self, bridge_port_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - bridge_port_id
         - thrift_counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_create_hostif(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_hostif(self, thrift_hif_id):
        """
        Parameters:
         - thrift_hif_id

        """
        pass

    def sai_thrift_get_hostif_attribute(self, thrift_hif_id):
        """
        Parameters:
         - thrift_hif_id

        """
        pass

    def sai_thrift_set_hostif_attribute(self, thrift_hif_id, thrift_attr):
        """
        Parameters:
         - thrift_hif_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_hostif_table_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_hostif_table_entry(self, thrift_hostif_table_entry_id):
        """
        Parameters:
         - thrift_hostif_table_entry_id

        """
        pass

    def sai_thrift_get_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id):
        """
        Parameters:
         - thrift_hostif_table_entry_id

        """
        pass

    def sai_thrift_set_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id, thrift_attr):
        """
        Parameters:
         - thrift_hostif_table_entry_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_hostif_trap_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_hostif_trap_group(self, thrift_hostif_trap_group_id):
        """
        Parameters:
         - thrift_hostif_trap_group_id

        """
        pass

    def sai_thrift_get_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id):
        """
        Parameters:
         - thrift_hostif_trap_group_id

        """
        pass

    def sai_thrift_set_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id, thrift_attr):
        """
        Parameters:
         - thrift_hostif_trap_group_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_hostif_trap(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_hostif_trap(self, thrift_hostif_trap_id):
        """
        Parameters:
         - thrift_hostif_trap_id

        """
        pass

    def sai_thrift_get_hostif_trap_attribute(self, thrift_hostif_trap_id):
        """
        Parameters:
         - thrift_hostif_trap_id

        """
        pass

    def sai_thrift_set_hostif_trap_attribute(self, thrift_hostif_trap_id, thrift_attr):
        """
        Parameters:
         - thrift_hostif_trap_id
         - thrift_attr

        """
        pass

    def sai_thrift_send_hostif_packet(self, thrift_hif_id, packet_data, thrift_attr_list):
        """
        Parameters:
         - thrift_hif_id
         - packet_data
         - thrift_attr_list

        """
        pass

    def sai_thrift_create_acl_table(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_acl_table(self, acl_table_id):
        """
        Parameters:
         - acl_table_id

        """
        pass

    def sai_thrift_get_acl_table_attribute(self, acl_table_id, thrift_attr_ids):
        """
        Parameters:
         - acl_table_id
         - thrift_attr_ids

        """
        pass

    def sai_thrift_create_acl_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_acl_entry(self, acl_entry):
        """
        Parameters:
         - acl_entry

        """
        pass

    def sai_thrift_set_acl_entry_attribute(self, acl_entry_id, thrift_attr):
        """
        Parameters:
         - acl_entry_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_acl_entry_attribute(self, acl_entry_id, thrift_attr_ids):
        """
        Parameters:
         - acl_entry_id
         - thrift_attr_ids

        """
        pass

    def sai_thrift_create_acl_table_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_acl_table_group(self, acl_table_group_id):
        """
        Parameters:
         - acl_table_group_id

        """
        pass

    def sai_thrift_get_acl_table_group_attribute(self, acl_table_group_id):
        """
        Parameters:
         - acl_table_group_id

        """
        pass

    def sai_thrift_create_acl_table_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_acl_table_group_member(self, acl_table_group_member_id):
        """
        Parameters:
         - acl_table_group_member_id

        """
        pass

    def sai_thrift_get_acl_table_group_member_attribute(self, acl_table_group_member_id):
        """
        Parameters:
         - acl_table_group_member_id

        """
        pass

    def sai_thrift_create_acl_counter(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_acl_counter(self, acl_counter_id):
        """
        Parameters:
         - acl_counter_id

        """
        pass

    def sai_thrift_get_acl_counter_attribute(self, acl_counter_id):
        """
        Parameters:
         - acl_counter_id

        """
        pass

    def sai_thrift_set_acl_counter_attribute(self, acl_counter_id, thrift_attr):
        """
        Parameters:
         - acl_counter_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_acl_range(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_acl_range(self, acl_range_id):
        """
        Parameters:
         - acl_range_id

        """
        pass

    def sai_thrift_get_acl_range_attribute(self, acl_range_id):
        """
        Parameters:
         - acl_range_id

        """
        pass

    def sai_thrift_create_hash(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_hash(self, hash_id):
        """
        Parameters:
         - hash_id

        """
        pass

    def sai_thrift_set_hash_attribute(self, thrift_hash_id, thrift_attr):
        """
        Parameters:
         - thrift_hash_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_hash_attribute(self, thrift_hash_id):
        """
        Parameters:
         - thrift_hash_id

        """
        pass

    def sai_thrift_create_udf_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_udf_group(self, udf_group_id):
        """
        Parameters:
         - udf_group_id

        """
        pass

    def sai_thrift_get_udf_group_attribute(self, thrift_udf_group_id):
        """
        Parameters:
         - thrift_udf_group_id

        """
        pass

    def sai_thrift_create_udf_match(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_udf_match(self, udf_match_id):
        """
        Parameters:
         - udf_match_id

        """
        pass

    def sai_thrift_get_udf_match_attribute(self, thrift_udf_match_id):
        """
        Parameters:
         - thrift_udf_match_id

        """
        pass

    def sai_thrift_create_udf(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_udf(self, udf_id):
        """
        Parameters:
         - udf_id

        """
        pass

    def sai_thrift_set_udf_attribute(self, thrift_udf_id, thrift_attr):
        """
        Parameters:
         - thrift_udf_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_udf_attribute(self, thrift_udf_id):
        """
        Parameters:
         - thrift_udf_id

        """
        pass

    def sai_thrift_create_twamp_session(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_twamp_session(self, session_id):
        """
        Parameters:
         - session_id

        """
        pass

    def sai_thrift_set_twamp_attribute(self, thrift_twamp_session_id, thrift_attr):
        """
        Parameters:
         - thrift_twamp_session_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_twamp_attribute(self, thrift_twamp_session_id):
        """
        Parameters:
         - thrift_twamp_session_id

        """
        pass

    def sai_thrift_get_twamp_session_stats(self, twamp_id, counter_ids, number_of_counters):
        """
        Parameters:
         - twamp_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_clear_twamp_session_stats(self, twamp_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - twamp_id
         - thrift_counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_create_mirror_session(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_mirror_session(self, session_id):
        """
        Parameters:
         - session_id

        """
        pass

    def sai_thrift_set_mirror_attribute(self, thrift_mirror_id, thrift_attr):
        """
        Parameters:
         - thrift_mirror_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_mirror_attribute(self, thrift_mirror_id):
        """
        Parameters:
         - thrift_mirror_id

        """
        pass

    def sai_thrift_create_inseg_entry(self, thrift_inseg_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_inseg_entry
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_inseg_entry(self, thrift_inseg_entry):
        """
        Parameters:
         - thrift_inseg_entry

        """
        pass

    def sai_thrift_set_inseg_entry_attribute(self, thrift_inseg_entry, thrift_attr):
        """
        Parameters:
         - thrift_inseg_entry
         - thrift_attr

        """
        pass

    def sai_thrift_get_inseg_entry_attribute(self, thrift_inseg_entry):
        """
        Parameters:
         - thrift_inseg_entry

        """
        pass

    def sai_thrift_dump_log(self, dump_file_name):
        """
        Parameters:
         - dump_file_name

        """
        pass

    def sai_thrift_create_policer(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_policer(self, thrift_policer_id):
        """
        Parameters:
         - thrift_policer_id

        """
        pass

    def sai_thrift_get_policer_attribute(self, thrift_policer_id):
        """
        Parameters:
         - thrift_policer_id

        """
        pass

    def sai_thrift_set_policer_attribute(self, thrift_policer_id, thrift_attr):
        """
        Parameters:
         - thrift_policer_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_policer_stats(self, thrift_policer_id, thrift_counter_ids):
        """
        Parameters:
         - thrift_policer_id
         - thrift_counter_ids

        """
        pass

    def sai_thrift_get_policer_stats_ext(self, thrift_policer_id, thrift_counter_ids, mode):
        """
        Parameters:
         - thrift_policer_id
         - thrift_counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_policer_stats(self, thrift_policer_id, thrift_counter_ids):
        """
        Parameters:
         - thrift_policer_id
         - thrift_counter_ids

        """
        pass

    def sai_thrift_create_scheduler_profile(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_scheduler_profile(self, scheduler_id):
        """
        Parameters:
         - scheduler_id

        """
        pass

    def sai_thrift_get_scheduler_attribute(self, thrift_scheduler_id):
        """
        Parameters:
         - thrift_scheduler_id

        """
        pass

    def sai_thrift_set_scheduler_attribute(self, thrift_scheduler_id, thrift_attr):
        """
        Parameters:
         - thrift_scheduler_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_scheduler_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_scheduler_group(self, scheduler_group_id):
        """
        Parameters:
         - scheduler_group_id

        """
        pass

    def sai_thrift_get_scheduler_group_attribute(self, scheduler_group_id):
        """
        Parameters:
         - scheduler_group_id

        """
        pass

    def sai_thrift_set_scheduler_group_attribute(self, scheduler_group_id, thrift_attr):
        """
        Parameters:
         - scheduler_group_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_queue_stats(self, queue_id, counter_ids, number_of_counters):
        """
        Parameters:
         - queue_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_clear_queue_stats(self, queue_id, counter_ids, number_of_counters):
        """
        Parameters:
         - queue_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_create_queue(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_queue(self, queue_id):
        """
        Parameters:
         - queue_id

        """
        pass

    def sai_thrift_get_queue_attribute(self, queue_id):
        """
        Parameters:
         - queue_id

        """
        pass

    def sai_thrift_set_queue_attribute(self, queue_id, thrift_attr):
        """
        Parameters:
         - queue_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_buffer_profile(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_buffer_profile(self, buffer_profile_id):
        """
        Parameters:
         - buffer_profile_id

        """
        pass

    def sai_thrift_get_buffer_profile_attribute(self, buffer_profile_id):
        """
        Parameters:
         - buffer_profile_id

        """
        pass

    def sai_thrift_set_buffer_profile_attribute(self, buffer_profile_id, thrift_attr):
        """
        Parameters:
         - buffer_profile_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_pool_profile(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_create_priority_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_priority_group(self, priority_group_id):
        """
        Parameters:
         - priority_group_id

        """
        pass

    def sai_thrift_get_priority_group_attribute(self, priority_group_id):
        """
        Parameters:
         - priority_group_id

        """
        pass

    def sai_thrift_set_priority_group_attribute(self, pg_id, thrift_attr):
        """
        Parameters:
         - pg_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_pg_stats(self, pg_id, counter_ids, number_of_counters):
        """
        Parameters:
         - pg_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_create_wred_profile(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_wred_profile(self, wred_id):
        """
        Parameters:
         - wred_id

        """
        pass

    def sai_thrift_get_wred_attribute_profile(self, wred_id):
        """
        Parameters:
         - wred_id

        """
        pass

    def sai_thrift_set_wred_attribute_profile(self, wred_id, thrift_attr):
        """
        Parameters:
         - wred_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_qos_map(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_qos_map(self, qos_map_id):
        """
        Parameters:
         - qos_map_id

        """
        pass

    def sai_thrift_get_qos_map_attribute(self, qos_map_id):
        """
        Parameters:
         - qos_map_id

        """
        pass

    def sai_thrift_set_qos_map_attribute(self, qos_map_id, thrift_attr):
        """
        Parameters:
         - qos_map_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_l2mc_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_l2mc_group(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        pass

    def sai_thrift_get_l2mc_group_attribute(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        pass

    def sai_thrift_create_l2mc_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_l2mc_group_member(self, member_id):
        """
        Parameters:
         - member_id

        """
        pass

    def sai_thrift_set_l2mc_group_member_attribute(self, member_id, thrift_attr):
        """
        Parameters:
         - member_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_l2mc_group_member_attribute(self, member_id):
        """
        Parameters:
         - member_id

        """
        pass

    def sai_thrift_create_l2mc_entry(self, thrift_l2mc_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_l2mc_entry
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_l2mc_entry(self, thrift_l2mc_entry):
        """
        Parameters:
         - thrift_l2mc_entry

        """
        pass

    def sai_thrift_set_l2mc_entry_attribute(self, thrift_l2mc_entry, thrift_attr):
        """
        Parameters:
         - thrift_l2mc_entry
         - thrift_attr

        """
        pass

    def sai_thrift_get_l2mc_entry_attribute(self, thrift_l2mc_entry):
        """
        Parameters:
         - thrift_l2mc_entry

        """
        pass

    def sai_thrift_create_mcast_fdb_entry(self, thrift_mcast_fdb_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_mcast_fdb_entry
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_mcast_fdb_entry(self, thrift_mcast_fdb_entry):
        """
        Parameters:
         - thrift_mcast_fdb_entry

        """
        pass

    def sai_thrift_set_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry, thrift_attr):
        """
        Parameters:
         - thrift_mcast_fdb_entry
         - thrift_attr

        """
        pass

    def sai_thrift_get_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry):
        """
        Parameters:
         - thrift_mcast_fdb_entry

        """
        pass

    def sai_thrift_create_ipmc_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_ipmc_group(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        pass

    def sai_thrift_get_ipmc_group_attribute(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        pass

    def sai_thrift_create_ipmc_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_ipmc_group_member(self, member_id):
        """
        Parameters:
         - member_id

        """
        pass

    def sai_thrift_set_ipmc_group_member_attribute(self, member_id, thrift_attr):
        """
        Parameters:
         - member_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_ipmc_group_member_attribute(self, member_id):
        """
        Parameters:
         - member_id

        """
        pass

    def sai_thrift_create_rpf_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_rpf_group(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        pass

    def sai_thrift_get_rpf_group_attribute(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        pass

    def sai_thrift_create_rpf_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_rpf_group_member(self, member_id):
        """
        Parameters:
         - member_id

        """
        pass

    def sai_thrift_set_rpf_group_member_attribute(self, member_id, thrift_attr):
        """
        Parameters:
         - member_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_rpf_group_member_attribute(self, member_id):
        """
        Parameters:
         - member_id

        """
        pass

    def sai_thrift_create_ipmc_entry(self, thrift_ipmc_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_ipmc_entry
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_ipmc_entry(self, thrift_ipmc_entry):
        """
        Parameters:
         - thrift_ipmc_entry

        """
        pass

    def sai_thrift_set_ipmc_entry_attribute(self, thrift_ipmc_entry, thrift_attr):
        """
        Parameters:
         - thrift_ipmc_entry
         - thrift_attr

        """
        pass

    def sai_thrift_get_ipmc_entry_attribute(self, thrift_ipmc_entry):
        """
        Parameters:
         - thrift_ipmc_entry

        """
        pass

    def sai_thrift_create_samplepacket(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_samplepacket(self, samplepacket_id):
        """
        Parameters:
         - samplepacket_id

        """
        pass

    def sai_thrift_get_samplepacket_attribute(self, samplepacket_id):
        """
        Parameters:
         - samplepacket_id

        """
        pass

    def sai_thrift_set_samplepacket_attribute(self, samplepacket_id, thrift_attr):
        """
        Parameters:
         - samplepacket_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_tunnel_map_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_tunnel_map_entry(self, tunnel_map_entry_id):
        """
        Parameters:
         - tunnel_map_entry_id

        """
        pass

    def sai_thrift_get_tunnel_map_entry_attribute(self, tunnel_map_entry_id):
        """
        Parameters:
         - tunnel_map_entry_id

        """
        pass

    def sai_thrift_set_tunnel_map_entry_attribute(self, tunnel_map_entry_id, thrift_attr):
        """
        Parameters:
         - tunnel_map_entry_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_tunnel_map(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_tunnel_map(self, tunnel_map_id):
        """
        Parameters:
         - tunnel_map_id

        """
        pass

    def sai_thrift_get_tunnel_map_attribute(self, tunnel_map_id):
        """
        Parameters:
         - tunnel_map_id

        """
        pass

    def sai_thrift_set_tunnel_map_attribute(self, tunnel_map_id, thrift_attr):
        """
        Parameters:
         - tunnel_map_id
         - thrift_attr

        """
        pass

    def sai_thrift_create_tunnel(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_tunnel(self, tunnel_id):
        """
        Parameters:
         - tunnel_id

        """
        pass

    def sai_thrift_get_tunnel_attribute(self, tunnel_id, thrift_attr_ids):
        """
        Parameters:
         - tunnel_id
         - thrift_attr_ids

        """
        pass

    def sai_thrift_set_tunnel_attribute(self, tunnel_id, thrift_attr):
        """
        Parameters:
         - tunnel_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
        """
        Parameters:
         - tunnel_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_clear_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
        """
        Parameters:
         - tunnel_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_create_tunnel_term_table_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_tunnel_term_table_entry(self, tunnel_term_table_entry_id):
        """
        Parameters:
         - tunnel_term_table_entry_id

        """
        pass

    def sai_thrift_get_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr_ids):
        """
        Parameters:
         - tunnel_term_table_entry_id
         - thrift_attr_ids

        """
        pass

    def sai_thrift_set_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr):
        """
        Parameters:
         - tunnel_term_table_entry_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_cpu_packet_attribute(self):
        pass

    def sai_thrift_get_cpu_packet_count(self):
        pass

    def sai_thrift_clear_cpu_packet_info(self):
        pass

    def sai_thrift_log_set(self, sai_api_id, log_level):
        """
        Parameters:
         - sai_api_id
         - log_level

        """
        pass

    def sai_thrift_create_isolation_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_isolation_group(self, iso_group_oid):
        """
        Parameters:
         - iso_group_oid

        """
        pass

    def sai_thrift_create_isolation_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_isolation_group_member(self, member_oid):
        """
        Parameters:
         - member_oid

        """
        pass

    def sai_thrift_get_isolation_group_attributes(self, iso_group_oid):
        """
        Parameters:
         - iso_group_oid

        """
        pass

    def sai_thrift_get_isolation_group_member_attributes(self, member_oid):
        """
        Parameters:
         - member_oid

        """
        pass

    def sai_thrift_create_counter(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_counter(self, counter_oid):
        """
        Parameters:
         - counter_oid

        """
        pass

    def sai_thrift_set_counter_attribute(self, thrift_counter_id, thrift_attr):
        """
        Parameters:
         - thrift_counter_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_counter_attribute(self, thrift_counter_id):
        """
        Parameters:
         - thrift_counter_id

        """
        pass

    def sai_thrift_get_counter_stats(self, counter_id, counter_ids, number_of_counters):
        """
        Parameters:
         - counter_id
         - counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_get_counter_stats_ext(self, counter_id, counter_ids, mode, number_of_counters):
        """
        Parameters:
         - counter_id
         - counter_ids
         - mode
         - number_of_counters

        """
        pass

    def sai_thrift_clear_counter_stats(self, counter_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - counter_id
         - thrift_counter_ids
         - number_of_counters

        """
        pass

    def sai_thrift_create_debug_counter(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_debug_counter(self, debug_counter_oid):
        """
        Parameters:
         - debug_counter_oid

        """
        pass

    def sai_thrift_set_debug_counter_attribute(self, thrift_debug_counter_id, thrift_attr):
        """
        Parameters:
         - thrift_debug_counter_id
         - thrift_attr

        """
        pass

    def sai_thrift_get_debug_counter_attribute(self, thrift_debug_counter_id):
        """
        Parameters:
         - thrift_debug_counter_id

        """
        pass

    def sai_thrift_create_nat(self, thrift_nat_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_nat_entry
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_nat(self, thrift_nat_entry):
        """
        Parameters:
         - thrift_nat_entry

        """
        pass

    def sai_thrift_set_nat_attribute(self, thrift_nat_entry, thrift_attr):
        """
        Parameters:
         - thrift_nat_entry
         - thrift_attr

        """
        pass

    def sai_thrift_get_nat_attribute(self, thrift_nat_entry):
        """
        Parameters:
         - thrift_nat_entry

        """
        pass

    def sai_thrift_create_bfd(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_bfd(self, bfd_oid):
        """
        Parameters:
         - bfd_oid

        """
        pass

    def sai_thrift_set_bfd_attribute(self, bfd_oid, thrift_attr):
        """
        Parameters:
         - bfd_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_bfd_attribute(self, bfd_oid):
        """
        Parameters:
         - bfd_oid

        """
        pass

    def sai_thrift_create_y1731_meg(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_y1731_meg(self, y1731_meg_oid):
        """
        Parameters:
         - y1731_meg_oid

        """
        pass

    def sai_thrift_set_y1731_meg_attribute(self, y1731_meg_oid, thrift_attr):
        """
        Parameters:
         - y1731_meg_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_y1731_meg_attribute(self, y1731_meg_oid):
        """
        Parameters:
         - y1731_meg_oid

        """
        pass

    def sai_thrift_create_y1731_session(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_y1731_session(self, y1731_session_oid):
        """
        Parameters:
         - y1731_session_oid

        """
        pass

    def sai_thrift_set_y1731_session_attribute(self, y1731_session_oid, thrift_attr):
        """
        Parameters:
         - y1731_session_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_y1731_session_attribute(self, y1731_session_oid):
        """
        Parameters:
         - y1731_session_oid

        """
        pass

    def sai_thrift_create_y1731_rmep(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_y1731_rmep(self, y1731_rmep_oid):
        """
        Parameters:
         - y1731_rmep_oid

        """
        pass

    def sai_thrift_set_y1731_rmep_attribute(self, y1731_rmep_oid, thrift_attr):
        """
        Parameters:
         - y1731_rmep_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_y1731_rmep_attribute(self, y1731_rmep_oid):
        """
        Parameters:
         - y1731_rmep_oid

        """
        pass

    def sai_thrift_get_y1731_session_lm_stats(self, y1731_session_oid, lm_stats_ids, number_of_stats):
        """
        Parameters:
         - y1731_session_oid
         - lm_stats_ids
         - number_of_stats

        """
        pass

    def sai_thrift_create_port(self, port_name, thrift_attr_list):
        """
        Parameters:
         - port_name
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_port(self, port_oid):
        """
        Parameters:
         - port_oid

        """
        pass

    def sai_thrift_create_ptp_domain(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_ptp_domain(self, ptp_oid):
        """
        Parameters:
         - ptp_oid

        """
        pass

    def sai_thrift_set_ptp_domain_attribute(self, ptp_oid, thrift_attr):
        """
        Parameters:
         - ptp_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_ptp_domain_attribute(self, ptp_oid):
        """
        Parameters:
         - ptp_oid

        """
        pass

    def sai_thrift_create_synce(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_synce(self, synce_oid):
        """
        Parameters:
         - synce_oid

        """
        pass

    def sai_thrift_set_synce_attribute(self, synce_oid, thrift_attr):
        """
        Parameters:
         - synce_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_synce_attribute(self, synce_oid):
        """
        Parameters:
         - synce_oid

        """
        pass

    def sai_thrift_create_es(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_es(self, es_oid):
        """
        Parameters:
         - es_oid

        """
        pass

    def sai_thrift_set_es_attribute(self, es_oid, thrift_attr):
        """
        Parameters:
         - es_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_es_attribute(self, es_oid):
        """
        Parameters:
         - es_oid

        """
        pass

    def sai_thrift_create_monitor_buffer(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_monitor_buffer(self, monitor_buffer_oid):
        """
        Parameters:
         - monitor_buffer_oid

        """
        pass

    def sai_thrift_set_monitor_buffer_attribute(self, monitor_buffer_oid, thrift_attr):
        """
        Parameters:
         - monitor_buffer_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_monitor_buffer_attribute(self, monitor_buffer_oid):
        """
        Parameters:
         - monitor_buffer_oid

        """
        pass

    def sai_thrift_create_monitor_latency(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        pass

    def sai_thrift_remove_monitor_latency(self, monitor_latency_oid):
        """
        Parameters:
         - monitor_latency_oid

        """
        pass

    def sai_thrift_set_monitor_latency_attribute(self, monitor_latency_oid, thrift_attr):
        """
        Parameters:
         - monitor_latency_oid
         - thrift_attr

        """
        pass

    def sai_thrift_get_monitor_latency_attribute(self, monitor_latency_oid):
        """
        Parameters:
         - monitor_latency_oid

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def sai_thrift_set_port_attribute(self, port_id, thrift_attr):
        """
        Parameters:
         - port_id
         - thrift_attr

        """
        self.send_sai_thrift_set_port_attribute(port_id, thrift_attr)
        return self.recv_sai_thrift_set_port_attribute()

    def send_sai_thrift_set_port_attribute(self, port_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_port_attribute_args()
        args.port_id = port_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_port_attribute failed: unknown result")

    def sai_thrift_get_port_attribute(self, port_id):
        """
        Parameters:
         - port_id

        """
        self.send_sai_thrift_get_port_attribute(port_id)
        return self.recv_sai_thrift_get_port_attribute()

    def send_sai_thrift_get_port_attribute(self, port_id):
        self._oprot.writeMessageBegin('sai_thrift_get_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_attribute_args()
        args.port_id = port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_attribute failed: unknown result")

    def sai_thrift_get_port_stats(self, port_id, counter_ids, number_of_counters):
        """
        Parameters:
         - port_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_get_port_stats(port_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_get_port_stats()

    def send_sai_thrift_get_port_stats(self, port_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_stats_args()
        args.port_id = port_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_stats failed: unknown result")

    def sai_thrift_get_port_stats_ext(self, port_id, counter_ids, mode, number_of_counters):
        """
        Parameters:
         - port_id
         - counter_ids
         - mode
         - number_of_counters

        """
        self.send_sai_thrift_get_port_stats_ext(port_id, counter_ids, mode, number_of_counters)
        return self.recv_sai_thrift_get_port_stats_ext()

    def send_sai_thrift_get_port_stats_ext(self, port_id, counter_ids, mode, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_port_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_stats_ext_args()
        args.port_id = port_id
        args.counter_ids = counter_ids
        args.mode = mode
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_stats_ext failed: unknown result")

    def sai_thrift_clear_port_all_stats(self, port_id):
        """
        Parameters:
         - port_id

        """
        self.send_sai_thrift_clear_port_all_stats(port_id)
        return self.recv_sai_thrift_clear_port_all_stats()

    def send_sai_thrift_clear_port_all_stats(self, port_id):
        self._oprot.writeMessageBegin('sai_thrift_clear_port_all_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_port_all_stats_args()
        args.port_id = port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_port_all_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_port_all_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_port_all_stats failed: unknown result")

    def sai_thrift_clear_port_stats(self, port_id, number_of_counters, counter_ids):
        """
        Parameters:
         - port_id
         - number_of_counters
         - counter_ids

        """
        self.send_sai_thrift_clear_port_stats(port_id, number_of_counters, counter_ids)
        return self.recv_sai_thrift_clear_port_stats()

    def send_sai_thrift_clear_port_stats(self, port_id, number_of_counters, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_port_stats_args()
        args.port_id = port_id
        args.number_of_counters = number_of_counters
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_port_stats failed: unknown result")

    def sai_thrift_create_fdb_entry(self, thrift_fdb_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_fdb_entry
         - thrift_attr_list

        """
        self.send_sai_thrift_create_fdb_entry(thrift_fdb_entry, thrift_attr_list)
        return self.recv_sai_thrift_create_fdb_entry()

    def send_sai_thrift_create_fdb_entry(self, thrift_fdb_entry, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_fdb_entry_args()
        args.thrift_fdb_entry = thrift_fdb_entry
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_fdb_entry failed: unknown result")

    def sai_thrift_delete_fdb_entry(self, thrift_fdb_entry):
        """
        Parameters:
         - thrift_fdb_entry

        """
        self.send_sai_thrift_delete_fdb_entry(thrift_fdb_entry)
        return self.recv_sai_thrift_delete_fdb_entry()

    def send_sai_thrift_delete_fdb_entry(self, thrift_fdb_entry):
        self._oprot.writeMessageBegin('sai_thrift_delete_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_delete_fdb_entry_args()
        args.thrift_fdb_entry = thrift_fdb_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_delete_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_delete_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_delete_fdb_entry failed: unknown result")

    def sai_thrift_flush_fdb_entries(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_flush_fdb_entries(thrift_attr_list)
        return self.recv_sai_thrift_flush_fdb_entries()

    def send_sai_thrift_flush_fdb_entries(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_flush_fdb_entries', TMessageType.CALL, self._seqid)
        args = sai_thrift_flush_fdb_entries_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_flush_fdb_entries(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_flush_fdb_entries_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_flush_fdb_entries failed: unknown result")

    def sai_thrift_set_fdb_entry_attribute(self, thrift_fdb_entry, thrift_attr):
        """
        Parameters:
         - thrift_fdb_entry
         - thrift_attr

        """
        self.send_sai_thrift_set_fdb_entry_attribute(thrift_fdb_entry, thrift_attr)
        return self.recv_sai_thrift_set_fdb_entry_attribute()

    def send_sai_thrift_set_fdb_entry_attribute(self, thrift_fdb_entry, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_fdb_entry_attribute_args()
        args.thrift_fdb_entry = thrift_fdb_entry
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_fdb_entry_attribute failed: unknown result")

    def sai_thrift_get_fdb_entry_attribute(self, thrift_fdb_entry):
        """
        Parameters:
         - thrift_fdb_entry

        """
        self.send_sai_thrift_get_fdb_entry_attribute(thrift_fdb_entry)
        return self.recv_sai_thrift_get_fdb_entry_attribute()

    def send_sai_thrift_get_fdb_entry_attribute(self, thrift_fdb_entry):
        self._oprot.writeMessageBegin('sai_thrift_get_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_fdb_entry_attribute_args()
        args.thrift_fdb_entry = thrift_fdb_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_fdb_entry_attribute failed: unknown result")

    def sai_thrift_create_vlan(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_vlan(thrift_attr_list)
        return self.recv_sai_thrift_create_vlan()

    def send_sai_thrift_create_vlan(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_vlan', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_vlan_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_vlan(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_vlan_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_vlan failed: unknown result")

    def sai_thrift_remove_vlan(self, vlan_oid):
        """
        Parameters:
         - vlan_oid

        """
        self.send_sai_thrift_remove_vlan(vlan_oid)
        return self.recv_sai_thrift_remove_vlan()

    def send_sai_thrift_remove_vlan(self, vlan_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_vlan', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_vlan_args()
        args.vlan_oid = vlan_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_vlan(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_vlan_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_vlan failed: unknown result")

    def sai_thrift_get_vlan_stats(self, vlan_id, counter_ids, number_of_counters):
        """
        Parameters:
         - vlan_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_get_vlan_stats(vlan_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_get_vlan_stats()

    def send_sai_thrift_get_vlan_stats(self, vlan_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_vlan_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_vlan_stats_args()
        args.vlan_id = vlan_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_vlan_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_vlan_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_stats failed: unknown result")

    def sai_thrift_get_vlan_stats_ext(self, vlan_id, thrift_counter_ids, mode, number_of_counters):
        """
        Parameters:
         - vlan_id
         - thrift_counter_ids
         - mode
         - number_of_counters

        """
        self.send_sai_thrift_get_vlan_stats_ext(vlan_id, thrift_counter_ids, mode, number_of_counters)
        return self.recv_sai_thrift_get_vlan_stats_ext()

    def send_sai_thrift_get_vlan_stats_ext(self, vlan_id, thrift_counter_ids, mode, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_vlan_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_vlan_stats_ext_args()
        args.vlan_id = vlan_id
        args.thrift_counter_ids = thrift_counter_ids
        args.mode = mode
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_vlan_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_vlan_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_stats_ext failed: unknown result")

    def sai_thrift_clear_vlan_stats(self, vlan_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - vlan_id
         - thrift_counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_clear_vlan_stats(vlan_id, thrift_counter_ids, number_of_counters)
        return self.recv_sai_thrift_clear_vlan_stats()

    def send_sai_thrift_clear_vlan_stats(self, vlan_id, thrift_counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_clear_vlan_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_vlan_stats_args()
        args.vlan_id = vlan_id
        args.thrift_counter_ids = thrift_counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_vlan_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_vlan_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_vlan_stats failed: unknown result")

    def sai_thrift_create_vlan_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_vlan_member(thrift_attr_list)
        return self.recv_sai_thrift_create_vlan_member()

    def send_sai_thrift_create_vlan_member(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_vlan_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_vlan_member_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_vlan_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_vlan_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_vlan_member failed: unknown result")

    def sai_thrift_get_vlan_member_attribute(self, vlan_member_id):
        """
        Parameters:
         - vlan_member_id

        """
        self.send_sai_thrift_get_vlan_member_attribute(vlan_member_id)
        return self.recv_sai_thrift_get_vlan_member_attribute()

    def send_sai_thrift_get_vlan_member_attribute(self, vlan_member_id):
        self._oprot.writeMessageBegin('sai_thrift_get_vlan_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_vlan_member_attribute_args()
        args.vlan_member_id = vlan_member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_vlan_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_vlan_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_member_attribute failed: unknown result")

    def sai_thrift_remove_vlan_member(self, vlan_member_id):
        """
        Parameters:
         - vlan_member_id

        """
        self.send_sai_thrift_remove_vlan_member(vlan_member_id)
        return self.recv_sai_thrift_remove_vlan_member()

    def send_sai_thrift_remove_vlan_member(self, vlan_member_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_vlan_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_vlan_member_args()
        args.vlan_member_id = vlan_member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_vlan_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_vlan_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_vlan_member failed: unknown result")

    def sai_thrift_set_vlan_attribute(self, vlan_id, thrift_attr):
        """
        Parameters:
         - vlan_id
         - thrift_attr

        """
        self.send_sai_thrift_set_vlan_attribute(vlan_id, thrift_attr)
        return self.recv_sai_thrift_set_vlan_attribute()

    def send_sai_thrift_set_vlan_attribute(self, vlan_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_vlan_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_vlan_attribute_args()
        args.vlan_id = vlan_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_vlan_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_vlan_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_vlan_attribute failed: unknown result")

    def sai_thrift_set_vlan_member_attribute(self, vlan_member_id, thrift_attr):
        """
        Parameters:
         - vlan_member_id
         - thrift_attr

        """
        self.send_sai_thrift_set_vlan_member_attribute(vlan_member_id, thrift_attr)
        return self.recv_sai_thrift_set_vlan_member_attribute()

    def send_sai_thrift_set_vlan_member_attribute(self, vlan_member_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_vlan_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_vlan_member_attribute_args()
        args.vlan_member_id = vlan_member_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_vlan_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_vlan_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_vlan_member_attribute failed: unknown result")

    def sai_thrift_get_vlan_attribute(self, vlan_id):
        """
        Parameters:
         - vlan_id

        """
        self.send_sai_thrift_get_vlan_attribute(vlan_id)
        return self.recv_sai_thrift_get_vlan_attribute()

    def send_sai_thrift_get_vlan_attribute(self, vlan_id):
        self._oprot.writeMessageBegin('sai_thrift_get_vlan_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_vlan_attribute_args()
        args.vlan_id = vlan_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_vlan_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_vlan_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_attribute failed: unknown result")

    def sai_thrift_get_vlan_id(self, vlan_id):
        """
        Parameters:
         - vlan_id

        """
        self.send_sai_thrift_get_vlan_id(vlan_id)
        return self.recv_sai_thrift_get_vlan_id()

    def send_sai_thrift_get_vlan_id(self, vlan_id):
        self._oprot.writeMessageBegin('sai_thrift_get_vlan_id', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_vlan_id_args()
        args.vlan_id = vlan_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_vlan_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_vlan_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_id failed: unknown result")

    def sai_thrift_create_vlan_members(self, thrift_attr_lists, thrift_attr_count_lists, mode):
        """
        Parameters:
         - thrift_attr_lists
         - thrift_attr_count_lists
         - mode

        """
        self.send_sai_thrift_create_vlan_members(thrift_attr_lists, thrift_attr_count_lists, mode)
        return self.recv_sai_thrift_create_vlan_members()

    def send_sai_thrift_create_vlan_members(self, thrift_attr_lists, thrift_attr_count_lists, mode):
        self._oprot.writeMessageBegin('sai_thrift_create_vlan_members', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_vlan_members_args()
        args.thrift_attr_lists = thrift_attr_lists
        args.thrift_attr_count_lists = thrift_attr_count_lists
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_vlan_members(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_vlan_members_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_vlan_members failed: unknown result")

    def sai_thrift_remove_vlan_members(self, thrift_object_id_list, mode):
        """
        Parameters:
         - thrift_object_id_list
         - mode

        """
        self.send_sai_thrift_remove_vlan_members(thrift_object_id_list, mode)
        return self.recv_sai_thrift_remove_vlan_members()

    def send_sai_thrift_remove_vlan_members(self, thrift_object_id_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_remove_vlan_members', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_vlan_members_args()
        args.thrift_object_id_list = thrift_object_id_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_vlan_members(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_vlan_members_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_vlan_members failed: unknown result")

    def sai_thrift_create_virtual_router(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_virtual_router(thrift_attr_list)
        return self.recv_sai_thrift_create_virtual_router()

    def send_sai_thrift_create_virtual_router(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_virtual_router', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_virtual_router_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_virtual_router(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_virtual_router_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_virtual_router failed: unknown result")

    def sai_thrift_remove_virtual_router(self, vr_id):
        """
        Parameters:
         - vr_id

        """
        self.send_sai_thrift_remove_virtual_router(vr_id)
        return self.recv_sai_thrift_remove_virtual_router()

    def send_sai_thrift_remove_virtual_router(self, vr_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_virtual_router', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_virtual_router_args()
        args.vr_id = vr_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_virtual_router(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_virtual_router_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_virtual_router failed: unknown result")

    def sai_thrift_set_virtual_router_attribute(self, vr_id, thrift_attr):
        """
        Parameters:
         - vr_id
         - thrift_attr

        """
        self.send_sai_thrift_set_virtual_router_attribute(vr_id, thrift_attr)
        return self.recv_sai_thrift_set_virtual_router_attribute()

    def send_sai_thrift_set_virtual_router_attribute(self, vr_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_virtual_router_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_virtual_router_attribute_args()
        args.vr_id = vr_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_virtual_router_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_virtual_router_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_virtual_router_attribute failed: unknown result")

    def sai_thrift_get_virtual_router_attribute(self, vr_id):
        """
        Parameters:
         - vr_id

        """
        self.send_sai_thrift_get_virtual_router_attribute(vr_id)
        return self.recv_sai_thrift_get_virtual_router_attribute()

    def send_sai_thrift_get_virtual_router_attribute(self, vr_id):
        self._oprot.writeMessageBegin('sai_thrift_get_virtual_router_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_virtual_router_attribute_args()
        args.vr_id = vr_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_virtual_router_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_virtual_router_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_virtual_router_attribute failed: unknown result")

    def sai_thrift_create_route(self, thrift_route_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_route_entry
         - thrift_attr_list

        """
        self.send_sai_thrift_create_route(thrift_route_entry, thrift_attr_list)
        return self.recv_sai_thrift_create_route()

    def send_sai_thrift_create_route(self, thrift_route_entry, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_route', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_route_args()
        args.thrift_route_entry = thrift_route_entry
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_route(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_route_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_route failed: unknown result")

    def sai_thrift_remove_route(self, thrift_route_entry):
        """
        Parameters:
         - thrift_route_entry

        """
        self.send_sai_thrift_remove_route(thrift_route_entry)
        return self.recv_sai_thrift_remove_route()

    def send_sai_thrift_remove_route(self, thrift_route_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_route', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_route_args()
        args.thrift_route_entry = thrift_route_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_route(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_route_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_route failed: unknown result")

    def sai_thrift_set_route_attribute(self, thrift_route_entry, thrift_attr):
        """
        Parameters:
         - thrift_route_entry
         - thrift_attr

        """
        self.send_sai_thrift_set_route_attribute(thrift_route_entry, thrift_attr)
        return self.recv_sai_thrift_set_route_attribute()

    def send_sai_thrift_set_route_attribute(self, thrift_route_entry, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_route_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_route_attribute_args()
        args.thrift_route_entry = thrift_route_entry
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_route_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_route_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_route_attribute failed: unknown result")

    def sai_thrift_get_route_attribute(self, thrift_route_entry):
        """
        Parameters:
         - thrift_route_entry

        """
        self.send_sai_thrift_get_route_attribute(thrift_route_entry)
        return self.recv_sai_thrift_get_route_attribute()

    def send_sai_thrift_get_route_attribute(self, thrift_route_entry):
        self._oprot.writeMessageBegin('sai_thrift_get_route_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_route_attribute_args()
        args.thrift_route_entry = thrift_route_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_route_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_route_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_route_attribute failed: unknown result")

    def sai_thrift_create_routes(self, thrift_route_entry_list, thrift_attr_list, thrift_attr_count_lists, mode):
        """
        Parameters:
         - thrift_route_entry_list
         - thrift_attr_list
         - thrift_attr_count_lists
         - mode

        """
        self.send_sai_thrift_create_routes(thrift_route_entry_list, thrift_attr_list, thrift_attr_count_lists, mode)
        return self.recv_sai_thrift_create_routes()

    def send_sai_thrift_create_routes(self, thrift_route_entry_list, thrift_attr_list, thrift_attr_count_lists, mode):
        self._oprot.writeMessageBegin('sai_thrift_create_routes', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_routes_args()
        args.thrift_route_entry_list = thrift_route_entry_list
        args.thrift_attr_list = thrift_attr_list
        args.thrift_attr_count_lists = thrift_attr_count_lists
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_routes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_routes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_routes failed: unknown result")

    def sai_thrift_remove_routes(self, thrift_route_entry_list, mode):
        """
        Parameters:
         - thrift_route_entry_list
         - mode

        """
        self.send_sai_thrift_remove_routes(thrift_route_entry_list, mode)
        return self.recv_sai_thrift_remove_routes()

    def send_sai_thrift_remove_routes(self, thrift_route_entry_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_remove_routes', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_routes_args()
        args.thrift_route_entry_list = thrift_route_entry_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_routes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_routes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_routes failed: unknown result")

    def sai_thrift_set_routes_attribute(self, thrift_route_entry_list, thrift_attr_list, mode):
        """
        Parameters:
         - thrift_route_entry_list
         - thrift_attr_list
         - mode

        """
        self.send_sai_thrift_set_routes_attribute(thrift_route_entry_list, thrift_attr_list, mode)
        return self.recv_sai_thrift_set_routes_attribute()

    def send_sai_thrift_set_routes_attribute(self, thrift_route_entry_list, thrift_attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_set_routes_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_routes_attribute_args()
        args.thrift_route_entry_list = thrift_route_entry_list
        args.thrift_attr_list = thrift_attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_routes_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_routes_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_routes_attribute failed: unknown result")

    def sai_thrift_get_routes_attribute(self, thrift_route_entry_list, mode):
        """
        Parameters:
         - thrift_route_entry_list
         - mode

        """
        self.send_sai_thrift_get_routes_attribute(thrift_route_entry_list, mode)
        return self.recv_sai_thrift_get_routes_attribute()

    def send_sai_thrift_get_routes_attribute(self, thrift_route_entry_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_routes_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_routes_attribute_args()
        args.thrift_route_entry_list = thrift_route_entry_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_routes_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_routes_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_routes_attribute failed: unknown result")

    def sai_thrift_create_router_interface(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_router_interface(thrift_attr_list)
        return self.recv_sai_thrift_create_router_interface()

    def send_sai_thrift_create_router_interface(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_router_interface', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_router_interface_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_router_interface(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_router_interface_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_router_interface failed: unknown result")

    def sai_thrift_remove_router_interface(self, rif_id):
        """
        Parameters:
         - rif_id

        """
        self.send_sai_thrift_remove_router_interface(rif_id)
        return self.recv_sai_thrift_remove_router_interface()

    def send_sai_thrift_remove_router_interface(self, rif_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_router_interface', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_router_interface_args()
        args.rif_id = rif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_router_interface(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_router_interface_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_router_interface failed: unknown result")

    def sai_thrift_set_router_interface_attribute(self, rif_id, thrift_attr):
        """
        Parameters:
         - rif_id
         - thrift_attr

        """
        self.send_sai_thrift_set_router_interface_attribute(rif_id, thrift_attr)
        return self.recv_sai_thrift_set_router_interface_attribute()

    def send_sai_thrift_set_router_interface_attribute(self, rif_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_router_interface_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_router_interface_attribute_args()
        args.rif_id = rif_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_router_interface_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_router_interface_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_router_interface_attribute failed: unknown result")

    def sai_thrift_get_router_interface_attribute(self, rif_id):
        """
        Parameters:
         - rif_id

        """
        self.send_sai_thrift_get_router_interface_attribute(rif_id)
        return self.recv_sai_thrift_get_router_interface_attribute()

    def send_sai_thrift_get_router_interface_attribute(self, rif_id):
        self._oprot.writeMessageBegin('sai_thrift_get_router_interface_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_router_interface_attribute_args()
        args.rif_id = rif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_router_interface_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_router_interface_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_router_interface_attribute failed: unknown result")

    def sai_thrift_router_interface_get_stats(self, rif_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - rif_id
         - thrift_counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_router_interface_get_stats(rif_id, thrift_counter_ids, number_of_counters)
        return self.recv_sai_thrift_router_interface_get_stats()

    def send_sai_thrift_router_interface_get_stats(self, rif_id, thrift_counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_router_interface_get_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_router_interface_get_stats_args()
        args.rif_id = rif_id
        args.thrift_counter_ids = thrift_counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_router_interface_get_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_router_interface_get_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_router_interface_get_stats failed: unknown result")

    def sai_thrift_router_interface_get_stats_ext(self, rif_id, thrift_counter_ids, mode, number_of_counters):
        """
        Parameters:
         - rif_id
         - thrift_counter_ids
         - mode
         - number_of_counters

        """
        self.send_sai_thrift_router_interface_get_stats_ext(rif_id, thrift_counter_ids, mode, number_of_counters)
        return self.recv_sai_thrift_router_interface_get_stats_ext()

    def send_sai_thrift_router_interface_get_stats_ext(self, rif_id, thrift_counter_ids, mode, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_router_interface_get_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_router_interface_get_stats_ext_args()
        args.rif_id = rif_id
        args.thrift_counter_ids = thrift_counter_ids
        args.mode = mode
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_router_interface_get_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_router_interface_get_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_router_interface_get_stats_ext failed: unknown result")

    def sai_thrift_router_interface_clear_stats(self, rif_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - rif_id
         - thrift_counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_router_interface_clear_stats(rif_id, thrift_counter_ids, number_of_counters)
        return self.recv_sai_thrift_router_interface_clear_stats()

    def send_sai_thrift_router_interface_clear_stats(self, rif_id, thrift_counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_router_interface_clear_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_router_interface_clear_stats_args()
        args.rif_id = rif_id
        args.thrift_counter_ids = thrift_counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_router_interface_clear_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_router_interface_clear_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_router_interface_clear_stats failed: unknown result")

    def sai_thrift_create_next_hop(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_next_hop(thrift_attr_list)
        return self.recv_sai_thrift_create_next_hop()

    def send_sai_thrift_create_next_hop(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_next_hop', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_next_hop_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_next_hop(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_next_hop_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop failed: unknown result")

    def sai_thrift_remove_next_hop(self, next_hop_id):
        """
        Parameters:
         - next_hop_id

        """
        self.send_sai_thrift_remove_next_hop(next_hop_id)
        return self.recv_sai_thrift_remove_next_hop()

    def send_sai_thrift_remove_next_hop(self, next_hop_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_next_hop', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_next_hop_args()
        args.next_hop_id = next_hop_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_next_hop(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_next_hop_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop failed: unknown result")

    def sai_thrift_get_next_hop_attribute(self, next_hop_id):
        """
        Parameters:
         - next_hop_id

        """
        self.send_sai_thrift_get_next_hop_attribute(next_hop_id)
        return self.recv_sai_thrift_get_next_hop_attribute()

    def send_sai_thrift_get_next_hop_attribute(self, next_hop_id):
        self._oprot.writeMessageBegin('sai_thrift_get_next_hop_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_next_hop_attribute_args()
        args.next_hop_id = next_hop_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_next_hop_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_next_hop_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_attribute failed: unknown result")

    def sai_thrift_create_next_hop_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_next_hop_group(thrift_attr_list)
        return self.recv_sai_thrift_create_next_hop_group()

    def send_sai_thrift_create_next_hop_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_next_hop_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_next_hop_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_next_hop_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_next_hop_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop_group failed: unknown result")

    def sai_thrift_remove_next_hop_group(self, nhop_group_oid):
        """
        Parameters:
         - nhop_group_oid

        """
        self.send_sai_thrift_remove_next_hop_group(nhop_group_oid)
        return self.recv_sai_thrift_remove_next_hop_group()

    def send_sai_thrift_remove_next_hop_group(self, nhop_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_next_hop_group_args()
        args.nhop_group_oid = nhop_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_next_hop_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_next_hop_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop_group failed: unknown result")

    def sai_thrift_set_next_hop_group_attribute(self, nhop_group_oid, thrift_attr):
        """
        Parameters:
         - nhop_group_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_next_hop_group_attribute(nhop_group_oid, thrift_attr)
        return self.recv_sai_thrift_set_next_hop_group_attribute()

    def send_sai_thrift_set_next_hop_group_attribute(self, nhop_group_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_next_hop_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_next_hop_group_attribute_args()
        args.nhop_group_oid = nhop_group_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_next_hop_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_next_hop_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_next_hop_group_attribute failed: unknown result")

    def sai_thrift_get_next_hop_group_attribute(self, nhop_group_oid):
        """
        Parameters:
         - nhop_group_oid

        """
        self.send_sai_thrift_get_next_hop_group_attribute(nhop_group_oid)
        return self.recv_sai_thrift_get_next_hop_group_attribute()

    def send_sai_thrift_get_next_hop_group_attribute(self, nhop_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_next_hop_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_next_hop_group_attribute_args()
        args.nhop_group_oid = nhop_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_next_hop_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_next_hop_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_group_attribute failed: unknown result")

    def sai_thrift_create_next_hop_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_next_hop_group_member(thrift_attr_list)
        return self.recv_sai_thrift_create_next_hop_group_member()

    def send_sai_thrift_create_next_hop_group_member(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_next_hop_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_next_hop_group_member_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_next_hop_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_next_hop_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop_group_member failed: unknown result")

    def sai_thrift_remove_next_hop_group_member(self, nhop_group_member_oid):
        """
        Parameters:
         - nhop_group_member_oid

        """
        self.send_sai_thrift_remove_next_hop_group_member(nhop_group_member_oid)
        return self.recv_sai_thrift_remove_next_hop_group_member()

    def send_sai_thrift_remove_next_hop_group_member(self, nhop_group_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_next_hop_group_member_args()
        args.nhop_group_member_oid = nhop_group_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_next_hop_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_next_hop_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop_group_member failed: unknown result")

    def sai_thrift_get_next_hop_group_member_attribute(self, nhop_group_member_oid):
        """
        Parameters:
         - nhop_group_member_oid

        """
        self.send_sai_thrift_get_next_hop_group_member_attribute(nhop_group_member_oid)
        return self.recv_sai_thrift_get_next_hop_group_member_attribute()

    def send_sai_thrift_get_next_hop_group_member_attribute(self, nhop_group_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_next_hop_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_next_hop_group_member_attribute_args()
        args.nhop_group_member_oid = nhop_group_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_next_hop_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_next_hop_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_group_member_attribute failed: unknown result")

    def sai_thrift_get_next_hop_group_member_attribute_ecmp(self, nhop_group_member_oid):
        """
        Parameters:
         - nhop_group_member_oid

        """
        self.send_sai_thrift_get_next_hop_group_member_attribute_ecmp(nhop_group_member_oid)
        return self.recv_sai_thrift_get_next_hop_group_member_attribute_ecmp()

    def send_sai_thrift_get_next_hop_group_member_attribute_ecmp(self, nhop_group_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_next_hop_group_member_attribute_ecmp', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_next_hop_group_member_attribute_ecmp_args()
        args.nhop_group_member_oid = nhop_group_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_next_hop_group_member_attribute_ecmp(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_next_hop_group_member_attribute_ecmp_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_group_member_attribute_ecmp failed: unknown result")

    def sai_thrift_create_next_hop_group_members(self, thrift_attr_lists, thrift_attr_count_lists, mode):
        """
        Parameters:
         - thrift_attr_lists
         - thrift_attr_count_lists
         - mode

        """
        self.send_sai_thrift_create_next_hop_group_members(thrift_attr_lists, thrift_attr_count_lists, mode)
        return self.recv_sai_thrift_create_next_hop_group_members()

    def send_sai_thrift_create_next_hop_group_members(self, thrift_attr_lists, thrift_attr_count_lists, mode):
        self._oprot.writeMessageBegin('sai_thrift_create_next_hop_group_members', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_next_hop_group_members_args()
        args.thrift_attr_lists = thrift_attr_lists
        args.thrift_attr_count_lists = thrift_attr_count_lists
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_next_hop_group_members(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_next_hop_group_members_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop_group_members failed: unknown result")

    def sai_thrift_remove_next_hop_group_members(self, thrift_object_id_list, mode):
        """
        Parameters:
         - thrift_object_id_list
         - mode

        """
        self.send_sai_thrift_remove_next_hop_group_members(thrift_object_id_list, mode)
        return self.recv_sai_thrift_remove_next_hop_group_members()

    def send_sai_thrift_remove_next_hop_group_members(self, thrift_object_id_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_group_members', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_next_hop_group_members_args()
        args.thrift_object_id_list = thrift_object_id_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_next_hop_group_members(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_next_hop_group_members_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop_group_members failed: unknown result")

    def sai_thrift_create_lag(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_lag(thrift_attr_list)
        return self.recv_sai_thrift_create_lag()

    def send_sai_thrift_create_lag(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_lag', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_lag_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_lag(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_lag_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_lag failed: unknown result")

    def sai_thrift_remove_lag(self, lag_id):
        """
        Parameters:
         - lag_id

        """
        self.send_sai_thrift_remove_lag(lag_id)
        return self.recv_sai_thrift_remove_lag()

    def send_sai_thrift_remove_lag(self, lag_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_lag', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_lag_args()
        args.lag_id = lag_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_lag(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_lag_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_lag failed: unknown result")

    def sai_thrift_set_lag_attribute(self, lag_id, thrift_attr):
        """
        Parameters:
         - lag_id
         - thrift_attr

        """
        self.send_sai_thrift_set_lag_attribute(lag_id, thrift_attr)
        return self.recv_sai_thrift_set_lag_attribute()

    def send_sai_thrift_set_lag_attribute(self, lag_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_lag_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_lag_attribute_args()
        args.lag_id = lag_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_lag_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_lag_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_lag_attribute failed: unknown result")

    def sai_thrift_get_lag_attribute(self, lag_id):
        """
        Parameters:
         - lag_id

        """
        self.send_sai_thrift_get_lag_attribute(lag_id)
        return self.recv_sai_thrift_get_lag_attribute()

    def send_sai_thrift_get_lag_attribute(self, lag_id):
        self._oprot.writeMessageBegin('sai_thrift_get_lag_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_lag_attribute_args()
        args.lag_id = lag_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_lag_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_lag_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_lag_attribute failed: unknown result")

    def sai_thrift_create_lag_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_lag_member(thrift_attr_list)
        return self.recv_sai_thrift_create_lag_member()

    def send_sai_thrift_create_lag_member(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_lag_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_lag_member_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_lag_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_lag_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_lag_member failed: unknown result")

    def sai_thrift_remove_lag_member(self, lag_member_id):
        """
        Parameters:
         - lag_member_id

        """
        self.send_sai_thrift_remove_lag_member(lag_member_id)
        return self.recv_sai_thrift_remove_lag_member()

    def send_sai_thrift_remove_lag_member(self, lag_member_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_lag_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_lag_member_args()
        args.lag_member_id = lag_member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_lag_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_lag_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_lag_member failed: unknown result")

    def sai_thrift_set_lag_member_attribute(self, lag_member_id, thrift_attr):
        """
        Parameters:
         - lag_member_id
         - thrift_attr

        """
        self.send_sai_thrift_set_lag_member_attribute(lag_member_id, thrift_attr)
        return self.recv_sai_thrift_set_lag_member_attribute()

    def send_sai_thrift_set_lag_member_attribute(self, lag_member_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_lag_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_lag_member_attribute_args()
        args.lag_member_id = lag_member_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_lag_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_lag_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_lag_member_attribute failed: unknown result")

    def sai_thrift_get_lag_member_attribute(self, lag_member_id):
        """
        Parameters:
         - lag_member_id

        """
        self.send_sai_thrift_get_lag_member_attribute(lag_member_id)
        return self.recv_sai_thrift_get_lag_member_attribute()

    def send_sai_thrift_get_lag_member_attribute(self, lag_member_id):
        self._oprot.writeMessageBegin('sai_thrift_get_lag_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_lag_member_attribute_args()
        args.lag_member_id = lag_member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_lag_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_lag_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_lag_member_attribute failed: unknown result")

    def sai_thrift_create_stp_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_stp_entry(thrift_attr_list)
        return self.recv_sai_thrift_create_stp_entry()

    def send_sai_thrift_create_stp_entry(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_stp_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_stp_entry_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_stp_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_stp_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_stp_entry failed: unknown result")

    def sai_thrift_remove_stp_entry(self, stp_id):
        """
        Parameters:
         - stp_id

        """
        self.send_sai_thrift_remove_stp_entry(stp_id)
        return self.recv_sai_thrift_remove_stp_entry()

    def send_sai_thrift_remove_stp_entry(self, stp_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_stp_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_stp_entry_args()
        args.stp_id = stp_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_stp_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_stp_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_stp_entry failed: unknown result")

    def sai_thrift_get_stp_attribute(self, stp_id):
        """
        Parameters:
         - stp_id

        """
        self.send_sai_thrift_get_stp_attribute(stp_id)
        return self.recv_sai_thrift_get_stp_attribute()

    def send_sai_thrift_get_stp_attribute(self, stp_id):
        self._oprot.writeMessageBegin('sai_thrift_get_stp_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_stp_attribute_args()
        args.stp_id = stp_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_stp_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_stp_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_stp_attribute failed: unknown result")

    def sai_thrift_create_stp_port(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_stp_port(thrift_attr_list)
        return self.recv_sai_thrift_create_stp_port()

    def send_sai_thrift_create_stp_port(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_stp_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_stp_port_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_stp_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_stp_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_stp_port failed: unknown result")

    def sai_thrift_remove_stp_port(self, stp_port_id):
        """
        Parameters:
         - stp_port_id

        """
        self.send_sai_thrift_remove_stp_port(stp_port_id)
        return self.recv_sai_thrift_remove_stp_port()

    def send_sai_thrift_remove_stp_port(self, stp_port_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_stp_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_stp_port_args()
        args.stp_port_id = stp_port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_stp_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_stp_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_stp_port failed: unknown result")

    def sai_thrift_get_stp_port_attribute(self, stp_port_id):
        """
        Parameters:
         - stp_port_id

        """
        self.send_sai_thrift_get_stp_port_attribute(stp_port_id)
        return self.recv_sai_thrift_get_stp_port_attribute()

    def send_sai_thrift_get_stp_port_attribute(self, stp_port_id):
        self._oprot.writeMessageBegin('sai_thrift_get_stp_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_stp_port_attribute_args()
        args.stp_port_id = stp_port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_stp_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_stp_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_stp_port_attribute failed: unknown result")

    def sai_thrift_set_stp_port_state(self, stp_id, port_id, stp_port_state):
        """
        Parameters:
         - stp_id
         - port_id
         - stp_port_state

        """
        self.send_sai_thrift_set_stp_port_state(stp_id, port_id, stp_port_state)
        return self.recv_sai_thrift_set_stp_port_state()

    def send_sai_thrift_set_stp_port_state(self, stp_id, port_id, stp_port_state):
        self._oprot.writeMessageBegin('sai_thrift_set_stp_port_state', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_stp_port_state_args()
        args.stp_id = stp_id
        args.port_id = port_id
        args.stp_port_state = stp_port_state
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_stp_port_state(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_stp_port_state_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_stp_port_state failed: unknown result")

    def sai_thrift_get_stp_port_state(self, stp_id, port_id):
        """
        Parameters:
         - stp_id
         - port_id

        """
        self.send_sai_thrift_get_stp_port_state(stp_id, port_id)
        return self.recv_sai_thrift_get_stp_port_state()

    def send_sai_thrift_get_stp_port_state(self, stp_id, port_id):
        self._oprot.writeMessageBegin('sai_thrift_get_stp_port_state', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_stp_port_state_args()
        args.stp_id = stp_id
        args.port_id = port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_stp_port_state(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_stp_port_state_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_stp_port_state failed: unknown result")

    def sai_thrift_create_stp_ports(self, thrift_attr_lists, thrift_attr_count_lists, mode):
        """
        Parameters:
         - thrift_attr_lists
         - thrift_attr_count_lists
         - mode

        """
        self.send_sai_thrift_create_stp_ports(thrift_attr_lists, thrift_attr_count_lists, mode)
        return self.recv_sai_thrift_create_stp_ports()

    def send_sai_thrift_create_stp_ports(self, thrift_attr_lists, thrift_attr_count_lists, mode):
        self._oprot.writeMessageBegin('sai_thrift_create_stp_ports', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_stp_ports_args()
        args.thrift_attr_lists = thrift_attr_lists
        args.thrift_attr_count_lists = thrift_attr_count_lists
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_stp_ports(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_stp_ports_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_stp_ports failed: unknown result")

    def sai_thrift_remove_stp_ports(self, thrift_object_id_list, mode):
        """
        Parameters:
         - thrift_object_id_list
         - mode

        """
        self.send_sai_thrift_remove_stp_ports(thrift_object_id_list, mode)
        return self.recv_sai_thrift_remove_stp_ports()

    def send_sai_thrift_remove_stp_ports(self, thrift_object_id_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_remove_stp_ports', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_stp_ports_args()
        args.thrift_object_id_list = thrift_object_id_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_stp_ports(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_stp_ports_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_stp_ports failed: unknown result")

    def sai_thrift_create_neighbor_entry(self, thrift_neighbor_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_neighbor_entry
         - thrift_attr_list

        """
        self.send_sai_thrift_create_neighbor_entry(thrift_neighbor_entry, thrift_attr_list)
        return self.recv_sai_thrift_create_neighbor_entry()

    def send_sai_thrift_create_neighbor_entry(self, thrift_neighbor_entry, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_neighbor_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_neighbor_entry_args()
        args.thrift_neighbor_entry = thrift_neighbor_entry
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_neighbor_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_neighbor_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_neighbor_entry failed: unknown result")

    def sai_thrift_remove_neighbor_entry(self, thrift_neighbor_entry):
        """
        Parameters:
         - thrift_neighbor_entry

        """
        self.send_sai_thrift_remove_neighbor_entry(thrift_neighbor_entry)
        return self.recv_sai_thrift_remove_neighbor_entry()

    def send_sai_thrift_remove_neighbor_entry(self, thrift_neighbor_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_neighbor_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_neighbor_entry_args()
        args.thrift_neighbor_entry = thrift_neighbor_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_neighbor_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_neighbor_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_neighbor_entry failed: unknown result")

    def sai_thrift_remove_all_neighbor_entry(self):
        self.send_sai_thrift_remove_all_neighbor_entry()
        return self.recv_sai_thrift_remove_all_neighbor_entry()

    def send_sai_thrift_remove_all_neighbor_entry(self):
        self._oprot.writeMessageBegin('sai_thrift_remove_all_neighbor_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_all_neighbor_entry_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_all_neighbor_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_all_neighbor_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_all_neighbor_entry failed: unknown result")

    def sai_thrift_set_neighbor_entry_attribute(self, thrift_neighbor_entry, thrift_attr):
        """
        Parameters:
         - thrift_neighbor_entry
         - thrift_attr

        """
        self.send_sai_thrift_set_neighbor_entry_attribute(thrift_neighbor_entry, thrift_attr)
        return self.recv_sai_thrift_set_neighbor_entry_attribute()

    def send_sai_thrift_set_neighbor_entry_attribute(self, thrift_neighbor_entry, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_neighbor_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_neighbor_entry_attribute_args()
        args.thrift_neighbor_entry = thrift_neighbor_entry
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_neighbor_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_neighbor_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_neighbor_entry_attribute failed: unknown result")

    def sai_thrift_get_neighbor_entry_attribute(self, thrift_neighbor_entry):
        """
        Parameters:
         - thrift_neighbor_entry

        """
        self.send_sai_thrift_get_neighbor_entry_attribute(thrift_neighbor_entry)
        return self.recv_sai_thrift_get_neighbor_entry_attribute()

    def send_sai_thrift_get_neighbor_entry_attribute(self, thrift_neighbor_entry):
        self._oprot.writeMessageBegin('sai_thrift_get_neighbor_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_neighbor_entry_attribute_args()
        args.thrift_neighbor_entry = thrift_neighbor_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_neighbor_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_neighbor_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_neighbor_entry_attribute failed: unknown result")

    def sai_thrift_get_switch_attribute(self, thrift_attr_ids):
        """
        Parameters:
         - thrift_attr_ids

        """
        self.send_sai_thrift_get_switch_attribute(thrift_attr_ids)
        return self.recv_sai_thrift_get_switch_attribute()

    def send_sai_thrift_get_switch_attribute(self, thrift_attr_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_switch_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_switch_attribute_args()
        args.thrift_attr_ids = thrift_attr_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_switch_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_switch_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_switch_attribute failed: unknown result")

    def sai_thrift_get_port_list_by_front_port(self):
        self.send_sai_thrift_get_port_list_by_front_port()
        return self.recv_sai_thrift_get_port_list_by_front_port()

    def send_sai_thrift_get_port_list_by_front_port(self):
        self._oprot.writeMessageBegin('sai_thrift_get_port_list_by_front_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_list_by_front_port_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_list_by_front_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_list_by_front_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_list_by_front_port failed: unknown result")

    def sai_thrift_get_cpu_port_id(self):
        self.send_sai_thrift_get_cpu_port_id()
        return self.recv_sai_thrift_get_cpu_port_id()

    def send_sai_thrift_get_cpu_port_id(self):
        self._oprot.writeMessageBegin('sai_thrift_get_cpu_port_id', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_cpu_port_id_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_cpu_port_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_cpu_port_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_cpu_port_id failed: unknown result")

    def sai_thrift_get_default_trap_group(self):
        self.send_sai_thrift_get_default_trap_group()
        return self.recv_sai_thrift_get_default_trap_group()

    def send_sai_thrift_get_default_trap_group(self):
        self._oprot.writeMessageBegin('sai_thrift_get_default_trap_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_default_trap_group_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_default_trap_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_default_trap_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_default_trap_group failed: unknown result")

    def sai_thrift_get_default_router_id(self):
        self.send_sai_thrift_get_default_router_id()
        return self.recv_sai_thrift_get_default_router_id()

    def send_sai_thrift_get_default_router_id(self):
        self._oprot.writeMessageBegin('sai_thrift_get_default_router_id', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_default_router_id_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_default_router_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_default_router_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_default_router_id failed: unknown result")

    def sai_thrift_get_default_1q_bridge_id(self):
        self.send_sai_thrift_get_default_1q_bridge_id()
        return self.recv_sai_thrift_get_default_1q_bridge_id()

    def send_sai_thrift_get_default_1q_bridge_id(self):
        self._oprot.writeMessageBegin('sai_thrift_get_default_1q_bridge_id', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_default_1q_bridge_id_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_default_1q_bridge_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_default_1q_bridge_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_default_1q_bridge_id failed: unknown result")

    def sai_thrift_get_default_vlan_id(self):
        self.send_sai_thrift_get_default_vlan_id()
        return self.recv_sai_thrift_get_default_vlan_id()

    def send_sai_thrift_get_default_vlan_id(self):
        self._oprot.writeMessageBegin('sai_thrift_get_default_vlan_id', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_default_vlan_id_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_default_vlan_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_default_vlan_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_default_vlan_id failed: unknown result")

    def sai_thrift_get_port_id_by_front_port(self, port_name):
        """
        Parameters:
         - port_name

        """
        self.send_sai_thrift_get_port_id_by_front_port(port_name)
        return self.recv_sai_thrift_get_port_id_by_front_port()

    def send_sai_thrift_get_port_id_by_front_port(self, port_name):
        self._oprot.writeMessageBegin('sai_thrift_get_port_id_by_front_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_id_by_front_port_args()
        args.port_name = port_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_id_by_front_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_id_by_front_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_id_by_front_port failed: unknown result")

    def sai_thrift_set_switch_attribute(self, attribute):
        """
        Parameters:
         - attribute

        """
        self.send_sai_thrift_set_switch_attribute(attribute)
        return self.recv_sai_thrift_set_switch_attribute()

    def send_sai_thrift_set_switch_attribute(self, attribute):
        self._oprot.writeMessageBegin('sai_thrift_set_switch_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_switch_attribute_args()
        args.attribute = attribute
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_switch_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_switch_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_switch_attribute failed: unknown result")

    def sai_thrift_create_switch(self):
        self.send_sai_thrift_create_switch()
        return self.recv_sai_thrift_create_switch()

    def send_sai_thrift_create_switch(self):
        self._oprot.writeMessageBegin('sai_thrift_create_switch', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_switch_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_switch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_switch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_switch failed: unknown result")

    def sai_thrift_remove_switch(self):
        self.send_sai_thrift_remove_switch()
        return self.recv_sai_thrift_remove_switch()

    def send_sai_thrift_remove_switch(self):
        self._oprot.writeMessageBegin('sai_thrift_remove_switch', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_switch_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_switch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_switch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_switch failed: unknown result")

    def sai_thrift_get_switch_stats(self, counter_ids, number_of_counters):
        """
        Parameters:
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_get_switch_stats(counter_ids, number_of_counters)
        return self.recv_sai_thrift_get_switch_stats()

    def send_sai_thrift_get_switch_stats(self, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_switch_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_switch_stats_args()
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_switch_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_switch_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_switch_stats failed: unknown result")

    def sai_thrift_get_switch_stats_ext(self, counter_ids, mode, number_of_counters):
        """
        Parameters:
         - counter_ids
         - mode
         - number_of_counters

        """
        self.send_sai_thrift_get_switch_stats_ext(counter_ids, mode, number_of_counters)
        return self.recv_sai_thrift_get_switch_stats_ext()

    def send_sai_thrift_get_switch_stats_ext(self, counter_ids, mode, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_switch_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_switch_stats_ext_args()
        args.counter_ids = counter_ids
        args.mode = mode
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_switch_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_switch_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_switch_stats_ext failed: unknown result")

    def sai_thrift_clear_switch_stats(self, counter_ids, number_of_counters):
        """
        Parameters:
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_clear_switch_stats(counter_ids, number_of_counters)
        return self.recv_sai_thrift_clear_switch_stats()

    def send_sai_thrift_clear_switch_stats(self, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_clear_switch_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_switch_stats_args()
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_switch_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_switch_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_switch_stats failed: unknown result")

    def sai_thrift_create_bridge_port(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_bridge_port(thrift_attr_list)
        return self.recv_sai_thrift_create_bridge_port()

    def send_sai_thrift_create_bridge_port(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_bridge_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_bridge_port_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_bridge_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_bridge_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_bridge_port failed: unknown result")

    def sai_thrift_remove_bridge_port(self, bridge_port_id):
        """
        Parameters:
         - bridge_port_id

        """
        self.send_sai_thrift_remove_bridge_port(bridge_port_id)
        return self.recv_sai_thrift_remove_bridge_port()

    def send_sai_thrift_remove_bridge_port(self, bridge_port_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_bridge_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_bridge_port_args()
        args.bridge_port_id = bridge_port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_bridge_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_bridge_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_bridge_port failed: unknown result")

    def sai_thrift_get_bridge_port_list(self, bridge_id):
        """
        Parameters:
         - bridge_id

        """
        self.send_sai_thrift_get_bridge_port_list(bridge_id)
        return self.recv_sai_thrift_get_bridge_port_list()

    def send_sai_thrift_get_bridge_port_list(self, bridge_id):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_port_list', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_port_list_args()
        args.bridge_id = bridge_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_port_list(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_port_list_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_port_list failed: unknown result")

    def sai_thrift_get_bridge_port_attribute(self, bridge_port_id):
        """
        Parameters:
         - bridge_port_id

        """
        self.send_sai_thrift_get_bridge_port_attribute(bridge_port_id)
        return self.recv_sai_thrift_get_bridge_port_attribute()

    def send_sai_thrift_get_bridge_port_attribute(self, bridge_port_id):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_port_attribute_args()
        args.bridge_port_id = bridge_port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_port_attribute failed: unknown result")

    def sai_thrift_set_bridge_port_attribute(self, bridge_port_id, thrift_attr):
        """
        Parameters:
         - bridge_port_id
         - thrift_attr

        """
        self.send_sai_thrift_set_bridge_port_attribute(bridge_port_id, thrift_attr)
        return self.recv_sai_thrift_set_bridge_port_attribute()

    def send_sai_thrift_set_bridge_port_attribute(self, bridge_port_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_bridge_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_bridge_port_attribute_args()
        args.bridge_port_id = bridge_port_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_bridge_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_bridge_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_bridge_port_attribute failed: unknown result")

    def sai_thrift_create_bridge(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_bridge(thrift_attr_list)
        return self.recv_sai_thrift_create_bridge()

    def send_sai_thrift_create_bridge(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_bridge', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_bridge_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_bridge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_bridge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_bridge failed: unknown result")

    def sai_thrift_remove_bridge(self, bridge_id):
        """
        Parameters:
         - bridge_id

        """
        self.send_sai_thrift_remove_bridge(bridge_id)
        return self.recv_sai_thrift_remove_bridge()

    def send_sai_thrift_remove_bridge(self, bridge_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_bridge', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_bridge_args()
        args.bridge_id = bridge_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_bridge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_bridge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_bridge failed: unknown result")

    def sai_thrift_get_bridge_attribute(self, bridge_id):
        """
        Parameters:
         - bridge_id

        """
        self.send_sai_thrift_get_bridge_attribute(bridge_id)
        return self.recv_sai_thrift_get_bridge_attribute()

    def send_sai_thrift_get_bridge_attribute(self, bridge_id):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_attribute_args()
        args.bridge_id = bridge_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_attribute failed: unknown result")

    def sai_thrift_set_bridge_attribute(self, bridge_id, thrift_attr):
        """
        Parameters:
         - bridge_id
         - thrift_attr

        """
        self.send_sai_thrift_set_bridge_attribute(bridge_id, thrift_attr)
        return self.recv_sai_thrift_set_bridge_attribute()

    def send_sai_thrift_set_bridge_attribute(self, bridge_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_bridge_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_bridge_attribute_args()
        args.bridge_id = bridge_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_bridge_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_bridge_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_bridge_attribute failed: unknown result")

    def sai_thrift_get_bridge_port_stats(self, bridge_port_id, counter_ids, number_of_counters):
        """
        Parameters:
         - bridge_port_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_get_bridge_port_stats(bridge_port_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_get_bridge_port_stats()

    def send_sai_thrift_get_bridge_port_stats(self, bridge_port_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_port_stats_args()
        args.bridge_port_id = bridge_port_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_port_stats failed: unknown result")

    def sai_thrift_get_bridge_port_stats_ext(self, bridge_port_id, thrift_counter_ids, mode, number_of_counters):
        """
        Parameters:
         - bridge_port_id
         - thrift_counter_ids
         - mode
         - number_of_counters

        """
        self.send_sai_thrift_get_bridge_port_stats_ext(bridge_port_id, thrift_counter_ids, mode, number_of_counters)
        return self.recv_sai_thrift_get_bridge_port_stats_ext()

    def send_sai_thrift_get_bridge_port_stats_ext(self, bridge_port_id, thrift_counter_ids, mode, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_port_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_port_stats_ext_args()
        args.bridge_port_id = bridge_port_id
        args.thrift_counter_ids = thrift_counter_ids
        args.mode = mode
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_port_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_port_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_port_stats_ext failed: unknown result")

    def sai_thrift_clear_bridge_port_stats(self, bridge_port_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - bridge_port_id
         - thrift_counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_clear_bridge_port_stats(bridge_port_id, thrift_counter_ids, number_of_counters)
        return self.recv_sai_thrift_clear_bridge_port_stats()

    def send_sai_thrift_clear_bridge_port_stats(self, bridge_port_id, thrift_counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_clear_bridge_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_bridge_port_stats_args()
        args.bridge_port_id = bridge_port_id
        args.thrift_counter_ids = thrift_counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_bridge_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_bridge_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_bridge_port_stats failed: unknown result")

    def sai_thrift_create_hostif(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_hostif(thrift_attr_list)
        return self.recv_sai_thrift_create_hostif()

    def send_sai_thrift_create_hostif(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hostif', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hostif_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hostif(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hostif_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif failed: unknown result")

    def sai_thrift_remove_hostif(self, thrift_hif_id):
        """
        Parameters:
         - thrift_hif_id

        """
        self.send_sai_thrift_remove_hostif(thrift_hif_id)
        return self.recv_sai_thrift_remove_hostif()

    def send_sai_thrift_remove_hostif(self, thrift_hif_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_hostif', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hostif_args()
        args.thrift_hif_id = thrift_hif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hostif(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hostif_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif failed: unknown result")

    def sai_thrift_get_hostif_attribute(self, thrift_hif_id):
        """
        Parameters:
         - thrift_hif_id

        """
        self.send_sai_thrift_get_hostif_attribute(thrift_hif_id)
        return self.recv_sai_thrift_get_hostif_attribute()

    def send_sai_thrift_get_hostif_attribute(self, thrift_hif_id):
        self._oprot.writeMessageBegin('sai_thrift_get_hostif_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hostif_attribute_args()
        args.thrift_hif_id = thrift_hif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hostif_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hostif_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_attribute failed: unknown result")

    def sai_thrift_set_hostif_attribute(self, thrift_hif_id, thrift_attr):
        """
        Parameters:
         - thrift_hif_id
         - thrift_attr

        """
        self.send_sai_thrift_set_hostif_attribute(thrift_hif_id, thrift_attr)
        return self.recv_sai_thrift_set_hostif_attribute()

    def send_sai_thrift_set_hostif_attribute(self, thrift_hif_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hostif_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hostif_attribute_args()
        args.thrift_hif_id = thrift_hif_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hostif_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hostif_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hostif_attribute failed: unknown result")

    def sai_thrift_create_hostif_table_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_hostif_table_entry(thrift_attr_list)
        return self.recv_sai_thrift_create_hostif_table_entry()

    def send_sai_thrift_create_hostif_table_entry(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hostif_table_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hostif_table_entry_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hostif_table_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hostif_table_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_table_entry failed: unknown result")

    def sai_thrift_remove_hostif_table_entry(self, thrift_hostif_table_entry_id):
        """
        Parameters:
         - thrift_hostif_table_entry_id

        """
        self.send_sai_thrift_remove_hostif_table_entry(thrift_hostif_table_entry_id)
        return self.recv_sai_thrift_remove_hostif_table_entry()

    def send_sai_thrift_remove_hostif_table_entry(self, thrift_hostif_table_entry_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_hostif_table_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hostif_table_entry_args()
        args.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hostif_table_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hostif_table_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif_table_entry failed: unknown result")

    def sai_thrift_get_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id):
        """
        Parameters:
         - thrift_hostif_table_entry_id

        """
        self.send_sai_thrift_get_hostif_table_entry_attribute(thrift_hostif_table_entry_id)
        return self.recv_sai_thrift_get_hostif_table_entry_attribute()

    def send_sai_thrift_get_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id):
        self._oprot.writeMessageBegin('sai_thrift_get_hostif_table_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hostif_table_entry_attribute_args()
        args.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hostif_table_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hostif_table_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_table_entry_attribute failed: unknown result")

    def sai_thrift_set_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id, thrift_attr):
        """
        Parameters:
         - thrift_hostif_table_entry_id
         - thrift_attr

        """
        self.send_sai_thrift_set_hostif_table_entry_attribute(thrift_hostif_table_entry_id, thrift_attr)
        return self.recv_sai_thrift_set_hostif_table_entry_attribute()

    def send_sai_thrift_set_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hostif_table_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hostif_table_entry_attribute_args()
        args.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hostif_table_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hostif_table_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hostif_table_entry_attribute failed: unknown result")

    def sai_thrift_create_hostif_trap_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_hostif_trap_group(thrift_attr_list)
        return self.recv_sai_thrift_create_hostif_trap_group()

    def send_sai_thrift_create_hostif_trap_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hostif_trap_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hostif_trap_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hostif_trap_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hostif_trap_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_trap_group failed: unknown result")

    def sai_thrift_remove_hostif_trap_group(self, thrift_hostif_trap_group_id):
        """
        Parameters:
         - thrift_hostif_trap_group_id

        """
        self.send_sai_thrift_remove_hostif_trap_group(thrift_hostif_trap_group_id)
        return self.recv_sai_thrift_remove_hostif_trap_group()

    def send_sai_thrift_remove_hostif_trap_group(self, thrift_hostif_trap_group_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_hostif_trap_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hostif_trap_group_args()
        args.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hostif_trap_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hostif_trap_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif_trap_group failed: unknown result")

    def sai_thrift_get_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id):
        """
        Parameters:
         - thrift_hostif_trap_group_id

        """
        self.send_sai_thrift_get_hostif_trap_group_attribute(thrift_hostif_trap_group_id)
        return self.recv_sai_thrift_get_hostif_trap_group_attribute()

    def send_sai_thrift_get_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id):
        self._oprot.writeMessageBegin('sai_thrift_get_hostif_trap_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hostif_trap_group_attribute_args()
        args.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hostif_trap_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hostif_trap_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_trap_group_attribute failed: unknown result")

    def sai_thrift_set_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id, thrift_attr):
        """
        Parameters:
         - thrift_hostif_trap_group_id
         - thrift_attr

        """
        self.send_sai_thrift_set_hostif_trap_group_attribute(thrift_hostif_trap_group_id, thrift_attr)
        return self.recv_sai_thrift_set_hostif_trap_group_attribute()

    def send_sai_thrift_set_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hostif_trap_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hostif_trap_group_attribute_args()
        args.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hostif_trap_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hostif_trap_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hostif_trap_group_attribute failed: unknown result")

    def sai_thrift_create_hostif_trap(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_hostif_trap(thrift_attr_list)
        return self.recv_sai_thrift_create_hostif_trap()

    def send_sai_thrift_create_hostif_trap(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hostif_trap', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hostif_trap_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hostif_trap(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hostif_trap_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_trap failed: unknown result")

    def sai_thrift_remove_hostif_trap(self, thrift_hostif_trap_id):
        """
        Parameters:
         - thrift_hostif_trap_id

        """
        self.send_sai_thrift_remove_hostif_trap(thrift_hostif_trap_id)
        return self.recv_sai_thrift_remove_hostif_trap()

    def send_sai_thrift_remove_hostif_trap(self, thrift_hostif_trap_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_hostif_trap', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hostif_trap_args()
        args.thrift_hostif_trap_id = thrift_hostif_trap_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hostif_trap(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hostif_trap_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif_trap failed: unknown result")

    def sai_thrift_get_hostif_trap_attribute(self, thrift_hostif_trap_id):
        """
        Parameters:
         - thrift_hostif_trap_id

        """
        self.send_sai_thrift_get_hostif_trap_attribute(thrift_hostif_trap_id)
        return self.recv_sai_thrift_get_hostif_trap_attribute()

    def send_sai_thrift_get_hostif_trap_attribute(self, thrift_hostif_trap_id):
        self._oprot.writeMessageBegin('sai_thrift_get_hostif_trap_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hostif_trap_attribute_args()
        args.thrift_hostif_trap_id = thrift_hostif_trap_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hostif_trap_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hostif_trap_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_trap_attribute failed: unknown result")

    def sai_thrift_set_hostif_trap_attribute(self, thrift_hostif_trap_id, thrift_attr):
        """
        Parameters:
         - thrift_hostif_trap_id
         - thrift_attr

        """
        self.send_sai_thrift_set_hostif_trap_attribute(thrift_hostif_trap_id, thrift_attr)
        return self.recv_sai_thrift_set_hostif_trap_attribute()

    def send_sai_thrift_set_hostif_trap_attribute(self, thrift_hostif_trap_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hostif_trap_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hostif_trap_attribute_args()
        args.thrift_hostif_trap_id = thrift_hostif_trap_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hostif_trap_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hostif_trap_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hostif_trap_attribute failed: unknown result")

    def sai_thrift_send_hostif_packet(self, thrift_hif_id, packet_data, thrift_attr_list):
        """
        Parameters:
         - thrift_hif_id
         - packet_data
         - thrift_attr_list

        """
        self.send_sai_thrift_send_hostif_packet(thrift_hif_id, packet_data, thrift_attr_list)
        return self.recv_sai_thrift_send_hostif_packet()

    def send_sai_thrift_send_hostif_packet(self, thrift_hif_id, packet_data, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_send_hostif_packet', TMessageType.CALL, self._seqid)
        args = sai_thrift_send_hostif_packet_args()
        args.thrift_hif_id = thrift_hif_id
        args.packet_data = packet_data
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_send_hostif_packet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_send_hostif_packet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_send_hostif_packet failed: unknown result")

    def sai_thrift_create_acl_table(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_acl_table(thrift_attr_list)
        return self.recv_sai_thrift_create_acl_table()

    def send_sai_thrift_create_acl_table(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_table', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_table_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_table(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_table_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table failed: unknown result")

    def sai_thrift_remove_acl_table(self, acl_table_id):
        """
        Parameters:
         - acl_table_id

        """
        self.send_sai_thrift_remove_acl_table(acl_table_id)
        return self.recv_sai_thrift_remove_acl_table()

    def send_sai_thrift_remove_acl_table(self, acl_table_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_table', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_table_args()
        args.acl_table_id = acl_table_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_table(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_table_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_table failed: unknown result")

    def sai_thrift_get_acl_table_attribute(self, acl_table_id, thrift_attr_ids):
        """
        Parameters:
         - acl_table_id
         - thrift_attr_ids

        """
        self.send_sai_thrift_get_acl_table_attribute(acl_table_id, thrift_attr_ids)
        return self.recv_sai_thrift_get_acl_table_attribute()

    def send_sai_thrift_get_acl_table_attribute(self, acl_table_id, thrift_attr_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_table_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_table_attribute_args()
        args.acl_table_id = acl_table_id
        args.thrift_attr_ids = thrift_attr_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_table_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_table_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_table_attribute failed: unknown result")

    def sai_thrift_create_acl_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_acl_entry(thrift_attr_list)
        return self.recv_sai_thrift_create_acl_entry()

    def send_sai_thrift_create_acl_entry(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_entry_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_entry failed: unknown result")

    def sai_thrift_remove_acl_entry(self, acl_entry):
        """
        Parameters:
         - acl_entry

        """
        self.send_sai_thrift_remove_acl_entry(acl_entry)
        return self.recv_sai_thrift_remove_acl_entry()

    def send_sai_thrift_remove_acl_entry(self, acl_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_entry_args()
        args.acl_entry = acl_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_entry failed: unknown result")

    def sai_thrift_set_acl_entry_attribute(self, acl_entry_id, thrift_attr):
        """
        Parameters:
         - acl_entry_id
         - thrift_attr

        """
        self.send_sai_thrift_set_acl_entry_attribute(acl_entry_id, thrift_attr)
        return self.recv_sai_thrift_set_acl_entry_attribute()

    def send_sai_thrift_set_acl_entry_attribute(self, acl_entry_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_acl_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_acl_entry_attribute_args()
        args.acl_entry_id = acl_entry_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_acl_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_acl_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_acl_entry_attribute failed: unknown result")

    def sai_thrift_get_acl_entry_attribute(self, acl_entry_id, thrift_attr_ids):
        """
        Parameters:
         - acl_entry_id
         - thrift_attr_ids

        """
        self.send_sai_thrift_get_acl_entry_attribute(acl_entry_id, thrift_attr_ids)
        return self.recv_sai_thrift_get_acl_entry_attribute()

    def send_sai_thrift_get_acl_entry_attribute(self, acl_entry_id, thrift_attr_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_entry_attribute_args()
        args.acl_entry_id = acl_entry_id
        args.thrift_attr_ids = thrift_attr_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_entry_attribute failed: unknown result")

    def sai_thrift_create_acl_table_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_acl_table_group(thrift_attr_list)
        return self.recv_sai_thrift_create_acl_table_group()

    def send_sai_thrift_create_acl_table_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_table_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_table_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_table_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_table_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table_group failed: unknown result")

    def sai_thrift_remove_acl_table_group(self, acl_table_group_id):
        """
        Parameters:
         - acl_table_group_id

        """
        self.send_sai_thrift_remove_acl_table_group(acl_table_group_id)
        return self.recv_sai_thrift_remove_acl_table_group()

    def send_sai_thrift_remove_acl_table_group(self, acl_table_group_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_table_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_table_group_args()
        args.acl_table_group_id = acl_table_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_table_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_table_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_table_group failed: unknown result")

    def sai_thrift_get_acl_table_group_attribute(self, acl_table_group_id):
        """
        Parameters:
         - acl_table_group_id

        """
        self.send_sai_thrift_get_acl_table_group_attribute(acl_table_group_id)
        return self.recv_sai_thrift_get_acl_table_group_attribute()

    def send_sai_thrift_get_acl_table_group_attribute(self, acl_table_group_id):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_table_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_table_group_attribute_args()
        args.acl_table_group_id = acl_table_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_table_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_table_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_table_group_attribute failed: unknown result")

    def sai_thrift_create_acl_table_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_acl_table_group_member(thrift_attr_list)
        return self.recv_sai_thrift_create_acl_table_group_member()

    def send_sai_thrift_create_acl_table_group_member(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_table_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_table_group_member_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_table_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_table_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table_group_member failed: unknown result")

    def sai_thrift_remove_acl_table_group_member(self, acl_table_group_member_id):
        """
        Parameters:
         - acl_table_group_member_id

        """
        self.send_sai_thrift_remove_acl_table_group_member(acl_table_group_member_id)
        return self.recv_sai_thrift_remove_acl_table_group_member()

    def send_sai_thrift_remove_acl_table_group_member(self, acl_table_group_member_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_table_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_table_group_member_args()
        args.acl_table_group_member_id = acl_table_group_member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_table_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_table_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_table_group_member failed: unknown result")

    def sai_thrift_get_acl_table_group_member_attribute(self, acl_table_group_member_id):
        """
        Parameters:
         - acl_table_group_member_id

        """
        self.send_sai_thrift_get_acl_table_group_member_attribute(acl_table_group_member_id)
        return self.recv_sai_thrift_get_acl_table_group_member_attribute()

    def send_sai_thrift_get_acl_table_group_member_attribute(self, acl_table_group_member_id):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_table_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_table_group_member_attribute_args()
        args.acl_table_group_member_id = acl_table_group_member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_table_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_table_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_table_group_member_attribute failed: unknown result")

    def sai_thrift_create_acl_counter(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_acl_counter(thrift_attr_list)
        return self.recv_sai_thrift_create_acl_counter()

    def send_sai_thrift_create_acl_counter(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_counter_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_counter failed: unknown result")

    def sai_thrift_remove_acl_counter(self, acl_counter_id):
        """
        Parameters:
         - acl_counter_id

        """
        self.send_sai_thrift_remove_acl_counter(acl_counter_id)
        return self.recv_sai_thrift_remove_acl_counter()

    def send_sai_thrift_remove_acl_counter(self, acl_counter_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_counter_args()
        args.acl_counter_id = acl_counter_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_counter failed: unknown result")

    def sai_thrift_get_acl_counter_attribute(self, acl_counter_id):
        """
        Parameters:
         - acl_counter_id

        """
        self.send_sai_thrift_get_acl_counter_attribute(acl_counter_id)
        return self.recv_sai_thrift_get_acl_counter_attribute()

    def send_sai_thrift_get_acl_counter_attribute(self, acl_counter_id):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_counter_attribute_args()
        args.acl_counter_id = acl_counter_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_counter_attribute failed: unknown result")

    def sai_thrift_set_acl_counter_attribute(self, acl_counter_id, thrift_attr):
        """
        Parameters:
         - acl_counter_id
         - thrift_attr

        """
        self.send_sai_thrift_set_acl_counter_attribute(acl_counter_id, thrift_attr)
        return self.recv_sai_thrift_set_acl_counter_attribute()

    def send_sai_thrift_set_acl_counter_attribute(self, acl_counter_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_acl_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_acl_counter_attribute_args()
        args.acl_counter_id = acl_counter_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_acl_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_acl_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_acl_counter_attribute failed: unknown result")

    def sai_thrift_create_acl_range(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_acl_range(thrift_attr_list)
        return self.recv_sai_thrift_create_acl_range()

    def send_sai_thrift_create_acl_range(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_range', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_range_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_range(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_range_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_range failed: unknown result")

    def sai_thrift_remove_acl_range(self, acl_range_id):
        """
        Parameters:
         - acl_range_id

        """
        self.send_sai_thrift_remove_acl_range(acl_range_id)
        return self.recv_sai_thrift_remove_acl_range()

    def send_sai_thrift_remove_acl_range(self, acl_range_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_range', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_range_args()
        args.acl_range_id = acl_range_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_range(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_range_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_range failed: unknown result")

    def sai_thrift_get_acl_range_attribute(self, acl_range_id):
        """
        Parameters:
         - acl_range_id

        """
        self.send_sai_thrift_get_acl_range_attribute(acl_range_id)
        return self.recv_sai_thrift_get_acl_range_attribute()

    def send_sai_thrift_get_acl_range_attribute(self, acl_range_id):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_range_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_range_attribute_args()
        args.acl_range_id = acl_range_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_range_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_range_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_range_attribute failed: unknown result")

    def sai_thrift_create_hash(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_hash(thrift_attr_list)
        return self.recv_sai_thrift_create_hash()

    def send_sai_thrift_create_hash(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hash', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hash_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hash(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hash_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hash failed: unknown result")

    def sai_thrift_remove_hash(self, hash_id):
        """
        Parameters:
         - hash_id

        """
        self.send_sai_thrift_remove_hash(hash_id)
        return self.recv_sai_thrift_remove_hash()

    def send_sai_thrift_remove_hash(self, hash_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_hash', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hash_args()
        args.hash_id = hash_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hash(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hash_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hash failed: unknown result")

    def sai_thrift_set_hash_attribute(self, thrift_hash_id, thrift_attr):
        """
        Parameters:
         - thrift_hash_id
         - thrift_attr

        """
        self.send_sai_thrift_set_hash_attribute(thrift_hash_id, thrift_attr)
        return self.recv_sai_thrift_set_hash_attribute()

    def send_sai_thrift_set_hash_attribute(self, thrift_hash_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hash_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hash_attribute_args()
        args.thrift_hash_id = thrift_hash_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hash_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hash_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hash_attribute failed: unknown result")

    def sai_thrift_get_hash_attribute(self, thrift_hash_id):
        """
        Parameters:
         - thrift_hash_id

        """
        self.send_sai_thrift_get_hash_attribute(thrift_hash_id)
        return self.recv_sai_thrift_get_hash_attribute()

    def send_sai_thrift_get_hash_attribute(self, thrift_hash_id):
        self._oprot.writeMessageBegin('sai_thrift_get_hash_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hash_attribute_args()
        args.thrift_hash_id = thrift_hash_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hash_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hash_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hash_attribute failed: unknown result")

    def sai_thrift_create_udf_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_udf_group(thrift_attr_list)
        return self.recv_sai_thrift_create_udf_group()

    def send_sai_thrift_create_udf_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_udf_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_udf_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_udf_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_udf_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_udf_group failed: unknown result")

    def sai_thrift_remove_udf_group(self, udf_group_id):
        """
        Parameters:
         - udf_group_id

        """
        self.send_sai_thrift_remove_udf_group(udf_group_id)
        return self.recv_sai_thrift_remove_udf_group()

    def send_sai_thrift_remove_udf_group(self, udf_group_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_udf_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_udf_group_args()
        args.udf_group_id = udf_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_udf_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_udf_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_udf_group failed: unknown result")

    def sai_thrift_get_udf_group_attribute(self, thrift_udf_group_id):
        """
        Parameters:
         - thrift_udf_group_id

        """
        self.send_sai_thrift_get_udf_group_attribute(thrift_udf_group_id)
        return self.recv_sai_thrift_get_udf_group_attribute()

    def send_sai_thrift_get_udf_group_attribute(self, thrift_udf_group_id):
        self._oprot.writeMessageBegin('sai_thrift_get_udf_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_udf_group_attribute_args()
        args.thrift_udf_group_id = thrift_udf_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_udf_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_udf_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_udf_group_attribute failed: unknown result")

    def sai_thrift_create_udf_match(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_udf_match(thrift_attr_list)
        return self.recv_sai_thrift_create_udf_match()

    def send_sai_thrift_create_udf_match(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_udf_match', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_udf_match_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_udf_match(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_udf_match_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_udf_match failed: unknown result")

    def sai_thrift_remove_udf_match(self, udf_match_id):
        """
        Parameters:
         - udf_match_id

        """
        self.send_sai_thrift_remove_udf_match(udf_match_id)
        return self.recv_sai_thrift_remove_udf_match()

    def send_sai_thrift_remove_udf_match(self, udf_match_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_udf_match', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_udf_match_args()
        args.udf_match_id = udf_match_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_udf_match(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_udf_match_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_udf_match failed: unknown result")

    def sai_thrift_get_udf_match_attribute(self, thrift_udf_match_id):
        """
        Parameters:
         - thrift_udf_match_id

        """
        self.send_sai_thrift_get_udf_match_attribute(thrift_udf_match_id)
        return self.recv_sai_thrift_get_udf_match_attribute()

    def send_sai_thrift_get_udf_match_attribute(self, thrift_udf_match_id):
        self._oprot.writeMessageBegin('sai_thrift_get_udf_match_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_udf_match_attribute_args()
        args.thrift_udf_match_id = thrift_udf_match_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_udf_match_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_udf_match_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_udf_match_attribute failed: unknown result")

    def sai_thrift_create_udf(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_udf(thrift_attr_list)
        return self.recv_sai_thrift_create_udf()

    def send_sai_thrift_create_udf(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_udf', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_udf_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_udf(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_udf_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_udf failed: unknown result")

    def sai_thrift_remove_udf(self, udf_id):
        """
        Parameters:
         - udf_id

        """
        self.send_sai_thrift_remove_udf(udf_id)
        return self.recv_sai_thrift_remove_udf()

    def send_sai_thrift_remove_udf(self, udf_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_udf', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_udf_args()
        args.udf_id = udf_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_udf(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_udf_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_udf failed: unknown result")

    def sai_thrift_set_udf_attribute(self, thrift_udf_id, thrift_attr):
        """
        Parameters:
         - thrift_udf_id
         - thrift_attr

        """
        self.send_sai_thrift_set_udf_attribute(thrift_udf_id, thrift_attr)
        return self.recv_sai_thrift_set_udf_attribute()

    def send_sai_thrift_set_udf_attribute(self, thrift_udf_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_udf_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_udf_attribute_args()
        args.thrift_udf_id = thrift_udf_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_udf_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_udf_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_udf_attribute failed: unknown result")

    def sai_thrift_get_udf_attribute(self, thrift_udf_id):
        """
        Parameters:
         - thrift_udf_id

        """
        self.send_sai_thrift_get_udf_attribute(thrift_udf_id)
        return self.recv_sai_thrift_get_udf_attribute()

    def send_sai_thrift_get_udf_attribute(self, thrift_udf_id):
        self._oprot.writeMessageBegin('sai_thrift_get_udf_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_udf_attribute_args()
        args.thrift_udf_id = thrift_udf_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_udf_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_udf_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_udf_attribute failed: unknown result")

    def sai_thrift_create_twamp_session(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_twamp_session(thrift_attr_list)
        return self.recv_sai_thrift_create_twamp_session()

    def send_sai_thrift_create_twamp_session(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_twamp_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_twamp_session_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_twamp_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_twamp_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_twamp_session failed: unknown result")

    def sai_thrift_remove_twamp_session(self, session_id):
        """
        Parameters:
         - session_id

        """
        self.send_sai_thrift_remove_twamp_session(session_id)
        return self.recv_sai_thrift_remove_twamp_session()

    def send_sai_thrift_remove_twamp_session(self, session_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_twamp_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_twamp_session_args()
        args.session_id = session_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_twamp_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_twamp_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_twamp_session failed: unknown result")

    def sai_thrift_set_twamp_attribute(self, thrift_twamp_session_id, thrift_attr):
        """
        Parameters:
         - thrift_twamp_session_id
         - thrift_attr

        """
        self.send_sai_thrift_set_twamp_attribute(thrift_twamp_session_id, thrift_attr)
        return self.recv_sai_thrift_set_twamp_attribute()

    def send_sai_thrift_set_twamp_attribute(self, thrift_twamp_session_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_twamp_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_twamp_attribute_args()
        args.thrift_twamp_session_id = thrift_twamp_session_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_twamp_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_twamp_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_twamp_attribute failed: unknown result")

    def sai_thrift_get_twamp_attribute(self, thrift_twamp_session_id):
        """
        Parameters:
         - thrift_twamp_session_id

        """
        self.send_sai_thrift_get_twamp_attribute(thrift_twamp_session_id)
        return self.recv_sai_thrift_get_twamp_attribute()

    def send_sai_thrift_get_twamp_attribute(self, thrift_twamp_session_id):
        self._oprot.writeMessageBegin('sai_thrift_get_twamp_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_twamp_attribute_args()
        args.thrift_twamp_session_id = thrift_twamp_session_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_twamp_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_twamp_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_twamp_attribute failed: unknown result")

    def sai_thrift_get_twamp_session_stats(self, twamp_id, counter_ids, number_of_counters):
        """
        Parameters:
         - twamp_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_get_twamp_session_stats(twamp_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_get_twamp_session_stats()

    def send_sai_thrift_get_twamp_session_stats(self, twamp_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_twamp_session_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_twamp_session_stats_args()
        args.twamp_id = twamp_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_twamp_session_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_twamp_session_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_twamp_session_stats failed: unknown result")

    def sai_thrift_clear_twamp_session_stats(self, twamp_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - twamp_id
         - thrift_counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_clear_twamp_session_stats(twamp_id, thrift_counter_ids, number_of_counters)
        return self.recv_sai_thrift_clear_twamp_session_stats()

    def send_sai_thrift_clear_twamp_session_stats(self, twamp_id, thrift_counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_clear_twamp_session_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_twamp_session_stats_args()
        args.twamp_id = twamp_id
        args.thrift_counter_ids = thrift_counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_twamp_session_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_twamp_session_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_twamp_session_stats failed: unknown result")

    def sai_thrift_create_mirror_session(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_mirror_session(thrift_attr_list)
        return self.recv_sai_thrift_create_mirror_session()

    def send_sai_thrift_create_mirror_session(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_mirror_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_mirror_session_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_mirror_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_mirror_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_mirror_session failed: unknown result")

    def sai_thrift_remove_mirror_session(self, session_id):
        """
        Parameters:
         - session_id

        """
        self.send_sai_thrift_remove_mirror_session(session_id)
        return self.recv_sai_thrift_remove_mirror_session()

    def send_sai_thrift_remove_mirror_session(self, session_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_mirror_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_mirror_session_args()
        args.session_id = session_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_mirror_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_mirror_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_mirror_session failed: unknown result")

    def sai_thrift_set_mirror_attribute(self, thrift_mirror_id, thrift_attr):
        """
        Parameters:
         - thrift_mirror_id
         - thrift_attr

        """
        self.send_sai_thrift_set_mirror_attribute(thrift_mirror_id, thrift_attr)
        return self.recv_sai_thrift_set_mirror_attribute()

    def send_sai_thrift_set_mirror_attribute(self, thrift_mirror_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_mirror_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_mirror_attribute_args()
        args.thrift_mirror_id = thrift_mirror_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_mirror_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_mirror_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_mirror_attribute failed: unknown result")

    def sai_thrift_get_mirror_attribute(self, thrift_mirror_id):
        """
        Parameters:
         - thrift_mirror_id

        """
        self.send_sai_thrift_get_mirror_attribute(thrift_mirror_id)
        return self.recv_sai_thrift_get_mirror_attribute()

    def send_sai_thrift_get_mirror_attribute(self, thrift_mirror_id):
        self._oprot.writeMessageBegin('sai_thrift_get_mirror_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_mirror_attribute_args()
        args.thrift_mirror_id = thrift_mirror_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_mirror_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_mirror_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_mirror_attribute failed: unknown result")

    def sai_thrift_create_inseg_entry(self, thrift_inseg_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_inseg_entry
         - thrift_attr_list

        """
        self.send_sai_thrift_create_inseg_entry(thrift_inseg_entry, thrift_attr_list)
        return self.recv_sai_thrift_create_inseg_entry()

    def send_sai_thrift_create_inseg_entry(self, thrift_inseg_entry, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_inseg_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_inseg_entry_args()
        args.thrift_inseg_entry = thrift_inseg_entry
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_inseg_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_inseg_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_inseg_entry failed: unknown result")

    def sai_thrift_remove_inseg_entry(self, thrift_inseg_entry):
        """
        Parameters:
         - thrift_inseg_entry

        """
        self.send_sai_thrift_remove_inseg_entry(thrift_inseg_entry)
        return self.recv_sai_thrift_remove_inseg_entry()

    def send_sai_thrift_remove_inseg_entry(self, thrift_inseg_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_inseg_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_inseg_entry_args()
        args.thrift_inseg_entry = thrift_inseg_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_inseg_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_inseg_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_inseg_entry failed: unknown result")

    def sai_thrift_set_inseg_entry_attribute(self, thrift_inseg_entry, thrift_attr):
        """
        Parameters:
         - thrift_inseg_entry
         - thrift_attr

        """
        self.send_sai_thrift_set_inseg_entry_attribute(thrift_inseg_entry, thrift_attr)
        return self.recv_sai_thrift_set_inseg_entry_attribute()

    def send_sai_thrift_set_inseg_entry_attribute(self, thrift_inseg_entry, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_inseg_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_inseg_entry_attribute_args()
        args.thrift_inseg_entry = thrift_inseg_entry
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_inseg_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_inseg_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_inseg_entry_attribute failed: unknown result")

    def sai_thrift_get_inseg_entry_attribute(self, thrift_inseg_entry):
        """
        Parameters:
         - thrift_inseg_entry

        """
        self.send_sai_thrift_get_inseg_entry_attribute(thrift_inseg_entry)
        return self.recv_sai_thrift_get_inseg_entry_attribute()

    def send_sai_thrift_get_inseg_entry_attribute(self, thrift_inseg_entry):
        self._oprot.writeMessageBegin('sai_thrift_get_inseg_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_inseg_entry_attribute_args()
        args.thrift_inseg_entry = thrift_inseg_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_inseg_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_inseg_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_inseg_entry_attribute failed: unknown result")

    def sai_thrift_dump_log(self, dump_file_name):
        """
        Parameters:
         - dump_file_name

        """
        self.send_sai_thrift_dump_log(dump_file_name)
        return self.recv_sai_thrift_dump_log()

    def send_sai_thrift_dump_log(self, dump_file_name):
        self._oprot.writeMessageBegin('sai_thrift_dump_log', TMessageType.CALL, self._seqid)
        args = sai_thrift_dump_log_args()
        args.dump_file_name = dump_file_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_dump_log(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_dump_log_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_dump_log failed: unknown result")

    def sai_thrift_create_policer(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_policer(thrift_attr_list)
        return self.recv_sai_thrift_create_policer()

    def send_sai_thrift_create_policer(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_policer', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_policer_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_policer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_policer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_policer failed: unknown result")

    def sai_thrift_remove_policer(self, thrift_policer_id):
        """
        Parameters:
         - thrift_policer_id

        """
        self.send_sai_thrift_remove_policer(thrift_policer_id)
        return self.recv_sai_thrift_remove_policer()

    def send_sai_thrift_remove_policer(self, thrift_policer_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_policer', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_policer_args()
        args.thrift_policer_id = thrift_policer_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_policer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_policer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_policer failed: unknown result")

    def sai_thrift_get_policer_attribute(self, thrift_policer_id):
        """
        Parameters:
         - thrift_policer_id

        """
        self.send_sai_thrift_get_policer_attribute(thrift_policer_id)
        return self.recv_sai_thrift_get_policer_attribute()

    def send_sai_thrift_get_policer_attribute(self, thrift_policer_id):
        self._oprot.writeMessageBegin('sai_thrift_get_policer_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_policer_attribute_args()
        args.thrift_policer_id = thrift_policer_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_policer_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_policer_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_policer_attribute failed: unknown result")

    def sai_thrift_set_policer_attribute(self, thrift_policer_id, thrift_attr):
        """
        Parameters:
         - thrift_policer_id
         - thrift_attr

        """
        self.send_sai_thrift_set_policer_attribute(thrift_policer_id, thrift_attr)
        return self.recv_sai_thrift_set_policer_attribute()

    def send_sai_thrift_set_policer_attribute(self, thrift_policer_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_policer_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_policer_attribute_args()
        args.thrift_policer_id = thrift_policer_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_policer_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_policer_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_policer_attribute failed: unknown result")

    def sai_thrift_get_policer_stats(self, thrift_policer_id, thrift_counter_ids):
        """
        Parameters:
         - thrift_policer_id
         - thrift_counter_ids

        """
        self.send_sai_thrift_get_policer_stats(thrift_policer_id, thrift_counter_ids)
        return self.recv_sai_thrift_get_policer_stats()

    def send_sai_thrift_get_policer_stats(self, thrift_policer_id, thrift_counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_policer_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_policer_stats_args()
        args.thrift_policer_id = thrift_policer_id
        args.thrift_counter_ids = thrift_counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_policer_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_policer_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_policer_stats failed: unknown result")

    def sai_thrift_get_policer_stats_ext(self, thrift_policer_id, thrift_counter_ids, mode):
        """
        Parameters:
         - thrift_policer_id
         - thrift_counter_ids
         - mode

        """
        self.send_sai_thrift_get_policer_stats_ext(thrift_policer_id, thrift_counter_ids, mode)
        return self.recv_sai_thrift_get_policer_stats_ext()

    def send_sai_thrift_get_policer_stats_ext(self, thrift_policer_id, thrift_counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_policer_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_policer_stats_ext_args()
        args.thrift_policer_id = thrift_policer_id
        args.thrift_counter_ids = thrift_counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_policer_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_policer_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_policer_stats_ext failed: unknown result")

    def sai_thrift_clear_policer_stats(self, thrift_policer_id, thrift_counter_ids):
        """
        Parameters:
         - thrift_policer_id
         - thrift_counter_ids

        """
        self.send_sai_thrift_clear_policer_stats(thrift_policer_id, thrift_counter_ids)
        return self.recv_sai_thrift_clear_policer_stats()

    def send_sai_thrift_clear_policer_stats(self, thrift_policer_id, thrift_counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_policer_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_policer_stats_args()
        args.thrift_policer_id = thrift_policer_id
        args.thrift_counter_ids = thrift_counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_policer_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_policer_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_policer_stats failed: unknown result")

    def sai_thrift_create_scheduler_profile(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_scheduler_profile(thrift_attr_list)
        return self.recv_sai_thrift_create_scheduler_profile()

    def send_sai_thrift_create_scheduler_profile(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_scheduler_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_scheduler_profile_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_scheduler_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_scheduler_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_scheduler_profile failed: unknown result")

    def sai_thrift_remove_scheduler_profile(self, scheduler_id):
        """
        Parameters:
         - scheduler_id

        """
        self.send_sai_thrift_remove_scheduler_profile(scheduler_id)
        return self.recv_sai_thrift_remove_scheduler_profile()

    def send_sai_thrift_remove_scheduler_profile(self, scheduler_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_scheduler_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_scheduler_profile_args()
        args.scheduler_id = scheduler_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_scheduler_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_scheduler_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_scheduler_profile failed: unknown result")

    def sai_thrift_get_scheduler_attribute(self, thrift_scheduler_id):
        """
        Parameters:
         - thrift_scheduler_id

        """
        self.send_sai_thrift_get_scheduler_attribute(thrift_scheduler_id)
        return self.recv_sai_thrift_get_scheduler_attribute()

    def send_sai_thrift_get_scheduler_attribute(self, thrift_scheduler_id):
        self._oprot.writeMessageBegin('sai_thrift_get_scheduler_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_scheduler_attribute_args()
        args.thrift_scheduler_id = thrift_scheduler_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_scheduler_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_scheduler_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_scheduler_attribute failed: unknown result")

    def sai_thrift_set_scheduler_attribute(self, thrift_scheduler_id, thrift_attr):
        """
        Parameters:
         - thrift_scheduler_id
         - thrift_attr

        """
        self.send_sai_thrift_set_scheduler_attribute(thrift_scheduler_id, thrift_attr)
        return self.recv_sai_thrift_set_scheduler_attribute()

    def send_sai_thrift_set_scheduler_attribute(self, thrift_scheduler_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_scheduler_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_scheduler_attribute_args()
        args.thrift_scheduler_id = thrift_scheduler_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_scheduler_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_scheduler_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_scheduler_attribute failed: unknown result")

    def sai_thrift_create_scheduler_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_scheduler_group(thrift_attr_list)
        return self.recv_sai_thrift_create_scheduler_group()

    def send_sai_thrift_create_scheduler_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_scheduler_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_scheduler_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_scheduler_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_scheduler_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_scheduler_group failed: unknown result")

    def sai_thrift_remove_scheduler_group(self, scheduler_group_id):
        """
        Parameters:
         - scheduler_group_id

        """
        self.send_sai_thrift_remove_scheduler_group(scheduler_group_id)
        return self.recv_sai_thrift_remove_scheduler_group()

    def send_sai_thrift_remove_scheduler_group(self, scheduler_group_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_scheduler_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_scheduler_group_args()
        args.scheduler_group_id = scheduler_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_scheduler_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_scheduler_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_scheduler_group failed: unknown result")

    def sai_thrift_get_scheduler_group_attribute(self, scheduler_group_id):
        """
        Parameters:
         - scheduler_group_id

        """
        self.send_sai_thrift_get_scheduler_group_attribute(scheduler_group_id)
        return self.recv_sai_thrift_get_scheduler_group_attribute()

    def send_sai_thrift_get_scheduler_group_attribute(self, scheduler_group_id):
        self._oprot.writeMessageBegin('sai_thrift_get_scheduler_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_scheduler_group_attribute_args()
        args.scheduler_group_id = scheduler_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_scheduler_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_scheduler_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_scheduler_group_attribute failed: unknown result")

    def sai_thrift_set_scheduler_group_attribute(self, scheduler_group_id, thrift_attr):
        """
        Parameters:
         - scheduler_group_id
         - thrift_attr

        """
        self.send_sai_thrift_set_scheduler_group_attribute(scheduler_group_id, thrift_attr)
        return self.recv_sai_thrift_set_scheduler_group_attribute()

    def send_sai_thrift_set_scheduler_group_attribute(self, scheduler_group_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_scheduler_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_scheduler_group_attribute_args()
        args.scheduler_group_id = scheduler_group_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_scheduler_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_scheduler_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_scheduler_group_attribute failed: unknown result")

    def sai_thrift_get_queue_stats(self, queue_id, counter_ids, number_of_counters):
        """
        Parameters:
         - queue_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_get_queue_stats(queue_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_get_queue_stats()

    def send_sai_thrift_get_queue_stats(self, queue_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_queue_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_queue_stats_args()
        args.queue_id = queue_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_queue_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_queue_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_queue_stats failed: unknown result")

    def sai_thrift_clear_queue_stats(self, queue_id, counter_ids, number_of_counters):
        """
        Parameters:
         - queue_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_clear_queue_stats(queue_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_clear_queue_stats()

    def send_sai_thrift_clear_queue_stats(self, queue_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_clear_queue_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_queue_stats_args()
        args.queue_id = queue_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_queue_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_queue_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_queue_stats failed: unknown result")

    def sai_thrift_create_queue(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_queue(thrift_attr_list)
        return self.recv_sai_thrift_create_queue()

    def send_sai_thrift_create_queue(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_queue', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_queue_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_queue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_queue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_queue failed: unknown result")

    def sai_thrift_remove_queue(self, queue_id):
        """
        Parameters:
         - queue_id

        """
        self.send_sai_thrift_remove_queue(queue_id)
        return self.recv_sai_thrift_remove_queue()

    def send_sai_thrift_remove_queue(self, queue_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_queue', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_queue_args()
        args.queue_id = queue_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_queue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_queue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_queue failed: unknown result")

    def sai_thrift_get_queue_attribute(self, queue_id):
        """
        Parameters:
         - queue_id

        """
        self.send_sai_thrift_get_queue_attribute(queue_id)
        return self.recv_sai_thrift_get_queue_attribute()

    def send_sai_thrift_get_queue_attribute(self, queue_id):
        self._oprot.writeMessageBegin('sai_thrift_get_queue_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_queue_attribute_args()
        args.queue_id = queue_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_queue_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_queue_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_queue_attribute failed: unknown result")

    def sai_thrift_set_queue_attribute(self, queue_id, thrift_attr):
        """
        Parameters:
         - queue_id
         - thrift_attr

        """
        self.send_sai_thrift_set_queue_attribute(queue_id, thrift_attr)
        return self.recv_sai_thrift_set_queue_attribute()

    def send_sai_thrift_set_queue_attribute(self, queue_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_queue_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_queue_attribute_args()
        args.queue_id = queue_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_queue_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_queue_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_queue_attribute failed: unknown result")

    def sai_thrift_create_buffer_profile(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_buffer_profile(thrift_attr_list)
        return self.recv_sai_thrift_create_buffer_profile()

    def send_sai_thrift_create_buffer_profile(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_buffer_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_buffer_profile_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_buffer_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_buffer_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_buffer_profile failed: unknown result")

    def sai_thrift_remove_buffer_profile(self, buffer_profile_id):
        """
        Parameters:
         - buffer_profile_id

        """
        self.send_sai_thrift_remove_buffer_profile(buffer_profile_id)
        return self.recv_sai_thrift_remove_buffer_profile()

    def send_sai_thrift_remove_buffer_profile(self, buffer_profile_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_buffer_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_buffer_profile_args()
        args.buffer_profile_id = buffer_profile_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_buffer_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_buffer_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_buffer_profile failed: unknown result")

    def sai_thrift_get_buffer_profile_attribute(self, buffer_profile_id):
        """
        Parameters:
         - buffer_profile_id

        """
        self.send_sai_thrift_get_buffer_profile_attribute(buffer_profile_id)
        return self.recv_sai_thrift_get_buffer_profile_attribute()

    def send_sai_thrift_get_buffer_profile_attribute(self, buffer_profile_id):
        self._oprot.writeMessageBegin('sai_thrift_get_buffer_profile_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_buffer_profile_attribute_args()
        args.buffer_profile_id = buffer_profile_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_buffer_profile_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_buffer_profile_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_buffer_profile_attribute failed: unknown result")

    def sai_thrift_set_buffer_profile_attribute(self, buffer_profile_id, thrift_attr):
        """
        Parameters:
         - buffer_profile_id
         - thrift_attr

        """
        self.send_sai_thrift_set_buffer_profile_attribute(buffer_profile_id, thrift_attr)
        return self.recv_sai_thrift_set_buffer_profile_attribute()

    def send_sai_thrift_set_buffer_profile_attribute(self, buffer_profile_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_buffer_profile_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_buffer_profile_attribute_args()
        args.buffer_profile_id = buffer_profile_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_buffer_profile_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_buffer_profile_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_buffer_profile_attribute failed: unknown result")

    def sai_thrift_create_pool_profile(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_pool_profile(thrift_attr_list)
        return self.recv_sai_thrift_create_pool_profile()

    def send_sai_thrift_create_pool_profile(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_pool_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_pool_profile_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_pool_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_pool_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_pool_profile failed: unknown result")

    def sai_thrift_create_priority_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_priority_group(thrift_attr_list)
        return self.recv_sai_thrift_create_priority_group()

    def send_sai_thrift_create_priority_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_priority_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_priority_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_priority_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_priority_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_priority_group failed: unknown result")

    def sai_thrift_remove_priority_group(self, priority_group_id):
        """
        Parameters:
         - priority_group_id

        """
        self.send_sai_thrift_remove_priority_group(priority_group_id)
        return self.recv_sai_thrift_remove_priority_group()

    def send_sai_thrift_remove_priority_group(self, priority_group_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_priority_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_priority_group_args()
        args.priority_group_id = priority_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_priority_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_priority_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_priority_group failed: unknown result")

    def sai_thrift_get_priority_group_attribute(self, priority_group_id):
        """
        Parameters:
         - priority_group_id

        """
        self.send_sai_thrift_get_priority_group_attribute(priority_group_id)
        return self.recv_sai_thrift_get_priority_group_attribute()

    def send_sai_thrift_get_priority_group_attribute(self, priority_group_id):
        self._oprot.writeMessageBegin('sai_thrift_get_priority_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_priority_group_attribute_args()
        args.priority_group_id = priority_group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_priority_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_priority_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_priority_group_attribute failed: unknown result")

    def sai_thrift_set_priority_group_attribute(self, pg_id, thrift_attr):
        """
        Parameters:
         - pg_id
         - thrift_attr

        """
        self.send_sai_thrift_set_priority_group_attribute(pg_id, thrift_attr)
        return self.recv_sai_thrift_set_priority_group_attribute()

    def send_sai_thrift_set_priority_group_attribute(self, pg_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_priority_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_priority_group_attribute_args()
        args.pg_id = pg_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_priority_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_priority_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_priority_group_attribute failed: unknown result")

    def sai_thrift_get_pg_stats(self, pg_id, counter_ids, number_of_counters):
        """
        Parameters:
         - pg_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_get_pg_stats(pg_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_get_pg_stats()

    def send_sai_thrift_get_pg_stats(self, pg_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_pg_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_pg_stats_args()
        args.pg_id = pg_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_pg_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_pg_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_pg_stats failed: unknown result")

    def sai_thrift_create_wred_profile(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_wred_profile(thrift_attr_list)
        return self.recv_sai_thrift_create_wred_profile()

    def send_sai_thrift_create_wred_profile(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_wred_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_wred_profile_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_wred_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_wred_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_wred_profile failed: unknown result")

    def sai_thrift_remove_wred_profile(self, wred_id):
        """
        Parameters:
         - wred_id

        """
        self.send_sai_thrift_remove_wred_profile(wred_id)
        return self.recv_sai_thrift_remove_wred_profile()

    def send_sai_thrift_remove_wred_profile(self, wred_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_wred_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_wred_profile_args()
        args.wred_id = wred_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_wred_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_wred_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_wred_profile failed: unknown result")

    def sai_thrift_get_wred_attribute_profile(self, wred_id):
        """
        Parameters:
         - wred_id

        """
        self.send_sai_thrift_get_wred_attribute_profile(wred_id)
        return self.recv_sai_thrift_get_wred_attribute_profile()

    def send_sai_thrift_get_wred_attribute_profile(self, wred_id):
        self._oprot.writeMessageBegin('sai_thrift_get_wred_attribute_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_wred_attribute_profile_args()
        args.wred_id = wred_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_wred_attribute_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_wred_attribute_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_wred_attribute_profile failed: unknown result")

    def sai_thrift_set_wred_attribute_profile(self, wred_id, thrift_attr):
        """
        Parameters:
         - wred_id
         - thrift_attr

        """
        self.send_sai_thrift_set_wred_attribute_profile(wred_id, thrift_attr)
        return self.recv_sai_thrift_set_wred_attribute_profile()

    def send_sai_thrift_set_wred_attribute_profile(self, wred_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_wred_attribute_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_wred_attribute_profile_args()
        args.wred_id = wred_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_wred_attribute_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_wred_attribute_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_wred_attribute_profile failed: unknown result")

    def sai_thrift_create_qos_map(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_qos_map(thrift_attr_list)
        return self.recv_sai_thrift_create_qos_map()

    def send_sai_thrift_create_qos_map(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_qos_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_qos_map_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_qos_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_qos_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_qos_map failed: unknown result")

    def sai_thrift_remove_qos_map(self, qos_map_id):
        """
        Parameters:
         - qos_map_id

        """
        self.send_sai_thrift_remove_qos_map(qos_map_id)
        return self.recv_sai_thrift_remove_qos_map()

    def send_sai_thrift_remove_qos_map(self, qos_map_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_qos_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_qos_map_args()
        args.qos_map_id = qos_map_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_qos_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_qos_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_qos_map failed: unknown result")

    def sai_thrift_get_qos_map_attribute(self, qos_map_id):
        """
        Parameters:
         - qos_map_id

        """
        self.send_sai_thrift_get_qos_map_attribute(qos_map_id)
        return self.recv_sai_thrift_get_qos_map_attribute()

    def send_sai_thrift_get_qos_map_attribute(self, qos_map_id):
        self._oprot.writeMessageBegin('sai_thrift_get_qos_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_qos_map_attribute_args()
        args.qos_map_id = qos_map_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_qos_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_qos_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_qos_map_attribute failed: unknown result")

    def sai_thrift_set_qos_map_attribute(self, qos_map_id, thrift_attr):
        """
        Parameters:
         - qos_map_id
         - thrift_attr

        """
        self.send_sai_thrift_set_qos_map_attribute(qos_map_id, thrift_attr)
        return self.recv_sai_thrift_set_qos_map_attribute()

    def send_sai_thrift_set_qos_map_attribute(self, qos_map_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_qos_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_qos_map_attribute_args()
        args.qos_map_id = qos_map_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_qos_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_qos_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_qos_map_attribute failed: unknown result")

    def sai_thrift_create_l2mc_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_l2mc_group(thrift_attr_list)
        return self.recv_sai_thrift_create_l2mc_group()

    def send_sai_thrift_create_l2mc_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_l2mc_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_l2mc_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_l2mc_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_l2mc_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_l2mc_group failed: unknown result")

    def sai_thrift_remove_l2mc_group(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        self.send_sai_thrift_remove_l2mc_group(grp_id)
        return self.recv_sai_thrift_remove_l2mc_group()

    def send_sai_thrift_remove_l2mc_group(self, grp_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_l2mc_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_l2mc_group_args()
        args.grp_id = grp_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_l2mc_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_l2mc_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_l2mc_group failed: unknown result")

    def sai_thrift_get_l2mc_group_attribute(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        self.send_sai_thrift_get_l2mc_group_attribute(grp_id)
        return self.recv_sai_thrift_get_l2mc_group_attribute()

    def send_sai_thrift_get_l2mc_group_attribute(self, grp_id):
        self._oprot.writeMessageBegin('sai_thrift_get_l2mc_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_l2mc_group_attribute_args()
        args.grp_id = grp_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_l2mc_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_l2mc_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_l2mc_group_attribute failed: unknown result")

    def sai_thrift_create_l2mc_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_l2mc_group_member(thrift_attr_list)
        return self.recv_sai_thrift_create_l2mc_group_member()

    def send_sai_thrift_create_l2mc_group_member(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_l2mc_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_l2mc_group_member_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_l2mc_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_l2mc_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_l2mc_group_member failed: unknown result")

    def sai_thrift_remove_l2mc_group_member(self, member_id):
        """
        Parameters:
         - member_id

        """
        self.send_sai_thrift_remove_l2mc_group_member(member_id)
        return self.recv_sai_thrift_remove_l2mc_group_member()

    def send_sai_thrift_remove_l2mc_group_member(self, member_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_l2mc_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_l2mc_group_member_args()
        args.member_id = member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_l2mc_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_l2mc_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_l2mc_group_member failed: unknown result")

    def sai_thrift_set_l2mc_group_member_attribute(self, member_id, thrift_attr):
        """
        Parameters:
         - member_id
         - thrift_attr

        """
        self.send_sai_thrift_set_l2mc_group_member_attribute(member_id, thrift_attr)
        return self.recv_sai_thrift_set_l2mc_group_member_attribute()

    def send_sai_thrift_set_l2mc_group_member_attribute(self, member_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_l2mc_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_l2mc_group_member_attribute_args()
        args.member_id = member_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_l2mc_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_l2mc_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_l2mc_group_member_attribute failed: unknown result")

    def sai_thrift_get_l2mc_group_member_attribute(self, member_id):
        """
        Parameters:
         - member_id

        """
        self.send_sai_thrift_get_l2mc_group_member_attribute(member_id)
        return self.recv_sai_thrift_get_l2mc_group_member_attribute()

    def send_sai_thrift_get_l2mc_group_member_attribute(self, member_id):
        self._oprot.writeMessageBegin('sai_thrift_get_l2mc_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_l2mc_group_member_attribute_args()
        args.member_id = member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_l2mc_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_l2mc_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_l2mc_group_member_attribute failed: unknown result")

    def sai_thrift_create_l2mc_entry(self, thrift_l2mc_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_l2mc_entry
         - thrift_attr_list

        """
        self.send_sai_thrift_create_l2mc_entry(thrift_l2mc_entry, thrift_attr_list)
        return self.recv_sai_thrift_create_l2mc_entry()

    def send_sai_thrift_create_l2mc_entry(self, thrift_l2mc_entry, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_l2mc_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_l2mc_entry_args()
        args.thrift_l2mc_entry = thrift_l2mc_entry
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_l2mc_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_l2mc_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_l2mc_entry failed: unknown result")

    def sai_thrift_remove_l2mc_entry(self, thrift_l2mc_entry):
        """
        Parameters:
         - thrift_l2mc_entry

        """
        self.send_sai_thrift_remove_l2mc_entry(thrift_l2mc_entry)
        return self.recv_sai_thrift_remove_l2mc_entry()

    def send_sai_thrift_remove_l2mc_entry(self, thrift_l2mc_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_l2mc_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_l2mc_entry_args()
        args.thrift_l2mc_entry = thrift_l2mc_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_l2mc_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_l2mc_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_l2mc_entry failed: unknown result")

    def sai_thrift_set_l2mc_entry_attribute(self, thrift_l2mc_entry, thrift_attr):
        """
        Parameters:
         - thrift_l2mc_entry
         - thrift_attr

        """
        self.send_sai_thrift_set_l2mc_entry_attribute(thrift_l2mc_entry, thrift_attr)
        return self.recv_sai_thrift_set_l2mc_entry_attribute()

    def send_sai_thrift_set_l2mc_entry_attribute(self, thrift_l2mc_entry, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_l2mc_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_l2mc_entry_attribute_args()
        args.thrift_l2mc_entry = thrift_l2mc_entry
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_l2mc_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_l2mc_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_l2mc_entry_attribute failed: unknown result")

    def sai_thrift_get_l2mc_entry_attribute(self, thrift_l2mc_entry):
        """
        Parameters:
         - thrift_l2mc_entry

        """
        self.send_sai_thrift_get_l2mc_entry_attribute(thrift_l2mc_entry)
        return self.recv_sai_thrift_get_l2mc_entry_attribute()

    def send_sai_thrift_get_l2mc_entry_attribute(self, thrift_l2mc_entry):
        self._oprot.writeMessageBegin('sai_thrift_get_l2mc_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_l2mc_entry_attribute_args()
        args.thrift_l2mc_entry = thrift_l2mc_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_l2mc_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_l2mc_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_l2mc_entry_attribute failed: unknown result")

    def sai_thrift_create_mcast_fdb_entry(self, thrift_mcast_fdb_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_mcast_fdb_entry
         - thrift_attr_list

        """
        self.send_sai_thrift_create_mcast_fdb_entry(thrift_mcast_fdb_entry, thrift_attr_list)
        return self.recv_sai_thrift_create_mcast_fdb_entry()

    def send_sai_thrift_create_mcast_fdb_entry(self, thrift_mcast_fdb_entry, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_mcast_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_mcast_fdb_entry_args()
        args.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_mcast_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_mcast_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_mcast_fdb_entry failed: unknown result")

    def sai_thrift_remove_mcast_fdb_entry(self, thrift_mcast_fdb_entry):
        """
        Parameters:
         - thrift_mcast_fdb_entry

        """
        self.send_sai_thrift_remove_mcast_fdb_entry(thrift_mcast_fdb_entry)
        return self.recv_sai_thrift_remove_mcast_fdb_entry()

    def send_sai_thrift_remove_mcast_fdb_entry(self, thrift_mcast_fdb_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_mcast_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_mcast_fdb_entry_args()
        args.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_mcast_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_mcast_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_mcast_fdb_entry failed: unknown result")

    def sai_thrift_set_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry, thrift_attr):
        """
        Parameters:
         - thrift_mcast_fdb_entry
         - thrift_attr

        """
        self.send_sai_thrift_set_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry, thrift_attr)
        return self.recv_sai_thrift_set_mcast_fdb_entry_attribute()

    def send_sai_thrift_set_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_mcast_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_mcast_fdb_entry_attribute_args()
        args.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_mcast_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_mcast_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_mcast_fdb_entry_attribute failed: unknown result")

    def sai_thrift_get_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry):
        """
        Parameters:
         - thrift_mcast_fdb_entry

        """
        self.send_sai_thrift_get_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry)
        return self.recv_sai_thrift_get_mcast_fdb_entry_attribute()

    def send_sai_thrift_get_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry):
        self._oprot.writeMessageBegin('sai_thrift_get_mcast_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_mcast_fdb_entry_attribute_args()
        args.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_mcast_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_mcast_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_mcast_fdb_entry_attribute failed: unknown result")

    def sai_thrift_create_ipmc_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_ipmc_group(thrift_attr_list)
        return self.recv_sai_thrift_create_ipmc_group()

    def send_sai_thrift_create_ipmc_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ipmc_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ipmc_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ipmc_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ipmc_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipmc_group failed: unknown result")

    def sai_thrift_remove_ipmc_group(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        self.send_sai_thrift_remove_ipmc_group(grp_id)
        return self.recv_sai_thrift_remove_ipmc_group()

    def send_sai_thrift_remove_ipmc_group(self, grp_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_ipmc_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ipmc_group_args()
        args.grp_id = grp_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ipmc_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ipmc_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_ipmc_group failed: unknown result")

    def sai_thrift_get_ipmc_group_attribute(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        self.send_sai_thrift_get_ipmc_group_attribute(grp_id)
        return self.recv_sai_thrift_get_ipmc_group_attribute()

    def send_sai_thrift_get_ipmc_group_attribute(self, grp_id):
        self._oprot.writeMessageBegin('sai_thrift_get_ipmc_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipmc_group_attribute_args()
        args.grp_id = grp_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipmc_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipmc_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipmc_group_attribute failed: unknown result")

    def sai_thrift_create_ipmc_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_ipmc_group_member(thrift_attr_list)
        return self.recv_sai_thrift_create_ipmc_group_member()

    def send_sai_thrift_create_ipmc_group_member(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ipmc_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ipmc_group_member_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ipmc_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ipmc_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipmc_group_member failed: unknown result")

    def sai_thrift_remove_ipmc_group_member(self, member_id):
        """
        Parameters:
         - member_id

        """
        self.send_sai_thrift_remove_ipmc_group_member(member_id)
        return self.recv_sai_thrift_remove_ipmc_group_member()

    def send_sai_thrift_remove_ipmc_group_member(self, member_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_ipmc_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ipmc_group_member_args()
        args.member_id = member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ipmc_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ipmc_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_ipmc_group_member failed: unknown result")

    def sai_thrift_set_ipmc_group_member_attribute(self, member_id, thrift_attr):
        """
        Parameters:
         - member_id
         - thrift_attr

        """
        self.send_sai_thrift_set_ipmc_group_member_attribute(member_id, thrift_attr)
        return self.recv_sai_thrift_set_ipmc_group_member_attribute()

    def send_sai_thrift_set_ipmc_group_member_attribute(self, member_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ipmc_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ipmc_group_member_attribute_args()
        args.member_id = member_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ipmc_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ipmc_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_ipmc_group_member_attribute failed: unknown result")

    def sai_thrift_get_ipmc_group_member_attribute(self, member_id):
        """
        Parameters:
         - member_id

        """
        self.send_sai_thrift_get_ipmc_group_member_attribute(member_id)
        return self.recv_sai_thrift_get_ipmc_group_member_attribute()

    def send_sai_thrift_get_ipmc_group_member_attribute(self, member_id):
        self._oprot.writeMessageBegin('sai_thrift_get_ipmc_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipmc_group_member_attribute_args()
        args.member_id = member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipmc_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipmc_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipmc_group_member_attribute failed: unknown result")

    def sai_thrift_create_rpf_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_rpf_group(thrift_attr_list)
        return self.recv_sai_thrift_create_rpf_group()

    def send_sai_thrift_create_rpf_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_rpf_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_rpf_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_rpf_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_rpf_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_rpf_group failed: unknown result")

    def sai_thrift_remove_rpf_group(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        self.send_sai_thrift_remove_rpf_group(grp_id)
        return self.recv_sai_thrift_remove_rpf_group()

    def send_sai_thrift_remove_rpf_group(self, grp_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_rpf_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_rpf_group_args()
        args.grp_id = grp_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_rpf_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_rpf_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_rpf_group failed: unknown result")

    def sai_thrift_get_rpf_group_attribute(self, grp_id):
        """
        Parameters:
         - grp_id

        """
        self.send_sai_thrift_get_rpf_group_attribute(grp_id)
        return self.recv_sai_thrift_get_rpf_group_attribute()

    def send_sai_thrift_get_rpf_group_attribute(self, grp_id):
        self._oprot.writeMessageBegin('sai_thrift_get_rpf_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_rpf_group_attribute_args()
        args.grp_id = grp_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_rpf_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_rpf_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_rpf_group_attribute failed: unknown result")

    def sai_thrift_create_rpf_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_rpf_group_member(thrift_attr_list)
        return self.recv_sai_thrift_create_rpf_group_member()

    def send_sai_thrift_create_rpf_group_member(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_rpf_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_rpf_group_member_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_rpf_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_rpf_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_rpf_group_member failed: unknown result")

    def sai_thrift_remove_rpf_group_member(self, member_id):
        """
        Parameters:
         - member_id

        """
        self.send_sai_thrift_remove_rpf_group_member(member_id)
        return self.recv_sai_thrift_remove_rpf_group_member()

    def send_sai_thrift_remove_rpf_group_member(self, member_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_rpf_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_rpf_group_member_args()
        args.member_id = member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_rpf_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_rpf_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_rpf_group_member failed: unknown result")

    def sai_thrift_set_rpf_group_member_attribute(self, member_id, thrift_attr):
        """
        Parameters:
         - member_id
         - thrift_attr

        """
        self.send_sai_thrift_set_rpf_group_member_attribute(member_id, thrift_attr)
        return self.recv_sai_thrift_set_rpf_group_member_attribute()

    def send_sai_thrift_set_rpf_group_member_attribute(self, member_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_rpf_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_rpf_group_member_attribute_args()
        args.member_id = member_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_rpf_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_rpf_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_rpf_group_member_attribute failed: unknown result")

    def sai_thrift_get_rpf_group_member_attribute(self, member_id):
        """
        Parameters:
         - member_id

        """
        self.send_sai_thrift_get_rpf_group_member_attribute(member_id)
        return self.recv_sai_thrift_get_rpf_group_member_attribute()

    def send_sai_thrift_get_rpf_group_member_attribute(self, member_id):
        self._oprot.writeMessageBegin('sai_thrift_get_rpf_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_rpf_group_member_attribute_args()
        args.member_id = member_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_rpf_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_rpf_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_rpf_group_member_attribute failed: unknown result")

    def sai_thrift_create_ipmc_entry(self, thrift_ipmc_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_ipmc_entry
         - thrift_attr_list

        """
        self.send_sai_thrift_create_ipmc_entry(thrift_ipmc_entry, thrift_attr_list)
        return self.recv_sai_thrift_create_ipmc_entry()

    def send_sai_thrift_create_ipmc_entry(self, thrift_ipmc_entry, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ipmc_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ipmc_entry_args()
        args.thrift_ipmc_entry = thrift_ipmc_entry
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ipmc_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ipmc_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipmc_entry failed: unknown result")

    def sai_thrift_remove_ipmc_entry(self, thrift_ipmc_entry):
        """
        Parameters:
         - thrift_ipmc_entry

        """
        self.send_sai_thrift_remove_ipmc_entry(thrift_ipmc_entry)
        return self.recv_sai_thrift_remove_ipmc_entry()

    def send_sai_thrift_remove_ipmc_entry(self, thrift_ipmc_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_ipmc_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ipmc_entry_args()
        args.thrift_ipmc_entry = thrift_ipmc_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ipmc_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ipmc_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_ipmc_entry failed: unknown result")

    def sai_thrift_set_ipmc_entry_attribute(self, thrift_ipmc_entry, thrift_attr):
        """
        Parameters:
         - thrift_ipmc_entry
         - thrift_attr

        """
        self.send_sai_thrift_set_ipmc_entry_attribute(thrift_ipmc_entry, thrift_attr)
        return self.recv_sai_thrift_set_ipmc_entry_attribute()

    def send_sai_thrift_set_ipmc_entry_attribute(self, thrift_ipmc_entry, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ipmc_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ipmc_entry_attribute_args()
        args.thrift_ipmc_entry = thrift_ipmc_entry
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ipmc_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ipmc_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_ipmc_entry_attribute failed: unknown result")

    def sai_thrift_get_ipmc_entry_attribute(self, thrift_ipmc_entry):
        """
        Parameters:
         - thrift_ipmc_entry

        """
        self.send_sai_thrift_get_ipmc_entry_attribute(thrift_ipmc_entry)
        return self.recv_sai_thrift_get_ipmc_entry_attribute()

    def send_sai_thrift_get_ipmc_entry_attribute(self, thrift_ipmc_entry):
        self._oprot.writeMessageBegin('sai_thrift_get_ipmc_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipmc_entry_attribute_args()
        args.thrift_ipmc_entry = thrift_ipmc_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipmc_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipmc_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipmc_entry_attribute failed: unknown result")

    def sai_thrift_create_samplepacket(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_samplepacket(thrift_attr_list)
        return self.recv_sai_thrift_create_samplepacket()

    def send_sai_thrift_create_samplepacket(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_samplepacket', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_samplepacket_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_samplepacket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_samplepacket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_samplepacket failed: unknown result")

    def sai_thrift_remove_samplepacket(self, samplepacket_id):
        """
        Parameters:
         - samplepacket_id

        """
        self.send_sai_thrift_remove_samplepacket(samplepacket_id)
        return self.recv_sai_thrift_remove_samplepacket()

    def send_sai_thrift_remove_samplepacket(self, samplepacket_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_samplepacket', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_samplepacket_args()
        args.samplepacket_id = samplepacket_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_samplepacket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_samplepacket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_samplepacket failed: unknown result")

    def sai_thrift_get_samplepacket_attribute(self, samplepacket_id):
        """
        Parameters:
         - samplepacket_id

        """
        self.send_sai_thrift_get_samplepacket_attribute(samplepacket_id)
        return self.recv_sai_thrift_get_samplepacket_attribute()

    def send_sai_thrift_get_samplepacket_attribute(self, samplepacket_id):
        self._oprot.writeMessageBegin('sai_thrift_get_samplepacket_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_samplepacket_attribute_args()
        args.samplepacket_id = samplepacket_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_samplepacket_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_samplepacket_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_samplepacket_attribute failed: unknown result")

    def sai_thrift_set_samplepacket_attribute(self, samplepacket_id, thrift_attr):
        """
        Parameters:
         - samplepacket_id
         - thrift_attr

        """
        self.send_sai_thrift_set_samplepacket_attribute(samplepacket_id, thrift_attr)
        return self.recv_sai_thrift_set_samplepacket_attribute()

    def send_sai_thrift_set_samplepacket_attribute(self, samplepacket_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_samplepacket_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_samplepacket_attribute_args()
        args.samplepacket_id = samplepacket_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_samplepacket_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_samplepacket_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_samplepacket_attribute failed: unknown result")

    def sai_thrift_create_tunnel_map_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_tunnel_map_entry(thrift_attr_list)
        return self.recv_sai_thrift_create_tunnel_map_entry()

    def send_sai_thrift_create_tunnel_map_entry(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tunnel_map_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tunnel_map_entry_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tunnel_map_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tunnel_map_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel_map_entry failed: unknown result")

    def sai_thrift_remove_tunnel_map_entry(self, tunnel_map_entry_id):
        """
        Parameters:
         - tunnel_map_entry_id

        """
        self.send_sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_id)
        return self.recv_sai_thrift_remove_tunnel_map_entry()

    def send_sai_thrift_remove_tunnel_map_entry(self, tunnel_map_entry_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_tunnel_map_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tunnel_map_entry_args()
        args.tunnel_map_entry_id = tunnel_map_entry_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tunnel_map_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tunnel_map_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_tunnel_map_entry failed: unknown result")

    def sai_thrift_get_tunnel_map_entry_attribute(self, tunnel_map_entry_id):
        """
        Parameters:
         - tunnel_map_entry_id

        """
        self.send_sai_thrift_get_tunnel_map_entry_attribute(tunnel_map_entry_id)
        return self.recv_sai_thrift_get_tunnel_map_entry_attribute()

    def send_sai_thrift_get_tunnel_map_entry_attribute(self, tunnel_map_entry_id):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_map_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_map_entry_attribute_args()
        args.tunnel_map_entry_id = tunnel_map_entry_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_map_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_map_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_map_entry_attribute failed: unknown result")

    def sai_thrift_set_tunnel_map_entry_attribute(self, tunnel_map_entry_id, thrift_attr):
        """
        Parameters:
         - tunnel_map_entry_id
         - thrift_attr

        """
        self.send_sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_id, thrift_attr)
        return self.recv_sai_thrift_set_tunnel_map_entry_attribute()

    def send_sai_thrift_set_tunnel_map_entry_attribute(self, tunnel_map_entry_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tunnel_map_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tunnel_map_entry_attribute_args()
        args.tunnel_map_entry_id = tunnel_map_entry_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tunnel_map_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tunnel_map_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_tunnel_map_entry_attribute failed: unknown result")

    def sai_thrift_create_tunnel_map(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_tunnel_map(thrift_attr_list)
        return self.recv_sai_thrift_create_tunnel_map()

    def send_sai_thrift_create_tunnel_map(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tunnel_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tunnel_map_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tunnel_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tunnel_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel_map failed: unknown result")

    def sai_thrift_remove_tunnel_map(self, tunnel_map_id):
        """
        Parameters:
         - tunnel_map_id

        """
        self.send_sai_thrift_remove_tunnel_map(tunnel_map_id)
        return self.recv_sai_thrift_remove_tunnel_map()

    def send_sai_thrift_remove_tunnel_map(self, tunnel_map_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_tunnel_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tunnel_map_args()
        args.tunnel_map_id = tunnel_map_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tunnel_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tunnel_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_tunnel_map failed: unknown result")

    def sai_thrift_get_tunnel_map_attribute(self, tunnel_map_id):
        """
        Parameters:
         - tunnel_map_id

        """
        self.send_sai_thrift_get_tunnel_map_attribute(tunnel_map_id)
        return self.recv_sai_thrift_get_tunnel_map_attribute()

    def send_sai_thrift_get_tunnel_map_attribute(self, tunnel_map_id):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_map_attribute_args()
        args.tunnel_map_id = tunnel_map_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_map_attribute failed: unknown result")

    def sai_thrift_set_tunnel_map_attribute(self, tunnel_map_id, thrift_attr):
        """
        Parameters:
         - tunnel_map_id
         - thrift_attr

        """
        self.send_sai_thrift_set_tunnel_map_attribute(tunnel_map_id, thrift_attr)
        return self.recv_sai_thrift_set_tunnel_map_attribute()

    def send_sai_thrift_set_tunnel_map_attribute(self, tunnel_map_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tunnel_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tunnel_map_attribute_args()
        args.tunnel_map_id = tunnel_map_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tunnel_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tunnel_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_tunnel_map_attribute failed: unknown result")

    def sai_thrift_create_tunnel(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_tunnel(thrift_attr_list)
        return self.recv_sai_thrift_create_tunnel()

    def send_sai_thrift_create_tunnel(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tunnel', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tunnel_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tunnel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tunnel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel failed: unknown result")

    def sai_thrift_remove_tunnel(self, tunnel_id):
        """
        Parameters:
         - tunnel_id

        """
        self.send_sai_thrift_remove_tunnel(tunnel_id)
        return self.recv_sai_thrift_remove_tunnel()

    def send_sai_thrift_remove_tunnel(self, tunnel_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_tunnel', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tunnel_args()
        args.tunnel_id = tunnel_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tunnel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tunnel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_tunnel failed: unknown result")

    def sai_thrift_get_tunnel_attribute(self, tunnel_id, thrift_attr_ids):
        """
        Parameters:
         - tunnel_id
         - thrift_attr_ids

        """
        self.send_sai_thrift_get_tunnel_attribute(tunnel_id, thrift_attr_ids)
        return self.recv_sai_thrift_get_tunnel_attribute()

    def send_sai_thrift_get_tunnel_attribute(self, tunnel_id, thrift_attr_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_attribute_args()
        args.tunnel_id = tunnel_id
        args.thrift_attr_ids = thrift_attr_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_attribute failed: unknown result")

    def sai_thrift_set_tunnel_attribute(self, tunnel_id, thrift_attr):
        """
        Parameters:
         - tunnel_id
         - thrift_attr

        """
        self.send_sai_thrift_set_tunnel_attribute(tunnel_id, thrift_attr)
        return self.recv_sai_thrift_set_tunnel_attribute()

    def send_sai_thrift_set_tunnel_attribute(self, tunnel_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tunnel_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tunnel_attribute_args()
        args.tunnel_id = tunnel_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tunnel_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tunnel_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_tunnel_attribute failed: unknown result")

    def sai_thrift_get_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
        """
        Parameters:
         - tunnel_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_get_tunnel_stats(tunnel_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_get_tunnel_stats()

    def send_sai_thrift_get_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_stats_args()
        args.tunnel_id = tunnel_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_stats failed: unknown result")

    def sai_thrift_clear_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
        """
        Parameters:
         - tunnel_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_clear_tunnel_stats(tunnel_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_clear_tunnel_stats()

    def send_sai_thrift_clear_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_clear_tunnel_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_tunnel_stats_args()
        args.tunnel_id = tunnel_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_tunnel_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_tunnel_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_tunnel_stats failed: unknown result")

    def sai_thrift_create_tunnel_term_table_entry(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_tunnel_term_table_entry(thrift_attr_list)
        return self.recv_sai_thrift_create_tunnel_term_table_entry()

    def send_sai_thrift_create_tunnel_term_table_entry(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tunnel_term_table_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tunnel_term_table_entry_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tunnel_term_table_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tunnel_term_table_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel_term_table_entry failed: unknown result")

    def sai_thrift_remove_tunnel_term_table_entry(self, tunnel_term_table_entry_id):
        """
        Parameters:
         - tunnel_term_table_entry_id

        """
        self.send_sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_id)
        return self.recv_sai_thrift_remove_tunnel_term_table_entry()

    def send_sai_thrift_remove_tunnel_term_table_entry(self, tunnel_term_table_entry_id):
        self._oprot.writeMessageBegin('sai_thrift_remove_tunnel_term_table_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tunnel_term_table_entry_args()
        args.tunnel_term_table_entry_id = tunnel_term_table_entry_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tunnel_term_table_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tunnel_term_table_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_tunnel_term_table_entry failed: unknown result")

    def sai_thrift_get_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr_ids):
        """
        Parameters:
         - tunnel_term_table_entry_id
         - thrift_attr_ids

        """
        self.send_sai_thrift_get_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr_ids)
        return self.recv_sai_thrift_get_tunnel_term_table_entry_attribute()

    def send_sai_thrift_get_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_term_table_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_term_table_entry_attribute_args()
        args.tunnel_term_table_entry_id = tunnel_term_table_entry_id
        args.thrift_attr_ids = thrift_attr_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_term_table_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_term_table_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_term_table_entry_attribute failed: unknown result")

    def sai_thrift_set_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr):
        """
        Parameters:
         - tunnel_term_table_entry_id
         - thrift_attr

        """
        self.send_sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr)
        return self.recv_sai_thrift_set_tunnel_term_table_entry_attribute()

    def send_sai_thrift_set_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tunnel_term_table_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tunnel_term_table_entry_attribute_args()
        args.tunnel_term_table_entry_id = tunnel_term_table_entry_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tunnel_term_table_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tunnel_term_table_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_tunnel_term_table_entry_attribute failed: unknown result")

    def sai_thrift_get_cpu_packet_attribute(self):
        self.send_sai_thrift_get_cpu_packet_attribute()
        return self.recv_sai_thrift_get_cpu_packet_attribute()

    def send_sai_thrift_get_cpu_packet_attribute(self):
        self._oprot.writeMessageBegin('sai_thrift_get_cpu_packet_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_cpu_packet_attribute_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_cpu_packet_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_cpu_packet_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_cpu_packet_attribute failed: unknown result")

    def sai_thrift_get_cpu_packet_count(self):
        self.send_sai_thrift_get_cpu_packet_count()
        return self.recv_sai_thrift_get_cpu_packet_count()

    def send_sai_thrift_get_cpu_packet_count(self):
        self._oprot.writeMessageBegin('sai_thrift_get_cpu_packet_count', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_cpu_packet_count_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_cpu_packet_count(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_cpu_packet_count_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_cpu_packet_count failed: unknown result")

    def sai_thrift_clear_cpu_packet_info(self):
        self.send_sai_thrift_clear_cpu_packet_info()
        return self.recv_sai_thrift_clear_cpu_packet_info()

    def send_sai_thrift_clear_cpu_packet_info(self):
        self._oprot.writeMessageBegin('sai_thrift_clear_cpu_packet_info', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_cpu_packet_info_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_cpu_packet_info(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_cpu_packet_info_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_cpu_packet_info failed: unknown result")

    def sai_thrift_log_set(self, sai_api_id, log_level):
        """
        Parameters:
         - sai_api_id
         - log_level

        """
        self.send_sai_thrift_log_set(sai_api_id, log_level)
        return self.recv_sai_thrift_log_set()

    def send_sai_thrift_log_set(self, sai_api_id, log_level):
        self._oprot.writeMessageBegin('sai_thrift_log_set', TMessageType.CALL, self._seqid)
        args = sai_thrift_log_set_args()
        args.sai_api_id = sai_api_id
        args.log_level = log_level
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_log_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_log_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_log_set failed: unknown result")

    def sai_thrift_create_isolation_group(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_isolation_group(thrift_attr_list)
        return self.recv_sai_thrift_create_isolation_group()

    def send_sai_thrift_create_isolation_group(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_isolation_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_isolation_group_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_isolation_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_isolation_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_isolation_group failed: unknown result")

    def sai_thrift_remove_isolation_group(self, iso_group_oid):
        """
        Parameters:
         - iso_group_oid

        """
        self.send_sai_thrift_remove_isolation_group(iso_group_oid)
        return self.recv_sai_thrift_remove_isolation_group()

    def send_sai_thrift_remove_isolation_group(self, iso_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_isolation_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_isolation_group_args()
        args.iso_group_oid = iso_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_isolation_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_isolation_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_isolation_group failed: unknown result")

    def sai_thrift_create_isolation_group_member(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_isolation_group_member(thrift_attr_list)
        return self.recv_sai_thrift_create_isolation_group_member()

    def send_sai_thrift_create_isolation_group_member(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_isolation_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_isolation_group_member_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_isolation_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_isolation_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_isolation_group_member failed: unknown result")

    def sai_thrift_remove_isolation_group_member(self, member_oid):
        """
        Parameters:
         - member_oid

        """
        self.send_sai_thrift_remove_isolation_group_member(member_oid)
        return self.recv_sai_thrift_remove_isolation_group_member()

    def send_sai_thrift_remove_isolation_group_member(self, member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_isolation_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_isolation_group_member_args()
        args.member_oid = member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_isolation_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_isolation_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_isolation_group_member failed: unknown result")

    def sai_thrift_get_isolation_group_attributes(self, iso_group_oid):
        """
        Parameters:
         - iso_group_oid

        """
        self.send_sai_thrift_get_isolation_group_attributes(iso_group_oid)
        return self.recv_sai_thrift_get_isolation_group_attributes()

    def send_sai_thrift_get_isolation_group_attributes(self, iso_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_isolation_group_attributes', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_isolation_group_attributes_args()
        args.iso_group_oid = iso_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_isolation_group_attributes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_isolation_group_attributes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_isolation_group_attributes failed: unknown result")

    def sai_thrift_get_isolation_group_member_attributes(self, member_oid):
        """
        Parameters:
         - member_oid

        """
        self.send_sai_thrift_get_isolation_group_member_attributes(member_oid)
        return self.recv_sai_thrift_get_isolation_group_member_attributes()

    def send_sai_thrift_get_isolation_group_member_attributes(self, member_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_isolation_group_member_attributes', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_isolation_group_member_attributes_args()
        args.member_oid = member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_isolation_group_member_attributes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_isolation_group_member_attributes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_isolation_group_member_attributes failed: unknown result")

    def sai_thrift_create_counter(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_counter(thrift_attr_list)
        return self.recv_sai_thrift_create_counter()

    def send_sai_thrift_create_counter(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_counter_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_counter failed: unknown result")

    def sai_thrift_remove_counter(self, counter_oid):
        """
        Parameters:
         - counter_oid

        """
        self.send_sai_thrift_remove_counter(counter_oid)
        return self.recv_sai_thrift_remove_counter()

    def send_sai_thrift_remove_counter(self, counter_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_counter_args()
        args.counter_oid = counter_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_counter failed: unknown result")

    def sai_thrift_set_counter_attribute(self, thrift_counter_id, thrift_attr):
        """
        Parameters:
         - thrift_counter_id
         - thrift_attr

        """
        self.send_sai_thrift_set_counter_attribute(thrift_counter_id, thrift_attr)
        return self.recv_sai_thrift_set_counter_attribute()

    def send_sai_thrift_set_counter_attribute(self, thrift_counter_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_counter_attribute_args()
        args.thrift_counter_id = thrift_counter_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_counter_attribute failed: unknown result")

    def sai_thrift_get_counter_attribute(self, thrift_counter_id):
        """
        Parameters:
         - thrift_counter_id

        """
        self.send_sai_thrift_get_counter_attribute(thrift_counter_id)
        return self.recv_sai_thrift_get_counter_attribute()

    def send_sai_thrift_get_counter_attribute(self, thrift_counter_id):
        self._oprot.writeMessageBegin('sai_thrift_get_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_counter_attribute_args()
        args.thrift_counter_id = thrift_counter_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_counter_attribute failed: unknown result")

    def sai_thrift_get_counter_stats(self, counter_id, counter_ids, number_of_counters):
        """
        Parameters:
         - counter_id
         - counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_get_counter_stats(counter_id, counter_ids, number_of_counters)
        return self.recv_sai_thrift_get_counter_stats()

    def send_sai_thrift_get_counter_stats(self, counter_id, counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_counter_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_counter_stats_args()
        args.counter_id = counter_id
        args.counter_ids = counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_counter_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_counter_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_counter_stats failed: unknown result")

    def sai_thrift_get_counter_stats_ext(self, counter_id, counter_ids, mode, number_of_counters):
        """
        Parameters:
         - counter_id
         - counter_ids
         - mode
         - number_of_counters

        """
        self.send_sai_thrift_get_counter_stats_ext(counter_id, counter_ids, mode, number_of_counters)
        return self.recv_sai_thrift_get_counter_stats_ext()

    def send_sai_thrift_get_counter_stats_ext(self, counter_id, counter_ids, mode, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_get_counter_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_counter_stats_ext_args()
        args.counter_id = counter_id
        args.counter_ids = counter_ids
        args.mode = mode
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_counter_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_counter_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_counter_stats_ext failed: unknown result")

    def sai_thrift_clear_counter_stats(self, counter_id, thrift_counter_ids, number_of_counters):
        """
        Parameters:
         - counter_id
         - thrift_counter_ids
         - number_of_counters

        """
        self.send_sai_thrift_clear_counter_stats(counter_id, thrift_counter_ids, number_of_counters)
        return self.recv_sai_thrift_clear_counter_stats()

    def send_sai_thrift_clear_counter_stats(self, counter_id, thrift_counter_ids, number_of_counters):
        self._oprot.writeMessageBegin('sai_thrift_clear_counter_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_counter_stats_args()
        args.counter_id = counter_id
        args.thrift_counter_ids = thrift_counter_ids
        args.number_of_counters = number_of_counters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_counter_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_counter_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_counter_stats failed: unknown result")

    def sai_thrift_create_debug_counter(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_debug_counter(thrift_attr_list)
        return self.recv_sai_thrift_create_debug_counter()

    def send_sai_thrift_create_debug_counter(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_debug_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_debug_counter_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_debug_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_debug_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_debug_counter failed: unknown result")

    def sai_thrift_remove_debug_counter(self, debug_counter_oid):
        """
        Parameters:
         - debug_counter_oid

        """
        self.send_sai_thrift_remove_debug_counter(debug_counter_oid)
        return self.recv_sai_thrift_remove_debug_counter()

    def send_sai_thrift_remove_debug_counter(self, debug_counter_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_debug_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_debug_counter_args()
        args.debug_counter_oid = debug_counter_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_debug_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_debug_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_debug_counter failed: unknown result")

    def sai_thrift_set_debug_counter_attribute(self, thrift_debug_counter_id, thrift_attr):
        """
        Parameters:
         - thrift_debug_counter_id
         - thrift_attr

        """
        self.send_sai_thrift_set_debug_counter_attribute(thrift_debug_counter_id, thrift_attr)
        return self.recv_sai_thrift_set_debug_counter_attribute()

    def send_sai_thrift_set_debug_counter_attribute(self, thrift_debug_counter_id, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_debug_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_debug_counter_attribute_args()
        args.thrift_debug_counter_id = thrift_debug_counter_id
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_debug_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_debug_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_debug_counter_attribute failed: unknown result")

    def sai_thrift_get_debug_counter_attribute(self, thrift_debug_counter_id):
        """
        Parameters:
         - thrift_debug_counter_id

        """
        self.send_sai_thrift_get_debug_counter_attribute(thrift_debug_counter_id)
        return self.recv_sai_thrift_get_debug_counter_attribute()

    def send_sai_thrift_get_debug_counter_attribute(self, thrift_debug_counter_id):
        self._oprot.writeMessageBegin('sai_thrift_get_debug_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_debug_counter_attribute_args()
        args.thrift_debug_counter_id = thrift_debug_counter_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_debug_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_debug_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_debug_counter_attribute failed: unknown result")

    def sai_thrift_create_nat(self, thrift_nat_entry, thrift_attr_list):
        """
        Parameters:
         - thrift_nat_entry
         - thrift_attr_list

        """
        self.send_sai_thrift_create_nat(thrift_nat_entry, thrift_attr_list)
        return self.recv_sai_thrift_create_nat()

    def send_sai_thrift_create_nat(self, thrift_nat_entry, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_nat', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_nat_args()
        args.thrift_nat_entry = thrift_nat_entry
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_nat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_nat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_nat failed: unknown result")

    def sai_thrift_remove_nat(self, thrift_nat_entry):
        """
        Parameters:
         - thrift_nat_entry

        """
        self.send_sai_thrift_remove_nat(thrift_nat_entry)
        return self.recv_sai_thrift_remove_nat()

    def send_sai_thrift_remove_nat(self, thrift_nat_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_nat', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_nat_args()
        args.thrift_nat_entry = thrift_nat_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_nat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_nat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_nat failed: unknown result")

    def sai_thrift_set_nat_attribute(self, thrift_nat_entry, thrift_attr):
        """
        Parameters:
         - thrift_nat_entry
         - thrift_attr

        """
        self.send_sai_thrift_set_nat_attribute(thrift_nat_entry, thrift_attr)
        return self.recv_sai_thrift_set_nat_attribute()

    def send_sai_thrift_set_nat_attribute(self, thrift_nat_entry, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_nat_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_nat_attribute_args()
        args.thrift_nat_entry = thrift_nat_entry
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_nat_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_nat_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_nat_attribute failed: unknown result")

    def sai_thrift_get_nat_attribute(self, thrift_nat_entry):
        """
        Parameters:
         - thrift_nat_entry

        """
        self.send_sai_thrift_get_nat_attribute(thrift_nat_entry)
        return self.recv_sai_thrift_get_nat_attribute()

    def send_sai_thrift_get_nat_attribute(self, thrift_nat_entry):
        self._oprot.writeMessageBegin('sai_thrift_get_nat_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_nat_attribute_args()
        args.thrift_nat_entry = thrift_nat_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_nat_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_nat_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_nat_attribute failed: unknown result")

    def sai_thrift_create_bfd(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_bfd(thrift_attr_list)
        return self.recv_sai_thrift_create_bfd()

    def send_sai_thrift_create_bfd(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_bfd', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_bfd_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_bfd(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_bfd_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_bfd failed: unknown result")

    def sai_thrift_remove_bfd(self, bfd_oid):
        """
        Parameters:
         - bfd_oid

        """
        self.send_sai_thrift_remove_bfd(bfd_oid)
        return self.recv_sai_thrift_remove_bfd()

    def send_sai_thrift_remove_bfd(self, bfd_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_bfd', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_bfd_args()
        args.bfd_oid = bfd_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_bfd(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_bfd_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_bfd failed: unknown result")

    def sai_thrift_set_bfd_attribute(self, bfd_oid, thrift_attr):
        """
        Parameters:
         - bfd_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_bfd_attribute(bfd_oid, thrift_attr)
        return self.recv_sai_thrift_set_bfd_attribute()

    def send_sai_thrift_set_bfd_attribute(self, bfd_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_bfd_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_bfd_attribute_args()
        args.bfd_oid = bfd_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_bfd_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_bfd_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_bfd_attribute failed: unknown result")

    def sai_thrift_get_bfd_attribute(self, bfd_oid):
        """
        Parameters:
         - bfd_oid

        """
        self.send_sai_thrift_get_bfd_attribute(bfd_oid)
        return self.recv_sai_thrift_get_bfd_attribute()

    def send_sai_thrift_get_bfd_attribute(self, bfd_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_bfd_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bfd_attribute_args()
        args.bfd_oid = bfd_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bfd_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bfd_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bfd_attribute failed: unknown result")

    def sai_thrift_create_y1731_meg(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_y1731_meg(thrift_attr_list)
        return self.recv_sai_thrift_create_y1731_meg()

    def send_sai_thrift_create_y1731_meg(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_y1731_meg', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_y1731_meg_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_y1731_meg(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_y1731_meg_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_y1731_meg failed: unknown result")

    def sai_thrift_remove_y1731_meg(self, y1731_meg_oid):
        """
        Parameters:
         - y1731_meg_oid

        """
        self.send_sai_thrift_remove_y1731_meg(y1731_meg_oid)
        return self.recv_sai_thrift_remove_y1731_meg()

    def send_sai_thrift_remove_y1731_meg(self, y1731_meg_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_y1731_meg', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_y1731_meg_args()
        args.y1731_meg_oid = y1731_meg_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_y1731_meg(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_y1731_meg_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_y1731_meg failed: unknown result")

    def sai_thrift_set_y1731_meg_attribute(self, y1731_meg_oid, thrift_attr):
        """
        Parameters:
         - y1731_meg_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_y1731_meg_attribute(y1731_meg_oid, thrift_attr)
        return self.recv_sai_thrift_set_y1731_meg_attribute()

    def send_sai_thrift_set_y1731_meg_attribute(self, y1731_meg_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_y1731_meg_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_y1731_meg_attribute_args()
        args.y1731_meg_oid = y1731_meg_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_y1731_meg_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_y1731_meg_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_y1731_meg_attribute failed: unknown result")

    def sai_thrift_get_y1731_meg_attribute(self, y1731_meg_oid):
        """
        Parameters:
         - y1731_meg_oid

        """
        self.send_sai_thrift_get_y1731_meg_attribute(y1731_meg_oid)
        return self.recv_sai_thrift_get_y1731_meg_attribute()

    def send_sai_thrift_get_y1731_meg_attribute(self, y1731_meg_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_y1731_meg_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_y1731_meg_attribute_args()
        args.y1731_meg_oid = y1731_meg_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_y1731_meg_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_y1731_meg_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_y1731_meg_attribute failed: unknown result")

    def sai_thrift_create_y1731_session(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_y1731_session(thrift_attr_list)
        return self.recv_sai_thrift_create_y1731_session()

    def send_sai_thrift_create_y1731_session(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_y1731_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_y1731_session_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_y1731_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_y1731_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_y1731_session failed: unknown result")

    def sai_thrift_remove_y1731_session(self, y1731_session_oid):
        """
        Parameters:
         - y1731_session_oid

        """
        self.send_sai_thrift_remove_y1731_session(y1731_session_oid)
        return self.recv_sai_thrift_remove_y1731_session()

    def send_sai_thrift_remove_y1731_session(self, y1731_session_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_y1731_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_y1731_session_args()
        args.y1731_session_oid = y1731_session_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_y1731_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_y1731_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_y1731_session failed: unknown result")

    def sai_thrift_set_y1731_session_attribute(self, y1731_session_oid, thrift_attr):
        """
        Parameters:
         - y1731_session_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_y1731_session_attribute(y1731_session_oid, thrift_attr)
        return self.recv_sai_thrift_set_y1731_session_attribute()

    def send_sai_thrift_set_y1731_session_attribute(self, y1731_session_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_y1731_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_y1731_session_attribute_args()
        args.y1731_session_oid = y1731_session_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_y1731_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_y1731_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_y1731_session_attribute failed: unknown result")

    def sai_thrift_get_y1731_session_attribute(self, y1731_session_oid):
        """
        Parameters:
         - y1731_session_oid

        """
        self.send_sai_thrift_get_y1731_session_attribute(y1731_session_oid)
        return self.recv_sai_thrift_get_y1731_session_attribute()

    def send_sai_thrift_get_y1731_session_attribute(self, y1731_session_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_y1731_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_y1731_session_attribute_args()
        args.y1731_session_oid = y1731_session_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_y1731_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_y1731_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_y1731_session_attribute failed: unknown result")

    def sai_thrift_create_y1731_rmep(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_y1731_rmep(thrift_attr_list)
        return self.recv_sai_thrift_create_y1731_rmep()

    def send_sai_thrift_create_y1731_rmep(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_y1731_rmep', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_y1731_rmep_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_y1731_rmep(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_y1731_rmep_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_y1731_rmep failed: unknown result")

    def sai_thrift_remove_y1731_rmep(self, y1731_rmep_oid):
        """
        Parameters:
         - y1731_rmep_oid

        """
        self.send_sai_thrift_remove_y1731_rmep(y1731_rmep_oid)
        return self.recv_sai_thrift_remove_y1731_rmep()

    def send_sai_thrift_remove_y1731_rmep(self, y1731_rmep_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_y1731_rmep', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_y1731_rmep_args()
        args.y1731_rmep_oid = y1731_rmep_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_y1731_rmep(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_y1731_rmep_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_y1731_rmep failed: unknown result")

    def sai_thrift_set_y1731_rmep_attribute(self, y1731_rmep_oid, thrift_attr):
        """
        Parameters:
         - y1731_rmep_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_y1731_rmep_attribute(y1731_rmep_oid, thrift_attr)
        return self.recv_sai_thrift_set_y1731_rmep_attribute()

    def send_sai_thrift_set_y1731_rmep_attribute(self, y1731_rmep_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_y1731_rmep_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_y1731_rmep_attribute_args()
        args.y1731_rmep_oid = y1731_rmep_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_y1731_rmep_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_y1731_rmep_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_y1731_rmep_attribute failed: unknown result")

    def sai_thrift_get_y1731_rmep_attribute(self, y1731_rmep_oid):
        """
        Parameters:
         - y1731_rmep_oid

        """
        self.send_sai_thrift_get_y1731_rmep_attribute(y1731_rmep_oid)
        return self.recv_sai_thrift_get_y1731_rmep_attribute()

    def send_sai_thrift_get_y1731_rmep_attribute(self, y1731_rmep_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_y1731_rmep_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_y1731_rmep_attribute_args()
        args.y1731_rmep_oid = y1731_rmep_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_y1731_rmep_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_y1731_rmep_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_y1731_rmep_attribute failed: unknown result")

    def sai_thrift_get_y1731_session_lm_stats(self, y1731_session_oid, lm_stats_ids, number_of_stats):
        """
        Parameters:
         - y1731_session_oid
         - lm_stats_ids
         - number_of_stats

        """
        self.send_sai_thrift_get_y1731_session_lm_stats(y1731_session_oid, lm_stats_ids, number_of_stats)
        return self.recv_sai_thrift_get_y1731_session_lm_stats()

    def send_sai_thrift_get_y1731_session_lm_stats(self, y1731_session_oid, lm_stats_ids, number_of_stats):
        self._oprot.writeMessageBegin('sai_thrift_get_y1731_session_lm_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_y1731_session_lm_stats_args()
        args.y1731_session_oid = y1731_session_oid
        args.lm_stats_ids = lm_stats_ids
        args.number_of_stats = number_of_stats
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_y1731_session_lm_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_y1731_session_lm_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_y1731_session_lm_stats failed: unknown result")

    def sai_thrift_create_port(self, port_name, thrift_attr_list):
        """
        Parameters:
         - port_name
         - thrift_attr_list

        """
        self.send_sai_thrift_create_port(port_name, thrift_attr_list)
        return self.recv_sai_thrift_create_port()

    def send_sai_thrift_create_port(self, port_name, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_port_args()
        args.port_name = port_name
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_port failed: unknown result")

    def sai_thrift_remove_port(self, port_oid):
        """
        Parameters:
         - port_oid

        """
        self.send_sai_thrift_remove_port(port_oid)
        return self.recv_sai_thrift_remove_port()

    def send_sai_thrift_remove_port(self, port_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_port_args()
        args.port_oid = port_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_port failed: unknown result")

    def sai_thrift_create_ptp_domain(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_ptp_domain(thrift_attr_list)
        return self.recv_sai_thrift_create_ptp_domain()

    def send_sai_thrift_create_ptp_domain(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ptp_domain', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ptp_domain_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ptp_domain(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ptp_domain_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ptp_domain failed: unknown result")

    def sai_thrift_remove_ptp_domain(self, ptp_oid):
        """
        Parameters:
         - ptp_oid

        """
        self.send_sai_thrift_remove_ptp_domain(ptp_oid)
        return self.recv_sai_thrift_remove_ptp_domain()

    def send_sai_thrift_remove_ptp_domain(self, ptp_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_ptp_domain', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ptp_domain_args()
        args.ptp_oid = ptp_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ptp_domain(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ptp_domain_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_ptp_domain failed: unknown result")

    def sai_thrift_set_ptp_domain_attribute(self, ptp_oid, thrift_attr):
        """
        Parameters:
         - ptp_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_ptp_domain_attribute(ptp_oid, thrift_attr)
        return self.recv_sai_thrift_set_ptp_domain_attribute()

    def send_sai_thrift_set_ptp_domain_attribute(self, ptp_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ptp_domain_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ptp_domain_attribute_args()
        args.ptp_oid = ptp_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ptp_domain_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ptp_domain_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_ptp_domain_attribute failed: unknown result")

    def sai_thrift_get_ptp_domain_attribute(self, ptp_oid):
        """
        Parameters:
         - ptp_oid

        """
        self.send_sai_thrift_get_ptp_domain_attribute(ptp_oid)
        return self.recv_sai_thrift_get_ptp_domain_attribute()

    def send_sai_thrift_get_ptp_domain_attribute(self, ptp_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_ptp_domain_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ptp_domain_attribute_args()
        args.ptp_oid = ptp_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ptp_domain_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ptp_domain_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ptp_domain_attribute failed: unknown result")

    def sai_thrift_create_synce(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_synce(thrift_attr_list)
        return self.recv_sai_thrift_create_synce()

    def send_sai_thrift_create_synce(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_synce', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_synce_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_synce(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_synce_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_synce failed: unknown result")

    def sai_thrift_remove_synce(self, synce_oid):
        """
        Parameters:
         - synce_oid

        """
        self.send_sai_thrift_remove_synce(synce_oid)
        return self.recv_sai_thrift_remove_synce()

    def send_sai_thrift_remove_synce(self, synce_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_synce', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_synce_args()
        args.synce_oid = synce_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_synce(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_synce_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_synce failed: unknown result")

    def sai_thrift_set_synce_attribute(self, synce_oid, thrift_attr):
        """
        Parameters:
         - synce_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_synce_attribute(synce_oid, thrift_attr)
        return self.recv_sai_thrift_set_synce_attribute()

    def send_sai_thrift_set_synce_attribute(self, synce_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_synce_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_synce_attribute_args()
        args.synce_oid = synce_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_synce_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_synce_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_synce_attribute failed: unknown result")

    def sai_thrift_get_synce_attribute(self, synce_oid):
        """
        Parameters:
         - synce_oid

        """
        self.send_sai_thrift_get_synce_attribute(synce_oid)
        return self.recv_sai_thrift_get_synce_attribute()

    def send_sai_thrift_get_synce_attribute(self, synce_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_synce_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_synce_attribute_args()
        args.synce_oid = synce_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_synce_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_synce_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_synce_attribute failed: unknown result")

    def sai_thrift_create_es(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_es(thrift_attr_list)
        return self.recv_sai_thrift_create_es()

    def send_sai_thrift_create_es(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_es', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_es_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_es(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_es_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_es failed: unknown result")

    def sai_thrift_remove_es(self, es_oid):
        """
        Parameters:
         - es_oid

        """
        self.send_sai_thrift_remove_es(es_oid)
        return self.recv_sai_thrift_remove_es()

    def send_sai_thrift_remove_es(self, es_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_es', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_es_args()
        args.es_oid = es_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_es(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_es_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_es failed: unknown result")

    def sai_thrift_set_es_attribute(self, es_oid, thrift_attr):
        """
        Parameters:
         - es_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_es_attribute(es_oid, thrift_attr)
        return self.recv_sai_thrift_set_es_attribute()

    def send_sai_thrift_set_es_attribute(self, es_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_es_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_es_attribute_args()
        args.es_oid = es_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_es_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_es_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_es_attribute failed: unknown result")

    def sai_thrift_get_es_attribute(self, es_oid):
        """
        Parameters:
         - es_oid

        """
        self.send_sai_thrift_get_es_attribute(es_oid)
        return self.recv_sai_thrift_get_es_attribute()

    def send_sai_thrift_get_es_attribute(self, es_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_es_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_es_attribute_args()
        args.es_oid = es_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_es_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_es_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_es_attribute failed: unknown result")

    def sai_thrift_create_monitor_buffer(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_monitor_buffer(thrift_attr_list)
        return self.recv_sai_thrift_create_monitor_buffer()

    def send_sai_thrift_create_monitor_buffer(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_monitor_buffer', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_monitor_buffer_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_monitor_buffer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_monitor_buffer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_monitor_buffer failed: unknown result")

    def sai_thrift_remove_monitor_buffer(self, monitor_buffer_oid):
        """
        Parameters:
         - monitor_buffer_oid

        """
        self.send_sai_thrift_remove_monitor_buffer(monitor_buffer_oid)
        return self.recv_sai_thrift_remove_monitor_buffer()

    def send_sai_thrift_remove_monitor_buffer(self, monitor_buffer_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_monitor_buffer', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_monitor_buffer_args()
        args.monitor_buffer_oid = monitor_buffer_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_monitor_buffer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_monitor_buffer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_monitor_buffer failed: unknown result")

    def sai_thrift_set_monitor_buffer_attribute(self, monitor_buffer_oid, thrift_attr):
        """
        Parameters:
         - monitor_buffer_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_monitor_buffer_attribute(monitor_buffer_oid, thrift_attr)
        return self.recv_sai_thrift_set_monitor_buffer_attribute()

    def send_sai_thrift_set_monitor_buffer_attribute(self, monitor_buffer_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_monitor_buffer_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_monitor_buffer_attribute_args()
        args.monitor_buffer_oid = monitor_buffer_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_monitor_buffer_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_monitor_buffer_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_monitor_buffer_attribute failed: unknown result")

    def sai_thrift_get_monitor_buffer_attribute(self, monitor_buffer_oid):
        """
        Parameters:
         - monitor_buffer_oid

        """
        self.send_sai_thrift_get_monitor_buffer_attribute(monitor_buffer_oid)
        return self.recv_sai_thrift_get_monitor_buffer_attribute()

    def send_sai_thrift_get_monitor_buffer_attribute(self, monitor_buffer_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_monitor_buffer_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_monitor_buffer_attribute_args()
        args.monitor_buffer_oid = monitor_buffer_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_monitor_buffer_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_monitor_buffer_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_monitor_buffer_attribute failed: unknown result")

    def sai_thrift_create_monitor_latency(self, thrift_attr_list):
        """
        Parameters:
         - thrift_attr_list

        """
        self.send_sai_thrift_create_monitor_latency(thrift_attr_list)
        return self.recv_sai_thrift_create_monitor_latency()

    def send_sai_thrift_create_monitor_latency(self, thrift_attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_monitor_latency', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_monitor_latency_args()
        args.thrift_attr_list = thrift_attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_monitor_latency(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_monitor_latency_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_monitor_latency failed: unknown result")

    def sai_thrift_remove_monitor_latency(self, monitor_latency_oid):
        """
        Parameters:
         - monitor_latency_oid

        """
        self.send_sai_thrift_remove_monitor_latency(monitor_latency_oid)
        return self.recv_sai_thrift_remove_monitor_latency()

    def send_sai_thrift_remove_monitor_latency(self, monitor_latency_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_monitor_latency', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_monitor_latency_args()
        args.monitor_latency_oid = monitor_latency_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_monitor_latency(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_monitor_latency_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_monitor_latency failed: unknown result")

    def sai_thrift_set_monitor_latency_attribute(self, monitor_latency_oid, thrift_attr):
        """
        Parameters:
         - monitor_latency_oid
         - thrift_attr

        """
        self.send_sai_thrift_set_monitor_latency_attribute(monitor_latency_oid, thrift_attr)
        return self.recv_sai_thrift_set_monitor_latency_attribute()

    def send_sai_thrift_set_monitor_latency_attribute(self, monitor_latency_oid, thrift_attr):
        self._oprot.writeMessageBegin('sai_thrift_set_monitor_latency_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_monitor_latency_attribute_args()
        args.monitor_latency_oid = monitor_latency_oid
        args.thrift_attr = thrift_attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_monitor_latency_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_monitor_latency_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_monitor_latency_attribute failed: unknown result")

    def sai_thrift_get_monitor_latency_attribute(self, monitor_latency_oid):
        """
        Parameters:
         - monitor_latency_oid

        """
        self.send_sai_thrift_get_monitor_latency_attribute(monitor_latency_oid)
        return self.recv_sai_thrift_get_monitor_latency_attribute()

    def send_sai_thrift_get_monitor_latency_attribute(self, monitor_latency_oid):
        self._oprot.writeMessageBegin('sai_thrift_get_monitor_latency_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_monitor_latency_attribute_args()
        args.monitor_latency_oid = monitor_latency_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_monitor_latency_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_monitor_latency_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_monitor_latency_attribute failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["sai_thrift_set_port_attribute"] = Processor.process_sai_thrift_set_port_attribute
        self._processMap["sai_thrift_get_port_attribute"] = Processor.process_sai_thrift_get_port_attribute
        self._processMap["sai_thrift_get_port_stats"] = Processor.process_sai_thrift_get_port_stats
        self._processMap["sai_thrift_get_port_stats_ext"] = Processor.process_sai_thrift_get_port_stats_ext
        self._processMap["sai_thrift_clear_port_all_stats"] = Processor.process_sai_thrift_clear_port_all_stats
        self._processMap["sai_thrift_clear_port_stats"] = Processor.process_sai_thrift_clear_port_stats
        self._processMap["sai_thrift_create_fdb_entry"] = Processor.process_sai_thrift_create_fdb_entry
        self._processMap["sai_thrift_delete_fdb_entry"] = Processor.process_sai_thrift_delete_fdb_entry
        self._processMap["sai_thrift_flush_fdb_entries"] = Processor.process_sai_thrift_flush_fdb_entries
        self._processMap["sai_thrift_set_fdb_entry_attribute"] = Processor.process_sai_thrift_set_fdb_entry_attribute
        self._processMap["sai_thrift_get_fdb_entry_attribute"] = Processor.process_sai_thrift_get_fdb_entry_attribute
        self._processMap["sai_thrift_create_vlan"] = Processor.process_sai_thrift_create_vlan
        self._processMap["sai_thrift_remove_vlan"] = Processor.process_sai_thrift_remove_vlan
        self._processMap["sai_thrift_get_vlan_stats"] = Processor.process_sai_thrift_get_vlan_stats
        self._processMap["sai_thrift_get_vlan_stats_ext"] = Processor.process_sai_thrift_get_vlan_stats_ext
        self._processMap["sai_thrift_clear_vlan_stats"] = Processor.process_sai_thrift_clear_vlan_stats
        self._processMap["sai_thrift_create_vlan_member"] = Processor.process_sai_thrift_create_vlan_member
        self._processMap["sai_thrift_get_vlan_member_attribute"] = Processor.process_sai_thrift_get_vlan_member_attribute
        self._processMap["sai_thrift_remove_vlan_member"] = Processor.process_sai_thrift_remove_vlan_member
        self._processMap["sai_thrift_set_vlan_attribute"] = Processor.process_sai_thrift_set_vlan_attribute
        self._processMap["sai_thrift_set_vlan_member_attribute"] = Processor.process_sai_thrift_set_vlan_member_attribute
        self._processMap["sai_thrift_get_vlan_attribute"] = Processor.process_sai_thrift_get_vlan_attribute
        self._processMap["sai_thrift_get_vlan_id"] = Processor.process_sai_thrift_get_vlan_id
        self._processMap["sai_thrift_create_vlan_members"] = Processor.process_sai_thrift_create_vlan_members
        self._processMap["sai_thrift_remove_vlan_members"] = Processor.process_sai_thrift_remove_vlan_members
        self._processMap["sai_thrift_create_virtual_router"] = Processor.process_sai_thrift_create_virtual_router
        self._processMap["sai_thrift_remove_virtual_router"] = Processor.process_sai_thrift_remove_virtual_router
        self._processMap["sai_thrift_set_virtual_router_attribute"] = Processor.process_sai_thrift_set_virtual_router_attribute
        self._processMap["sai_thrift_get_virtual_router_attribute"] = Processor.process_sai_thrift_get_virtual_router_attribute
        self._processMap["sai_thrift_create_route"] = Processor.process_sai_thrift_create_route
        self._processMap["sai_thrift_remove_route"] = Processor.process_sai_thrift_remove_route
        self._processMap["sai_thrift_set_route_attribute"] = Processor.process_sai_thrift_set_route_attribute
        self._processMap["sai_thrift_get_route_attribute"] = Processor.process_sai_thrift_get_route_attribute
        self._processMap["sai_thrift_create_routes"] = Processor.process_sai_thrift_create_routes
        self._processMap["sai_thrift_remove_routes"] = Processor.process_sai_thrift_remove_routes
        self._processMap["sai_thrift_set_routes_attribute"] = Processor.process_sai_thrift_set_routes_attribute
        self._processMap["sai_thrift_get_routes_attribute"] = Processor.process_sai_thrift_get_routes_attribute
        self._processMap["sai_thrift_create_router_interface"] = Processor.process_sai_thrift_create_router_interface
        self._processMap["sai_thrift_remove_router_interface"] = Processor.process_sai_thrift_remove_router_interface
        self._processMap["sai_thrift_set_router_interface_attribute"] = Processor.process_sai_thrift_set_router_interface_attribute
        self._processMap["sai_thrift_get_router_interface_attribute"] = Processor.process_sai_thrift_get_router_interface_attribute
        self._processMap["sai_thrift_router_interface_get_stats"] = Processor.process_sai_thrift_router_interface_get_stats
        self._processMap["sai_thrift_router_interface_get_stats_ext"] = Processor.process_sai_thrift_router_interface_get_stats_ext
        self._processMap["sai_thrift_router_interface_clear_stats"] = Processor.process_sai_thrift_router_interface_clear_stats
        self._processMap["sai_thrift_create_next_hop"] = Processor.process_sai_thrift_create_next_hop
        self._processMap["sai_thrift_remove_next_hop"] = Processor.process_sai_thrift_remove_next_hop
        self._processMap["sai_thrift_get_next_hop_attribute"] = Processor.process_sai_thrift_get_next_hop_attribute
        self._processMap["sai_thrift_create_next_hop_group"] = Processor.process_sai_thrift_create_next_hop_group
        self._processMap["sai_thrift_remove_next_hop_group"] = Processor.process_sai_thrift_remove_next_hop_group
        self._processMap["sai_thrift_set_next_hop_group_attribute"] = Processor.process_sai_thrift_set_next_hop_group_attribute
        self._processMap["sai_thrift_get_next_hop_group_attribute"] = Processor.process_sai_thrift_get_next_hop_group_attribute
        self._processMap["sai_thrift_create_next_hop_group_member"] = Processor.process_sai_thrift_create_next_hop_group_member
        self._processMap["sai_thrift_remove_next_hop_group_member"] = Processor.process_sai_thrift_remove_next_hop_group_member
        self._processMap["sai_thrift_get_next_hop_group_member_attribute"] = Processor.process_sai_thrift_get_next_hop_group_member_attribute
        self._processMap["sai_thrift_get_next_hop_group_member_attribute_ecmp"] = Processor.process_sai_thrift_get_next_hop_group_member_attribute_ecmp
        self._processMap["sai_thrift_create_next_hop_group_members"] = Processor.process_sai_thrift_create_next_hop_group_members
        self._processMap["sai_thrift_remove_next_hop_group_members"] = Processor.process_sai_thrift_remove_next_hop_group_members
        self._processMap["sai_thrift_create_lag"] = Processor.process_sai_thrift_create_lag
        self._processMap["sai_thrift_remove_lag"] = Processor.process_sai_thrift_remove_lag
        self._processMap["sai_thrift_set_lag_attribute"] = Processor.process_sai_thrift_set_lag_attribute
        self._processMap["sai_thrift_get_lag_attribute"] = Processor.process_sai_thrift_get_lag_attribute
        self._processMap["sai_thrift_create_lag_member"] = Processor.process_sai_thrift_create_lag_member
        self._processMap["sai_thrift_remove_lag_member"] = Processor.process_sai_thrift_remove_lag_member
        self._processMap["sai_thrift_set_lag_member_attribute"] = Processor.process_sai_thrift_set_lag_member_attribute
        self._processMap["sai_thrift_get_lag_member_attribute"] = Processor.process_sai_thrift_get_lag_member_attribute
        self._processMap["sai_thrift_create_stp_entry"] = Processor.process_sai_thrift_create_stp_entry
        self._processMap["sai_thrift_remove_stp_entry"] = Processor.process_sai_thrift_remove_stp_entry
        self._processMap["sai_thrift_get_stp_attribute"] = Processor.process_sai_thrift_get_stp_attribute
        self._processMap["sai_thrift_create_stp_port"] = Processor.process_sai_thrift_create_stp_port
        self._processMap["sai_thrift_remove_stp_port"] = Processor.process_sai_thrift_remove_stp_port
        self._processMap["sai_thrift_get_stp_port_attribute"] = Processor.process_sai_thrift_get_stp_port_attribute
        self._processMap["sai_thrift_set_stp_port_state"] = Processor.process_sai_thrift_set_stp_port_state
        self._processMap["sai_thrift_get_stp_port_state"] = Processor.process_sai_thrift_get_stp_port_state
        self._processMap["sai_thrift_create_stp_ports"] = Processor.process_sai_thrift_create_stp_ports
        self._processMap["sai_thrift_remove_stp_ports"] = Processor.process_sai_thrift_remove_stp_ports
        self._processMap["sai_thrift_create_neighbor_entry"] = Processor.process_sai_thrift_create_neighbor_entry
        self._processMap["sai_thrift_remove_neighbor_entry"] = Processor.process_sai_thrift_remove_neighbor_entry
        self._processMap["sai_thrift_remove_all_neighbor_entry"] = Processor.process_sai_thrift_remove_all_neighbor_entry
        self._processMap["sai_thrift_set_neighbor_entry_attribute"] = Processor.process_sai_thrift_set_neighbor_entry_attribute
        self._processMap["sai_thrift_get_neighbor_entry_attribute"] = Processor.process_sai_thrift_get_neighbor_entry_attribute
        self._processMap["sai_thrift_get_switch_attribute"] = Processor.process_sai_thrift_get_switch_attribute
        self._processMap["sai_thrift_get_port_list_by_front_port"] = Processor.process_sai_thrift_get_port_list_by_front_port
        self._processMap["sai_thrift_get_cpu_port_id"] = Processor.process_sai_thrift_get_cpu_port_id
        self._processMap["sai_thrift_get_default_trap_group"] = Processor.process_sai_thrift_get_default_trap_group
        self._processMap["sai_thrift_get_default_router_id"] = Processor.process_sai_thrift_get_default_router_id
        self._processMap["sai_thrift_get_default_1q_bridge_id"] = Processor.process_sai_thrift_get_default_1q_bridge_id
        self._processMap["sai_thrift_get_default_vlan_id"] = Processor.process_sai_thrift_get_default_vlan_id
        self._processMap["sai_thrift_get_port_id_by_front_port"] = Processor.process_sai_thrift_get_port_id_by_front_port
        self._processMap["sai_thrift_set_switch_attribute"] = Processor.process_sai_thrift_set_switch_attribute
        self._processMap["sai_thrift_create_switch"] = Processor.process_sai_thrift_create_switch
        self._processMap["sai_thrift_remove_switch"] = Processor.process_sai_thrift_remove_switch
        self._processMap["sai_thrift_get_switch_stats"] = Processor.process_sai_thrift_get_switch_stats
        self._processMap["sai_thrift_get_switch_stats_ext"] = Processor.process_sai_thrift_get_switch_stats_ext
        self._processMap["sai_thrift_clear_switch_stats"] = Processor.process_sai_thrift_clear_switch_stats
        self._processMap["sai_thrift_create_bridge_port"] = Processor.process_sai_thrift_create_bridge_port
        self._processMap["sai_thrift_remove_bridge_port"] = Processor.process_sai_thrift_remove_bridge_port
        self._processMap["sai_thrift_get_bridge_port_list"] = Processor.process_sai_thrift_get_bridge_port_list
        self._processMap["sai_thrift_get_bridge_port_attribute"] = Processor.process_sai_thrift_get_bridge_port_attribute
        self._processMap["sai_thrift_set_bridge_port_attribute"] = Processor.process_sai_thrift_set_bridge_port_attribute
        self._processMap["sai_thrift_create_bridge"] = Processor.process_sai_thrift_create_bridge
        self._processMap["sai_thrift_remove_bridge"] = Processor.process_sai_thrift_remove_bridge
        self._processMap["sai_thrift_get_bridge_attribute"] = Processor.process_sai_thrift_get_bridge_attribute
        self._processMap["sai_thrift_set_bridge_attribute"] = Processor.process_sai_thrift_set_bridge_attribute
        self._processMap["sai_thrift_get_bridge_port_stats"] = Processor.process_sai_thrift_get_bridge_port_stats
        self._processMap["sai_thrift_get_bridge_port_stats_ext"] = Processor.process_sai_thrift_get_bridge_port_stats_ext
        self._processMap["sai_thrift_clear_bridge_port_stats"] = Processor.process_sai_thrift_clear_bridge_port_stats
        self._processMap["sai_thrift_create_hostif"] = Processor.process_sai_thrift_create_hostif
        self._processMap["sai_thrift_remove_hostif"] = Processor.process_sai_thrift_remove_hostif
        self._processMap["sai_thrift_get_hostif_attribute"] = Processor.process_sai_thrift_get_hostif_attribute
        self._processMap["sai_thrift_set_hostif_attribute"] = Processor.process_sai_thrift_set_hostif_attribute
        self._processMap["sai_thrift_create_hostif_table_entry"] = Processor.process_sai_thrift_create_hostif_table_entry
        self._processMap["sai_thrift_remove_hostif_table_entry"] = Processor.process_sai_thrift_remove_hostif_table_entry
        self._processMap["sai_thrift_get_hostif_table_entry_attribute"] = Processor.process_sai_thrift_get_hostif_table_entry_attribute
        self._processMap["sai_thrift_set_hostif_table_entry_attribute"] = Processor.process_sai_thrift_set_hostif_table_entry_attribute
        self._processMap["sai_thrift_create_hostif_trap_group"] = Processor.process_sai_thrift_create_hostif_trap_group
        self._processMap["sai_thrift_remove_hostif_trap_group"] = Processor.process_sai_thrift_remove_hostif_trap_group
        self._processMap["sai_thrift_get_hostif_trap_group_attribute"] = Processor.process_sai_thrift_get_hostif_trap_group_attribute
        self._processMap["sai_thrift_set_hostif_trap_group_attribute"] = Processor.process_sai_thrift_set_hostif_trap_group_attribute
        self._processMap["sai_thrift_create_hostif_trap"] = Processor.process_sai_thrift_create_hostif_trap
        self._processMap["sai_thrift_remove_hostif_trap"] = Processor.process_sai_thrift_remove_hostif_trap
        self._processMap["sai_thrift_get_hostif_trap_attribute"] = Processor.process_sai_thrift_get_hostif_trap_attribute
        self._processMap["sai_thrift_set_hostif_trap_attribute"] = Processor.process_sai_thrift_set_hostif_trap_attribute
        self._processMap["sai_thrift_send_hostif_packet"] = Processor.process_sai_thrift_send_hostif_packet
        self._processMap["sai_thrift_create_acl_table"] = Processor.process_sai_thrift_create_acl_table
        self._processMap["sai_thrift_remove_acl_table"] = Processor.process_sai_thrift_remove_acl_table
        self._processMap["sai_thrift_get_acl_table_attribute"] = Processor.process_sai_thrift_get_acl_table_attribute
        self._processMap["sai_thrift_create_acl_entry"] = Processor.process_sai_thrift_create_acl_entry
        self._processMap["sai_thrift_remove_acl_entry"] = Processor.process_sai_thrift_remove_acl_entry
        self._processMap["sai_thrift_set_acl_entry_attribute"] = Processor.process_sai_thrift_set_acl_entry_attribute
        self._processMap["sai_thrift_get_acl_entry_attribute"] = Processor.process_sai_thrift_get_acl_entry_attribute
        self._processMap["sai_thrift_create_acl_table_group"] = Processor.process_sai_thrift_create_acl_table_group
        self._processMap["sai_thrift_remove_acl_table_group"] = Processor.process_sai_thrift_remove_acl_table_group
        self._processMap["sai_thrift_get_acl_table_group_attribute"] = Processor.process_sai_thrift_get_acl_table_group_attribute
        self._processMap["sai_thrift_create_acl_table_group_member"] = Processor.process_sai_thrift_create_acl_table_group_member
        self._processMap["sai_thrift_remove_acl_table_group_member"] = Processor.process_sai_thrift_remove_acl_table_group_member
        self._processMap["sai_thrift_get_acl_table_group_member_attribute"] = Processor.process_sai_thrift_get_acl_table_group_member_attribute
        self._processMap["sai_thrift_create_acl_counter"] = Processor.process_sai_thrift_create_acl_counter
        self._processMap["sai_thrift_remove_acl_counter"] = Processor.process_sai_thrift_remove_acl_counter
        self._processMap["sai_thrift_get_acl_counter_attribute"] = Processor.process_sai_thrift_get_acl_counter_attribute
        self._processMap["sai_thrift_set_acl_counter_attribute"] = Processor.process_sai_thrift_set_acl_counter_attribute
        self._processMap["sai_thrift_create_acl_range"] = Processor.process_sai_thrift_create_acl_range
        self._processMap["sai_thrift_remove_acl_range"] = Processor.process_sai_thrift_remove_acl_range
        self._processMap["sai_thrift_get_acl_range_attribute"] = Processor.process_sai_thrift_get_acl_range_attribute
        self._processMap["sai_thrift_create_hash"] = Processor.process_sai_thrift_create_hash
        self._processMap["sai_thrift_remove_hash"] = Processor.process_sai_thrift_remove_hash
        self._processMap["sai_thrift_set_hash_attribute"] = Processor.process_sai_thrift_set_hash_attribute
        self._processMap["sai_thrift_get_hash_attribute"] = Processor.process_sai_thrift_get_hash_attribute
        self._processMap["sai_thrift_create_udf_group"] = Processor.process_sai_thrift_create_udf_group
        self._processMap["sai_thrift_remove_udf_group"] = Processor.process_sai_thrift_remove_udf_group
        self._processMap["sai_thrift_get_udf_group_attribute"] = Processor.process_sai_thrift_get_udf_group_attribute
        self._processMap["sai_thrift_create_udf_match"] = Processor.process_sai_thrift_create_udf_match
        self._processMap["sai_thrift_remove_udf_match"] = Processor.process_sai_thrift_remove_udf_match
        self._processMap["sai_thrift_get_udf_match_attribute"] = Processor.process_sai_thrift_get_udf_match_attribute
        self._processMap["sai_thrift_create_udf"] = Processor.process_sai_thrift_create_udf
        self._processMap["sai_thrift_remove_udf"] = Processor.process_sai_thrift_remove_udf
        self._processMap["sai_thrift_set_udf_attribute"] = Processor.process_sai_thrift_set_udf_attribute
        self._processMap["sai_thrift_get_udf_attribute"] = Processor.process_sai_thrift_get_udf_attribute
        self._processMap["sai_thrift_create_twamp_session"] = Processor.process_sai_thrift_create_twamp_session
        self._processMap["sai_thrift_remove_twamp_session"] = Processor.process_sai_thrift_remove_twamp_session
        self._processMap["sai_thrift_set_twamp_attribute"] = Processor.process_sai_thrift_set_twamp_attribute
        self._processMap["sai_thrift_get_twamp_attribute"] = Processor.process_sai_thrift_get_twamp_attribute
        self._processMap["sai_thrift_get_twamp_session_stats"] = Processor.process_sai_thrift_get_twamp_session_stats
        self._processMap["sai_thrift_clear_twamp_session_stats"] = Processor.process_sai_thrift_clear_twamp_session_stats
        self._processMap["sai_thrift_create_mirror_session"] = Processor.process_sai_thrift_create_mirror_session
        self._processMap["sai_thrift_remove_mirror_session"] = Processor.process_sai_thrift_remove_mirror_session
        self._processMap["sai_thrift_set_mirror_attribute"] = Processor.process_sai_thrift_set_mirror_attribute
        self._processMap["sai_thrift_get_mirror_attribute"] = Processor.process_sai_thrift_get_mirror_attribute
        self._processMap["sai_thrift_create_inseg_entry"] = Processor.process_sai_thrift_create_inseg_entry
        self._processMap["sai_thrift_remove_inseg_entry"] = Processor.process_sai_thrift_remove_inseg_entry
        self._processMap["sai_thrift_set_inseg_entry_attribute"] = Processor.process_sai_thrift_set_inseg_entry_attribute
        self._processMap["sai_thrift_get_inseg_entry_attribute"] = Processor.process_sai_thrift_get_inseg_entry_attribute
        self._processMap["sai_thrift_dump_log"] = Processor.process_sai_thrift_dump_log
        self._processMap["sai_thrift_create_policer"] = Processor.process_sai_thrift_create_policer
        self._processMap["sai_thrift_remove_policer"] = Processor.process_sai_thrift_remove_policer
        self._processMap["sai_thrift_get_policer_attribute"] = Processor.process_sai_thrift_get_policer_attribute
        self._processMap["sai_thrift_set_policer_attribute"] = Processor.process_sai_thrift_set_policer_attribute
        self._processMap["sai_thrift_get_policer_stats"] = Processor.process_sai_thrift_get_policer_stats
        self._processMap["sai_thrift_get_policer_stats_ext"] = Processor.process_sai_thrift_get_policer_stats_ext
        self._processMap["sai_thrift_clear_policer_stats"] = Processor.process_sai_thrift_clear_policer_stats
        self._processMap["sai_thrift_create_scheduler_profile"] = Processor.process_sai_thrift_create_scheduler_profile
        self._processMap["sai_thrift_remove_scheduler_profile"] = Processor.process_sai_thrift_remove_scheduler_profile
        self._processMap["sai_thrift_get_scheduler_attribute"] = Processor.process_sai_thrift_get_scheduler_attribute
        self._processMap["sai_thrift_set_scheduler_attribute"] = Processor.process_sai_thrift_set_scheduler_attribute
        self._processMap["sai_thrift_create_scheduler_group"] = Processor.process_sai_thrift_create_scheduler_group
        self._processMap["sai_thrift_remove_scheduler_group"] = Processor.process_sai_thrift_remove_scheduler_group
        self._processMap["sai_thrift_get_scheduler_group_attribute"] = Processor.process_sai_thrift_get_scheduler_group_attribute
        self._processMap["sai_thrift_set_scheduler_group_attribute"] = Processor.process_sai_thrift_set_scheduler_group_attribute
        self._processMap["sai_thrift_get_queue_stats"] = Processor.process_sai_thrift_get_queue_stats
        self._processMap["sai_thrift_clear_queue_stats"] = Processor.process_sai_thrift_clear_queue_stats
        self._processMap["sai_thrift_create_queue"] = Processor.process_sai_thrift_create_queue
        self._processMap["sai_thrift_remove_queue"] = Processor.process_sai_thrift_remove_queue
        self._processMap["sai_thrift_get_queue_attribute"] = Processor.process_sai_thrift_get_queue_attribute
        self._processMap["sai_thrift_set_queue_attribute"] = Processor.process_sai_thrift_set_queue_attribute
        self._processMap["sai_thrift_create_buffer_profile"] = Processor.process_sai_thrift_create_buffer_profile
        self._processMap["sai_thrift_remove_buffer_profile"] = Processor.process_sai_thrift_remove_buffer_profile
        self._processMap["sai_thrift_get_buffer_profile_attribute"] = Processor.process_sai_thrift_get_buffer_profile_attribute
        self._processMap["sai_thrift_set_buffer_profile_attribute"] = Processor.process_sai_thrift_set_buffer_profile_attribute
        self._processMap["sai_thrift_create_pool_profile"] = Processor.process_sai_thrift_create_pool_profile
        self._processMap["sai_thrift_create_priority_group"] = Processor.process_sai_thrift_create_priority_group
        self._processMap["sai_thrift_remove_priority_group"] = Processor.process_sai_thrift_remove_priority_group
        self._processMap["sai_thrift_get_priority_group_attribute"] = Processor.process_sai_thrift_get_priority_group_attribute
        self._processMap["sai_thrift_set_priority_group_attribute"] = Processor.process_sai_thrift_set_priority_group_attribute
        self._processMap["sai_thrift_get_pg_stats"] = Processor.process_sai_thrift_get_pg_stats
        self._processMap["sai_thrift_create_wred_profile"] = Processor.process_sai_thrift_create_wred_profile
        self._processMap["sai_thrift_remove_wred_profile"] = Processor.process_sai_thrift_remove_wred_profile
        self._processMap["sai_thrift_get_wred_attribute_profile"] = Processor.process_sai_thrift_get_wred_attribute_profile
        self._processMap["sai_thrift_set_wred_attribute_profile"] = Processor.process_sai_thrift_set_wred_attribute_profile
        self._processMap["sai_thrift_create_qos_map"] = Processor.process_sai_thrift_create_qos_map
        self._processMap["sai_thrift_remove_qos_map"] = Processor.process_sai_thrift_remove_qos_map
        self._processMap["sai_thrift_get_qos_map_attribute"] = Processor.process_sai_thrift_get_qos_map_attribute
        self._processMap["sai_thrift_set_qos_map_attribute"] = Processor.process_sai_thrift_set_qos_map_attribute
        self._processMap["sai_thrift_create_l2mc_group"] = Processor.process_sai_thrift_create_l2mc_group
        self._processMap["sai_thrift_remove_l2mc_group"] = Processor.process_sai_thrift_remove_l2mc_group
        self._processMap["sai_thrift_get_l2mc_group_attribute"] = Processor.process_sai_thrift_get_l2mc_group_attribute
        self._processMap["sai_thrift_create_l2mc_group_member"] = Processor.process_sai_thrift_create_l2mc_group_member
        self._processMap["sai_thrift_remove_l2mc_group_member"] = Processor.process_sai_thrift_remove_l2mc_group_member
        self._processMap["sai_thrift_set_l2mc_group_member_attribute"] = Processor.process_sai_thrift_set_l2mc_group_member_attribute
        self._processMap["sai_thrift_get_l2mc_group_member_attribute"] = Processor.process_sai_thrift_get_l2mc_group_member_attribute
        self._processMap["sai_thrift_create_l2mc_entry"] = Processor.process_sai_thrift_create_l2mc_entry
        self._processMap["sai_thrift_remove_l2mc_entry"] = Processor.process_sai_thrift_remove_l2mc_entry
        self._processMap["sai_thrift_set_l2mc_entry_attribute"] = Processor.process_sai_thrift_set_l2mc_entry_attribute
        self._processMap["sai_thrift_get_l2mc_entry_attribute"] = Processor.process_sai_thrift_get_l2mc_entry_attribute
        self._processMap["sai_thrift_create_mcast_fdb_entry"] = Processor.process_sai_thrift_create_mcast_fdb_entry
        self._processMap["sai_thrift_remove_mcast_fdb_entry"] = Processor.process_sai_thrift_remove_mcast_fdb_entry
        self._processMap["sai_thrift_set_mcast_fdb_entry_attribute"] = Processor.process_sai_thrift_set_mcast_fdb_entry_attribute
        self._processMap["sai_thrift_get_mcast_fdb_entry_attribute"] = Processor.process_sai_thrift_get_mcast_fdb_entry_attribute
        self._processMap["sai_thrift_create_ipmc_group"] = Processor.process_sai_thrift_create_ipmc_group
        self._processMap["sai_thrift_remove_ipmc_group"] = Processor.process_sai_thrift_remove_ipmc_group
        self._processMap["sai_thrift_get_ipmc_group_attribute"] = Processor.process_sai_thrift_get_ipmc_group_attribute
        self._processMap["sai_thrift_create_ipmc_group_member"] = Processor.process_sai_thrift_create_ipmc_group_member
        self._processMap["sai_thrift_remove_ipmc_group_member"] = Processor.process_sai_thrift_remove_ipmc_group_member
        self._processMap["sai_thrift_set_ipmc_group_member_attribute"] = Processor.process_sai_thrift_set_ipmc_group_member_attribute
        self._processMap["sai_thrift_get_ipmc_group_member_attribute"] = Processor.process_sai_thrift_get_ipmc_group_member_attribute
        self._processMap["sai_thrift_create_rpf_group"] = Processor.process_sai_thrift_create_rpf_group
        self._processMap["sai_thrift_remove_rpf_group"] = Processor.process_sai_thrift_remove_rpf_group
        self._processMap["sai_thrift_get_rpf_group_attribute"] = Processor.process_sai_thrift_get_rpf_group_attribute
        self._processMap["sai_thrift_create_rpf_group_member"] = Processor.process_sai_thrift_create_rpf_group_member
        self._processMap["sai_thrift_remove_rpf_group_member"] = Processor.process_sai_thrift_remove_rpf_group_member
        self._processMap["sai_thrift_set_rpf_group_member_attribute"] = Processor.process_sai_thrift_set_rpf_group_member_attribute
        self._processMap["sai_thrift_get_rpf_group_member_attribute"] = Processor.process_sai_thrift_get_rpf_group_member_attribute
        self._processMap["sai_thrift_create_ipmc_entry"] = Processor.process_sai_thrift_create_ipmc_entry
        self._processMap["sai_thrift_remove_ipmc_entry"] = Processor.process_sai_thrift_remove_ipmc_entry
        self._processMap["sai_thrift_set_ipmc_entry_attribute"] = Processor.process_sai_thrift_set_ipmc_entry_attribute
        self._processMap["sai_thrift_get_ipmc_entry_attribute"] = Processor.process_sai_thrift_get_ipmc_entry_attribute
        self._processMap["sai_thrift_create_samplepacket"] = Processor.process_sai_thrift_create_samplepacket
        self._processMap["sai_thrift_remove_samplepacket"] = Processor.process_sai_thrift_remove_samplepacket
        self._processMap["sai_thrift_get_samplepacket_attribute"] = Processor.process_sai_thrift_get_samplepacket_attribute
        self._processMap["sai_thrift_set_samplepacket_attribute"] = Processor.process_sai_thrift_set_samplepacket_attribute
        self._processMap["sai_thrift_create_tunnel_map_entry"] = Processor.process_sai_thrift_create_tunnel_map_entry
        self._processMap["sai_thrift_remove_tunnel_map_entry"] = Processor.process_sai_thrift_remove_tunnel_map_entry
        self._processMap["sai_thrift_get_tunnel_map_entry_attribute"] = Processor.process_sai_thrift_get_tunnel_map_entry_attribute
        self._processMap["sai_thrift_set_tunnel_map_entry_attribute"] = Processor.process_sai_thrift_set_tunnel_map_entry_attribute
        self._processMap["sai_thrift_create_tunnel_map"] = Processor.process_sai_thrift_create_tunnel_map
        self._processMap["sai_thrift_remove_tunnel_map"] = Processor.process_sai_thrift_remove_tunnel_map
        self._processMap["sai_thrift_get_tunnel_map_attribute"] = Processor.process_sai_thrift_get_tunnel_map_attribute
        self._processMap["sai_thrift_set_tunnel_map_attribute"] = Processor.process_sai_thrift_set_tunnel_map_attribute
        self._processMap["sai_thrift_create_tunnel"] = Processor.process_sai_thrift_create_tunnel
        self._processMap["sai_thrift_remove_tunnel"] = Processor.process_sai_thrift_remove_tunnel
        self._processMap["sai_thrift_get_tunnel_attribute"] = Processor.process_sai_thrift_get_tunnel_attribute
        self._processMap["sai_thrift_set_tunnel_attribute"] = Processor.process_sai_thrift_set_tunnel_attribute
        self._processMap["sai_thrift_get_tunnel_stats"] = Processor.process_sai_thrift_get_tunnel_stats
        self._processMap["sai_thrift_clear_tunnel_stats"] = Processor.process_sai_thrift_clear_tunnel_stats
        self._processMap["sai_thrift_create_tunnel_term_table_entry"] = Processor.process_sai_thrift_create_tunnel_term_table_entry
        self._processMap["sai_thrift_remove_tunnel_term_table_entry"] = Processor.process_sai_thrift_remove_tunnel_term_table_entry
        self._processMap["sai_thrift_get_tunnel_term_table_entry_attribute"] = Processor.process_sai_thrift_get_tunnel_term_table_entry_attribute
        self._processMap["sai_thrift_set_tunnel_term_table_entry_attribute"] = Processor.process_sai_thrift_set_tunnel_term_table_entry_attribute
        self._processMap["sai_thrift_get_cpu_packet_attribute"] = Processor.process_sai_thrift_get_cpu_packet_attribute
        self._processMap["sai_thrift_get_cpu_packet_count"] = Processor.process_sai_thrift_get_cpu_packet_count
        self._processMap["sai_thrift_clear_cpu_packet_info"] = Processor.process_sai_thrift_clear_cpu_packet_info
        self._processMap["sai_thrift_log_set"] = Processor.process_sai_thrift_log_set
        self._processMap["sai_thrift_create_isolation_group"] = Processor.process_sai_thrift_create_isolation_group
        self._processMap["sai_thrift_remove_isolation_group"] = Processor.process_sai_thrift_remove_isolation_group
        self._processMap["sai_thrift_create_isolation_group_member"] = Processor.process_sai_thrift_create_isolation_group_member
        self._processMap["sai_thrift_remove_isolation_group_member"] = Processor.process_sai_thrift_remove_isolation_group_member
        self._processMap["sai_thrift_get_isolation_group_attributes"] = Processor.process_sai_thrift_get_isolation_group_attributes
        self._processMap["sai_thrift_get_isolation_group_member_attributes"] = Processor.process_sai_thrift_get_isolation_group_member_attributes
        self._processMap["sai_thrift_create_counter"] = Processor.process_sai_thrift_create_counter
        self._processMap["sai_thrift_remove_counter"] = Processor.process_sai_thrift_remove_counter
        self._processMap["sai_thrift_set_counter_attribute"] = Processor.process_sai_thrift_set_counter_attribute
        self._processMap["sai_thrift_get_counter_attribute"] = Processor.process_sai_thrift_get_counter_attribute
        self._processMap["sai_thrift_get_counter_stats"] = Processor.process_sai_thrift_get_counter_stats
        self._processMap["sai_thrift_get_counter_stats_ext"] = Processor.process_sai_thrift_get_counter_stats_ext
        self._processMap["sai_thrift_clear_counter_stats"] = Processor.process_sai_thrift_clear_counter_stats
        self._processMap["sai_thrift_create_debug_counter"] = Processor.process_sai_thrift_create_debug_counter
        self._processMap["sai_thrift_remove_debug_counter"] = Processor.process_sai_thrift_remove_debug_counter
        self._processMap["sai_thrift_set_debug_counter_attribute"] = Processor.process_sai_thrift_set_debug_counter_attribute
        self._processMap["sai_thrift_get_debug_counter_attribute"] = Processor.process_sai_thrift_get_debug_counter_attribute
        self._processMap["sai_thrift_create_nat"] = Processor.process_sai_thrift_create_nat
        self._processMap["sai_thrift_remove_nat"] = Processor.process_sai_thrift_remove_nat
        self._processMap["sai_thrift_set_nat_attribute"] = Processor.process_sai_thrift_set_nat_attribute
        self._processMap["sai_thrift_get_nat_attribute"] = Processor.process_sai_thrift_get_nat_attribute
        self._processMap["sai_thrift_create_bfd"] = Processor.process_sai_thrift_create_bfd
        self._processMap["sai_thrift_remove_bfd"] = Processor.process_sai_thrift_remove_bfd
        self._processMap["sai_thrift_set_bfd_attribute"] = Processor.process_sai_thrift_set_bfd_attribute
        self._processMap["sai_thrift_get_bfd_attribute"] = Processor.process_sai_thrift_get_bfd_attribute
        self._processMap["sai_thrift_create_y1731_meg"] = Processor.process_sai_thrift_create_y1731_meg
        self._processMap["sai_thrift_remove_y1731_meg"] = Processor.process_sai_thrift_remove_y1731_meg
        self._processMap["sai_thrift_set_y1731_meg_attribute"] = Processor.process_sai_thrift_set_y1731_meg_attribute
        self._processMap["sai_thrift_get_y1731_meg_attribute"] = Processor.process_sai_thrift_get_y1731_meg_attribute
        self._processMap["sai_thrift_create_y1731_session"] = Processor.process_sai_thrift_create_y1731_session
        self._processMap["sai_thrift_remove_y1731_session"] = Processor.process_sai_thrift_remove_y1731_session
        self._processMap["sai_thrift_set_y1731_session_attribute"] = Processor.process_sai_thrift_set_y1731_session_attribute
        self._processMap["sai_thrift_get_y1731_session_attribute"] = Processor.process_sai_thrift_get_y1731_session_attribute
        self._processMap["sai_thrift_create_y1731_rmep"] = Processor.process_sai_thrift_create_y1731_rmep
        self._processMap["sai_thrift_remove_y1731_rmep"] = Processor.process_sai_thrift_remove_y1731_rmep
        self._processMap["sai_thrift_set_y1731_rmep_attribute"] = Processor.process_sai_thrift_set_y1731_rmep_attribute
        self._processMap["sai_thrift_get_y1731_rmep_attribute"] = Processor.process_sai_thrift_get_y1731_rmep_attribute
        self._processMap["sai_thrift_get_y1731_session_lm_stats"] = Processor.process_sai_thrift_get_y1731_session_lm_stats
        self._processMap["sai_thrift_create_port"] = Processor.process_sai_thrift_create_port
        self._processMap["sai_thrift_remove_port"] = Processor.process_sai_thrift_remove_port
        self._processMap["sai_thrift_create_ptp_domain"] = Processor.process_sai_thrift_create_ptp_domain
        self._processMap["sai_thrift_remove_ptp_domain"] = Processor.process_sai_thrift_remove_ptp_domain
        self._processMap["sai_thrift_set_ptp_domain_attribute"] = Processor.process_sai_thrift_set_ptp_domain_attribute
        self._processMap["sai_thrift_get_ptp_domain_attribute"] = Processor.process_sai_thrift_get_ptp_domain_attribute
        self._processMap["sai_thrift_create_synce"] = Processor.process_sai_thrift_create_synce
        self._processMap["sai_thrift_remove_synce"] = Processor.process_sai_thrift_remove_synce
        self._processMap["sai_thrift_set_synce_attribute"] = Processor.process_sai_thrift_set_synce_attribute
        self._processMap["sai_thrift_get_synce_attribute"] = Processor.process_sai_thrift_get_synce_attribute
        self._processMap["sai_thrift_create_es"] = Processor.process_sai_thrift_create_es
        self._processMap["sai_thrift_remove_es"] = Processor.process_sai_thrift_remove_es
        self._processMap["sai_thrift_set_es_attribute"] = Processor.process_sai_thrift_set_es_attribute
        self._processMap["sai_thrift_get_es_attribute"] = Processor.process_sai_thrift_get_es_attribute
        self._processMap["sai_thrift_create_monitor_buffer"] = Processor.process_sai_thrift_create_monitor_buffer
        self._processMap["sai_thrift_remove_monitor_buffer"] = Processor.process_sai_thrift_remove_monitor_buffer
        self._processMap["sai_thrift_set_monitor_buffer_attribute"] = Processor.process_sai_thrift_set_monitor_buffer_attribute
        self._processMap["sai_thrift_get_monitor_buffer_attribute"] = Processor.process_sai_thrift_get_monitor_buffer_attribute
        self._processMap["sai_thrift_create_monitor_latency"] = Processor.process_sai_thrift_create_monitor_latency
        self._processMap["sai_thrift_remove_monitor_latency"] = Processor.process_sai_thrift_remove_monitor_latency
        self._processMap["sai_thrift_set_monitor_latency_attribute"] = Processor.process_sai_thrift_set_monitor_latency_attribute
        self._processMap["sai_thrift_get_monitor_latency_attribute"] = Processor.process_sai_thrift_get_monitor_latency_attribute
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_sai_thrift_set_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_port_attribute(args.port_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_port_attribute(args.port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_port_stats(args.port_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_port_stats_ext(args.port_id, args.counter_ids, args.mode, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_port_all_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_port_all_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_port_all_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_port_all_stats(args.port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_port_all_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_port_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_port_stats(args.port_id, args.number_of_counters, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_fdb_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_fdb_entry(args.thrift_fdb_entry, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_delete_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_delete_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_delete_fdb_entry_result()
        try:
            result.success = self._handler.sai_thrift_delete_fdb_entry(args.thrift_fdb_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_delete_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_flush_fdb_entries(self, seqid, iprot, oprot):
        args = sai_thrift_flush_fdb_entries_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_flush_fdb_entries_result()
        try:
            result.success = self._handler.sai_thrift_flush_fdb_entries(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_flush_fdb_entries", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_fdb_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_fdb_entry_attribute(args.thrift_fdb_entry, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_fdb_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_fdb_entry_attribute(args.thrift_fdb_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_vlan(self, seqid, iprot, oprot):
        args = sai_thrift_create_vlan_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_vlan_result()
        try:
            result.success = self._handler.sai_thrift_create_vlan(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_vlan", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_vlan(self, seqid, iprot, oprot):
        args = sai_thrift_remove_vlan_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_vlan_result()
        try:
            result.success = self._handler.sai_thrift_remove_vlan(args.vlan_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_vlan", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_vlan_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_vlan_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_vlan_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_vlan_stats(args.vlan_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_vlan_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_vlan_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_vlan_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_vlan_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_vlan_stats_ext(args.vlan_id, args.thrift_counter_ids, args.mode, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_vlan_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_vlan_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_vlan_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_vlan_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_vlan_stats(args.vlan_id, args.thrift_counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_vlan_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_vlan_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_vlan_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_vlan_member_result()
        try:
            result.success = self._handler.sai_thrift_create_vlan_member(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_vlan_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_vlan_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_vlan_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_vlan_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_vlan_member_attribute(args.vlan_member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_vlan_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_vlan_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_vlan_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_vlan_member_result()
        try:
            result.success = self._handler.sai_thrift_remove_vlan_member(args.vlan_member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_vlan_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_vlan_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_vlan_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_vlan_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_vlan_attribute(args.vlan_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_vlan_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_vlan_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_vlan_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_vlan_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_vlan_member_attribute(args.vlan_member_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_vlan_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_vlan_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_vlan_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_vlan_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_vlan_attribute(args.vlan_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_vlan_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_vlan_id(self, seqid, iprot, oprot):
        args = sai_thrift_get_vlan_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_vlan_id_result()
        try:
            result.success = self._handler.sai_thrift_get_vlan_id(args.vlan_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_vlan_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_vlan_members(self, seqid, iprot, oprot):
        args = sai_thrift_create_vlan_members_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_vlan_members_result()
        try:
            result.success = self._handler.sai_thrift_create_vlan_members(args.thrift_attr_lists, args.thrift_attr_count_lists, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_vlan_members", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_vlan_members(self, seqid, iprot, oprot):
        args = sai_thrift_remove_vlan_members_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_vlan_members_result()
        try:
            result.success = self._handler.sai_thrift_remove_vlan_members(args.thrift_object_id_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_vlan_members", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_virtual_router(self, seqid, iprot, oprot):
        args = sai_thrift_create_virtual_router_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_virtual_router_result()
        try:
            result.success = self._handler.sai_thrift_create_virtual_router(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_virtual_router", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_virtual_router(self, seqid, iprot, oprot):
        args = sai_thrift_remove_virtual_router_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_virtual_router_result()
        try:
            result.success = self._handler.sai_thrift_remove_virtual_router(args.vr_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_virtual_router", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_virtual_router_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_virtual_router_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_virtual_router_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_virtual_router_attribute(args.vr_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_virtual_router_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_virtual_router_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_virtual_router_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_virtual_router_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_virtual_router_attribute(args.vr_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_virtual_router_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_route(self, seqid, iprot, oprot):
        args = sai_thrift_create_route_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_route_result()
        try:
            result.success = self._handler.sai_thrift_create_route(args.thrift_route_entry, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_route", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_route(self, seqid, iprot, oprot):
        args = sai_thrift_remove_route_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_route_result()
        try:
            result.success = self._handler.sai_thrift_remove_route(args.thrift_route_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_route", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_route_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_route_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_route_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_route_attribute(args.thrift_route_entry, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_route_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_route_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_route_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_route_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_route_attribute(args.thrift_route_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_route_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_routes(self, seqid, iprot, oprot):
        args = sai_thrift_create_routes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_routes_result()
        try:
            result.success = self._handler.sai_thrift_create_routes(args.thrift_route_entry_list, args.thrift_attr_list, args.thrift_attr_count_lists, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_routes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_routes(self, seqid, iprot, oprot):
        args = sai_thrift_remove_routes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_routes_result()
        try:
            result.success = self._handler.sai_thrift_remove_routes(args.thrift_route_entry_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_routes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_routes_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_routes_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_routes_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_routes_attribute(args.thrift_route_entry_list, args.thrift_attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_routes_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_routes_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_routes_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_routes_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_routes_attribute(args.thrift_route_entry_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_routes_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_router_interface(self, seqid, iprot, oprot):
        args = sai_thrift_create_router_interface_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_router_interface_result()
        try:
            result.success = self._handler.sai_thrift_create_router_interface(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_router_interface", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_router_interface(self, seqid, iprot, oprot):
        args = sai_thrift_remove_router_interface_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_router_interface_result()
        try:
            result.success = self._handler.sai_thrift_remove_router_interface(args.rif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_router_interface", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_router_interface_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_router_interface_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_router_interface_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_router_interface_attribute(args.rif_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_router_interface_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_router_interface_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_router_interface_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_router_interface_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_router_interface_attribute(args.rif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_router_interface_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_router_interface_get_stats(self, seqid, iprot, oprot):
        args = sai_thrift_router_interface_get_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_router_interface_get_stats_result()
        try:
            result.success = self._handler.sai_thrift_router_interface_get_stats(args.rif_id, args.thrift_counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_router_interface_get_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_router_interface_get_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_router_interface_get_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_router_interface_get_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_router_interface_get_stats_ext(args.rif_id, args.thrift_counter_ids, args.mode, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_router_interface_get_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_router_interface_clear_stats(self, seqid, iprot, oprot):
        args = sai_thrift_router_interface_clear_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_router_interface_clear_stats_result()
        try:
            result.success = self._handler.sai_thrift_router_interface_clear_stats(args.rif_id, args.thrift_counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_router_interface_clear_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_next_hop(self, seqid, iprot, oprot):
        args = sai_thrift_create_next_hop_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_next_hop_result()
        try:
            result.success = self._handler.sai_thrift_create_next_hop(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_next_hop", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_next_hop(self, seqid, iprot, oprot):
        args = sai_thrift_remove_next_hop_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_next_hop_result()
        try:
            result.success = self._handler.sai_thrift_remove_next_hop(args.next_hop_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_next_hop", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_next_hop_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_next_hop_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_next_hop_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_next_hop_attribute(args.next_hop_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_next_hop_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_next_hop_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_next_hop_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_next_hop_group_result()
        try:
            result.success = self._handler.sai_thrift_create_next_hop_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_next_hop_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_next_hop_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_next_hop_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_next_hop_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_next_hop_group(args.nhop_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_next_hop_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_next_hop_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_next_hop_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_next_hop_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_next_hop_group_attribute(args.nhop_group_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_next_hop_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_next_hop_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_next_hop_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_next_hop_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_next_hop_group_attribute(args.nhop_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_next_hop_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_next_hop_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_next_hop_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_next_hop_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_next_hop_group_member(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_next_hop_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_next_hop_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_next_hop_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_next_hop_group_member_result()
        try:
            result.success = self._handler.sai_thrift_remove_next_hop_group_member(args.nhop_group_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_next_hop_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_next_hop_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_next_hop_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_next_hop_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_next_hop_group_member_attribute(args.nhop_group_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_next_hop_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_next_hop_group_member_attribute_ecmp(self, seqid, iprot, oprot):
        args = sai_thrift_get_next_hop_group_member_attribute_ecmp_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_next_hop_group_member_attribute_ecmp_result()
        try:
            result.success = self._handler.sai_thrift_get_next_hop_group_member_attribute_ecmp(args.nhop_group_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_next_hop_group_member_attribute_ecmp", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_next_hop_group_members(self, seqid, iprot, oprot):
        args = sai_thrift_create_next_hop_group_members_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_next_hop_group_members_result()
        try:
            result.success = self._handler.sai_thrift_create_next_hop_group_members(args.thrift_attr_lists, args.thrift_attr_count_lists, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_next_hop_group_members", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_next_hop_group_members(self, seqid, iprot, oprot):
        args = sai_thrift_remove_next_hop_group_members_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_next_hop_group_members_result()
        try:
            result.success = self._handler.sai_thrift_remove_next_hop_group_members(args.thrift_object_id_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_next_hop_group_members", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_lag(self, seqid, iprot, oprot):
        args = sai_thrift_create_lag_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_lag_result()
        try:
            result.success = self._handler.sai_thrift_create_lag(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_lag", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_lag(self, seqid, iprot, oprot):
        args = sai_thrift_remove_lag_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_lag_result()
        try:
            result.success = self._handler.sai_thrift_remove_lag(args.lag_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_lag", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_lag_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_lag_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_lag_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_lag_attribute(args.lag_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_lag_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_lag_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_lag_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_lag_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_lag_attribute(args.lag_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_lag_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_lag_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_lag_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_lag_member_result()
        try:
            result.success = self._handler.sai_thrift_create_lag_member(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_lag_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_lag_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_lag_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_lag_member_result()
        try:
            result.success = self._handler.sai_thrift_remove_lag_member(args.lag_member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_lag_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_lag_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_lag_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_lag_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_lag_member_attribute(args.lag_member_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_lag_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_lag_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_lag_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_lag_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_lag_member_attribute(args.lag_member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_lag_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_stp_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_stp_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_stp_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_stp_entry(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_stp_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_stp_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_stp_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_stp_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_stp_entry(args.stp_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_stp_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_stp_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_stp_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_stp_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_stp_attribute(args.stp_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_stp_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_stp_port(self, seqid, iprot, oprot):
        args = sai_thrift_create_stp_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_stp_port_result()
        try:
            result.success = self._handler.sai_thrift_create_stp_port(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_stp_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_stp_port(self, seqid, iprot, oprot):
        args = sai_thrift_remove_stp_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_stp_port_result()
        try:
            result.success = self._handler.sai_thrift_remove_stp_port(args.stp_port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_stp_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_stp_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_stp_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_stp_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_stp_port_attribute(args.stp_port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_stp_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_stp_port_state(self, seqid, iprot, oprot):
        args = sai_thrift_set_stp_port_state_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_stp_port_state_result()
        try:
            result.success = self._handler.sai_thrift_set_stp_port_state(args.stp_id, args.port_id, args.stp_port_state)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_stp_port_state", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_stp_port_state(self, seqid, iprot, oprot):
        args = sai_thrift_get_stp_port_state_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_stp_port_state_result()
        try:
            result.success = self._handler.sai_thrift_get_stp_port_state(args.stp_id, args.port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_stp_port_state", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_stp_ports(self, seqid, iprot, oprot):
        args = sai_thrift_create_stp_ports_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_stp_ports_result()
        try:
            result.success = self._handler.sai_thrift_create_stp_ports(args.thrift_attr_lists, args.thrift_attr_count_lists, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_stp_ports", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_stp_ports(self, seqid, iprot, oprot):
        args = sai_thrift_remove_stp_ports_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_stp_ports_result()
        try:
            result.success = self._handler.sai_thrift_remove_stp_ports(args.thrift_object_id_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_stp_ports", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_neighbor_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_neighbor_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_neighbor_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_neighbor_entry(args.thrift_neighbor_entry, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_neighbor_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_neighbor_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_neighbor_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_neighbor_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_neighbor_entry(args.thrift_neighbor_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_neighbor_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_all_neighbor_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_all_neighbor_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_all_neighbor_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_all_neighbor_entry()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_all_neighbor_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_neighbor_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_neighbor_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_neighbor_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_neighbor_entry_attribute(args.thrift_neighbor_entry, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_neighbor_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_neighbor_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_neighbor_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_neighbor_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_neighbor_entry_attribute(args.thrift_neighbor_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_neighbor_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_switch_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_switch_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_switch_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_switch_attribute(args.thrift_attr_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_switch_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_list_by_front_port(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_list_by_front_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_list_by_front_port_result()
        try:
            result.success = self._handler.sai_thrift_get_port_list_by_front_port()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_list_by_front_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_cpu_port_id(self, seqid, iprot, oprot):
        args = sai_thrift_get_cpu_port_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_cpu_port_id_result()
        try:
            result.success = self._handler.sai_thrift_get_cpu_port_id()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_cpu_port_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_default_trap_group(self, seqid, iprot, oprot):
        args = sai_thrift_get_default_trap_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_default_trap_group_result()
        try:
            result.success = self._handler.sai_thrift_get_default_trap_group()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_default_trap_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_default_router_id(self, seqid, iprot, oprot):
        args = sai_thrift_get_default_router_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_default_router_id_result()
        try:
            result.success = self._handler.sai_thrift_get_default_router_id()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_default_router_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_default_1q_bridge_id(self, seqid, iprot, oprot):
        args = sai_thrift_get_default_1q_bridge_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_default_1q_bridge_id_result()
        try:
            result.success = self._handler.sai_thrift_get_default_1q_bridge_id()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_default_1q_bridge_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_default_vlan_id(self, seqid, iprot, oprot):
        args = sai_thrift_get_default_vlan_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_default_vlan_id_result()
        try:
            result.success = self._handler.sai_thrift_get_default_vlan_id()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_default_vlan_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_id_by_front_port(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_id_by_front_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_id_by_front_port_result()
        try:
            result.success = self._handler.sai_thrift_get_port_id_by_front_port(args.port_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_id_by_front_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_switch_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_switch_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_switch_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_switch_attribute(args.attribute)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_switch_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_switch(self, seqid, iprot, oprot):
        args = sai_thrift_create_switch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_switch_result()
        try:
            result.success = self._handler.sai_thrift_create_switch()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_switch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_switch(self, seqid, iprot, oprot):
        args = sai_thrift_remove_switch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_switch_result()
        try:
            result.success = self._handler.sai_thrift_remove_switch()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_switch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_switch_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_switch_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_switch_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_switch_stats(args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_switch_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_switch_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_switch_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_switch_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_switch_stats_ext(args.counter_ids, args.mode, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_switch_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_switch_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_switch_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_switch_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_switch_stats(args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_switch_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_bridge_port(self, seqid, iprot, oprot):
        args = sai_thrift_create_bridge_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_bridge_port_result()
        try:
            result.success = self._handler.sai_thrift_create_bridge_port(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_bridge_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_bridge_port(self, seqid, iprot, oprot):
        args = sai_thrift_remove_bridge_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_bridge_port_result()
        try:
            result.success = self._handler.sai_thrift_remove_bridge_port(args.bridge_port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_bridge_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_port_list(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_port_list_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_port_list_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_port_list(args.bridge_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_port_list", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_port_attribute(args.bridge_port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_bridge_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_bridge_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_bridge_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_bridge_port_attribute(args.bridge_port_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_bridge_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_bridge(self, seqid, iprot, oprot):
        args = sai_thrift_create_bridge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_bridge_result()
        try:
            result.success = self._handler.sai_thrift_create_bridge(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_bridge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_bridge(self, seqid, iprot, oprot):
        args = sai_thrift_remove_bridge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_bridge_result()
        try:
            result.success = self._handler.sai_thrift_remove_bridge(args.bridge_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_bridge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_attribute(args.bridge_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_bridge_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_bridge_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_bridge_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_bridge_attribute(args.bridge_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_bridge_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_port_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_port_stats(args.bridge_port_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_port_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_port_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_port_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_port_stats_ext(args.bridge_port_id, args.thrift_counter_ids, args.mode, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_port_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_bridge_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_bridge_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_bridge_port_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_bridge_port_stats(args.bridge_port_id, args.thrift_counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_bridge_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hostif(self, seqid, iprot, oprot):
        args = sai_thrift_create_hostif_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hostif_result()
        try:
            result.success = self._handler.sai_thrift_create_hostif(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hostif", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hostif(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hostif_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hostif_result()
        try:
            result.success = self._handler.sai_thrift_remove_hostif(args.thrift_hif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hostif", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hostif_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hostif_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hostif_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hostif_attribute(args.thrift_hif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hostif_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hostif_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hostif_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hostif_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_hostif_attribute(args.thrift_hif_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hostif_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hostif_table_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_hostif_table_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hostif_table_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_hostif_table_entry(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hostif_table_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hostif_table_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hostif_table_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hostif_table_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_hostif_table_entry(args.thrift_hostif_table_entry_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hostif_table_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hostif_table_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hostif_table_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hostif_table_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hostif_table_entry_attribute(args.thrift_hostif_table_entry_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hostif_table_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hostif_table_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hostif_table_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hostif_table_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_hostif_table_entry_attribute(args.thrift_hostif_table_entry_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hostif_table_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hostif_trap_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_hostif_trap_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hostif_trap_group_result()
        try:
            result.success = self._handler.sai_thrift_create_hostif_trap_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hostif_trap_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hostif_trap_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hostif_trap_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hostif_trap_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_hostif_trap_group(args.thrift_hostif_trap_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hostif_trap_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hostif_trap_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hostif_trap_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hostif_trap_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hostif_trap_group_attribute(args.thrift_hostif_trap_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hostif_trap_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hostif_trap_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hostif_trap_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hostif_trap_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_hostif_trap_group_attribute(args.thrift_hostif_trap_group_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hostif_trap_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hostif_trap(self, seqid, iprot, oprot):
        args = sai_thrift_create_hostif_trap_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hostif_trap_result()
        try:
            result.success = self._handler.sai_thrift_create_hostif_trap(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hostif_trap", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hostif_trap(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hostif_trap_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hostif_trap_result()
        try:
            result.success = self._handler.sai_thrift_remove_hostif_trap(args.thrift_hostif_trap_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hostif_trap", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hostif_trap_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hostif_trap_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hostif_trap_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hostif_trap_attribute(args.thrift_hostif_trap_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hostif_trap_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hostif_trap_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hostif_trap_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hostif_trap_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_hostif_trap_attribute(args.thrift_hostif_trap_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hostif_trap_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_send_hostif_packet(self, seqid, iprot, oprot):
        args = sai_thrift_send_hostif_packet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_send_hostif_packet_result()
        try:
            result.success = self._handler.sai_thrift_send_hostif_packet(args.thrift_hif_id, args.packet_data, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_send_hostif_packet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_table(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_table_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_table_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_table(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_table", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_table(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_table_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_table_result()
        try:
            result.success = self._handler.sai_thrift_remove_acl_table(args.acl_table_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_table", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_table_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_table_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_table_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_table_attribute(args.acl_table_id, args.thrift_attr_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_table_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_entry(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_acl_entry(args.acl_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_acl_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_acl_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_acl_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_acl_entry_attribute(args.acl_entry_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_acl_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_entry_attribute(args.acl_entry_id, args.thrift_attr_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_table_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_table_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_table_group_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_table_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_table_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_table_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_table_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_table_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_acl_table_group(args.acl_table_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_table_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_table_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_table_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_table_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_table_group_attribute(args.acl_table_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_table_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_table_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_table_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_table_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_table_group_member(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_table_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_table_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_table_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_table_group_member_result()
        try:
            result.success = self._handler.sai_thrift_remove_acl_table_group_member(args.acl_table_group_member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_table_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_table_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_table_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_table_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_table_group_member_attribute(args.acl_table_group_member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_table_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_counter(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_counter_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_counter(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_counter(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_counter_result()
        try:
            result.success = self._handler.sai_thrift_remove_acl_counter(args.acl_counter_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_counter_attribute(args.acl_counter_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_acl_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_acl_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_acl_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_acl_counter_attribute(args.acl_counter_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_acl_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_range(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_range_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_range_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_range(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_range", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_range(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_range_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_range_result()
        try:
            result.success = self._handler.sai_thrift_remove_acl_range(args.acl_range_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_range", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_range_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_range_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_range_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_range_attribute(args.acl_range_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_range_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hash(self, seqid, iprot, oprot):
        args = sai_thrift_create_hash_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hash_result()
        try:
            result.success = self._handler.sai_thrift_create_hash(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hash", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hash(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hash_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hash_result()
        try:
            result.success = self._handler.sai_thrift_remove_hash(args.hash_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hash", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hash_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hash_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hash_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_hash_attribute(args.thrift_hash_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hash_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hash_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hash_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hash_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hash_attribute(args.thrift_hash_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hash_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_udf_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_udf_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_udf_group_result()
        try:
            result.success = self._handler.sai_thrift_create_udf_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_udf_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_udf_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_udf_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_udf_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_udf_group(args.udf_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_udf_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_udf_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_udf_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_udf_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_udf_group_attribute(args.thrift_udf_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_udf_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_udf_match(self, seqid, iprot, oprot):
        args = sai_thrift_create_udf_match_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_udf_match_result()
        try:
            result.success = self._handler.sai_thrift_create_udf_match(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_udf_match", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_udf_match(self, seqid, iprot, oprot):
        args = sai_thrift_remove_udf_match_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_udf_match_result()
        try:
            result.success = self._handler.sai_thrift_remove_udf_match(args.udf_match_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_udf_match", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_udf_match_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_udf_match_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_udf_match_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_udf_match_attribute(args.thrift_udf_match_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_udf_match_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_udf(self, seqid, iprot, oprot):
        args = sai_thrift_create_udf_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_udf_result()
        try:
            result.success = self._handler.sai_thrift_create_udf(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_udf", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_udf(self, seqid, iprot, oprot):
        args = sai_thrift_remove_udf_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_udf_result()
        try:
            result.success = self._handler.sai_thrift_remove_udf(args.udf_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_udf", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_udf_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_udf_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_udf_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_udf_attribute(args.thrift_udf_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_udf_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_udf_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_udf_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_udf_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_udf_attribute(args.thrift_udf_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_udf_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_twamp_session(self, seqid, iprot, oprot):
        args = sai_thrift_create_twamp_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_twamp_session_result()
        try:
            result.success = self._handler.sai_thrift_create_twamp_session(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_twamp_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_twamp_session(self, seqid, iprot, oprot):
        args = sai_thrift_remove_twamp_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_twamp_session_result()
        try:
            result.success = self._handler.sai_thrift_remove_twamp_session(args.session_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_twamp_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_twamp_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_twamp_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_twamp_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_twamp_attribute(args.thrift_twamp_session_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_twamp_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_twamp_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_twamp_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_twamp_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_twamp_attribute(args.thrift_twamp_session_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_twamp_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_twamp_session_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_twamp_session_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_twamp_session_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_twamp_session_stats(args.twamp_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_twamp_session_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_twamp_session_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_twamp_session_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_twamp_session_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_twamp_session_stats(args.twamp_id, args.thrift_counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_twamp_session_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_mirror_session(self, seqid, iprot, oprot):
        args = sai_thrift_create_mirror_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_mirror_session_result()
        try:
            result.success = self._handler.sai_thrift_create_mirror_session(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_mirror_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_mirror_session(self, seqid, iprot, oprot):
        args = sai_thrift_remove_mirror_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_mirror_session_result()
        try:
            result.success = self._handler.sai_thrift_remove_mirror_session(args.session_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_mirror_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_mirror_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_mirror_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_mirror_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_mirror_attribute(args.thrift_mirror_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_mirror_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_mirror_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_mirror_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_mirror_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_mirror_attribute(args.thrift_mirror_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_mirror_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_inseg_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_inseg_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_inseg_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_inseg_entry(args.thrift_inseg_entry, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_inseg_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_inseg_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_inseg_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_inseg_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_inseg_entry(args.thrift_inseg_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_inseg_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_inseg_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_inseg_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_inseg_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_inseg_entry_attribute(args.thrift_inseg_entry, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_inseg_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_inseg_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_inseg_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_inseg_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_inseg_entry_attribute(args.thrift_inseg_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_inseg_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_dump_log(self, seqid, iprot, oprot):
        args = sai_thrift_dump_log_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_dump_log_result()
        try:
            result.success = self._handler.sai_thrift_dump_log(args.dump_file_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_dump_log", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_policer(self, seqid, iprot, oprot):
        args = sai_thrift_create_policer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_policer_result()
        try:
            result.success = self._handler.sai_thrift_create_policer(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_policer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_policer(self, seqid, iprot, oprot):
        args = sai_thrift_remove_policer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_policer_result()
        try:
            result.success = self._handler.sai_thrift_remove_policer(args.thrift_policer_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_policer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_policer_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_policer_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_policer_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_policer_attribute(args.thrift_policer_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_policer_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_policer_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_policer_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_policer_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_policer_attribute(args.thrift_policer_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_policer_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_policer_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_policer_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_policer_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_policer_stats(args.thrift_policer_id, args.thrift_counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_policer_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_policer_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_policer_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_policer_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_policer_stats_ext(args.thrift_policer_id, args.thrift_counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_policer_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_policer_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_policer_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_policer_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_policer_stats(args.thrift_policer_id, args.thrift_counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_policer_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_scheduler_profile(self, seqid, iprot, oprot):
        args = sai_thrift_create_scheduler_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_scheduler_profile_result()
        try:
            result.success = self._handler.sai_thrift_create_scheduler_profile(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_scheduler_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_scheduler_profile(self, seqid, iprot, oprot):
        args = sai_thrift_remove_scheduler_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_scheduler_profile_result()
        try:
            result.success = self._handler.sai_thrift_remove_scheduler_profile(args.scheduler_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_scheduler_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_scheduler_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_scheduler_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_scheduler_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_scheduler_attribute(args.thrift_scheduler_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_scheduler_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_scheduler_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_scheduler_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_scheduler_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_scheduler_attribute(args.thrift_scheduler_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_scheduler_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_scheduler_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_scheduler_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_scheduler_group_result()
        try:
            result.success = self._handler.sai_thrift_create_scheduler_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_scheduler_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_scheduler_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_scheduler_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_scheduler_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_scheduler_group(args.scheduler_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_scheduler_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_scheduler_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_scheduler_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_scheduler_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_scheduler_group_attribute(args.scheduler_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_scheduler_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_scheduler_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_scheduler_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_scheduler_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_scheduler_group_attribute(args.scheduler_group_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_scheduler_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_queue_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_queue_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_queue_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_queue_stats(args.queue_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_queue_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_queue_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_queue_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_queue_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_queue_stats(args.queue_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_queue_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_queue(self, seqid, iprot, oprot):
        args = sai_thrift_create_queue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_queue_result()
        try:
            result.success = self._handler.sai_thrift_create_queue(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_queue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_queue(self, seqid, iprot, oprot):
        args = sai_thrift_remove_queue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_queue_result()
        try:
            result.success = self._handler.sai_thrift_remove_queue(args.queue_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_queue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_queue_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_queue_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_queue_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_queue_attribute(args.queue_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_queue_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_queue_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_queue_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_queue_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_queue_attribute(args.queue_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_queue_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_buffer_profile(self, seqid, iprot, oprot):
        args = sai_thrift_create_buffer_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_buffer_profile_result()
        try:
            result.success = self._handler.sai_thrift_create_buffer_profile(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_buffer_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_buffer_profile(self, seqid, iprot, oprot):
        args = sai_thrift_remove_buffer_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_buffer_profile_result()
        try:
            result.success = self._handler.sai_thrift_remove_buffer_profile(args.buffer_profile_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_buffer_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_buffer_profile_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_buffer_profile_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_buffer_profile_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_buffer_profile_attribute(args.buffer_profile_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_buffer_profile_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_buffer_profile_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_buffer_profile_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_buffer_profile_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_buffer_profile_attribute(args.buffer_profile_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_buffer_profile_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_pool_profile(self, seqid, iprot, oprot):
        args = sai_thrift_create_pool_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_pool_profile_result()
        try:
            result.success = self._handler.sai_thrift_create_pool_profile(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_pool_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_priority_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_priority_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_priority_group_result()
        try:
            result.success = self._handler.sai_thrift_create_priority_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_priority_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_priority_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_priority_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_priority_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_priority_group(args.priority_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_priority_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_priority_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_priority_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_priority_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_priority_group_attribute(args.priority_group_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_priority_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_priority_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_priority_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_priority_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_priority_group_attribute(args.pg_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_priority_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_pg_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_pg_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_pg_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_pg_stats(args.pg_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_pg_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_wred_profile(self, seqid, iprot, oprot):
        args = sai_thrift_create_wred_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_wred_profile_result()
        try:
            result.success = self._handler.sai_thrift_create_wred_profile(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_wred_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_wred_profile(self, seqid, iprot, oprot):
        args = sai_thrift_remove_wred_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_wred_profile_result()
        try:
            result.success = self._handler.sai_thrift_remove_wred_profile(args.wred_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_wred_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_wred_attribute_profile(self, seqid, iprot, oprot):
        args = sai_thrift_get_wred_attribute_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_wred_attribute_profile_result()
        try:
            result.success = self._handler.sai_thrift_get_wred_attribute_profile(args.wred_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_wred_attribute_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_wred_attribute_profile(self, seqid, iprot, oprot):
        args = sai_thrift_set_wred_attribute_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_wred_attribute_profile_result()
        try:
            result.success = self._handler.sai_thrift_set_wred_attribute_profile(args.wred_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_wred_attribute_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_qos_map(self, seqid, iprot, oprot):
        args = sai_thrift_create_qos_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_qos_map_result()
        try:
            result.success = self._handler.sai_thrift_create_qos_map(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_qos_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_qos_map(self, seqid, iprot, oprot):
        args = sai_thrift_remove_qos_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_qos_map_result()
        try:
            result.success = self._handler.sai_thrift_remove_qos_map(args.qos_map_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_qos_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_qos_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_qos_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_qos_map_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_qos_map_attribute(args.qos_map_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_qos_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_qos_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_qos_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_qos_map_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_qos_map_attribute(args.qos_map_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_qos_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_l2mc_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_l2mc_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_l2mc_group_result()
        try:
            result.success = self._handler.sai_thrift_create_l2mc_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_l2mc_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_l2mc_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_l2mc_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_l2mc_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_l2mc_group(args.grp_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_l2mc_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_l2mc_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_l2mc_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_l2mc_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_l2mc_group_attribute(args.grp_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_l2mc_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_l2mc_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_l2mc_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_l2mc_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_l2mc_group_member(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_l2mc_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_l2mc_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_l2mc_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_l2mc_group_member_result()
        try:
            result.success = self._handler.sai_thrift_remove_l2mc_group_member(args.member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_l2mc_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_l2mc_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_l2mc_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_l2mc_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_l2mc_group_member_attribute(args.member_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_l2mc_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_l2mc_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_l2mc_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_l2mc_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_l2mc_group_member_attribute(args.member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_l2mc_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_l2mc_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_l2mc_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_l2mc_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_l2mc_entry(args.thrift_l2mc_entry, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_l2mc_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_l2mc_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_l2mc_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_l2mc_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_l2mc_entry(args.thrift_l2mc_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_l2mc_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_l2mc_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_l2mc_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_l2mc_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_l2mc_entry_attribute(args.thrift_l2mc_entry, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_l2mc_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_l2mc_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_l2mc_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_l2mc_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_l2mc_entry_attribute(args.thrift_l2mc_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_l2mc_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_mcast_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_mcast_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_mcast_fdb_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_mcast_fdb_entry(args.thrift_mcast_fdb_entry, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_mcast_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_mcast_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_mcast_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_mcast_fdb_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_mcast_fdb_entry(args.thrift_mcast_fdb_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_mcast_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_mcast_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_mcast_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_mcast_fdb_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_mcast_fdb_entry_attribute(args.thrift_mcast_fdb_entry, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_mcast_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_mcast_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_mcast_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_mcast_fdb_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_mcast_fdb_entry_attribute(args.thrift_mcast_fdb_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_mcast_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ipmc_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_ipmc_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ipmc_group_result()
        try:
            result.success = self._handler.sai_thrift_create_ipmc_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ipmc_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ipmc_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ipmc_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ipmc_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_ipmc_group(args.grp_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ipmc_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipmc_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipmc_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipmc_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ipmc_group_attribute(args.grp_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipmc_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ipmc_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_ipmc_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ipmc_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_ipmc_group_member(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ipmc_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ipmc_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ipmc_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ipmc_group_member_result()
        try:
            result.success = self._handler.sai_thrift_remove_ipmc_group_member(args.member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ipmc_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ipmc_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ipmc_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ipmc_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_ipmc_group_member_attribute(args.member_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ipmc_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipmc_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipmc_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipmc_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ipmc_group_member_attribute(args.member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipmc_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_rpf_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_rpf_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_rpf_group_result()
        try:
            result.success = self._handler.sai_thrift_create_rpf_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_rpf_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_rpf_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_rpf_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_rpf_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_rpf_group(args.grp_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_rpf_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_rpf_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_rpf_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_rpf_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_rpf_group_attribute(args.grp_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_rpf_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_rpf_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_rpf_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_rpf_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_rpf_group_member(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_rpf_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_rpf_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_rpf_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_rpf_group_member_result()
        try:
            result.success = self._handler.sai_thrift_remove_rpf_group_member(args.member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_rpf_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_rpf_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_rpf_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_rpf_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_rpf_group_member_attribute(args.member_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_rpf_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_rpf_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_rpf_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_rpf_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_rpf_group_member_attribute(args.member_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_rpf_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ipmc_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_ipmc_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ipmc_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_ipmc_entry(args.thrift_ipmc_entry, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ipmc_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ipmc_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ipmc_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ipmc_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_ipmc_entry(args.thrift_ipmc_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ipmc_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ipmc_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ipmc_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ipmc_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_ipmc_entry_attribute(args.thrift_ipmc_entry, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ipmc_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipmc_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipmc_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipmc_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ipmc_entry_attribute(args.thrift_ipmc_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipmc_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_samplepacket(self, seqid, iprot, oprot):
        args = sai_thrift_create_samplepacket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_samplepacket_result()
        try:
            result.success = self._handler.sai_thrift_create_samplepacket(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_samplepacket", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_samplepacket(self, seqid, iprot, oprot):
        args = sai_thrift_remove_samplepacket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_samplepacket_result()
        try:
            result.success = self._handler.sai_thrift_remove_samplepacket(args.samplepacket_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_samplepacket", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_samplepacket_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_samplepacket_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_samplepacket_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_samplepacket_attribute(args.samplepacket_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_samplepacket_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_samplepacket_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_samplepacket_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_samplepacket_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_samplepacket_attribute(args.samplepacket_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_samplepacket_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tunnel_map_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_tunnel_map_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tunnel_map_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_tunnel_map_entry(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tunnel_map_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tunnel_map_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tunnel_map_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tunnel_map_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_tunnel_map_entry(args.tunnel_map_entry_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tunnel_map_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_map_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_map_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_map_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_map_entry_attribute(args.tunnel_map_entry_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_map_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tunnel_map_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tunnel_map_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tunnel_map_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_tunnel_map_entry_attribute(args.tunnel_map_entry_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tunnel_map_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tunnel_map(self, seqid, iprot, oprot):
        args = sai_thrift_create_tunnel_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tunnel_map_result()
        try:
            result.success = self._handler.sai_thrift_create_tunnel_map(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tunnel_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tunnel_map(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tunnel_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tunnel_map_result()
        try:
            result.success = self._handler.sai_thrift_remove_tunnel_map(args.tunnel_map_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tunnel_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_map_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_map_attribute(args.tunnel_map_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tunnel_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tunnel_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tunnel_map_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_tunnel_map_attribute(args.tunnel_map_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tunnel_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tunnel(self, seqid, iprot, oprot):
        args = sai_thrift_create_tunnel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tunnel_result()
        try:
            result.success = self._handler.sai_thrift_create_tunnel(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tunnel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tunnel(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tunnel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tunnel_result()
        try:
            result.success = self._handler.sai_thrift_remove_tunnel(args.tunnel_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tunnel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_attribute(args.tunnel_id, args.thrift_attr_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tunnel_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tunnel_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tunnel_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_tunnel_attribute(args.tunnel_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tunnel_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_stats(args.tunnel_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_tunnel_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_tunnel_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_tunnel_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_tunnel_stats(args.tunnel_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_tunnel_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tunnel_term_table_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_tunnel_term_table_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tunnel_term_table_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_tunnel_term_table_entry(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tunnel_term_table_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tunnel_term_table_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tunnel_term_table_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tunnel_term_table_entry_result()
        try:
            result.success = self._handler.sai_thrift_remove_tunnel_term_table_entry(args.tunnel_term_table_entry_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tunnel_term_table_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_term_table_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_term_table_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_term_table_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_term_table_entry_attribute(args.tunnel_term_table_entry_id, args.thrift_attr_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_term_table_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tunnel_term_table_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tunnel_term_table_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tunnel_term_table_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_tunnel_term_table_entry_attribute(args.tunnel_term_table_entry_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tunnel_term_table_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_cpu_packet_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_cpu_packet_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_cpu_packet_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_cpu_packet_attribute()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_cpu_packet_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_cpu_packet_count(self, seqid, iprot, oprot):
        args = sai_thrift_get_cpu_packet_count_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_cpu_packet_count_result()
        try:
            result.success = self._handler.sai_thrift_get_cpu_packet_count()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_cpu_packet_count", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_cpu_packet_info(self, seqid, iprot, oprot):
        args = sai_thrift_clear_cpu_packet_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_cpu_packet_info_result()
        try:
            result.success = self._handler.sai_thrift_clear_cpu_packet_info()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_cpu_packet_info", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_log_set(self, seqid, iprot, oprot):
        args = sai_thrift_log_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_log_set_result()
        try:
            result.success = self._handler.sai_thrift_log_set(args.sai_api_id, args.log_level)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_log_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_isolation_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_isolation_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_isolation_group_result()
        try:
            result.success = self._handler.sai_thrift_create_isolation_group(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_isolation_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_isolation_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_isolation_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_isolation_group_result()
        try:
            result.success = self._handler.sai_thrift_remove_isolation_group(args.iso_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_isolation_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_isolation_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_isolation_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_isolation_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_isolation_group_member(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_isolation_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_isolation_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_isolation_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_isolation_group_member_result()
        try:
            result.success = self._handler.sai_thrift_remove_isolation_group_member(args.member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_isolation_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_isolation_group_attributes(self, seqid, iprot, oprot):
        args = sai_thrift_get_isolation_group_attributes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_isolation_group_attributes_result()
        try:
            result.success = self._handler.sai_thrift_get_isolation_group_attributes(args.iso_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_isolation_group_attributes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_isolation_group_member_attributes(self, seqid, iprot, oprot):
        args = sai_thrift_get_isolation_group_member_attributes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_isolation_group_member_attributes_result()
        try:
            result.success = self._handler.sai_thrift_get_isolation_group_member_attributes(args.member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_isolation_group_member_attributes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_counter(self, seqid, iprot, oprot):
        args = sai_thrift_create_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_counter_result()
        try:
            result.success = self._handler.sai_thrift_create_counter(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_counter(self, seqid, iprot, oprot):
        args = sai_thrift_remove_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_counter_result()
        try:
            result.success = self._handler.sai_thrift_remove_counter(args.counter_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_counter_attribute(args.thrift_counter_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_counter_attribute(args.thrift_counter_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_counter_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_counter_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_counter_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_counter_stats(args.counter_id, args.counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_counter_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_counter_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_counter_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_counter_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_counter_stats_ext(args.counter_id, args.counter_ids, args.mode, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_counter_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_counter_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_counter_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_counter_stats_result()
        try:
            result.success = self._handler.sai_thrift_clear_counter_stats(args.counter_id, args.thrift_counter_ids, args.number_of_counters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_counter_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_debug_counter(self, seqid, iprot, oprot):
        args = sai_thrift_create_debug_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_debug_counter_result()
        try:
            result.success = self._handler.sai_thrift_create_debug_counter(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_debug_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_debug_counter(self, seqid, iprot, oprot):
        args = sai_thrift_remove_debug_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_debug_counter_result()
        try:
            result.success = self._handler.sai_thrift_remove_debug_counter(args.debug_counter_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_debug_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_debug_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_debug_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_debug_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_debug_counter_attribute(args.thrift_debug_counter_id, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_debug_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_debug_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_debug_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_debug_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_debug_counter_attribute(args.thrift_debug_counter_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_debug_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_nat(self, seqid, iprot, oprot):
        args = sai_thrift_create_nat_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_nat_result()
        try:
            result.success = self._handler.sai_thrift_create_nat(args.thrift_nat_entry, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_nat", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_nat(self, seqid, iprot, oprot):
        args = sai_thrift_remove_nat_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_nat_result()
        try:
            result.success = self._handler.sai_thrift_remove_nat(args.thrift_nat_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_nat", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_nat_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_nat_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_nat_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_nat_attribute(args.thrift_nat_entry, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_nat_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_nat_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_nat_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_nat_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_nat_attribute(args.thrift_nat_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_nat_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_bfd(self, seqid, iprot, oprot):
        args = sai_thrift_create_bfd_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_bfd_result()
        try:
            result.success = self._handler.sai_thrift_create_bfd(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_bfd", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_bfd(self, seqid, iprot, oprot):
        args = sai_thrift_remove_bfd_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_bfd_result()
        try:
            result.success = self._handler.sai_thrift_remove_bfd(args.bfd_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_bfd", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_bfd_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_bfd_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_bfd_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_bfd_attribute(args.bfd_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_bfd_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bfd_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_bfd_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bfd_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_bfd_attribute(args.bfd_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bfd_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_y1731_meg(self, seqid, iprot, oprot):
        args = sai_thrift_create_y1731_meg_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_y1731_meg_result()
        try:
            result.success = self._handler.sai_thrift_create_y1731_meg(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_y1731_meg", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_y1731_meg(self, seqid, iprot, oprot):
        args = sai_thrift_remove_y1731_meg_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_y1731_meg_result()
        try:
            result.success = self._handler.sai_thrift_remove_y1731_meg(args.y1731_meg_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_y1731_meg", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_y1731_meg_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_y1731_meg_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_y1731_meg_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_y1731_meg_attribute(args.y1731_meg_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_y1731_meg_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_y1731_meg_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_y1731_meg_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_y1731_meg_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_y1731_meg_attribute(args.y1731_meg_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_y1731_meg_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_y1731_session(self, seqid, iprot, oprot):
        args = sai_thrift_create_y1731_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_y1731_session_result()
        try:
            result.success = self._handler.sai_thrift_create_y1731_session(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_y1731_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_y1731_session(self, seqid, iprot, oprot):
        args = sai_thrift_remove_y1731_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_y1731_session_result()
        try:
            result.success = self._handler.sai_thrift_remove_y1731_session(args.y1731_session_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_y1731_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_y1731_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_y1731_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_y1731_session_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_y1731_session_attribute(args.y1731_session_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_y1731_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_y1731_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_y1731_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_y1731_session_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_y1731_session_attribute(args.y1731_session_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_y1731_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_y1731_rmep(self, seqid, iprot, oprot):
        args = sai_thrift_create_y1731_rmep_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_y1731_rmep_result()
        try:
            result.success = self._handler.sai_thrift_create_y1731_rmep(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_y1731_rmep", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_y1731_rmep(self, seqid, iprot, oprot):
        args = sai_thrift_remove_y1731_rmep_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_y1731_rmep_result()
        try:
            result.success = self._handler.sai_thrift_remove_y1731_rmep(args.y1731_rmep_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_y1731_rmep", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_y1731_rmep_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_y1731_rmep_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_y1731_rmep_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_y1731_rmep_attribute(args.y1731_rmep_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_y1731_rmep_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_y1731_rmep_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_y1731_rmep_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_y1731_rmep_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_y1731_rmep_attribute(args.y1731_rmep_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_y1731_rmep_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_y1731_session_lm_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_y1731_session_lm_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_y1731_session_lm_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_y1731_session_lm_stats(args.y1731_session_oid, args.lm_stats_ids, args.number_of_stats)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_y1731_session_lm_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_port(self, seqid, iprot, oprot):
        args = sai_thrift_create_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_port_result()
        try:
            result.success = self._handler.sai_thrift_create_port(args.port_name, args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_port(self, seqid, iprot, oprot):
        args = sai_thrift_remove_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_port_result()
        try:
            result.success = self._handler.sai_thrift_remove_port(args.port_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ptp_domain(self, seqid, iprot, oprot):
        args = sai_thrift_create_ptp_domain_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ptp_domain_result()
        try:
            result.success = self._handler.sai_thrift_create_ptp_domain(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ptp_domain", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ptp_domain(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ptp_domain_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ptp_domain_result()
        try:
            result.success = self._handler.sai_thrift_remove_ptp_domain(args.ptp_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ptp_domain", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ptp_domain_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ptp_domain_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ptp_domain_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_ptp_domain_attribute(args.ptp_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ptp_domain_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ptp_domain_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ptp_domain_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ptp_domain_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ptp_domain_attribute(args.ptp_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ptp_domain_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_synce(self, seqid, iprot, oprot):
        args = sai_thrift_create_synce_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_synce_result()
        try:
            result.success = self._handler.sai_thrift_create_synce(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_synce", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_synce(self, seqid, iprot, oprot):
        args = sai_thrift_remove_synce_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_synce_result()
        try:
            result.success = self._handler.sai_thrift_remove_synce(args.synce_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_synce", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_synce_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_synce_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_synce_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_synce_attribute(args.synce_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_synce_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_synce_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_synce_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_synce_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_synce_attribute(args.synce_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_synce_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_es(self, seqid, iprot, oprot):
        args = sai_thrift_create_es_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_es_result()
        try:
            result.success = self._handler.sai_thrift_create_es(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_es", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_es(self, seqid, iprot, oprot):
        args = sai_thrift_remove_es_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_es_result()
        try:
            result.success = self._handler.sai_thrift_remove_es(args.es_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_es", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_es_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_es_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_es_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_es_attribute(args.es_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_es_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_es_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_es_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_es_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_es_attribute(args.es_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_es_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_monitor_buffer(self, seqid, iprot, oprot):
        args = sai_thrift_create_monitor_buffer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_monitor_buffer_result()
        try:
            result.success = self._handler.sai_thrift_create_monitor_buffer(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_monitor_buffer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_monitor_buffer(self, seqid, iprot, oprot):
        args = sai_thrift_remove_monitor_buffer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_monitor_buffer_result()
        try:
            result.success = self._handler.sai_thrift_remove_monitor_buffer(args.monitor_buffer_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_monitor_buffer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_monitor_buffer_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_monitor_buffer_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_monitor_buffer_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_monitor_buffer_attribute(args.monitor_buffer_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_monitor_buffer_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_monitor_buffer_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_monitor_buffer_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_monitor_buffer_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_monitor_buffer_attribute(args.monitor_buffer_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_monitor_buffer_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_monitor_latency(self, seqid, iprot, oprot):
        args = sai_thrift_create_monitor_latency_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_monitor_latency_result()
        try:
            result.success = self._handler.sai_thrift_create_monitor_latency(args.thrift_attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_monitor_latency", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_monitor_latency(self, seqid, iprot, oprot):
        args = sai_thrift_remove_monitor_latency_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_monitor_latency_result()
        try:
            result.success = self._handler.sai_thrift_remove_monitor_latency(args.monitor_latency_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_monitor_latency", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_monitor_latency_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_monitor_latency_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_monitor_latency_attribute_result()
        try:
            result.success = self._handler.sai_thrift_set_monitor_latency_attribute(args.monitor_latency_oid, args.thrift_attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_monitor_latency_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_monitor_latency_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_monitor_latency_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_monitor_latency_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_monitor_latency_attribute(args.monitor_latency_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_monitor_latency_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class sai_thrift_set_port_attribute_args(object):
    """
    Attributes:
     - port_id
     - thrift_attr

    """


    def __init__(self, port_id=None, thrift_attr=None,):
        self.port_id = port_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_attribute_args')
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 1)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_attribute_args)
sai_thrift_set_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_port_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_attribute_result)
sai_thrift_set_port_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_port_attribute_args(object):
    """
    Attributes:
     - port_id

    """


    def __init__(self, port_id=None,):
        self.port_id = port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_attribute_args')
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 1)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_attribute_args)
sai_thrift_get_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_id', None, None, ),  # 1
)


class sai_thrift_get_port_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_attribute_result)
sai_thrift_get_port_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_port_stats_args(object):
    """
    Attributes:
     - port_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, port_id=None, counter_ids=None, number_of_counters=None,):
        self.port_id = port_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = iprot.readI32()
                        self.counter_ids.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_stats_args')
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 1)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter83 in self.counter_ids:
                oprot.writeI32(iter83)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_stats_args)
sai_thrift_get_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_get_port_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = iprot.readI64()
                        self.success.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter90 in self.success:
                oprot.writeI64(iter90)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_stats_result)
sai_thrift_get_port_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_get_port_stats_ext_args(object):
    """
    Attributes:
     - port_id
     - counter_ids
     - mode
     - number_of_counters

    """


    def __init__(self, port_id=None, counter_ids=None, mode=None, number_of_counters=None,):
        self.port_id = port_id
        self.counter_ids = counter_ids
        self.mode = mode
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = iprot.readI32()
                        self.counter_ids.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_stats_ext_args')
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 1)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter97 in self.counter_ids:
                oprot.writeI32(iter97)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 4)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_stats_ext_args)
sai_thrift_get_port_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
    (4, TType.I32, 'number_of_counters', None, None, ),  # 4
)


class sai_thrift_get_port_stats_ext_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = iprot.readI64()
                        self.success.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter104 in self.success:
                oprot.writeI64(iter104)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_stats_ext_result)
sai_thrift_get_port_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_clear_port_all_stats_args(object):
    """
    Attributes:
     - port_id

    """


    def __init__(self, port_id=None,):
        self.port_id = port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_all_stats_args')
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 1)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_all_stats_args)
sai_thrift_clear_port_all_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_id', None, None, ),  # 1
)


class sai_thrift_clear_port_all_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_all_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_all_stats_result)
sai_thrift_clear_port_all_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_clear_port_stats_args(object):
    """
    Attributes:
     - port_id
     - number_of_counters
     - counter_ids

    """


    def __init__(self, port_id=None, number_of_counters=None, counter_ids=None,):
        self.port_id = port_id
        self.number_of_counters = number_of_counters
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = iprot.readI32()
                        self.counter_ids.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_stats_args')
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 1)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 2)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter111 in self.counter_ids:
                oprot.writeI32(iter111)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_stats_args)
sai_thrift_clear_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_id', None, None, ),  # 1
    (2, TType.I32, 'number_of_counters', None, None, ),  # 2
    (3, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 3
)


class sai_thrift_clear_port_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_stats_result)
sai_thrift_clear_port_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_fdb_entry_args(object):
    """
    Attributes:
     - thrift_fdb_entry
     - thrift_attr_list

    """


    def __init__(self, thrift_fdb_entry=None, thrift_attr_list=None,):
        self.thrift_fdb_entry = thrift_fdb_entry
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
                    self.thrift_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = sai_thrift_attribute_t()
                        _elem117.read(iprot)
                        self.thrift_attr_list.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_fdb_entry_args')
        if self.thrift_fdb_entry is not None:
            oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
            self.thrift_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter118 in self.thrift_attr_list:
                iter118.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_fdb_entry_args)
sai_thrift_create_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', [sai_thrift_fdb_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_fdb_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_fdb_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_fdb_entry_result)
sai_thrift_create_fdb_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_delete_fdb_entry_args(object):
    """
    Attributes:
     - thrift_fdb_entry

    """


    def __init__(self, thrift_fdb_entry=None,):
        self.thrift_fdb_entry = thrift_fdb_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
                    self.thrift_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_delete_fdb_entry_args')
        if self.thrift_fdb_entry is not None:
            oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
            self.thrift_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_delete_fdb_entry_args)
sai_thrift_delete_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', [sai_thrift_fdb_entry_t, None], None, ),  # 1
)


class sai_thrift_delete_fdb_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_delete_fdb_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_delete_fdb_entry_result)
sai_thrift_delete_fdb_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_flush_fdb_entries_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = sai_thrift_attribute_t()
                        _elem124.read(iprot)
                        self.thrift_attr_list.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_flush_fdb_entries_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter125 in self.thrift_attr_list:
                iter125.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_flush_fdb_entries_args)
sai_thrift_flush_fdb_entries_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_flush_fdb_entries_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_flush_fdb_entries_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_flush_fdb_entries_result)
sai_thrift_flush_fdb_entries_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_fdb_entry_attribute_args(object):
    """
    Attributes:
     - thrift_fdb_entry
     - thrift_attr

    """


    def __init__(self, thrift_fdb_entry=None, thrift_attr=None,):
        self.thrift_fdb_entry = thrift_fdb_entry
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
                    self.thrift_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_fdb_entry_attribute_args')
        if self.thrift_fdb_entry is not None:
            oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
            self.thrift_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_fdb_entry_attribute_args)
sai_thrift_set_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', [sai_thrift_fdb_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_fdb_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_fdb_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_fdb_entry_attribute_result)
sai_thrift_set_fdb_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_fdb_entry_attribute_args(object):
    """
    Attributes:
     - thrift_fdb_entry

    """


    def __init__(self, thrift_fdb_entry=None,):
        self.thrift_fdb_entry = thrift_fdb_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
                    self.thrift_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_fdb_entry_attribute_args')
        if self.thrift_fdb_entry is not None:
            oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
            self.thrift_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_fdb_entry_attribute_args)
sai_thrift_get_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', [sai_thrift_fdb_entry_t, None], None, ),  # 1
)


class sai_thrift_get_fdb_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_fdb_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_fdb_entry_attribute_result)
sai_thrift_get_fdb_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_vlan_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype129, _size126) = iprot.readListBegin()
                    for _i130 in range(_size126):
                        _elem131 = sai_thrift_attribute_t()
                        _elem131.read(iprot)
                        self.thrift_attr_list.append(_elem131)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter132 in self.thrift_attr_list:
                iter132.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_args)
sai_thrift_create_vlan_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_vlan_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_result)
sai_thrift_create_vlan_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_vlan_args(object):
    """
    Attributes:
     - vlan_oid

    """


    def __init__(self, vlan_oid=None,):
        self.vlan_oid = vlan_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_args')
        if self.vlan_oid is not None:
            oprot.writeFieldBegin('vlan_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_args)
sai_thrift_remove_vlan_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_oid', None, None, ),  # 1
)


class sai_thrift_remove_vlan_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_result)
sai_thrift_remove_vlan_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_vlan_stats_args(object):
    """
    Attributes:
     - vlan_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, vlan_id=None, counter_ids=None, number_of_counters=None,):
        self.vlan_id = vlan_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = iprot.readI32()
                        self.counter_ids.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_stats_args')
        if self.vlan_id is not None:
            oprot.writeFieldBegin('vlan_id', TType.I64, 1)
            oprot.writeI64(self.vlan_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter139 in self.counter_ids:
                oprot.writeI32(iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_stats_args)
sai_thrift_get_vlan_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_get_vlan_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = iprot.readI64()
                        self.success.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter146 in self.success:
                oprot.writeI64(iter146)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_stats_result)
sai_thrift_get_vlan_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_get_vlan_stats_ext_args(object):
    """
    Attributes:
     - vlan_id
     - thrift_counter_ids
     - mode
     - number_of_counters

    """


    def __init__(self, vlan_id=None, thrift_counter_ids=None, mode=None, number_of_counters=None,):
        self.vlan_id = vlan_id
        self.thrift_counter_ids = thrift_counter_ids
        self.mode = mode
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype150, _size147) = iprot.readListBegin()
                    for _i151 in range(_size147):
                        _elem152 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem152)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_stats_ext_args')
        if self.vlan_id is not None:
            oprot.writeFieldBegin('vlan_id', TType.I64, 1)
            oprot.writeI64(self.vlan_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter153 in self.thrift_counter_ids:
                oprot.writeI32(iter153)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 4)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_stats_ext_args)
sai_thrift_get_vlan_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
    (4, TType.I32, 'number_of_counters', None, None, ),  # 4
)


class sai_thrift_get_vlan_stats_ext_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = iprot.readI64()
                        self.success.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter160 in self.success:
                oprot.writeI64(iter160)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_stats_ext_result)
sai_thrift_get_vlan_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_clear_vlan_stats_args(object):
    """
    Attributes:
     - vlan_id
     - thrift_counter_ids
     - number_of_counters

    """


    def __init__(self, vlan_id=None, thrift_counter_ids=None, number_of_counters=None,):
        self.vlan_id = vlan_id
        self.thrift_counter_ids = thrift_counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype164, _size161) = iprot.readListBegin()
                    for _i165 in range(_size161):
                        _elem166 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem166)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_vlan_stats_args')
        if self.vlan_id is not None:
            oprot.writeFieldBegin('vlan_id', TType.I64, 1)
            oprot.writeI64(self.vlan_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter167 in self.thrift_counter_ids:
                oprot.writeI32(iter167)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_vlan_stats_args)
sai_thrift_clear_vlan_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_clear_vlan_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_vlan_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_vlan_stats_result)
sai_thrift_clear_vlan_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_vlan_member_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype171, _size168) = iprot.readListBegin()
                    for _i172 in range(_size168):
                        _elem173 = sai_thrift_attribute_t()
                        _elem173.read(iprot)
                        self.thrift_attr_list.append(_elem173)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_member_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter174 in self.thrift_attr_list:
                iter174.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_member_args)
sai_thrift_create_vlan_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_vlan_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_member_result)
sai_thrift_create_vlan_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_get_vlan_member_attribute_args(object):
    """
    Attributes:
     - vlan_member_id

    """


    def __init__(self, vlan_member_id=None,):
        self.vlan_member_id = vlan_member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_member_attribute_args')
        if self.vlan_member_id is not None:
            oprot.writeFieldBegin('vlan_member_id', TType.I64, 1)
            oprot.writeI64(self.vlan_member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_member_attribute_args)
sai_thrift_get_vlan_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_member_id', None, None, ),  # 1
)


class sai_thrift_get_vlan_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_member_attribute_result)
sai_thrift_get_vlan_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_remove_vlan_member_args(object):
    """
    Attributes:
     - vlan_member_id

    """


    def __init__(self, vlan_member_id=None,):
        self.vlan_member_id = vlan_member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_member_args')
        if self.vlan_member_id is not None:
            oprot.writeFieldBegin('vlan_member_id', TType.I64, 1)
            oprot.writeI64(self.vlan_member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_member_args)
sai_thrift_remove_vlan_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_member_id', None, None, ),  # 1
)


class sai_thrift_remove_vlan_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_member_result)
sai_thrift_remove_vlan_member_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_vlan_attribute_args(object):
    """
    Attributes:
     - vlan_id
     - thrift_attr

    """


    def __init__(self, vlan_id=None, thrift_attr=None,):
        self.vlan_id = vlan_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_vlan_attribute_args')
        if self.vlan_id is not None:
            oprot.writeFieldBegin('vlan_id', TType.I64, 1)
            oprot.writeI64(self.vlan_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_vlan_attribute_args)
sai_thrift_set_vlan_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_vlan_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_vlan_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_vlan_attribute_result)
sai_thrift_set_vlan_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_vlan_member_attribute_args(object):
    """
    Attributes:
     - vlan_member_id
     - thrift_attr

    """


    def __init__(self, vlan_member_id=None, thrift_attr=None,):
        self.vlan_member_id = vlan_member_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_vlan_member_attribute_args')
        if self.vlan_member_id is not None:
            oprot.writeFieldBegin('vlan_member_id', TType.I64, 1)
            oprot.writeI64(self.vlan_member_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_vlan_member_attribute_args)
sai_thrift_set_vlan_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_member_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_vlan_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_vlan_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_vlan_member_attribute_result)
sai_thrift_set_vlan_member_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_vlan_attribute_args(object):
    """
    Attributes:
     - vlan_id

    """


    def __init__(self, vlan_id=None,):
        self.vlan_id = vlan_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_attribute_args')
        if self.vlan_id is not None:
            oprot.writeFieldBegin('vlan_id', TType.I64, 1)
            oprot.writeI64(self.vlan_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_attribute_args)
sai_thrift_get_vlan_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_id', None, None, ),  # 1
)


class sai_thrift_get_vlan_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_attribute_result)
sai_thrift_get_vlan_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_vlan_id_args(object):
    """
    Attributes:
     - vlan_id

    """


    def __init__(self, vlan_id=None,):
        self.vlan_id = vlan_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_id_args')
        if self.vlan_id is not None:
            oprot.writeFieldBegin('vlan_id', TType.I64, 1)
            oprot.writeI64(self.vlan_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_id_args)
sai_thrift_get_vlan_id_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_id', None, None, ),  # 1
)


class sai_thrift_get_vlan_id_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_result_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_id_result)
sai_thrift_get_vlan_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_result_t, None], None, ),  # 0
)


class sai_thrift_create_vlan_members_args(object):
    """
    Attributes:
     - thrift_attr_lists
     - thrift_attr_count_lists
     - mode

    """


    def __init__(self, thrift_attr_lists=None, thrift_attr_count_lists=None, mode=None,):
        self.thrift_attr_lists = thrift_attr_lists
        self.thrift_attr_count_lists = thrift_attr_count_lists
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_lists = []
                    (_etype178, _size175) = iprot.readListBegin()
                    for _i179 in range(_size175):
                        _elem180 = sai_thrift_attribute_t()
                        _elem180.read(iprot)
                        self.thrift_attr_lists.append(_elem180)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_count_lists = []
                    (_etype184, _size181) = iprot.readListBegin()
                    for _i185 in range(_size181):
                        _elem186 = iprot.readI32()
                        self.thrift_attr_count_lists.append(_elem186)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_members_args')
        if self.thrift_attr_lists is not None:
            oprot.writeFieldBegin('thrift_attr_lists', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_lists))
            for iter187 in self.thrift_attr_lists:
                iter187.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thrift_attr_count_lists is not None:
            oprot.writeFieldBegin('thrift_attr_count_lists', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_attr_count_lists))
            for iter188 in self.thrift_attr_count_lists:
                oprot.writeI32(iter188)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_members_args)
sai_thrift_create_vlan_members_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_lists', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
    (2, TType.LIST, 'thrift_attr_count_lists', (TType.I32, None, False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
)


class sai_thrift_create_vlan_members_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_results_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_members_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_members_result)
sai_thrift_create_vlan_members_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_results_t, None], None, ),  # 0
)


class sai_thrift_remove_vlan_members_args(object):
    """
    Attributes:
     - thrift_object_id_list
     - mode

    """


    def __init__(self, thrift_object_id_list=None, mode=None,):
        self.thrift_object_id_list = thrift_object_id_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_object_id_list = []
                    (_etype192, _size189) = iprot.readListBegin()
                    for _i193 in range(_size189):
                        _elem194 = iprot.readI64()
                        self.thrift_object_id_list.append(_elem194)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_members_args')
        if self.thrift_object_id_list is not None:
            oprot.writeFieldBegin('thrift_object_id_list', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.thrift_object_id_list))
            for iter195 in self.thrift_object_id_list:
                oprot.writeI64(iter195)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 2)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_members_args)
sai_thrift_remove_vlan_members_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_object_id_list', (TType.I64, None, False), None, ),  # 1
    (2, TType.BYTE, 'mode', None, None, ),  # 2
)


class sai_thrift_remove_vlan_members_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_status_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_members_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_members_result)
sai_thrift_remove_vlan_members_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_status_list_t, None], None, ),  # 0
)


class sai_thrift_create_virtual_router_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype199, _size196) = iprot.readListBegin()
                    for _i200 in range(_size196):
                        _elem201 = sai_thrift_attribute_t()
                        _elem201.read(iprot)
                        self.thrift_attr_list.append(_elem201)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_virtual_router_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter202 in self.thrift_attr_list:
                iter202.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_virtual_router_args)
sai_thrift_create_virtual_router_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_virtual_router_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_virtual_router_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_virtual_router_result)
sai_thrift_create_virtual_router_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_virtual_router_args(object):
    """
    Attributes:
     - vr_id

    """


    def __init__(self, vr_id=None,):
        self.vr_id = vr_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_virtual_router_args')
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 1)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_virtual_router_args)
sai_thrift_remove_virtual_router_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vr_id', None, None, ),  # 1
)


class sai_thrift_remove_virtual_router_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_virtual_router_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_virtual_router_result)
sai_thrift_remove_virtual_router_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_virtual_router_attribute_args(object):
    """
    Attributes:
     - vr_id
     - thrift_attr

    """


    def __init__(self, vr_id=None, thrift_attr=None,):
        self.vr_id = vr_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_virtual_router_attribute_args')
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 1)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_virtual_router_attribute_args)
sai_thrift_set_virtual_router_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vr_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_virtual_router_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_virtual_router_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_virtual_router_attribute_result)
sai_thrift_set_virtual_router_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_virtual_router_attribute_args(object):
    """
    Attributes:
     - vr_id

    """


    def __init__(self, vr_id=None,):
        self.vr_id = vr_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_virtual_router_attribute_args')
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 1)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_virtual_router_attribute_args)
sai_thrift_get_virtual_router_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vr_id', None, None, ),  # 1
)


class sai_thrift_get_virtual_router_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_virtual_router_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_virtual_router_attribute_result)
sai_thrift_get_virtual_router_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_route_args(object):
    """
    Attributes:
     - thrift_route_entry
     - thrift_attr_list

    """


    def __init__(self, thrift_route_entry=None, thrift_attr_list=None,):
        self.thrift_route_entry = thrift_route_entry
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_route_entry = sai_thrift_route_entry_t()
                    self.thrift_route_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype206, _size203) = iprot.readListBegin()
                    for _i207 in range(_size203):
                        _elem208 = sai_thrift_attribute_t()
                        _elem208.read(iprot)
                        self.thrift_attr_list.append(_elem208)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_route_args')
        if self.thrift_route_entry is not None:
            oprot.writeFieldBegin('thrift_route_entry', TType.STRUCT, 1)
            self.thrift_route_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter209 in self.thrift_attr_list:
                iter209.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_route_args)
sai_thrift_create_route_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_route_entry', [sai_thrift_route_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_route_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_route_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_route_result)
sai_thrift_create_route_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_remove_route_args(object):
    """
    Attributes:
     - thrift_route_entry

    """


    def __init__(self, thrift_route_entry=None,):
        self.thrift_route_entry = thrift_route_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_route_entry = sai_thrift_route_entry_t()
                    self.thrift_route_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_route_args')
        if self.thrift_route_entry is not None:
            oprot.writeFieldBegin('thrift_route_entry', TType.STRUCT, 1)
            self.thrift_route_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_route_args)
sai_thrift_remove_route_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_route_entry', [sai_thrift_route_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_route_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_route_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_route_result)
sai_thrift_remove_route_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_route_attribute_args(object):
    """
    Attributes:
     - thrift_route_entry
     - thrift_attr

    """


    def __init__(self, thrift_route_entry=None, thrift_attr=None,):
        self.thrift_route_entry = thrift_route_entry
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_route_entry = sai_thrift_route_entry_t()
                    self.thrift_route_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_route_attribute_args')
        if self.thrift_route_entry is not None:
            oprot.writeFieldBegin('thrift_route_entry', TType.STRUCT, 1)
            self.thrift_route_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_route_attribute_args)
sai_thrift_set_route_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_route_entry', [sai_thrift_route_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_route_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_route_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_route_attribute_result)
sai_thrift_set_route_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_route_attribute_args(object):
    """
    Attributes:
     - thrift_route_entry

    """


    def __init__(self, thrift_route_entry=None,):
        self.thrift_route_entry = thrift_route_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_route_entry = sai_thrift_route_entry_t()
                    self.thrift_route_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_route_attribute_args')
        if self.thrift_route_entry is not None:
            oprot.writeFieldBegin('thrift_route_entry', TType.STRUCT, 1)
            self.thrift_route_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_route_attribute_args)
sai_thrift_get_route_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_route_entry', [sai_thrift_route_entry_t, None], None, ),  # 1
)


class sai_thrift_get_route_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_route_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_route_attribute_result)
sai_thrift_get_route_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_routes_args(object):
    """
    Attributes:
     - thrift_route_entry_list
     - thrift_attr_list
     - thrift_attr_count_lists
     - mode

    """


    def __init__(self, thrift_route_entry_list=None, thrift_attr_list=None, thrift_attr_count_lists=None, mode=None,):
        self.thrift_route_entry_list = thrift_route_entry_list
        self.thrift_attr_list = thrift_attr_list
        self.thrift_attr_count_lists = thrift_attr_count_lists
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_route_entry_list = []
                    (_etype213, _size210) = iprot.readListBegin()
                    for _i214 in range(_size210):
                        _elem215 = sai_thrift_route_entry_t()
                        _elem215.read(iprot)
                        self.thrift_route_entry_list.append(_elem215)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype219, _size216) = iprot.readListBegin()
                    for _i220 in range(_size216):
                        _elem221 = sai_thrift_attribute_t()
                        _elem221.read(iprot)
                        self.thrift_attr_list.append(_elem221)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.thrift_attr_count_lists = []
                    (_etype225, _size222) = iprot.readListBegin()
                    for _i226 in range(_size222):
                        _elem227 = iprot.readI32()
                        self.thrift_attr_count_lists.append(_elem227)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_routes_args')
        if self.thrift_route_entry_list is not None:
            oprot.writeFieldBegin('thrift_route_entry_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_route_entry_list))
            for iter228 in self.thrift_route_entry_list:
                iter228.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter229 in self.thrift_attr_list:
                iter229.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thrift_attr_count_lists is not None:
            oprot.writeFieldBegin('thrift_attr_count_lists', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.thrift_attr_count_lists))
            for iter230 in self.thrift_attr_count_lists:
                oprot.writeI32(iter230)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 4)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_routes_args)
sai_thrift_create_routes_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_route_entry_list', (TType.STRUCT, [sai_thrift_route_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
    (3, TType.LIST, 'thrift_attr_count_lists', (TType.I32, None, False), None, ),  # 3
    (4, TType.BYTE, 'mode', None, None, ),  # 4
)


class sai_thrift_create_routes_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_routes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_routes_result)
sai_thrift_create_routes_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_remove_routes_args(object):
    """
    Attributes:
     - thrift_route_entry_list
     - mode

    """


    def __init__(self, thrift_route_entry_list=None, mode=None,):
        self.thrift_route_entry_list = thrift_route_entry_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_route_entry_list = []
                    (_etype234, _size231) = iprot.readListBegin()
                    for _i235 in range(_size231):
                        _elem236 = sai_thrift_route_entry_t()
                        _elem236.read(iprot)
                        self.thrift_route_entry_list.append(_elem236)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_routes_args')
        if self.thrift_route_entry_list is not None:
            oprot.writeFieldBegin('thrift_route_entry_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_route_entry_list))
            for iter237 in self.thrift_route_entry_list:
                iter237.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 2)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_routes_args)
sai_thrift_remove_routes_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_route_entry_list', (TType.STRUCT, [sai_thrift_route_entry_t, None], False), None, ),  # 1
    (2, TType.BYTE, 'mode', None, None, ),  # 2
)


class sai_thrift_remove_routes_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_routes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_routes_result)
sai_thrift_remove_routes_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_routes_attribute_args(object):
    """
    Attributes:
     - thrift_route_entry_list
     - thrift_attr_list
     - mode

    """


    def __init__(self, thrift_route_entry_list=None, thrift_attr_list=None, mode=None,):
        self.thrift_route_entry_list = thrift_route_entry_list
        self.thrift_attr_list = thrift_attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_route_entry_list = []
                    (_etype241, _size238) = iprot.readListBegin()
                    for _i242 in range(_size238):
                        _elem243 = sai_thrift_route_entry_t()
                        _elem243.read(iprot)
                        self.thrift_route_entry_list.append(_elem243)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = sai_thrift_attribute_t()
                        _elem249.read(iprot)
                        self.thrift_attr_list.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_routes_attribute_args')
        if self.thrift_route_entry_list is not None:
            oprot.writeFieldBegin('thrift_route_entry_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_route_entry_list))
            for iter250 in self.thrift_route_entry_list:
                iter250.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter251 in self.thrift_attr_list:
                iter251.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_routes_attribute_args)
sai_thrift_set_routes_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_route_entry_list', (TType.STRUCT, [sai_thrift_route_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
)


class sai_thrift_set_routes_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_routes_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_routes_attribute_result)
sai_thrift_set_routes_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_routes_attribute_args(object):
    """
    Attributes:
     - thrift_route_entry_list
     - mode

    """


    def __init__(self, thrift_route_entry_list=None, mode=None,):
        self.thrift_route_entry_list = thrift_route_entry_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_route_entry_list = []
                    (_etype255, _size252) = iprot.readListBegin()
                    for _i256 in range(_size252):
                        _elem257 = sai_thrift_route_entry_t()
                        _elem257.read(iprot)
                        self.thrift_route_entry_list.append(_elem257)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_routes_attribute_args')
        if self.thrift_route_entry_list is not None:
            oprot.writeFieldBegin('thrift_route_entry_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_route_entry_list))
            for iter258 in self.thrift_route_entry_list:
                iter258.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 2)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_routes_attribute_args)
sai_thrift_get_routes_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_route_entry_list', (TType.STRUCT, [sai_thrift_route_entry_t, None], False), None, ),  # 1
    (2, TType.BYTE, 'mode', None, None, ),  # 2
)


class sai_thrift_get_routes_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_routes_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_routes_attribute_result)
sai_thrift_get_routes_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_router_interface_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype262, _size259) = iprot.readListBegin()
                    for _i263 in range(_size259):
                        _elem264 = sai_thrift_attribute_t()
                        _elem264.read(iprot)
                        self.thrift_attr_list.append(_elem264)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_router_interface_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter265 in self.thrift_attr_list:
                iter265.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_router_interface_args)
sai_thrift_create_router_interface_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_router_interface_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_router_interface_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_router_interface_result)
sai_thrift_create_router_interface_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_router_interface_args(object):
    """
    Attributes:
     - rif_id

    """


    def __init__(self, rif_id=None,):
        self.rif_id = rif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_router_interface_args')
        if self.rif_id is not None:
            oprot.writeFieldBegin('rif_id', TType.I64, 1)
            oprot.writeI64(self.rif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_router_interface_args)
sai_thrift_remove_router_interface_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rif_id', None, None, ),  # 1
)


class sai_thrift_remove_router_interface_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_router_interface_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_router_interface_result)
sai_thrift_remove_router_interface_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_router_interface_attribute_args(object):
    """
    Attributes:
     - rif_id
     - thrift_attr

    """


    def __init__(self, rif_id=None, thrift_attr=None,):
        self.rif_id = rif_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_router_interface_attribute_args')
        if self.rif_id is not None:
            oprot.writeFieldBegin('rif_id', TType.I64, 1)
            oprot.writeI64(self.rif_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_router_interface_attribute_args)
sai_thrift_set_router_interface_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rif_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_router_interface_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_router_interface_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_router_interface_attribute_result)
sai_thrift_set_router_interface_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_router_interface_attribute_args(object):
    """
    Attributes:
     - rif_id

    """


    def __init__(self, rif_id=None,):
        self.rif_id = rif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_router_interface_attribute_args')
        if self.rif_id is not None:
            oprot.writeFieldBegin('rif_id', TType.I64, 1)
            oprot.writeI64(self.rif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_router_interface_attribute_args)
sai_thrift_get_router_interface_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rif_id', None, None, ),  # 1
)


class sai_thrift_get_router_interface_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_router_interface_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_router_interface_attribute_result)
sai_thrift_get_router_interface_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_router_interface_get_stats_args(object):
    """
    Attributes:
     - rif_id
     - thrift_counter_ids
     - number_of_counters

    """


    def __init__(self, rif_id=None, thrift_counter_ids=None, number_of_counters=None,):
        self.rif_id = rif_id
        self.thrift_counter_ids = thrift_counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_router_interface_get_stats_args')
        if self.rif_id is not None:
            oprot.writeFieldBegin('rif_id', TType.I64, 1)
            oprot.writeI64(self.rif_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter272 in self.thrift_counter_ids:
                oprot.writeI32(iter272)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_router_interface_get_stats_args)
sai_thrift_router_interface_get_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rif_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_router_interface_get_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype276, _size273) = iprot.readListBegin()
                    for _i277 in range(_size273):
                        _elem278 = iprot.readI64()
                        self.success.append(_elem278)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_router_interface_get_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter279 in self.success:
                oprot.writeI64(iter279)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_router_interface_get_stats_result)
sai_thrift_router_interface_get_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_router_interface_get_stats_ext_args(object):
    """
    Attributes:
     - rif_id
     - thrift_counter_ids
     - mode
     - number_of_counters

    """


    def __init__(self, rif_id=None, thrift_counter_ids=None, mode=None, number_of_counters=None,):
        self.rif_id = rif_id
        self.thrift_counter_ids = thrift_counter_ids
        self.mode = mode
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype283, _size280) = iprot.readListBegin()
                    for _i284 in range(_size280):
                        _elem285 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem285)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_router_interface_get_stats_ext_args')
        if self.rif_id is not None:
            oprot.writeFieldBegin('rif_id', TType.I64, 1)
            oprot.writeI64(self.rif_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter286 in self.thrift_counter_ids:
                oprot.writeI32(iter286)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 4)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_router_interface_get_stats_ext_args)
sai_thrift_router_interface_get_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rif_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
    (4, TType.I32, 'number_of_counters', None, None, ),  # 4
)


class sai_thrift_router_interface_get_stats_ext_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype290, _size287) = iprot.readListBegin()
                    for _i291 in range(_size287):
                        _elem292 = iprot.readI64()
                        self.success.append(_elem292)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_router_interface_get_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter293 in self.success:
                oprot.writeI64(iter293)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_router_interface_get_stats_ext_result)
sai_thrift_router_interface_get_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_router_interface_clear_stats_args(object):
    """
    Attributes:
     - rif_id
     - thrift_counter_ids
     - number_of_counters

    """


    def __init__(self, rif_id=None, thrift_counter_ids=None, number_of_counters=None,):
        self.rif_id = rif_id
        self.thrift_counter_ids = thrift_counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype297, _size294) = iprot.readListBegin()
                    for _i298 in range(_size294):
                        _elem299 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem299)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_router_interface_clear_stats_args')
        if self.rif_id is not None:
            oprot.writeFieldBegin('rif_id', TType.I64, 1)
            oprot.writeI64(self.rif_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter300 in self.thrift_counter_ids:
                oprot.writeI32(iter300)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_router_interface_clear_stats_args)
sai_thrift_router_interface_clear_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rif_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_router_interface_clear_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_router_interface_clear_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_router_interface_clear_stats_result)
sai_thrift_router_interface_clear_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_next_hop_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype304, _size301) = iprot.readListBegin()
                    for _i305 in range(_size301):
                        _elem306 = sai_thrift_attribute_t()
                        _elem306.read(iprot)
                        self.thrift_attr_list.append(_elem306)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter307 in self.thrift_attr_list:
                iter307.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_args)
sai_thrift_create_next_hop_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_next_hop_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_result)
sai_thrift_create_next_hop_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_next_hop_args(object):
    """
    Attributes:
     - next_hop_id

    """


    def __init__(self, next_hop_id=None,):
        self.next_hop_id = next_hop_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_args')
        if self.next_hop_id is not None:
            oprot.writeFieldBegin('next_hop_id', TType.I64, 1)
            oprot.writeI64(self.next_hop_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_args)
sai_thrift_remove_next_hop_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_id', None, None, ),  # 1
)


class sai_thrift_remove_next_hop_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_result)
sai_thrift_remove_next_hop_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_next_hop_attribute_args(object):
    """
    Attributes:
     - next_hop_id

    """


    def __init__(self, next_hop_id=None,):
        self.next_hop_id = next_hop_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_attribute_args')
        if self.next_hop_id is not None:
            oprot.writeFieldBegin('next_hop_id', TType.I64, 1)
            oprot.writeI64(self.next_hop_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_attribute_args)
sai_thrift_get_next_hop_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_id', None, None, ),  # 1
)


class sai_thrift_get_next_hop_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_attribute_result)
sai_thrift_get_next_hop_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_next_hop_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype311, _size308) = iprot.readListBegin()
                    for _i312 in range(_size308):
                        _elem313 = sai_thrift_attribute_t()
                        _elem313.read(iprot)
                        self.thrift_attr_list.append(_elem313)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter314 in self.thrift_attr_list:
                iter314.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_args)
sai_thrift_create_next_hop_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_next_hop_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_result)
sai_thrift_create_next_hop_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_next_hop_group_args(object):
    """
    Attributes:
     - nhop_group_oid

    """


    def __init__(self, nhop_group_oid=None,):
        self.nhop_group_oid = nhop_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nhop_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_args')
        if self.nhop_group_oid is not None:
            oprot.writeFieldBegin('nhop_group_oid', TType.I64, 1)
            oprot.writeI64(self.nhop_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_args)
sai_thrift_remove_next_hop_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nhop_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_next_hop_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_result)
sai_thrift_remove_next_hop_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_next_hop_group_attribute_args(object):
    """
    Attributes:
     - nhop_group_oid
     - thrift_attr

    """


    def __init__(self, nhop_group_oid=None, thrift_attr=None,):
        self.nhop_group_oid = nhop_group_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nhop_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_group_attribute_args')
        if self.nhop_group_oid is not None:
            oprot.writeFieldBegin('nhop_group_oid', TType.I64, 1)
            oprot.writeI64(self.nhop_group_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_group_attribute_args)
sai_thrift_set_next_hop_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nhop_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_next_hop_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_group_attribute_result)
sai_thrift_set_next_hop_group_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_next_hop_group_attribute_args(object):
    """
    Attributes:
     - nhop_group_oid

    """


    def __init__(self, nhop_group_oid=None,):
        self.nhop_group_oid = nhop_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nhop_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_attribute_args')
        if self.nhop_group_oid is not None:
            oprot.writeFieldBegin('nhop_group_oid', TType.I64, 1)
            oprot.writeI64(self.nhop_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_attribute_args)
sai_thrift_get_next_hop_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nhop_group_oid', None, None, ),  # 1
)


class sai_thrift_get_next_hop_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_attribute_result)
sai_thrift_get_next_hop_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_next_hop_group_member_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype318, _size315) = iprot.readListBegin()
                    for _i319 in range(_size315):
                        _elem320 = sai_thrift_attribute_t()
                        _elem320.read(iprot)
                        self.thrift_attr_list.append(_elem320)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_member_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter321 in self.thrift_attr_list:
                iter321.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_member_args)
sai_thrift_create_next_hop_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_next_hop_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_member_result)
sai_thrift_create_next_hop_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_next_hop_group_member_args(object):
    """
    Attributes:
     - nhop_group_member_oid

    """


    def __init__(self, nhop_group_member_oid=None,):
        self.nhop_group_member_oid = nhop_group_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nhop_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_member_args')
        if self.nhop_group_member_oid is not None:
            oprot.writeFieldBegin('nhop_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.nhop_group_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_member_args)
sai_thrift_remove_next_hop_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nhop_group_member_oid', None, None, ),  # 1
)


class sai_thrift_remove_next_hop_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_member_result)
sai_thrift_remove_next_hop_group_member_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_next_hop_group_member_attribute_args(object):
    """
    Attributes:
     - nhop_group_member_oid

    """


    def __init__(self, nhop_group_member_oid=None,):
        self.nhop_group_member_oid = nhop_group_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nhop_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_member_attribute_args')
        if self.nhop_group_member_oid is not None:
            oprot.writeFieldBegin('nhop_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.nhop_group_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_member_attribute_args)
sai_thrift_get_next_hop_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nhop_group_member_oid', None, None, ),  # 1
)


class sai_thrift_get_next_hop_group_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_member_attribute_result)
sai_thrift_get_next_hop_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_next_hop_group_member_attribute_ecmp_args(object):
    """
    Attributes:
     - nhop_group_member_oid

    """


    def __init__(self, nhop_group_member_oid=None,):
        self.nhop_group_member_oid = nhop_group_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nhop_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_member_attribute_ecmp_args')
        if self.nhop_group_member_oid is not None:
            oprot.writeFieldBegin('nhop_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.nhop_group_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_member_attribute_ecmp_args)
sai_thrift_get_next_hop_group_member_attribute_ecmp_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nhop_group_member_oid', None, None, ),  # 1
)


class sai_thrift_get_next_hop_group_member_attribute_ecmp_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_member_attribute_ecmp_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_member_attribute_ecmp_result)
sai_thrift_get_next_hop_group_member_attribute_ecmp_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_next_hop_group_members_args(object):
    """
    Attributes:
     - thrift_attr_lists
     - thrift_attr_count_lists
     - mode

    """


    def __init__(self, thrift_attr_lists=None, thrift_attr_count_lists=None, mode=None,):
        self.thrift_attr_lists = thrift_attr_lists
        self.thrift_attr_count_lists = thrift_attr_count_lists
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_lists = []
                    (_etype325, _size322) = iprot.readListBegin()
                    for _i326 in range(_size322):
                        _elem327 = sai_thrift_attribute_t()
                        _elem327.read(iprot)
                        self.thrift_attr_lists.append(_elem327)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_count_lists = []
                    (_etype331, _size328) = iprot.readListBegin()
                    for _i332 in range(_size328):
                        _elem333 = iprot.readI32()
                        self.thrift_attr_count_lists.append(_elem333)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_members_args')
        if self.thrift_attr_lists is not None:
            oprot.writeFieldBegin('thrift_attr_lists', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_lists))
            for iter334 in self.thrift_attr_lists:
                iter334.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thrift_attr_count_lists is not None:
            oprot.writeFieldBegin('thrift_attr_count_lists', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_attr_count_lists))
            for iter335 in self.thrift_attr_count_lists:
                oprot.writeI32(iter335)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_members_args)
sai_thrift_create_next_hop_group_members_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_lists', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
    (2, TType.LIST, 'thrift_attr_count_lists', (TType.I32, None, False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
)


class sai_thrift_create_next_hop_group_members_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_results_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_members_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_members_result)
sai_thrift_create_next_hop_group_members_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_results_t, None], None, ),  # 0
)


class sai_thrift_remove_next_hop_group_members_args(object):
    """
    Attributes:
     - thrift_object_id_list
     - mode

    """


    def __init__(self, thrift_object_id_list=None, mode=None,):
        self.thrift_object_id_list = thrift_object_id_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_object_id_list = []
                    (_etype339, _size336) = iprot.readListBegin()
                    for _i340 in range(_size336):
                        _elem341 = iprot.readI64()
                        self.thrift_object_id_list.append(_elem341)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_members_args')
        if self.thrift_object_id_list is not None:
            oprot.writeFieldBegin('thrift_object_id_list', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.thrift_object_id_list))
            for iter342 in self.thrift_object_id_list:
                oprot.writeI64(iter342)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 2)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_members_args)
sai_thrift_remove_next_hop_group_members_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_object_id_list', (TType.I64, None, False), None, ),  # 1
    (2, TType.BYTE, 'mode', None, None, ),  # 2
)


class sai_thrift_remove_next_hop_group_members_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_status_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_members_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_members_result)
sai_thrift_remove_next_hop_group_members_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_status_list_t, None], None, ),  # 0
)


class sai_thrift_create_lag_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype346, _size343) = iprot.readListBegin()
                    for _i347 in range(_size343):
                        _elem348 = sai_thrift_attribute_t()
                        _elem348.read(iprot)
                        self.thrift_attr_list.append(_elem348)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_lag_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter349 in self.thrift_attr_list:
                iter349.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_lag_args)
sai_thrift_create_lag_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_lag_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_lag_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_lag_result)
sai_thrift_create_lag_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_lag_args(object):
    """
    Attributes:
     - lag_id

    """


    def __init__(self, lag_id=None,):
        self.lag_id = lag_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_lag_args')
        if self.lag_id is not None:
            oprot.writeFieldBegin('lag_id', TType.I64, 1)
            oprot.writeI64(self.lag_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_lag_args)
sai_thrift_remove_lag_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_id', None, None, ),  # 1
)


class sai_thrift_remove_lag_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_lag_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_lag_result)
sai_thrift_remove_lag_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_lag_attribute_args(object):
    """
    Attributes:
     - lag_id
     - thrift_attr

    """


    def __init__(self, lag_id=None, thrift_attr=None,):
        self.lag_id = lag_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_lag_attribute_args')
        if self.lag_id is not None:
            oprot.writeFieldBegin('lag_id', TType.I64, 1)
            oprot.writeI64(self.lag_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_lag_attribute_args)
sai_thrift_set_lag_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_lag_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_lag_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_lag_attribute_result)
sai_thrift_set_lag_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_lag_attribute_args(object):
    """
    Attributes:
     - lag_id

    """


    def __init__(self, lag_id=None,):
        self.lag_id = lag_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_lag_attribute_args')
        if self.lag_id is not None:
            oprot.writeFieldBegin('lag_id', TType.I64, 1)
            oprot.writeI64(self.lag_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_lag_attribute_args)
sai_thrift_get_lag_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_id', None, None, ),  # 1
)


class sai_thrift_get_lag_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_lag_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_lag_attribute_result)
sai_thrift_get_lag_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_lag_member_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype353, _size350) = iprot.readListBegin()
                    for _i354 in range(_size350):
                        _elem355 = sai_thrift_attribute_t()
                        _elem355.read(iprot)
                        self.thrift_attr_list.append(_elem355)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_lag_member_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter356 in self.thrift_attr_list:
                iter356.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_lag_member_args)
sai_thrift_create_lag_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_lag_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_lag_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_lag_member_result)
sai_thrift_create_lag_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_lag_member_args(object):
    """
    Attributes:
     - lag_member_id

    """


    def __init__(self, lag_member_id=None,):
        self.lag_member_id = lag_member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_lag_member_args')
        if self.lag_member_id is not None:
            oprot.writeFieldBegin('lag_member_id', TType.I64, 1)
            oprot.writeI64(self.lag_member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_lag_member_args)
sai_thrift_remove_lag_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_member_id', None, None, ),  # 1
)


class sai_thrift_remove_lag_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_lag_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_lag_member_result)
sai_thrift_remove_lag_member_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_lag_member_attribute_args(object):
    """
    Attributes:
     - lag_member_id
     - thrift_attr

    """


    def __init__(self, lag_member_id=None, thrift_attr=None,):
        self.lag_member_id = lag_member_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_lag_member_attribute_args')
        if self.lag_member_id is not None:
            oprot.writeFieldBegin('lag_member_id', TType.I64, 1)
            oprot.writeI64(self.lag_member_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_lag_member_attribute_args)
sai_thrift_set_lag_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_member_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_lag_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_lag_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_lag_member_attribute_result)
sai_thrift_set_lag_member_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_lag_member_attribute_args(object):
    """
    Attributes:
     - lag_member_id

    """


    def __init__(self, lag_member_id=None,):
        self.lag_member_id = lag_member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_lag_member_attribute_args')
        if self.lag_member_id is not None:
            oprot.writeFieldBegin('lag_member_id', TType.I64, 1)
            oprot.writeI64(self.lag_member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_lag_member_attribute_args)
sai_thrift_get_lag_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_member_id', None, None, ),  # 1
)


class sai_thrift_get_lag_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_lag_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_lag_member_attribute_result)
sai_thrift_get_lag_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_stp_entry_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype360, _size357) = iprot.readListBegin()
                    for _i361 in range(_size357):
                        _elem362 = sai_thrift_attribute_t()
                        _elem362.read(iprot)
                        self.thrift_attr_list.append(_elem362)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_entry_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter363 in self.thrift_attr_list:
                iter363.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_entry_args)
sai_thrift_create_stp_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_stp_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_entry_result)
sai_thrift_create_stp_entry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_stp_entry_args(object):
    """
    Attributes:
     - stp_id

    """


    def __init__(self, stp_id=None,):
        self.stp_id = stp_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_entry_args')
        if self.stp_id is not None:
            oprot.writeFieldBegin('stp_id', TType.I64, 1)
            oprot.writeI64(self.stp_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_entry_args)
sai_thrift_remove_stp_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_id', None, None, ),  # 1
)


class sai_thrift_remove_stp_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_entry_result)
sai_thrift_remove_stp_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_stp_attribute_args(object):
    """
    Attributes:
     - stp_id

    """


    def __init__(self, stp_id=None,):
        self.stp_id = stp_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_attribute_args')
        if self.stp_id is not None:
            oprot.writeFieldBegin('stp_id', TType.I64, 1)
            oprot.writeI64(self.stp_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_attribute_args)
sai_thrift_get_stp_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_id', None, None, ),  # 1
)


class sai_thrift_get_stp_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_attribute_result)
sai_thrift_get_stp_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_stp_port_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype367, _size364) = iprot.readListBegin()
                    for _i368 in range(_size364):
                        _elem369 = sai_thrift_attribute_t()
                        _elem369.read(iprot)
                        self.thrift_attr_list.append(_elem369)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_port_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter370 in self.thrift_attr_list:
                iter370.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_port_args)
sai_thrift_create_stp_port_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_stp_port_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_port_result)
sai_thrift_create_stp_port_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_stp_port_args(object):
    """
    Attributes:
     - stp_port_id

    """


    def __init__(self, stp_port_id=None,):
        self.stp_port_id = stp_port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_port_args')
        if self.stp_port_id is not None:
            oprot.writeFieldBegin('stp_port_id', TType.I64, 1)
            oprot.writeI64(self.stp_port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_port_args)
sai_thrift_remove_stp_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_port_id', None, None, ),  # 1
)


class sai_thrift_remove_stp_port_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_port_result)
sai_thrift_remove_stp_port_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_stp_port_attribute_args(object):
    """
    Attributes:
     - stp_port_id

    """


    def __init__(self, stp_port_id=None,):
        self.stp_port_id = stp_port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_port_attribute_args')
        if self.stp_port_id is not None:
            oprot.writeFieldBegin('stp_port_id', TType.I64, 1)
            oprot.writeI64(self.stp_port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_port_attribute_args)
sai_thrift_get_stp_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_port_id', None, None, ),  # 1
)


class sai_thrift_get_stp_port_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_port_attribute_result)
sai_thrift_get_stp_port_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_stp_port_state_args(object):
    """
    Attributes:
     - stp_id
     - port_id
     - stp_port_state

    """


    def __init__(self, stp_id=None, port_id=None, stp_port_state=None,):
        self.stp_id = stp_id
        self.port_id = port_id
        self.stp_port_state = stp_port_state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.stp_port_state = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_stp_port_state_args')
        if self.stp_id is not None:
            oprot.writeFieldBegin('stp_id', TType.I64, 1)
            oprot.writeI64(self.stp_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 2)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        if self.stp_port_state is not None:
            oprot.writeFieldBegin('stp_port_state', TType.BYTE, 3)
            oprot.writeByte(self.stp_port_state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_stp_port_state_args)
sai_thrift_set_stp_port_state_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_id', None, None, ),  # 1
    (2, TType.I64, 'port_id', None, None, ),  # 2
    (3, TType.BYTE, 'stp_port_state', None, None, ),  # 3
)


class sai_thrift_set_stp_port_state_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_stp_port_state_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_stp_port_state_result)
sai_thrift_set_stp_port_state_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_stp_port_state_args(object):
    """
    Attributes:
     - stp_id
     - port_id

    """


    def __init__(self, stp_id=None, port_id=None,):
        self.stp_id = stp_id
        self.port_id = port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_port_state_args')
        if self.stp_id is not None:
            oprot.writeFieldBegin('stp_id', TType.I64, 1)
            oprot.writeI64(self.stp_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 2)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_port_state_args)
sai_thrift_get_stp_port_state_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_id', None, None, ),  # 1
    (2, TType.I64, 'port_id', None, None, ),  # 2
)


class sai_thrift_get_stp_port_state_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BYTE:
                    self.success = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_port_state_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BYTE, 0)
            oprot.writeByte(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_port_state_result)
sai_thrift_get_stp_port_state_result.thrift_spec = (
    (0, TType.BYTE, 'success', None, None, ),  # 0
)


class sai_thrift_create_stp_ports_args(object):
    """
    Attributes:
     - thrift_attr_lists
     - thrift_attr_count_lists
     - mode

    """


    def __init__(self, thrift_attr_lists=None, thrift_attr_count_lists=None, mode=None,):
        self.thrift_attr_lists = thrift_attr_lists
        self.thrift_attr_count_lists = thrift_attr_count_lists
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_lists = []
                    (_etype374, _size371) = iprot.readListBegin()
                    for _i375 in range(_size371):
                        _elem376 = sai_thrift_attribute_t()
                        _elem376.read(iprot)
                        self.thrift_attr_lists.append(_elem376)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_count_lists = []
                    (_etype380, _size377) = iprot.readListBegin()
                    for _i381 in range(_size377):
                        _elem382 = iprot.readI32()
                        self.thrift_attr_count_lists.append(_elem382)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_ports_args')
        if self.thrift_attr_lists is not None:
            oprot.writeFieldBegin('thrift_attr_lists', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_lists))
            for iter383 in self.thrift_attr_lists:
                iter383.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thrift_attr_count_lists is not None:
            oprot.writeFieldBegin('thrift_attr_count_lists', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_attr_count_lists))
            for iter384 in self.thrift_attr_count_lists:
                oprot.writeI32(iter384)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_ports_args)
sai_thrift_create_stp_ports_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_lists', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
    (2, TType.LIST, 'thrift_attr_count_lists', (TType.I32, None, False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
)


class sai_thrift_create_stp_ports_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_results_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_ports_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_ports_result)
sai_thrift_create_stp_ports_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_results_t, None], None, ),  # 0
)


class sai_thrift_remove_stp_ports_args(object):
    """
    Attributes:
     - thrift_object_id_list
     - mode

    """


    def __init__(self, thrift_object_id_list=None, mode=None,):
        self.thrift_object_id_list = thrift_object_id_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_object_id_list = []
                    (_etype388, _size385) = iprot.readListBegin()
                    for _i389 in range(_size385):
                        _elem390 = iprot.readI64()
                        self.thrift_object_id_list.append(_elem390)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_ports_args')
        if self.thrift_object_id_list is not None:
            oprot.writeFieldBegin('thrift_object_id_list', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.thrift_object_id_list))
            for iter391 in self.thrift_object_id_list:
                oprot.writeI64(iter391)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 2)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_ports_args)
sai_thrift_remove_stp_ports_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_object_id_list', (TType.I64, None, False), None, ),  # 1
    (2, TType.BYTE, 'mode', None, None, ),  # 2
)


class sai_thrift_remove_stp_ports_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_status_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_ports_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_ports_result)
sai_thrift_remove_stp_ports_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_status_list_t, None], None, ),  # 0
)


class sai_thrift_create_neighbor_entry_args(object):
    """
    Attributes:
     - thrift_neighbor_entry
     - thrift_attr_list

    """


    def __init__(self, thrift_neighbor_entry=None, thrift_attr_list=None,):
        self.thrift_neighbor_entry = thrift_neighbor_entry
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
                    self.thrift_neighbor_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype395, _size392) = iprot.readListBegin()
                    for _i396 in range(_size392):
                        _elem397 = sai_thrift_attribute_t()
                        _elem397.read(iprot)
                        self.thrift_attr_list.append(_elem397)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_neighbor_entry_args')
        if self.thrift_neighbor_entry is not None:
            oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
            self.thrift_neighbor_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter398 in self.thrift_attr_list:
                iter398.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_neighbor_entry_args)
sai_thrift_create_neighbor_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', [sai_thrift_neighbor_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_neighbor_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_neighbor_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_neighbor_entry_result)
sai_thrift_create_neighbor_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_remove_neighbor_entry_args(object):
    """
    Attributes:
     - thrift_neighbor_entry

    """


    def __init__(self, thrift_neighbor_entry=None,):
        self.thrift_neighbor_entry = thrift_neighbor_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
                    self.thrift_neighbor_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_neighbor_entry_args')
        if self.thrift_neighbor_entry is not None:
            oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
            self.thrift_neighbor_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_neighbor_entry_args)
sai_thrift_remove_neighbor_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', [sai_thrift_neighbor_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_neighbor_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_neighbor_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_neighbor_entry_result)
sai_thrift_remove_neighbor_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_remove_all_neighbor_entry_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_all_neighbor_entry_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_all_neighbor_entry_args)
sai_thrift_remove_all_neighbor_entry_args.thrift_spec = (
)


class sai_thrift_remove_all_neighbor_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_all_neighbor_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_all_neighbor_entry_result)
sai_thrift_remove_all_neighbor_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_neighbor_entry_attribute_args(object):
    """
    Attributes:
     - thrift_neighbor_entry
     - thrift_attr

    """


    def __init__(self, thrift_neighbor_entry=None, thrift_attr=None,):
        self.thrift_neighbor_entry = thrift_neighbor_entry
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
                    self.thrift_neighbor_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_neighbor_entry_attribute_args')
        if self.thrift_neighbor_entry is not None:
            oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
            self.thrift_neighbor_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_neighbor_entry_attribute_args)
sai_thrift_set_neighbor_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', [sai_thrift_neighbor_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_neighbor_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_neighbor_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_neighbor_entry_attribute_result)
sai_thrift_set_neighbor_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_neighbor_entry_attribute_args(object):
    """
    Attributes:
     - thrift_neighbor_entry

    """


    def __init__(self, thrift_neighbor_entry=None,):
        self.thrift_neighbor_entry = thrift_neighbor_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
                    self.thrift_neighbor_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_neighbor_entry_attribute_args')
        if self.thrift_neighbor_entry is not None:
            oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
            self.thrift_neighbor_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_neighbor_entry_attribute_args)
sai_thrift_get_neighbor_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', [sai_thrift_neighbor_entry_t, None], None, ),  # 1
)


class sai_thrift_get_neighbor_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_neighbor_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_neighbor_entry_attribute_result)
sai_thrift_get_neighbor_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_switch_attribute_args(object):
    """
    Attributes:
     - thrift_attr_ids

    """


    def __init__(self, thrift_attr_ids=None,):
        self.thrift_attr_ids = thrift_attr_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_ids = []
                    (_etype402, _size399) = iprot.readListBegin()
                    for _i403 in range(_size399):
                        _elem404 = iprot.readI32()
                        self.thrift_attr_ids.append(_elem404)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_attribute_args')
        if self.thrift_attr_ids is not None:
            oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
            for iter405 in self.thrift_attr_ids:
                oprot.writeI32(iter405)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_attribute_args)
sai_thrift_get_switch_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_ids', (TType.I32, None, False), None, ),  # 1
)


class sai_thrift_get_switch_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_attribute_result)
sai_thrift_get_switch_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_port_list_by_front_port_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_list_by_front_port_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_list_by_front_port_args)
sai_thrift_get_port_list_by_front_port_args.thrift_spec = (
)


class sai_thrift_get_port_list_by_front_port_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_list_by_front_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_list_by_front_port_result)
sai_thrift_get_port_list_by_front_port_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_t, None], None, ),  # 0
)


class sai_thrift_get_cpu_port_id_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_cpu_port_id_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_cpu_port_id_args)
sai_thrift_get_cpu_port_id_args.thrift_spec = (
)


class sai_thrift_get_cpu_port_id_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_cpu_port_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_cpu_port_id_result)
sai_thrift_get_cpu_port_id_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_get_default_trap_group_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_default_trap_group_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_default_trap_group_args)
sai_thrift_get_default_trap_group_args.thrift_spec = (
)


class sai_thrift_get_default_trap_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_default_trap_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_default_trap_group_result)
sai_thrift_get_default_trap_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_get_default_router_id_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_default_router_id_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_default_router_id_args)
sai_thrift_get_default_router_id_args.thrift_spec = (
)


class sai_thrift_get_default_router_id_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_default_router_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_default_router_id_result)
sai_thrift_get_default_router_id_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_get_default_1q_bridge_id_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_default_1q_bridge_id_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_default_1q_bridge_id_args)
sai_thrift_get_default_1q_bridge_id_args.thrift_spec = (
)


class sai_thrift_get_default_1q_bridge_id_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_default_1q_bridge_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_default_1q_bridge_id_result)
sai_thrift_get_default_1q_bridge_id_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_get_default_vlan_id_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_default_vlan_id_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_default_vlan_id_args)
sai_thrift_get_default_vlan_id_args.thrift_spec = (
)


class sai_thrift_get_default_vlan_id_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_result_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_default_vlan_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_default_vlan_id_result)
sai_thrift_get_default_vlan_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_result_t, None], None, ),  # 0
)


class sai_thrift_get_port_id_by_front_port_args(object):
    """
    Attributes:
     - port_name

    """


    def __init__(self, port_name=None,):
        self.port_name = port_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.port_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_id_by_front_port_args')
        if self.port_name is not None:
            oprot.writeFieldBegin('port_name', TType.STRING, 1)
            oprot.writeString(self.port_name.encode('utf-8') if sys.version_info[0] == 2 else self.port_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_id_by_front_port_args)
sai_thrift_get_port_id_by_front_port_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'port_name', 'UTF8', None, ),  # 1
)


class sai_thrift_get_port_id_by_front_port_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_id_by_front_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_id_by_front_port_result)
sai_thrift_get_port_id_by_front_port_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_set_switch_attribute_args(object):
    """
    Attributes:
     - attribute

    """


    def __init__(self, attribute=None,):
        self.attribute = attribute

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.attribute = sai_thrift_attribute_t()
                    self.attribute.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_switch_attribute_args')
        if self.attribute is not None:
            oprot.writeFieldBegin('attribute', TType.STRUCT, 1)
            self.attribute.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_switch_attribute_args)
sai_thrift_set_switch_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'attribute', [sai_thrift_attribute_t, None], None, ),  # 1
)


class sai_thrift_set_switch_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_switch_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_switch_attribute_result)
sai_thrift_set_switch_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_switch_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_switch_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_switch_args)
sai_thrift_create_switch_args.thrift_spec = (
)


class sai_thrift_create_switch_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_switch_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_switch_result)
sai_thrift_create_switch_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_switch_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_switch_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_switch_args)
sai_thrift_remove_switch_args.thrift_spec = (
)


class sai_thrift_remove_switch_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_switch_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_switch_result)
sai_thrift_remove_switch_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_switch_stats_args(object):
    """
    Attributes:
     - counter_ids
     - number_of_counters

    """


    def __init__(self, counter_ids=None, number_of_counters=None,):
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype409, _size406) = iprot.readListBegin()
                    for _i410 in range(_size406):
                        _elem411 = iprot.readI32()
                        self.counter_ids.append(_elem411)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_stats_args')
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter412 in self.counter_ids:
                oprot.writeI32(iter412)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 2)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_stats_args)
sai_thrift_get_switch_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 1
    (2, TType.I32, 'number_of_counters', None, None, ),  # 2
)


class sai_thrift_get_switch_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype416, _size413) = iprot.readListBegin()
                    for _i417 in range(_size413):
                        _elem418 = iprot.readI64()
                        self.success.append(_elem418)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter419 in self.success:
                oprot.writeI64(iter419)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_stats_result)
sai_thrift_get_switch_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_get_switch_stats_ext_args(object):
    """
    Attributes:
     - counter_ids
     - mode
     - number_of_counters

    """


    def __init__(self, counter_ids=None, mode=None, number_of_counters=None,):
        self.counter_ids = counter_ids
        self.mode = mode
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype423, _size420) = iprot.readListBegin()
                    for _i424 in range(_size420):
                        _elem425 = iprot.readI32()
                        self.counter_ids.append(_elem425)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_stats_ext_args')
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter426 in self.counter_ids:
                oprot.writeI32(iter426)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 2)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_stats_ext_args)
sai_thrift_get_switch_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 1
    (2, TType.BYTE, 'mode', None, None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_get_switch_stats_ext_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype430, _size427) = iprot.readListBegin()
                    for _i431 in range(_size427):
                        _elem432 = iprot.readI64()
                        self.success.append(_elem432)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter433 in self.success:
                oprot.writeI64(iter433)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_stats_ext_result)
sai_thrift_get_switch_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_clear_switch_stats_args(object):
    """
    Attributes:
     - counter_ids
     - number_of_counters

    """


    def __init__(self, counter_ids=None, number_of_counters=None,):
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype437, _size434) = iprot.readListBegin()
                    for _i438 in range(_size434):
                        _elem439 = iprot.readI32()
                        self.counter_ids.append(_elem439)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_switch_stats_args')
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter440 in self.counter_ids:
                oprot.writeI32(iter440)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 2)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_switch_stats_args)
sai_thrift_clear_switch_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 1
    (2, TType.I32, 'number_of_counters', None, None, ),  # 2
)


class sai_thrift_clear_switch_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_switch_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_switch_stats_result)
sai_thrift_clear_switch_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_bridge_port_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype444, _size441) = iprot.readListBegin()
                    for _i445 in range(_size441):
                        _elem446 = sai_thrift_attribute_t()
                        _elem446.read(iprot)
                        self.thrift_attr_list.append(_elem446)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bridge_port_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter447 in self.thrift_attr_list:
                iter447.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bridge_port_args)
sai_thrift_create_bridge_port_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_bridge_port_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_result_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bridge_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bridge_port_result)
sai_thrift_create_bridge_port_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_result_t, None], None, ),  # 0
)


class sai_thrift_remove_bridge_port_args(object):
    """
    Attributes:
     - bridge_port_id

    """


    def __init__(self, bridge_port_id=None,):
        self.bridge_port_id = bridge_port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bridge_port_args')
        if self.bridge_port_id is not None:
            oprot.writeFieldBegin('bridge_port_id', TType.I64, 1)
            oprot.writeI64(self.bridge_port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bridge_port_args)
sai_thrift_remove_bridge_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_id', None, None, ),  # 1
)


class sai_thrift_remove_bridge_port_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bridge_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bridge_port_result)
sai_thrift_remove_bridge_port_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_bridge_port_list_args(object):
    """
    Attributes:
     - bridge_id

    """


    def __init__(self, bridge_id=None,):
        self.bridge_id = bridge_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_list_args')
        if self.bridge_id is not None:
            oprot.writeFieldBegin('bridge_id', TType.I64, 1)
            oprot.writeI64(self.bridge_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_list_args)
sai_thrift_get_bridge_port_list_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_id', None, None, ),  # 1
)


class sai_thrift_get_bridge_port_list_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_result_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_list_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_list_result)
sai_thrift_get_bridge_port_list_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_result_t, None], None, ),  # 0
)


class sai_thrift_get_bridge_port_attribute_args(object):
    """
    Attributes:
     - bridge_port_id

    """


    def __init__(self, bridge_port_id=None,):
        self.bridge_port_id = bridge_port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_attribute_args')
        if self.bridge_port_id is not None:
            oprot.writeFieldBegin('bridge_port_id', TType.I64, 1)
            oprot.writeI64(self.bridge_port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_attribute_args)
sai_thrift_get_bridge_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_id', None, None, ),  # 1
)


class sai_thrift_get_bridge_port_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_attribute_result)
sai_thrift_get_bridge_port_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_bridge_port_attribute_args(object):
    """
    Attributes:
     - bridge_port_id
     - thrift_attr

    """


    def __init__(self, bridge_port_id=None, thrift_attr=None,):
        self.bridge_port_id = bridge_port_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bridge_port_attribute_args')
        if self.bridge_port_id is not None:
            oprot.writeFieldBegin('bridge_port_id', TType.I64, 1)
            oprot.writeI64(self.bridge_port_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bridge_port_attribute_args)
sai_thrift_set_bridge_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_bridge_port_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bridge_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bridge_port_attribute_result)
sai_thrift_set_bridge_port_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_bridge_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype451, _size448) = iprot.readListBegin()
                    for _i452 in range(_size448):
                        _elem453 = sai_thrift_attribute_t()
                        _elem453.read(iprot)
                        self.thrift_attr_list.append(_elem453)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bridge_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter454 in self.thrift_attr_list:
                iter454.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bridge_args)
sai_thrift_create_bridge_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_bridge_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_result_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bridge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bridge_result)
sai_thrift_create_bridge_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_result_t, None], None, ),  # 0
)


class sai_thrift_remove_bridge_args(object):
    """
    Attributes:
     - bridge_id

    """


    def __init__(self, bridge_id=None,):
        self.bridge_id = bridge_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bridge_args')
        if self.bridge_id is not None:
            oprot.writeFieldBegin('bridge_id', TType.I64, 1)
            oprot.writeI64(self.bridge_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bridge_args)
sai_thrift_remove_bridge_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_id', None, None, ),  # 1
)


class sai_thrift_remove_bridge_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bridge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bridge_result)
sai_thrift_remove_bridge_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_bridge_attribute_args(object):
    """
    Attributes:
     - bridge_id

    """


    def __init__(self, bridge_id=None,):
        self.bridge_id = bridge_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_attribute_args')
        if self.bridge_id is not None:
            oprot.writeFieldBegin('bridge_id', TType.I64, 1)
            oprot.writeI64(self.bridge_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_attribute_args)
sai_thrift_get_bridge_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_id', None, None, ),  # 1
)


class sai_thrift_get_bridge_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_attribute_result)
sai_thrift_get_bridge_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_bridge_attribute_args(object):
    """
    Attributes:
     - bridge_id
     - thrift_attr

    """


    def __init__(self, bridge_id=None, thrift_attr=None,):
        self.bridge_id = bridge_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bridge_attribute_args')
        if self.bridge_id is not None:
            oprot.writeFieldBegin('bridge_id', TType.I64, 1)
            oprot.writeI64(self.bridge_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bridge_attribute_args)
sai_thrift_set_bridge_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_bridge_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bridge_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bridge_attribute_result)
sai_thrift_set_bridge_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_bridge_port_stats_args(object):
    """
    Attributes:
     - bridge_port_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, bridge_port_id=None, counter_ids=None, number_of_counters=None,):
        self.bridge_port_id = bridge_port_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype458, _size455) = iprot.readListBegin()
                    for _i459 in range(_size455):
                        _elem460 = iprot.readI32()
                        self.counter_ids.append(_elem460)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_stats_args')
        if self.bridge_port_id is not None:
            oprot.writeFieldBegin('bridge_port_id', TType.I64, 1)
            oprot.writeI64(self.bridge_port_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter461 in self.counter_ids:
                oprot.writeI32(iter461)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_stats_args)
sai_thrift_get_bridge_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_get_bridge_port_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype465, _size462) = iprot.readListBegin()
                    for _i466 in range(_size462):
                        _elem467 = iprot.readI64()
                        self.success.append(_elem467)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter468 in self.success:
                oprot.writeI64(iter468)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_stats_result)
sai_thrift_get_bridge_port_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_get_bridge_port_stats_ext_args(object):
    """
    Attributes:
     - bridge_port_id
     - thrift_counter_ids
     - mode
     - number_of_counters

    """


    def __init__(self, bridge_port_id=None, thrift_counter_ids=None, mode=None, number_of_counters=None,):
        self.bridge_port_id = bridge_port_id
        self.thrift_counter_ids = thrift_counter_ids
        self.mode = mode
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype472, _size469) = iprot.readListBegin()
                    for _i473 in range(_size469):
                        _elem474 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem474)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_stats_ext_args')
        if self.bridge_port_id is not None:
            oprot.writeFieldBegin('bridge_port_id', TType.I64, 1)
            oprot.writeI64(self.bridge_port_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter475 in self.thrift_counter_ids:
                oprot.writeI32(iter475)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 4)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_stats_ext_args)
sai_thrift_get_bridge_port_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
    (4, TType.I32, 'number_of_counters', None, None, ),  # 4
)


class sai_thrift_get_bridge_port_stats_ext_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype479, _size476) = iprot.readListBegin()
                    for _i480 in range(_size476):
                        _elem481 = iprot.readI64()
                        self.success.append(_elem481)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter482 in self.success:
                oprot.writeI64(iter482)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_stats_ext_result)
sai_thrift_get_bridge_port_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_clear_bridge_port_stats_args(object):
    """
    Attributes:
     - bridge_port_id
     - thrift_counter_ids
     - number_of_counters

    """


    def __init__(self, bridge_port_id=None, thrift_counter_ids=None, number_of_counters=None,):
        self.bridge_port_id = bridge_port_id
        self.thrift_counter_ids = thrift_counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype486, _size483) = iprot.readListBegin()
                    for _i487 in range(_size483):
                        _elem488 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem488)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_bridge_port_stats_args')
        if self.bridge_port_id is not None:
            oprot.writeFieldBegin('bridge_port_id', TType.I64, 1)
            oprot.writeI64(self.bridge_port_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter489 in self.thrift_counter_ids:
                oprot.writeI32(iter489)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_bridge_port_stats_args)
sai_thrift_clear_bridge_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_clear_bridge_port_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_bridge_port_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_bridge_port_stats_result)
sai_thrift_clear_bridge_port_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_hostif_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype493, _size490) = iprot.readListBegin()
                    for _i494 in range(_size490):
                        _elem495 = sai_thrift_attribute_t()
                        _elem495.read(iprot)
                        self.thrift_attr_list.append(_elem495)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter496 in self.thrift_attr_list:
                iter496.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_args)
sai_thrift_create_hostif_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hostif_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_result)
sai_thrift_create_hostif_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_hostif_args(object):
    """
    Attributes:
     - thrift_hif_id

    """


    def __init__(self, thrift_hif_id=None,):
        self.thrift_hif_id = thrift_hif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_args')
        if self.thrift_hif_id is not None:
            oprot.writeFieldBegin('thrift_hif_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_args)
sai_thrift_remove_hostif_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hif_id', None, None, ),  # 1
)


class sai_thrift_remove_hostif_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_result)
sai_thrift_remove_hostif_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_hostif_attribute_args(object):
    """
    Attributes:
     - thrift_hif_id

    """


    def __init__(self, thrift_hif_id=None,):
        self.thrift_hif_id = thrift_hif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_attribute_args')
        if self.thrift_hif_id is not None:
            oprot.writeFieldBegin('thrift_hif_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_attribute_args)
sai_thrift_get_hostif_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hif_id', None, None, ),  # 1
)


class sai_thrift_get_hostif_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_attribute_result)
sai_thrift_get_hostif_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_hostif_attribute_args(object):
    """
    Attributes:
     - thrift_hif_id
     - thrift_attr

    """


    def __init__(self, thrift_hif_id=None, thrift_attr=None,):
        self.thrift_hif_id = thrift_hif_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_attribute_args')
        if self.thrift_hif_id is not None:
            oprot.writeFieldBegin('thrift_hif_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hif_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_attribute_args)
sai_thrift_set_hostif_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hif_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hostif_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_attribute_result)
sai_thrift_set_hostif_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_hostif_table_entry_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype500, _size497) = iprot.readListBegin()
                    for _i501 in range(_size497):
                        _elem502 = sai_thrift_attribute_t()
                        _elem502.read(iprot)
                        self.thrift_attr_list.append(_elem502)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_table_entry_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter503 in self.thrift_attr_list:
                iter503.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_table_entry_args)
sai_thrift_create_hostif_table_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hostif_table_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_table_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_table_entry_result)
sai_thrift_create_hostif_table_entry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_hostif_table_entry_args(object):
    """
    Attributes:
     - thrift_hostif_table_entry_id

    """


    def __init__(self, thrift_hostif_table_entry_id=None,):
        self.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hostif_table_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_table_entry_args')
        if self.thrift_hostif_table_entry_id is not None:
            oprot.writeFieldBegin('thrift_hostif_table_entry_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hostif_table_entry_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_table_entry_args)
sai_thrift_remove_hostif_table_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hostif_table_entry_id', None, None, ),  # 1
)


class sai_thrift_remove_hostif_table_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_table_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_table_entry_result)
sai_thrift_remove_hostif_table_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_hostif_table_entry_attribute_args(object):
    """
    Attributes:
     - thrift_hostif_table_entry_id

    """


    def __init__(self, thrift_hostif_table_entry_id=None,):
        self.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hostif_table_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_table_entry_attribute_args')
        if self.thrift_hostif_table_entry_id is not None:
            oprot.writeFieldBegin('thrift_hostif_table_entry_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hostif_table_entry_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_table_entry_attribute_args)
sai_thrift_get_hostif_table_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hostif_table_entry_id', None, None, ),  # 1
)


class sai_thrift_get_hostif_table_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_table_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_table_entry_attribute_result)
sai_thrift_get_hostif_table_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_hostif_table_entry_attribute_args(object):
    """
    Attributes:
     - thrift_hostif_table_entry_id
     - thrift_attr

    """


    def __init__(self, thrift_hostif_table_entry_id=None, thrift_attr=None,):
        self.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hostif_table_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_table_entry_attribute_args')
        if self.thrift_hostif_table_entry_id is not None:
            oprot.writeFieldBegin('thrift_hostif_table_entry_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hostif_table_entry_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_table_entry_attribute_args)
sai_thrift_set_hostif_table_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hostif_table_entry_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hostif_table_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_table_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_table_entry_attribute_result)
sai_thrift_set_hostif_table_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_hostif_trap_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype507, _size504) = iprot.readListBegin()
                    for _i508 in range(_size504):
                        _elem509 = sai_thrift_attribute_t()
                        _elem509.read(iprot)
                        self.thrift_attr_list.append(_elem509)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_trap_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter510 in self.thrift_attr_list:
                iter510.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_trap_group_args)
sai_thrift_create_hostif_trap_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hostif_trap_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_trap_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_trap_group_result)
sai_thrift_create_hostif_trap_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_hostif_trap_group_args(object):
    """
    Attributes:
     - thrift_hostif_trap_group_id

    """


    def __init__(self, thrift_hostif_trap_group_id=None,):
        self.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hostif_trap_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_trap_group_args')
        if self.thrift_hostif_trap_group_id is not None:
            oprot.writeFieldBegin('thrift_hostif_trap_group_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hostif_trap_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_trap_group_args)
sai_thrift_remove_hostif_trap_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hostif_trap_group_id', None, None, ),  # 1
)


class sai_thrift_remove_hostif_trap_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_trap_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_trap_group_result)
sai_thrift_remove_hostif_trap_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_hostif_trap_group_attribute_args(object):
    """
    Attributes:
     - thrift_hostif_trap_group_id

    """


    def __init__(self, thrift_hostif_trap_group_id=None,):
        self.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hostif_trap_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_trap_group_attribute_args')
        if self.thrift_hostif_trap_group_id is not None:
            oprot.writeFieldBegin('thrift_hostif_trap_group_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hostif_trap_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_trap_group_attribute_args)
sai_thrift_get_hostif_trap_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hostif_trap_group_id', None, None, ),  # 1
)


class sai_thrift_get_hostif_trap_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_trap_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_trap_group_attribute_result)
sai_thrift_get_hostif_trap_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_hostif_trap_group_attribute_args(object):
    """
    Attributes:
     - thrift_hostif_trap_group_id
     - thrift_attr

    """


    def __init__(self, thrift_hostif_trap_group_id=None, thrift_attr=None,):
        self.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hostif_trap_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_trap_group_attribute_args')
        if self.thrift_hostif_trap_group_id is not None:
            oprot.writeFieldBegin('thrift_hostif_trap_group_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hostif_trap_group_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_trap_group_attribute_args)
sai_thrift_set_hostif_trap_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hostif_trap_group_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hostif_trap_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_trap_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_trap_group_attribute_result)
sai_thrift_set_hostif_trap_group_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_hostif_trap_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype514, _size511) = iprot.readListBegin()
                    for _i515 in range(_size511):
                        _elem516 = sai_thrift_attribute_t()
                        _elem516.read(iprot)
                        self.thrift_attr_list.append(_elem516)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_trap_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter517 in self.thrift_attr_list:
                iter517.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_trap_args)
sai_thrift_create_hostif_trap_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hostif_trap_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_trap_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_trap_result)
sai_thrift_create_hostif_trap_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_hostif_trap_args(object):
    """
    Attributes:
     - thrift_hostif_trap_id

    """


    def __init__(self, thrift_hostif_trap_id=None,):
        self.thrift_hostif_trap_id = thrift_hostif_trap_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hostif_trap_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_trap_args')
        if self.thrift_hostif_trap_id is not None:
            oprot.writeFieldBegin('thrift_hostif_trap_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hostif_trap_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_trap_args)
sai_thrift_remove_hostif_trap_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hostif_trap_id', None, None, ),  # 1
)


class sai_thrift_remove_hostif_trap_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_trap_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_trap_result)
sai_thrift_remove_hostif_trap_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_hostif_trap_attribute_args(object):
    """
    Attributes:
     - thrift_hostif_trap_id

    """


    def __init__(self, thrift_hostif_trap_id=None,):
        self.thrift_hostif_trap_id = thrift_hostif_trap_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hostif_trap_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_trap_attribute_args')
        if self.thrift_hostif_trap_id is not None:
            oprot.writeFieldBegin('thrift_hostif_trap_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hostif_trap_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_trap_attribute_args)
sai_thrift_get_hostif_trap_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hostif_trap_id', None, None, ),  # 1
)


class sai_thrift_get_hostif_trap_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_trap_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_trap_attribute_result)
sai_thrift_get_hostif_trap_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_hostif_trap_attribute_args(object):
    """
    Attributes:
     - thrift_hostif_trap_id
     - thrift_attr

    """


    def __init__(self, thrift_hostif_trap_id=None, thrift_attr=None,):
        self.thrift_hostif_trap_id = thrift_hostif_trap_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hostif_trap_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_trap_attribute_args')
        if self.thrift_hostif_trap_id is not None:
            oprot.writeFieldBegin('thrift_hostif_trap_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hostif_trap_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_trap_attribute_args)
sai_thrift_set_hostif_trap_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hostif_trap_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hostif_trap_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_trap_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_trap_attribute_result)
sai_thrift_set_hostif_trap_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_send_hostif_packet_args(object):
    """
    Attributes:
     - thrift_hif_id
     - packet_data
     - thrift_attr_list

    """


    def __init__(self, thrift_hif_id=None, packet_data=None, thrift_attr_list=None,):
        self.thrift_hif_id = thrift_hif_id
        self.packet_data = packet_data
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.packet_data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype521, _size518) = iprot.readListBegin()
                    for _i522 in range(_size518):
                        _elem523 = sai_thrift_attribute_t()
                        _elem523.read(iprot)
                        self.thrift_attr_list.append(_elem523)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_send_hostif_packet_args')
        if self.thrift_hif_id is not None:
            oprot.writeFieldBegin('thrift_hif_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hif_id)
            oprot.writeFieldEnd()
        if self.packet_data is not None:
            oprot.writeFieldBegin('packet_data', TType.STRING, 2)
            oprot.writeString(self.packet_data.encode('utf-8') if sys.version_info[0] == 2 else self.packet_data)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter524 in self.thrift_attr_list:
                iter524.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_send_hostif_packet_args)
sai_thrift_send_hostif_packet_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hif_id', None, None, ),  # 1
    (2, TType.STRING, 'packet_data', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 3
)


class sai_thrift_send_hostif_packet_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_send_hostif_packet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_send_hostif_packet_result)
sai_thrift_send_hostif_packet_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_acl_table_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype528, _size525) = iprot.readListBegin()
                    for _i529 in range(_size525):
                        _elem530 = sai_thrift_attribute_t()
                        _elem530.read(iprot)
                        self.thrift_attr_list.append(_elem530)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter531 in self.thrift_attr_list:
                iter531.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_args)
sai_thrift_create_acl_table_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_table_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_result)
sai_thrift_create_acl_table_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_acl_table_args(object):
    """
    Attributes:
     - acl_table_id

    """


    def __init__(self, acl_table_id=None,):
        self.acl_table_id = acl_table_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_args')
        if self.acl_table_id is not None:
            oprot.writeFieldBegin('acl_table_id', TType.I64, 1)
            oprot.writeI64(self.acl_table_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_args)
sai_thrift_remove_acl_table_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_id', None, None, ),  # 1
)


class sai_thrift_remove_acl_table_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_result)
sai_thrift_remove_acl_table_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_acl_table_attribute_args(object):
    """
    Attributes:
     - acl_table_id
     - thrift_attr_ids

    """


    def __init__(self, acl_table_id=None, thrift_attr_ids=None,):
        self.acl_table_id = acl_table_id
        self.thrift_attr_ids = thrift_attr_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_ids = []
                    (_etype535, _size532) = iprot.readListBegin()
                    for _i536 in range(_size532):
                        _elem537 = iprot.readI32()
                        self.thrift_attr_ids.append(_elem537)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_attribute_args')
        if self.acl_table_id is not None:
            oprot.writeFieldBegin('acl_table_id', TType.I64, 1)
            oprot.writeI64(self.acl_table_id)
            oprot.writeFieldEnd()
        if self.thrift_attr_ids is not None:
            oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
            for iter538 in self.thrift_attr_ids:
                oprot.writeI32(iter538)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_attribute_args)
sai_thrift_get_acl_table_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_acl_table_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_attribute_result)
sai_thrift_get_acl_table_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_acl_entry_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype542, _size539) = iprot.readListBegin()
                    for _i543 in range(_size539):
                        _elem544 = sai_thrift_attribute_t()
                        _elem544.read(iprot)
                        self.thrift_attr_list.append(_elem544)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_entry_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter545 in self.thrift_attr_list:
                iter545.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_entry_args)
sai_thrift_create_acl_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_entry_result)
sai_thrift_create_acl_entry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_acl_entry_args(object):
    """
    Attributes:
     - acl_entry

    """


    def __init__(self, acl_entry=None,):
        self.acl_entry = acl_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_entry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_entry_args')
        if self.acl_entry is not None:
            oprot.writeFieldBegin('acl_entry', TType.I64, 1)
            oprot.writeI64(self.acl_entry)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_entry_args)
sai_thrift_remove_acl_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_entry', None, None, ),  # 1
)


class sai_thrift_remove_acl_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_entry_result)
sai_thrift_remove_acl_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_acl_entry_attribute_args(object):
    """
    Attributes:
     - acl_entry_id
     - thrift_attr

    """


    def __init__(self, acl_entry_id=None, thrift_attr=None,):
        self.acl_entry_id = acl_entry_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_entry_attribute_args')
        if self.acl_entry_id is not None:
            oprot.writeFieldBegin('acl_entry_id', TType.I64, 1)
            oprot.writeI64(self.acl_entry_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_entry_attribute_args)
sai_thrift_set_acl_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_entry_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_acl_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_entry_attribute_result)
sai_thrift_set_acl_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_acl_entry_attribute_args(object):
    """
    Attributes:
     - acl_entry_id
     - thrift_attr_ids

    """


    def __init__(self, acl_entry_id=None, thrift_attr_ids=None,):
        self.acl_entry_id = acl_entry_id
        self.thrift_attr_ids = thrift_attr_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_ids = []
                    (_etype549, _size546) = iprot.readListBegin()
                    for _i550 in range(_size546):
                        _elem551 = iprot.readI32()
                        self.thrift_attr_ids.append(_elem551)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_entry_attribute_args')
        if self.acl_entry_id is not None:
            oprot.writeFieldBegin('acl_entry_id', TType.I64, 1)
            oprot.writeI64(self.acl_entry_id)
            oprot.writeFieldEnd()
        if self.thrift_attr_ids is not None:
            oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
            for iter552 in self.thrift_attr_ids:
                oprot.writeI32(iter552)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_entry_attribute_args)
sai_thrift_get_acl_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_entry_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_acl_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_entry_attribute_result)
sai_thrift_get_acl_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_acl_table_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype556, _size553) = iprot.readListBegin()
                    for _i557 in range(_size553):
                        _elem558 = sai_thrift_attribute_t()
                        _elem558.read(iprot)
                        self.thrift_attr_list.append(_elem558)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter559 in self.thrift_attr_list:
                iter559.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_group_args)
sai_thrift_create_acl_table_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_table_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_group_result)
sai_thrift_create_acl_table_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_acl_table_group_args(object):
    """
    Attributes:
     - acl_table_group_id

    """


    def __init__(self, acl_table_group_id=None,):
        self.acl_table_group_id = acl_table_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_group_args')
        if self.acl_table_group_id is not None:
            oprot.writeFieldBegin('acl_table_group_id', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_group_args)
sai_thrift_remove_acl_table_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_id', None, None, ),  # 1
)


class sai_thrift_remove_acl_table_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_group_result)
sai_thrift_remove_acl_table_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_acl_table_group_attribute_args(object):
    """
    Attributes:
     - acl_table_group_id

    """


    def __init__(self, acl_table_group_id=None,):
        self.acl_table_group_id = acl_table_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_group_attribute_args')
        if self.acl_table_group_id is not None:
            oprot.writeFieldBegin('acl_table_group_id', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_group_attribute_args)
sai_thrift_get_acl_table_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_id', None, None, ),  # 1
)


class sai_thrift_get_acl_table_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_group_attribute_result)
sai_thrift_get_acl_table_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_acl_table_group_member_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype563, _size560) = iprot.readListBegin()
                    for _i564 in range(_size560):
                        _elem565 = sai_thrift_attribute_t()
                        _elem565.read(iprot)
                        self.thrift_attr_list.append(_elem565)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_group_member_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter566 in self.thrift_attr_list:
                iter566.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_group_member_args)
sai_thrift_create_acl_table_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_table_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_group_member_result)
sai_thrift_create_acl_table_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_acl_table_group_member_args(object):
    """
    Attributes:
     - acl_table_group_member_id

    """


    def __init__(self, acl_table_group_member_id=None,):
        self.acl_table_group_member_id = acl_table_group_member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_group_member_args')
        if self.acl_table_group_member_id is not None:
            oprot.writeFieldBegin('acl_table_group_member_id', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_group_member_args)
sai_thrift_remove_acl_table_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_member_id', None, None, ),  # 1
)


class sai_thrift_remove_acl_table_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_group_member_result)
sai_thrift_remove_acl_table_group_member_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_acl_table_group_member_attribute_args(object):
    """
    Attributes:
     - acl_table_group_member_id

    """


    def __init__(self, acl_table_group_member_id=None,):
        self.acl_table_group_member_id = acl_table_group_member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_group_member_attribute_args')
        if self.acl_table_group_member_id is not None:
            oprot.writeFieldBegin('acl_table_group_member_id', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_group_member_attribute_args)
sai_thrift_get_acl_table_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_member_id', None, None, ),  # 1
)


class sai_thrift_get_acl_table_group_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_group_member_attribute_result)
sai_thrift_get_acl_table_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_acl_counter_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype570, _size567) = iprot.readListBegin()
                    for _i571 in range(_size567):
                        _elem572 = sai_thrift_attribute_t()
                        _elem572.read(iprot)
                        self.thrift_attr_list.append(_elem572)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_counter_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter573 in self.thrift_attr_list:
                iter573.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_counter_args)
sai_thrift_create_acl_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_counter_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_counter_result)
sai_thrift_create_acl_counter_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_acl_counter_args(object):
    """
    Attributes:
     - acl_counter_id

    """


    def __init__(self, acl_counter_id=None,):
        self.acl_counter_id = acl_counter_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_counter_args')
        if self.acl_counter_id is not None:
            oprot.writeFieldBegin('acl_counter_id', TType.I64, 1)
            oprot.writeI64(self.acl_counter_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_counter_args)
sai_thrift_remove_acl_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_counter_id', None, None, ),  # 1
)


class sai_thrift_remove_acl_counter_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_counter_result)
sai_thrift_remove_acl_counter_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_acl_counter_attribute_args(object):
    """
    Attributes:
     - acl_counter_id

    """


    def __init__(self, acl_counter_id=None,):
        self.acl_counter_id = acl_counter_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_counter_attribute_args')
        if self.acl_counter_id is not None:
            oprot.writeFieldBegin('acl_counter_id', TType.I64, 1)
            oprot.writeI64(self.acl_counter_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_counter_attribute_args)
sai_thrift_get_acl_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_counter_id', None, None, ),  # 1
)


class sai_thrift_get_acl_counter_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_counter_attribute_result)
sai_thrift_get_acl_counter_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_acl_counter_attribute_args(object):
    """
    Attributes:
     - acl_counter_id
     - thrift_attr

    """


    def __init__(self, acl_counter_id=None, thrift_attr=None,):
        self.acl_counter_id = acl_counter_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_counter_attribute_args')
        if self.acl_counter_id is not None:
            oprot.writeFieldBegin('acl_counter_id', TType.I64, 1)
            oprot.writeI64(self.acl_counter_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_counter_attribute_args)
sai_thrift_set_acl_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_counter_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_acl_counter_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_counter_attribute_result)
sai_thrift_set_acl_counter_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_acl_range_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype577, _size574) = iprot.readListBegin()
                    for _i578 in range(_size574):
                        _elem579 = sai_thrift_attribute_t()
                        _elem579.read(iprot)
                        self.thrift_attr_list.append(_elem579)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_range_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter580 in self.thrift_attr_list:
                iter580.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_range_args)
sai_thrift_create_acl_range_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_range_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_range_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_range_result)
sai_thrift_create_acl_range_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_acl_range_args(object):
    """
    Attributes:
     - acl_range_id

    """


    def __init__(self, acl_range_id=None,):
        self.acl_range_id = acl_range_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_range_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_range_args')
        if self.acl_range_id is not None:
            oprot.writeFieldBegin('acl_range_id', TType.I64, 1)
            oprot.writeI64(self.acl_range_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_range_args)
sai_thrift_remove_acl_range_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_range_id', None, None, ),  # 1
)


class sai_thrift_remove_acl_range_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_range_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_range_result)
sai_thrift_remove_acl_range_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_acl_range_attribute_args(object):
    """
    Attributes:
     - acl_range_id

    """


    def __init__(self, acl_range_id=None,):
        self.acl_range_id = acl_range_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_range_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_range_attribute_args')
        if self.acl_range_id is not None:
            oprot.writeFieldBegin('acl_range_id', TType.I64, 1)
            oprot.writeI64(self.acl_range_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_range_attribute_args)
sai_thrift_get_acl_range_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_range_id', None, None, ),  # 1
)


class sai_thrift_get_acl_range_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_range_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_range_attribute_result)
sai_thrift_get_acl_range_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_hash_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype584, _size581) = iprot.readListBegin()
                    for _i585 in range(_size581):
                        _elem586 = sai_thrift_attribute_t()
                        _elem586.read(iprot)
                        self.thrift_attr_list.append(_elem586)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hash_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter587 in self.thrift_attr_list:
                iter587.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hash_args)
sai_thrift_create_hash_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hash_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hash_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hash_result)
sai_thrift_create_hash_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_hash_args(object):
    """
    Attributes:
     - hash_id

    """


    def __init__(self, hash_id=None,):
        self.hash_id = hash_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hash_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hash_args')
        if self.hash_id is not None:
            oprot.writeFieldBegin('hash_id', TType.I64, 1)
            oprot.writeI64(self.hash_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hash_args)
sai_thrift_remove_hash_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hash_id', None, None, ),  # 1
)


class sai_thrift_remove_hash_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hash_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hash_result)
sai_thrift_remove_hash_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_hash_attribute_args(object):
    """
    Attributes:
     - thrift_hash_id
     - thrift_attr

    """


    def __init__(self, thrift_hash_id=None, thrift_attr=None,):
        self.thrift_hash_id = thrift_hash_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hash_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hash_attribute_args')
        if self.thrift_hash_id is not None:
            oprot.writeFieldBegin('thrift_hash_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hash_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hash_attribute_args)
sai_thrift_set_hash_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hash_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hash_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hash_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hash_attribute_result)
sai_thrift_set_hash_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_hash_attribute_args(object):
    """
    Attributes:
     - thrift_hash_id

    """


    def __init__(self, thrift_hash_id=None,):
        self.thrift_hash_id = thrift_hash_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_hash_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hash_attribute_args')
        if self.thrift_hash_id is not None:
            oprot.writeFieldBegin('thrift_hash_id', TType.I64, 1)
            oprot.writeI64(self.thrift_hash_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hash_attribute_args)
sai_thrift_get_hash_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_hash_id', None, None, ),  # 1
)


class sai_thrift_get_hash_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hash_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hash_attribute_result)
sai_thrift_get_hash_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_udf_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype591, _size588) = iprot.readListBegin()
                    for _i592 in range(_size588):
                        _elem593 = sai_thrift_attribute_t()
                        _elem593.read(iprot)
                        self.thrift_attr_list.append(_elem593)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter594 in self.thrift_attr_list:
                iter594.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_group_args)
sai_thrift_create_udf_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_udf_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_group_result)
sai_thrift_create_udf_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_udf_group_args(object):
    """
    Attributes:
     - udf_group_id

    """


    def __init__(self, udf_group_id=None,):
        self.udf_group_id = udf_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_group_args')
        if self.udf_group_id is not None:
            oprot.writeFieldBegin('udf_group_id', TType.I64, 1)
            oprot.writeI64(self.udf_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_group_args)
sai_thrift_remove_udf_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_group_id', None, None, ),  # 1
)


class sai_thrift_remove_udf_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_group_result)
sai_thrift_remove_udf_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_udf_group_attribute_args(object):
    """
    Attributes:
     - thrift_udf_group_id

    """


    def __init__(self, thrift_udf_group_id=None,):
        self.thrift_udf_group_id = thrift_udf_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_udf_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_group_attribute_args')
        if self.thrift_udf_group_id is not None:
            oprot.writeFieldBegin('thrift_udf_group_id', TType.I64, 1)
            oprot.writeI64(self.thrift_udf_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_group_attribute_args)
sai_thrift_get_udf_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_udf_group_id', None, None, ),  # 1
)


class sai_thrift_get_udf_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_group_attribute_result)
sai_thrift_get_udf_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_udf_match_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype598, _size595) = iprot.readListBegin()
                    for _i599 in range(_size595):
                        _elem600 = sai_thrift_attribute_t()
                        _elem600.read(iprot)
                        self.thrift_attr_list.append(_elem600)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_match_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter601 in self.thrift_attr_list:
                iter601.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_match_args)
sai_thrift_create_udf_match_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_udf_match_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_match_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_match_result)
sai_thrift_create_udf_match_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_udf_match_args(object):
    """
    Attributes:
     - udf_match_id

    """


    def __init__(self, udf_match_id=None,):
        self.udf_match_id = udf_match_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_match_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_match_args')
        if self.udf_match_id is not None:
            oprot.writeFieldBegin('udf_match_id', TType.I64, 1)
            oprot.writeI64(self.udf_match_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_match_args)
sai_thrift_remove_udf_match_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_match_id', None, None, ),  # 1
)


class sai_thrift_remove_udf_match_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_match_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_match_result)
sai_thrift_remove_udf_match_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_udf_match_attribute_args(object):
    """
    Attributes:
     - thrift_udf_match_id

    """


    def __init__(self, thrift_udf_match_id=None,):
        self.thrift_udf_match_id = thrift_udf_match_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_udf_match_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_match_attribute_args')
        if self.thrift_udf_match_id is not None:
            oprot.writeFieldBegin('thrift_udf_match_id', TType.I64, 1)
            oprot.writeI64(self.thrift_udf_match_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_match_attribute_args)
sai_thrift_get_udf_match_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_udf_match_id', None, None, ),  # 1
)


class sai_thrift_get_udf_match_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_match_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_match_attribute_result)
sai_thrift_get_udf_match_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_udf_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype605, _size602) = iprot.readListBegin()
                    for _i606 in range(_size602):
                        _elem607 = sai_thrift_attribute_t()
                        _elem607.read(iprot)
                        self.thrift_attr_list.append(_elem607)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter608 in self.thrift_attr_list:
                iter608.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_args)
sai_thrift_create_udf_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_udf_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_result)
sai_thrift_create_udf_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_udf_args(object):
    """
    Attributes:
     - udf_id

    """


    def __init__(self, udf_id=None,):
        self.udf_id = udf_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_args')
        if self.udf_id is not None:
            oprot.writeFieldBegin('udf_id', TType.I64, 1)
            oprot.writeI64(self.udf_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_args)
sai_thrift_remove_udf_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_id', None, None, ),  # 1
)


class sai_thrift_remove_udf_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_result)
sai_thrift_remove_udf_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_udf_attribute_args(object):
    """
    Attributes:
     - thrift_udf_id
     - thrift_attr

    """


    def __init__(self, thrift_udf_id=None, thrift_attr=None,):
        self.thrift_udf_id = thrift_udf_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_udf_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_udf_attribute_args')
        if self.thrift_udf_id is not None:
            oprot.writeFieldBegin('thrift_udf_id', TType.I64, 1)
            oprot.writeI64(self.thrift_udf_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_udf_attribute_args)
sai_thrift_set_udf_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_udf_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_udf_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_udf_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_udf_attribute_result)
sai_thrift_set_udf_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_udf_attribute_args(object):
    """
    Attributes:
     - thrift_udf_id

    """


    def __init__(self, thrift_udf_id=None,):
        self.thrift_udf_id = thrift_udf_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_udf_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_attribute_args')
        if self.thrift_udf_id is not None:
            oprot.writeFieldBegin('thrift_udf_id', TType.I64, 1)
            oprot.writeI64(self.thrift_udf_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_attribute_args)
sai_thrift_get_udf_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_udf_id', None, None, ),  # 1
)


class sai_thrift_get_udf_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_attribute_result)
sai_thrift_get_udf_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_twamp_session_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype612, _size609) = iprot.readListBegin()
                    for _i613 in range(_size609):
                        _elem614 = sai_thrift_attribute_t()
                        _elem614.read(iprot)
                        self.thrift_attr_list.append(_elem614)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_twamp_session_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter615 in self.thrift_attr_list:
                iter615.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_twamp_session_args)
sai_thrift_create_twamp_session_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_twamp_session_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_twamp_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_twamp_session_result)
sai_thrift_create_twamp_session_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_twamp_session_args(object):
    """
    Attributes:
     - session_id

    """


    def __init__(self, session_id=None,):
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_twamp_session_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_twamp_session_args)
sai_thrift_remove_twamp_session_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
)


class sai_thrift_remove_twamp_session_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_twamp_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_twamp_session_result)
sai_thrift_remove_twamp_session_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_twamp_attribute_args(object):
    """
    Attributes:
     - thrift_twamp_session_id
     - thrift_attr

    """


    def __init__(self, thrift_twamp_session_id=None, thrift_attr=None,):
        self.thrift_twamp_session_id = thrift_twamp_session_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_twamp_session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_twamp_attribute_args')
        if self.thrift_twamp_session_id is not None:
            oprot.writeFieldBegin('thrift_twamp_session_id', TType.I64, 1)
            oprot.writeI64(self.thrift_twamp_session_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_twamp_attribute_args)
sai_thrift_set_twamp_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_twamp_session_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_twamp_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_twamp_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_twamp_attribute_result)
sai_thrift_set_twamp_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_twamp_attribute_args(object):
    """
    Attributes:
     - thrift_twamp_session_id

    """


    def __init__(self, thrift_twamp_session_id=None,):
        self.thrift_twamp_session_id = thrift_twamp_session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_twamp_session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_twamp_attribute_args')
        if self.thrift_twamp_session_id is not None:
            oprot.writeFieldBegin('thrift_twamp_session_id', TType.I64, 1)
            oprot.writeI64(self.thrift_twamp_session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_twamp_attribute_args)
sai_thrift_get_twamp_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_twamp_session_id', None, None, ),  # 1
)


class sai_thrift_get_twamp_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_twamp_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_twamp_attribute_result)
sai_thrift_get_twamp_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_twamp_session_stats_args(object):
    """
    Attributes:
     - twamp_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, twamp_id=None, counter_ids=None, number_of_counters=None,):
        self.twamp_id = twamp_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.twamp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype619, _size616) = iprot.readListBegin()
                    for _i620 in range(_size616):
                        _elem621 = iprot.readI32()
                        self.counter_ids.append(_elem621)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_twamp_session_stats_args')
        if self.twamp_id is not None:
            oprot.writeFieldBegin('twamp_id', TType.I64, 1)
            oprot.writeI64(self.twamp_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter622 in self.counter_ids:
                oprot.writeI32(iter622)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_twamp_session_stats_args)
sai_thrift_get_twamp_session_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'twamp_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_get_twamp_session_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype626, _size623) = iprot.readListBegin()
                    for _i627 in range(_size623):
                        _elem628 = iprot.readI64()
                        self.success.append(_elem628)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_twamp_session_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter629 in self.success:
                oprot.writeI64(iter629)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_twamp_session_stats_result)
sai_thrift_get_twamp_session_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_clear_twamp_session_stats_args(object):
    """
    Attributes:
     - twamp_id
     - thrift_counter_ids
     - number_of_counters

    """


    def __init__(self, twamp_id=None, thrift_counter_ids=None, number_of_counters=None,):
        self.twamp_id = twamp_id
        self.thrift_counter_ids = thrift_counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.twamp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype633, _size630) = iprot.readListBegin()
                    for _i634 in range(_size630):
                        _elem635 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem635)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_twamp_session_stats_args')
        if self.twamp_id is not None:
            oprot.writeFieldBegin('twamp_id', TType.I64, 1)
            oprot.writeI64(self.twamp_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter636 in self.thrift_counter_ids:
                oprot.writeI32(iter636)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_twamp_session_stats_args)
sai_thrift_clear_twamp_session_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'twamp_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_clear_twamp_session_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_twamp_session_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_twamp_session_stats_result)
sai_thrift_clear_twamp_session_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_mirror_session_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype640, _size637) = iprot.readListBegin()
                    for _i641 in range(_size637):
                        _elem642 = sai_thrift_attribute_t()
                        _elem642.read(iprot)
                        self.thrift_attr_list.append(_elem642)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_mirror_session_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter643 in self.thrift_attr_list:
                iter643.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_mirror_session_args)
sai_thrift_create_mirror_session_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_mirror_session_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_mirror_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_mirror_session_result)
sai_thrift_create_mirror_session_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_mirror_session_args(object):
    """
    Attributes:
     - session_id

    """


    def __init__(self, session_id=None,):
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_mirror_session_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_mirror_session_args)
sai_thrift_remove_mirror_session_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
)


class sai_thrift_remove_mirror_session_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_mirror_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_mirror_session_result)
sai_thrift_remove_mirror_session_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_mirror_attribute_args(object):
    """
    Attributes:
     - thrift_mirror_id
     - thrift_attr

    """


    def __init__(self, thrift_mirror_id=None, thrift_attr=None,):
        self.thrift_mirror_id = thrift_mirror_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_mirror_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_mirror_attribute_args')
        if self.thrift_mirror_id is not None:
            oprot.writeFieldBegin('thrift_mirror_id', TType.I64, 1)
            oprot.writeI64(self.thrift_mirror_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_mirror_attribute_args)
sai_thrift_set_mirror_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_mirror_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_mirror_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_mirror_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_mirror_attribute_result)
sai_thrift_set_mirror_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_mirror_attribute_args(object):
    """
    Attributes:
     - thrift_mirror_id

    """


    def __init__(self, thrift_mirror_id=None,):
        self.thrift_mirror_id = thrift_mirror_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_mirror_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_mirror_attribute_args')
        if self.thrift_mirror_id is not None:
            oprot.writeFieldBegin('thrift_mirror_id', TType.I64, 1)
            oprot.writeI64(self.thrift_mirror_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_mirror_attribute_args)
sai_thrift_get_mirror_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_mirror_id', None, None, ),  # 1
)


class sai_thrift_get_mirror_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_mirror_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_mirror_attribute_result)
sai_thrift_get_mirror_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_inseg_entry_args(object):
    """
    Attributes:
     - thrift_inseg_entry
     - thrift_attr_list

    """


    def __init__(self, thrift_inseg_entry=None, thrift_attr_list=None,):
        self.thrift_inseg_entry = thrift_inseg_entry
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_inseg_entry = sai_thrift_inseg_entry_t()
                    self.thrift_inseg_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype647, _size644) = iprot.readListBegin()
                    for _i648 in range(_size644):
                        _elem649 = sai_thrift_attribute_t()
                        _elem649.read(iprot)
                        self.thrift_attr_list.append(_elem649)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_inseg_entry_args')
        if self.thrift_inseg_entry is not None:
            oprot.writeFieldBegin('thrift_inseg_entry', TType.STRUCT, 1)
            self.thrift_inseg_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter650 in self.thrift_attr_list:
                iter650.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_inseg_entry_args)
sai_thrift_create_inseg_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_inseg_entry', [sai_thrift_inseg_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_inseg_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_inseg_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_inseg_entry_result)
sai_thrift_create_inseg_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_remove_inseg_entry_args(object):
    """
    Attributes:
     - thrift_inseg_entry

    """


    def __init__(self, thrift_inseg_entry=None,):
        self.thrift_inseg_entry = thrift_inseg_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_inseg_entry = sai_thrift_inseg_entry_t()
                    self.thrift_inseg_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_inseg_entry_args')
        if self.thrift_inseg_entry is not None:
            oprot.writeFieldBegin('thrift_inseg_entry', TType.STRUCT, 1)
            self.thrift_inseg_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_inseg_entry_args)
sai_thrift_remove_inseg_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_inseg_entry', [sai_thrift_inseg_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_inseg_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_inseg_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_inseg_entry_result)
sai_thrift_remove_inseg_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_inseg_entry_attribute_args(object):
    """
    Attributes:
     - thrift_inseg_entry
     - thrift_attr

    """


    def __init__(self, thrift_inseg_entry=None, thrift_attr=None,):
        self.thrift_inseg_entry = thrift_inseg_entry
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_inseg_entry = sai_thrift_inseg_entry_t()
                    self.thrift_inseg_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_inseg_entry_attribute_args')
        if self.thrift_inseg_entry is not None:
            oprot.writeFieldBegin('thrift_inseg_entry', TType.STRUCT, 1)
            self.thrift_inseg_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_inseg_entry_attribute_args)
sai_thrift_set_inseg_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_inseg_entry', [sai_thrift_inseg_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_inseg_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_inseg_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_inseg_entry_attribute_result)
sai_thrift_set_inseg_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_inseg_entry_attribute_args(object):
    """
    Attributes:
     - thrift_inseg_entry

    """


    def __init__(self, thrift_inseg_entry=None,):
        self.thrift_inseg_entry = thrift_inseg_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_inseg_entry = sai_thrift_inseg_entry_t()
                    self.thrift_inseg_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_inseg_entry_attribute_args')
        if self.thrift_inseg_entry is not None:
            oprot.writeFieldBegin('thrift_inseg_entry', TType.STRUCT, 1)
            self.thrift_inseg_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_inseg_entry_attribute_args)
sai_thrift_get_inseg_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_inseg_entry', [sai_thrift_inseg_entry_t, None], None, ),  # 1
)


class sai_thrift_get_inseg_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_inseg_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_inseg_entry_attribute_result)
sai_thrift_get_inseg_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_dump_log_args(object):
    """
    Attributes:
     - dump_file_name

    """


    def __init__(self, dump_file_name=None,):
        self.dump_file_name = dump_file_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.dump_file_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_dump_log_args')
        if self.dump_file_name is not None:
            oprot.writeFieldBegin('dump_file_name', TType.STRING, 1)
            oprot.writeString(self.dump_file_name.encode('utf-8') if sys.version_info[0] == 2 else self.dump_file_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_dump_log_args)
sai_thrift_dump_log_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dump_file_name', 'UTF8', None, ),  # 1
)


class sai_thrift_dump_log_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_dump_log_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_dump_log_result)
sai_thrift_dump_log_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_policer_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype654, _size651) = iprot.readListBegin()
                    for _i655 in range(_size651):
                        _elem656 = sai_thrift_attribute_t()
                        _elem656.read(iprot)
                        self.thrift_attr_list.append(_elem656)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_policer_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter657 in self.thrift_attr_list:
                iter657.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_policer_args)
sai_thrift_create_policer_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_policer_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_policer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_policer_result)
sai_thrift_create_policer_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_policer_args(object):
    """
    Attributes:
     - thrift_policer_id

    """


    def __init__(self, thrift_policer_id=None,):
        self.thrift_policer_id = thrift_policer_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_policer_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_policer_args')
        if self.thrift_policer_id is not None:
            oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
            oprot.writeI64(self.thrift_policer_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_policer_args)
sai_thrift_remove_policer_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ),  # 1
)


class sai_thrift_remove_policer_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_policer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_policer_result)
sai_thrift_remove_policer_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_policer_attribute_args(object):
    """
    Attributes:
     - thrift_policer_id

    """


    def __init__(self, thrift_policer_id=None,):
        self.thrift_policer_id = thrift_policer_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_policer_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_attribute_args')
        if self.thrift_policer_id is not None:
            oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
            oprot.writeI64(self.thrift_policer_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_attribute_args)
sai_thrift_get_policer_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ),  # 1
)


class sai_thrift_get_policer_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_attribute_result)
sai_thrift_get_policer_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_policer_attribute_args(object):
    """
    Attributes:
     - thrift_policer_id
     - thrift_attr

    """


    def __init__(self, thrift_policer_id=None, thrift_attr=None,):
        self.thrift_policer_id = thrift_policer_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_policer_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_policer_attribute_args')
        if self.thrift_policer_id is not None:
            oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
            oprot.writeI64(self.thrift_policer_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_policer_attribute_args)
sai_thrift_set_policer_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_policer_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_policer_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_policer_attribute_result)
sai_thrift_set_policer_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_policer_stats_args(object):
    """
    Attributes:
     - thrift_policer_id
     - thrift_counter_ids

    """


    def __init__(self, thrift_policer_id=None, thrift_counter_ids=None,):
        self.thrift_policer_id = thrift_policer_id
        self.thrift_counter_ids = thrift_counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_policer_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype661, _size658) = iprot.readListBegin()
                    for _i662 in range(_size658):
                        _elem663 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem663)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_stats_args')
        if self.thrift_policer_id is not None:
            oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
            oprot.writeI64(self.thrift_policer_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter664 in self.thrift_counter_ids:
                oprot.writeI32(iter664)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_stats_args)
sai_thrift_get_policer_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_policer_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype668, _size665) = iprot.readListBegin()
                    for _i669 in range(_size665):
                        _elem670 = iprot.readI64()
                        self.success.append(_elem670)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter671 in self.success:
                oprot.writeI64(iter671)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_stats_result)
sai_thrift_get_policer_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_get_policer_stats_ext_args(object):
    """
    Attributes:
     - thrift_policer_id
     - thrift_counter_ids
     - mode

    """


    def __init__(self, thrift_policer_id=None, thrift_counter_ids=None, mode=None,):
        self.thrift_policer_id = thrift_policer_id
        self.thrift_counter_ids = thrift_counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_policer_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype675, _size672) = iprot.readListBegin()
                    for _i676 in range(_size672):
                        _elem677 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem677)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_stats_ext_args')
        if self.thrift_policer_id is not None:
            oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
            oprot.writeI64(self.thrift_policer_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter678 in self.thrift_counter_ids:
                oprot.writeI32(iter678)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_stats_ext_args)
sai_thrift_get_policer_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
)


class sai_thrift_get_policer_stats_ext_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype682, _size679) = iprot.readListBegin()
                    for _i683 in range(_size679):
                        _elem684 = iprot.readI64()
                        self.success.append(_elem684)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter685 in self.success:
                oprot.writeI64(iter685)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_stats_ext_result)
sai_thrift_get_policer_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_clear_policer_stats_args(object):
    """
    Attributes:
     - thrift_policer_id
     - thrift_counter_ids

    """


    def __init__(self, thrift_policer_id=None, thrift_counter_ids=None,):
        self.thrift_policer_id = thrift_policer_id
        self.thrift_counter_ids = thrift_counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_policer_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype689, _size686) = iprot.readListBegin()
                    for _i690 in range(_size686):
                        _elem691 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem691)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_policer_stats_args')
        if self.thrift_policer_id is not None:
            oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
            oprot.writeI64(self.thrift_policer_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter692 in self.thrift_counter_ids:
                oprot.writeI32(iter692)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_policer_stats_args)
sai_thrift_clear_policer_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_policer_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_policer_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_policer_stats_result)
sai_thrift_clear_policer_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_scheduler_profile_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype696, _size693) = iprot.readListBegin()
                    for _i697 in range(_size693):
                        _elem698 = sai_thrift_attribute_t()
                        _elem698.read(iprot)
                        self.thrift_attr_list.append(_elem698)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_scheduler_profile_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter699 in self.thrift_attr_list:
                iter699.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_scheduler_profile_args)
sai_thrift_create_scheduler_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_scheduler_profile_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_scheduler_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_scheduler_profile_result)
sai_thrift_create_scheduler_profile_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_scheduler_profile_args(object):
    """
    Attributes:
     - scheduler_id

    """


    def __init__(self, scheduler_id=None,):
        self.scheduler_id = scheduler_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_scheduler_profile_args')
        if self.scheduler_id is not None:
            oprot.writeFieldBegin('scheduler_id', TType.I64, 1)
            oprot.writeI64(self.scheduler_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_scheduler_profile_args)
sai_thrift_remove_scheduler_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_id', None, None, ),  # 1
)


class sai_thrift_remove_scheduler_profile_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_scheduler_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_scheduler_profile_result)
sai_thrift_remove_scheduler_profile_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_scheduler_attribute_args(object):
    """
    Attributes:
     - thrift_scheduler_id

    """


    def __init__(self, thrift_scheduler_id=None,):
        self.thrift_scheduler_id = thrift_scheduler_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_scheduler_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_scheduler_attribute_args')
        if self.thrift_scheduler_id is not None:
            oprot.writeFieldBegin('thrift_scheduler_id', TType.I64, 1)
            oprot.writeI64(self.thrift_scheduler_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_scheduler_attribute_args)
sai_thrift_get_scheduler_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_scheduler_id', None, None, ),  # 1
)


class sai_thrift_get_scheduler_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_scheduler_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_scheduler_attribute_result)
sai_thrift_get_scheduler_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_scheduler_attribute_args(object):
    """
    Attributes:
     - thrift_scheduler_id
     - thrift_attr

    """


    def __init__(self, thrift_scheduler_id=None, thrift_attr=None,):
        self.thrift_scheduler_id = thrift_scheduler_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_scheduler_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_scheduler_attribute_args')
        if self.thrift_scheduler_id is not None:
            oprot.writeFieldBegin('thrift_scheduler_id', TType.I64, 1)
            oprot.writeI64(self.thrift_scheduler_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_scheduler_attribute_args)
sai_thrift_set_scheduler_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_scheduler_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_scheduler_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_scheduler_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_scheduler_attribute_result)
sai_thrift_set_scheduler_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_scheduler_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype703, _size700) = iprot.readListBegin()
                    for _i704 in range(_size700):
                        _elem705 = sai_thrift_attribute_t()
                        _elem705.read(iprot)
                        self.thrift_attr_list.append(_elem705)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_scheduler_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter706 in self.thrift_attr_list:
                iter706.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_scheduler_group_args)
sai_thrift_create_scheduler_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_scheduler_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_scheduler_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_scheduler_group_result)
sai_thrift_create_scheduler_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_scheduler_group_args(object):
    """
    Attributes:
     - scheduler_group_id

    """


    def __init__(self, scheduler_group_id=None,):
        self.scheduler_group_id = scheduler_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_scheduler_group_args')
        if self.scheduler_group_id is not None:
            oprot.writeFieldBegin('scheduler_group_id', TType.I64, 1)
            oprot.writeI64(self.scheduler_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_scheduler_group_args)
sai_thrift_remove_scheduler_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_group_id', None, None, ),  # 1
)


class sai_thrift_remove_scheduler_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_scheduler_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_scheduler_group_result)
sai_thrift_remove_scheduler_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_scheduler_group_attribute_args(object):
    """
    Attributes:
     - scheduler_group_id

    """


    def __init__(self, scheduler_group_id=None,):
        self.scheduler_group_id = scheduler_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_scheduler_group_attribute_args')
        if self.scheduler_group_id is not None:
            oprot.writeFieldBegin('scheduler_group_id', TType.I64, 1)
            oprot.writeI64(self.scheduler_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_scheduler_group_attribute_args)
sai_thrift_get_scheduler_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_group_id', None, None, ),  # 1
)


class sai_thrift_get_scheduler_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_scheduler_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_scheduler_group_attribute_result)
sai_thrift_get_scheduler_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_scheduler_group_attribute_args(object):
    """
    Attributes:
     - scheduler_group_id
     - thrift_attr

    """


    def __init__(self, scheduler_group_id=None, thrift_attr=None,):
        self.scheduler_group_id = scheduler_group_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_scheduler_group_attribute_args')
        if self.scheduler_group_id is not None:
            oprot.writeFieldBegin('scheduler_group_id', TType.I64, 1)
            oprot.writeI64(self.scheduler_group_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_scheduler_group_attribute_args)
sai_thrift_set_scheduler_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_group_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_scheduler_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_scheduler_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_scheduler_group_attribute_result)
sai_thrift_set_scheduler_group_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_queue_stats_args(object):
    """
    Attributes:
     - queue_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, queue_id=None, counter_ids=None, number_of_counters=None,):
        self.queue_id = queue_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype710, _size707) = iprot.readListBegin()
                    for _i711 in range(_size707):
                        _elem712 = iprot.readI32()
                        self.counter_ids.append(_elem712)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_stats_args')
        if self.queue_id is not None:
            oprot.writeFieldBegin('queue_id', TType.I64, 1)
            oprot.writeI64(self.queue_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter713 in self.counter_ids:
                oprot.writeI32(iter713)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_stats_args)
sai_thrift_get_queue_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_get_queue_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype717, _size714) = iprot.readListBegin()
                    for _i718 in range(_size714):
                        _elem719 = iprot.readI64()
                        self.success.append(_elem719)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter720 in self.success:
                oprot.writeI64(iter720)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_stats_result)
sai_thrift_get_queue_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_clear_queue_stats_args(object):
    """
    Attributes:
     - queue_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, queue_id=None, counter_ids=None, number_of_counters=None,):
        self.queue_id = queue_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype724, _size721) = iprot.readListBegin()
                    for _i725 in range(_size721):
                        _elem726 = iprot.readI32()
                        self.counter_ids.append(_elem726)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_queue_stats_args')
        if self.queue_id is not None:
            oprot.writeFieldBegin('queue_id', TType.I64, 1)
            oprot.writeI64(self.queue_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter727 in self.counter_ids:
                oprot.writeI32(iter727)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_queue_stats_args)
sai_thrift_clear_queue_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_clear_queue_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_queue_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_queue_stats_result)
sai_thrift_clear_queue_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_queue_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype731, _size728) = iprot.readListBegin()
                    for _i732 in range(_size728):
                        _elem733 = sai_thrift_attribute_t()
                        _elem733.read(iprot)
                        self.thrift_attr_list.append(_elem733)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_queue_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter734 in self.thrift_attr_list:
                iter734.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_queue_args)
sai_thrift_create_queue_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_queue_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_queue_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_queue_result)
sai_thrift_create_queue_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_queue_args(object):
    """
    Attributes:
     - queue_id

    """


    def __init__(self, queue_id=None,):
        self.queue_id = queue_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_queue_args')
        if self.queue_id is not None:
            oprot.writeFieldBegin('queue_id', TType.I64, 1)
            oprot.writeI64(self.queue_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_queue_args)
sai_thrift_remove_queue_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_id', None, None, ),  # 1
)


class sai_thrift_remove_queue_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_queue_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_queue_result)
sai_thrift_remove_queue_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_queue_attribute_args(object):
    """
    Attributes:
     - queue_id

    """


    def __init__(self, queue_id=None,):
        self.queue_id = queue_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_attribute_args')
        if self.queue_id is not None:
            oprot.writeFieldBegin('queue_id', TType.I64, 1)
            oprot.writeI64(self.queue_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_attribute_args)
sai_thrift_get_queue_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_id', None, None, ),  # 1
)


class sai_thrift_get_queue_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_attribute_result)
sai_thrift_get_queue_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_queue_attribute_args(object):
    """
    Attributes:
     - queue_id
     - thrift_attr

    """


    def __init__(self, queue_id=None, thrift_attr=None,):
        self.queue_id = queue_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_queue_attribute_args')
        if self.queue_id is not None:
            oprot.writeFieldBegin('queue_id', TType.I64, 1)
            oprot.writeI64(self.queue_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_queue_attribute_args)
sai_thrift_set_queue_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_queue_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_queue_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_queue_attribute_result)
sai_thrift_set_queue_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_buffer_profile_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype738, _size735) = iprot.readListBegin()
                    for _i739 in range(_size735):
                        _elem740 = sai_thrift_attribute_t()
                        _elem740.read(iprot)
                        self.thrift_attr_list.append(_elem740)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_buffer_profile_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter741 in self.thrift_attr_list:
                iter741.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_buffer_profile_args)
sai_thrift_create_buffer_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_buffer_profile_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_buffer_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_buffer_profile_result)
sai_thrift_create_buffer_profile_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_buffer_profile_args(object):
    """
    Attributes:
     - buffer_profile_id

    """


    def __init__(self, buffer_profile_id=None,):
        self.buffer_profile_id = buffer_profile_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_profile_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_buffer_profile_args')
        if self.buffer_profile_id is not None:
            oprot.writeFieldBegin('buffer_profile_id', TType.I64, 1)
            oprot.writeI64(self.buffer_profile_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_buffer_profile_args)
sai_thrift_remove_buffer_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_profile_id', None, None, ),  # 1
)


class sai_thrift_remove_buffer_profile_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_buffer_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_buffer_profile_result)
sai_thrift_remove_buffer_profile_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_buffer_profile_attribute_args(object):
    """
    Attributes:
     - buffer_profile_id

    """


    def __init__(self, buffer_profile_id=None,):
        self.buffer_profile_id = buffer_profile_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_profile_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_profile_attribute_args')
        if self.buffer_profile_id is not None:
            oprot.writeFieldBegin('buffer_profile_id', TType.I64, 1)
            oprot.writeI64(self.buffer_profile_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_profile_attribute_args)
sai_thrift_get_buffer_profile_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_profile_id', None, None, ),  # 1
)


class sai_thrift_get_buffer_profile_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_profile_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_profile_attribute_result)
sai_thrift_get_buffer_profile_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_buffer_profile_attribute_args(object):
    """
    Attributes:
     - buffer_profile_id
     - thrift_attr

    """


    def __init__(self, buffer_profile_id=None, thrift_attr=None,):
        self.buffer_profile_id = buffer_profile_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_profile_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_buffer_profile_attribute_args')
        if self.buffer_profile_id is not None:
            oprot.writeFieldBegin('buffer_profile_id', TType.I64, 1)
            oprot.writeI64(self.buffer_profile_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_buffer_profile_attribute_args)
sai_thrift_set_buffer_profile_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_profile_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_buffer_profile_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_buffer_profile_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_buffer_profile_attribute_result)
sai_thrift_set_buffer_profile_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_pool_profile_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype745, _size742) = iprot.readListBegin()
                    for _i746 in range(_size742):
                        _elem747 = sai_thrift_attribute_t()
                        _elem747.read(iprot)
                        self.thrift_attr_list.append(_elem747)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_pool_profile_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter748 in self.thrift_attr_list:
                iter748.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_pool_profile_args)
sai_thrift_create_pool_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_pool_profile_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_pool_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_pool_profile_result)
sai_thrift_create_pool_profile_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_create_priority_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype752, _size749) = iprot.readListBegin()
                    for _i753 in range(_size749):
                        _elem754 = sai_thrift_attribute_t()
                        _elem754.read(iprot)
                        self.thrift_attr_list.append(_elem754)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_priority_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter755 in self.thrift_attr_list:
                iter755.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_priority_group_args)
sai_thrift_create_priority_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_priority_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_priority_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_priority_group_result)
sai_thrift_create_priority_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_priority_group_args(object):
    """
    Attributes:
     - priority_group_id

    """


    def __init__(self, priority_group_id=None,):
        self.priority_group_id = priority_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.priority_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_priority_group_args')
        if self.priority_group_id is not None:
            oprot.writeFieldBegin('priority_group_id', TType.I64, 1)
            oprot.writeI64(self.priority_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_priority_group_args)
sai_thrift_remove_priority_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'priority_group_id', None, None, ),  # 1
)


class sai_thrift_remove_priority_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_priority_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_priority_group_result)
sai_thrift_remove_priority_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_priority_group_attribute_args(object):
    """
    Attributes:
     - priority_group_id

    """


    def __init__(self, priority_group_id=None,):
        self.priority_group_id = priority_group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.priority_group_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_priority_group_attribute_args')
        if self.priority_group_id is not None:
            oprot.writeFieldBegin('priority_group_id', TType.I64, 1)
            oprot.writeI64(self.priority_group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_priority_group_attribute_args)
sai_thrift_get_priority_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'priority_group_id', None, None, ),  # 1
)


class sai_thrift_get_priority_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_priority_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_priority_group_attribute_result)
sai_thrift_get_priority_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_priority_group_attribute_args(object):
    """
    Attributes:
     - pg_id
     - thrift_attr

    """


    def __init__(self, pg_id=None, thrift_attr=None,):
        self.pg_id = pg_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.pg_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_priority_group_attribute_args')
        if self.pg_id is not None:
            oprot.writeFieldBegin('pg_id', TType.I64, 1)
            oprot.writeI64(self.pg_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_priority_group_attribute_args)
sai_thrift_set_priority_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'pg_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_priority_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_priority_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_priority_group_attribute_result)
sai_thrift_set_priority_group_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_pg_stats_args(object):
    """
    Attributes:
     - pg_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, pg_id=None, counter_ids=None, number_of_counters=None,):
        self.pg_id = pg_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.pg_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype759, _size756) = iprot.readListBegin()
                    for _i760 in range(_size756):
                        _elem761 = iprot.readI32()
                        self.counter_ids.append(_elem761)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_pg_stats_args')
        if self.pg_id is not None:
            oprot.writeFieldBegin('pg_id', TType.I64, 1)
            oprot.writeI64(self.pg_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter762 in self.counter_ids:
                oprot.writeI32(iter762)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_pg_stats_args)
sai_thrift_get_pg_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'pg_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_get_pg_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype766, _size763) = iprot.readListBegin()
                    for _i767 in range(_size763):
                        _elem768 = iprot.readI64()
                        self.success.append(_elem768)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_pg_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter769 in self.success:
                oprot.writeI64(iter769)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_pg_stats_result)
sai_thrift_get_pg_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_create_wred_profile_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype773, _size770) = iprot.readListBegin()
                    for _i774 in range(_size770):
                        _elem775 = sai_thrift_attribute_t()
                        _elem775.read(iprot)
                        self.thrift_attr_list.append(_elem775)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_wred_profile_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter776 in self.thrift_attr_list:
                iter776.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_wred_profile_args)
sai_thrift_create_wred_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_wred_profile_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_wred_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_wred_profile_result)
sai_thrift_create_wred_profile_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_wred_profile_args(object):
    """
    Attributes:
     - wred_id

    """


    def __init__(self, wred_id=None,):
        self.wred_id = wred_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.wred_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_wred_profile_args')
        if self.wred_id is not None:
            oprot.writeFieldBegin('wred_id', TType.I64, 1)
            oprot.writeI64(self.wred_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_wred_profile_args)
sai_thrift_remove_wred_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'wred_id', None, None, ),  # 1
)


class sai_thrift_remove_wred_profile_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_wred_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_wred_profile_result)
sai_thrift_remove_wred_profile_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_wred_attribute_profile_args(object):
    """
    Attributes:
     - wred_id

    """


    def __init__(self, wred_id=None,):
        self.wred_id = wred_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.wred_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_wred_attribute_profile_args')
        if self.wred_id is not None:
            oprot.writeFieldBegin('wred_id', TType.I64, 1)
            oprot.writeI64(self.wred_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_wred_attribute_profile_args)
sai_thrift_get_wred_attribute_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'wred_id', None, None, ),  # 1
)


class sai_thrift_get_wred_attribute_profile_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_wred_attribute_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_wred_attribute_profile_result)
sai_thrift_get_wred_attribute_profile_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_wred_attribute_profile_args(object):
    """
    Attributes:
     - wred_id
     - thrift_attr

    """


    def __init__(self, wred_id=None, thrift_attr=None,):
        self.wred_id = wred_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.wred_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_wred_attribute_profile_args')
        if self.wred_id is not None:
            oprot.writeFieldBegin('wred_id', TType.I64, 1)
            oprot.writeI64(self.wred_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_wred_attribute_profile_args)
sai_thrift_set_wred_attribute_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'wred_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_wred_attribute_profile_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_wred_attribute_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_wred_attribute_profile_result)
sai_thrift_set_wred_attribute_profile_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_qos_map_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype780, _size777) = iprot.readListBegin()
                    for _i781 in range(_size777):
                        _elem782 = sai_thrift_attribute_t()
                        _elem782.read(iprot)
                        self.thrift_attr_list.append(_elem782)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_qos_map_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter783 in self.thrift_attr_list:
                iter783.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_qos_map_args)
sai_thrift_create_qos_map_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_qos_map_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_qos_map_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_qos_map_result)
sai_thrift_create_qos_map_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_qos_map_args(object):
    """
    Attributes:
     - qos_map_id

    """


    def __init__(self, qos_map_id=None,):
        self.qos_map_id = qos_map_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.qos_map_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_qos_map_args')
        if self.qos_map_id is not None:
            oprot.writeFieldBegin('qos_map_id', TType.I64, 1)
            oprot.writeI64(self.qos_map_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_qos_map_args)
sai_thrift_remove_qos_map_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'qos_map_id', None, None, ),  # 1
)


class sai_thrift_remove_qos_map_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_qos_map_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_qos_map_result)
sai_thrift_remove_qos_map_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_qos_map_attribute_args(object):
    """
    Attributes:
     - qos_map_id

    """


    def __init__(self, qos_map_id=None,):
        self.qos_map_id = qos_map_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.qos_map_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_qos_map_attribute_args')
        if self.qos_map_id is not None:
            oprot.writeFieldBegin('qos_map_id', TType.I64, 1)
            oprot.writeI64(self.qos_map_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_qos_map_attribute_args)
sai_thrift_get_qos_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'qos_map_id', None, None, ),  # 1
)


class sai_thrift_get_qos_map_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_qos_map_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_qos_map_attribute_result)
sai_thrift_get_qos_map_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_qos_map_attribute_args(object):
    """
    Attributes:
     - qos_map_id
     - thrift_attr

    """


    def __init__(self, qos_map_id=None, thrift_attr=None,):
        self.qos_map_id = qos_map_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.qos_map_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_qos_map_attribute_args')
        if self.qos_map_id is not None:
            oprot.writeFieldBegin('qos_map_id', TType.I64, 1)
            oprot.writeI64(self.qos_map_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_qos_map_attribute_args)
sai_thrift_set_qos_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'qos_map_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_qos_map_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_qos_map_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_qos_map_attribute_result)
sai_thrift_set_qos_map_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_l2mc_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype787, _size784) = iprot.readListBegin()
                    for _i788 in range(_size784):
                        _elem789 = sai_thrift_attribute_t()
                        _elem789.read(iprot)
                        self.thrift_attr_list.append(_elem789)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter790 in self.thrift_attr_list:
                iter790.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_group_args)
sai_thrift_create_l2mc_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_l2mc_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_group_result)
sai_thrift_create_l2mc_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_l2mc_group_args(object):
    """
    Attributes:
     - grp_id

    """


    def __init__(self, grp_id=None,):
        self.grp_id = grp_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.grp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_group_args')
        if self.grp_id is not None:
            oprot.writeFieldBegin('grp_id', TType.I64, 1)
            oprot.writeI64(self.grp_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_group_args)
sai_thrift_remove_l2mc_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'grp_id', None, None, ),  # 1
)


class sai_thrift_remove_l2mc_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_group_result)
sai_thrift_remove_l2mc_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_l2mc_group_attribute_args(object):
    """
    Attributes:
     - grp_id

    """


    def __init__(self, grp_id=None,):
        self.grp_id = grp_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.grp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_group_attribute_args')
        if self.grp_id is not None:
            oprot.writeFieldBegin('grp_id', TType.I64, 1)
            oprot.writeI64(self.grp_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_group_attribute_args)
sai_thrift_get_l2mc_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'grp_id', None, None, ),  # 1
)


class sai_thrift_get_l2mc_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_group_attribute_result)
sai_thrift_get_l2mc_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_l2mc_group_member_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype794, _size791) = iprot.readListBegin()
                    for _i795 in range(_size791):
                        _elem796 = sai_thrift_attribute_t()
                        _elem796.read(iprot)
                        self.thrift_attr_list.append(_elem796)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_group_member_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter797 in self.thrift_attr_list:
                iter797.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_group_member_args)
sai_thrift_create_l2mc_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_l2mc_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_group_member_result)
sai_thrift_create_l2mc_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_l2mc_group_member_args(object):
    """
    Attributes:
     - member_id

    """


    def __init__(self, member_id=None,):
        self.member_id = member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_group_member_args')
        if self.member_id is not None:
            oprot.writeFieldBegin('member_id', TType.I64, 1)
            oprot.writeI64(self.member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_group_member_args)
sai_thrift_remove_l2mc_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_id', None, None, ),  # 1
)


class sai_thrift_remove_l2mc_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_group_member_result)
sai_thrift_remove_l2mc_group_member_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_l2mc_group_member_attribute_args(object):
    """
    Attributes:
     - member_id
     - thrift_attr

    """


    def __init__(self, member_id=None, thrift_attr=None,):
        self.member_id = member_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_group_member_attribute_args')
        if self.member_id is not None:
            oprot.writeFieldBegin('member_id', TType.I64, 1)
            oprot.writeI64(self.member_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_group_member_attribute_args)
sai_thrift_set_l2mc_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_l2mc_group_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_group_member_attribute_result)
sai_thrift_set_l2mc_group_member_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_l2mc_group_member_attribute_args(object):
    """
    Attributes:
     - member_id

    """


    def __init__(self, member_id=None,):
        self.member_id = member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_group_member_attribute_args')
        if self.member_id is not None:
            oprot.writeFieldBegin('member_id', TType.I64, 1)
            oprot.writeI64(self.member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_group_member_attribute_args)
sai_thrift_get_l2mc_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_id', None, None, ),  # 1
)


class sai_thrift_get_l2mc_group_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_group_member_attribute_result)
sai_thrift_get_l2mc_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_l2mc_entry_args(object):
    """
    Attributes:
     - thrift_l2mc_entry
     - thrift_attr_list

    """


    def __init__(self, thrift_l2mc_entry=None, thrift_attr_list=None,):
        self.thrift_l2mc_entry = thrift_l2mc_entry
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_l2mc_entry = sai_thrift_l2mc_entry_t()
                    self.thrift_l2mc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype801, _size798) = iprot.readListBegin()
                    for _i802 in range(_size798):
                        _elem803 = sai_thrift_attribute_t()
                        _elem803.read(iprot)
                        self.thrift_attr_list.append(_elem803)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_entry_args')
        if self.thrift_l2mc_entry is not None:
            oprot.writeFieldBegin('thrift_l2mc_entry', TType.STRUCT, 1)
            self.thrift_l2mc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter804 in self.thrift_attr_list:
                iter804.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_entry_args)
sai_thrift_create_l2mc_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_l2mc_entry', [sai_thrift_l2mc_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_l2mc_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_entry_result)
sai_thrift_create_l2mc_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_remove_l2mc_entry_args(object):
    """
    Attributes:
     - thrift_l2mc_entry

    """


    def __init__(self, thrift_l2mc_entry=None,):
        self.thrift_l2mc_entry = thrift_l2mc_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_l2mc_entry = sai_thrift_l2mc_entry_t()
                    self.thrift_l2mc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_entry_args')
        if self.thrift_l2mc_entry is not None:
            oprot.writeFieldBegin('thrift_l2mc_entry', TType.STRUCT, 1)
            self.thrift_l2mc_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_entry_args)
sai_thrift_remove_l2mc_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_l2mc_entry', [sai_thrift_l2mc_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_l2mc_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_entry_result)
sai_thrift_remove_l2mc_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_l2mc_entry_attribute_args(object):
    """
    Attributes:
     - thrift_l2mc_entry
     - thrift_attr

    """


    def __init__(self, thrift_l2mc_entry=None, thrift_attr=None,):
        self.thrift_l2mc_entry = thrift_l2mc_entry
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_l2mc_entry = sai_thrift_l2mc_entry_t()
                    self.thrift_l2mc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_entry_attribute_args')
        if self.thrift_l2mc_entry is not None:
            oprot.writeFieldBegin('thrift_l2mc_entry', TType.STRUCT, 1)
            self.thrift_l2mc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_entry_attribute_args)
sai_thrift_set_l2mc_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_l2mc_entry', [sai_thrift_l2mc_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_l2mc_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_entry_attribute_result)
sai_thrift_set_l2mc_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_l2mc_entry_attribute_args(object):
    """
    Attributes:
     - thrift_l2mc_entry

    """


    def __init__(self, thrift_l2mc_entry=None,):
        self.thrift_l2mc_entry = thrift_l2mc_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_l2mc_entry = sai_thrift_l2mc_entry_t()
                    self.thrift_l2mc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_entry_attribute_args')
        if self.thrift_l2mc_entry is not None:
            oprot.writeFieldBegin('thrift_l2mc_entry', TType.STRUCT, 1)
            self.thrift_l2mc_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_entry_attribute_args)
sai_thrift_get_l2mc_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_l2mc_entry', [sai_thrift_l2mc_entry_t, None], None, ),  # 1
)


class sai_thrift_get_l2mc_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_entry_attribute_result)
sai_thrift_get_l2mc_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_mcast_fdb_entry_args(object):
    """
    Attributes:
     - thrift_mcast_fdb_entry
     - thrift_attr_list

    """


    def __init__(self, thrift_mcast_fdb_entry=None, thrift_attr_list=None,):
        self.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
                    self.thrift_mcast_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype808, _size805) = iprot.readListBegin()
                    for _i809 in range(_size805):
                        _elem810 = sai_thrift_attribute_t()
                        _elem810.read(iprot)
                        self.thrift_attr_list.append(_elem810)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_mcast_fdb_entry_args')
        if self.thrift_mcast_fdb_entry is not None:
            oprot.writeFieldBegin('thrift_mcast_fdb_entry', TType.STRUCT, 1)
            self.thrift_mcast_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter811 in self.thrift_attr_list:
                iter811.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_mcast_fdb_entry_args)
sai_thrift_create_mcast_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_mcast_fdb_entry', [sai_thrift_mcast_fdb_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_mcast_fdb_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_mcast_fdb_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_mcast_fdb_entry_result)
sai_thrift_create_mcast_fdb_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_remove_mcast_fdb_entry_args(object):
    """
    Attributes:
     - thrift_mcast_fdb_entry

    """


    def __init__(self, thrift_mcast_fdb_entry=None,):
        self.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
                    self.thrift_mcast_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_mcast_fdb_entry_args')
        if self.thrift_mcast_fdb_entry is not None:
            oprot.writeFieldBegin('thrift_mcast_fdb_entry', TType.STRUCT, 1)
            self.thrift_mcast_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_mcast_fdb_entry_args)
sai_thrift_remove_mcast_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_mcast_fdb_entry', [sai_thrift_mcast_fdb_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_mcast_fdb_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_mcast_fdb_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_mcast_fdb_entry_result)
sai_thrift_remove_mcast_fdb_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_mcast_fdb_entry_attribute_args(object):
    """
    Attributes:
     - thrift_mcast_fdb_entry
     - thrift_attr

    """


    def __init__(self, thrift_mcast_fdb_entry=None, thrift_attr=None,):
        self.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
                    self.thrift_mcast_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_mcast_fdb_entry_attribute_args')
        if self.thrift_mcast_fdb_entry is not None:
            oprot.writeFieldBegin('thrift_mcast_fdb_entry', TType.STRUCT, 1)
            self.thrift_mcast_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_mcast_fdb_entry_attribute_args)
sai_thrift_set_mcast_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_mcast_fdb_entry', [sai_thrift_mcast_fdb_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_mcast_fdb_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_mcast_fdb_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_mcast_fdb_entry_attribute_result)
sai_thrift_set_mcast_fdb_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_mcast_fdb_entry_attribute_args(object):
    """
    Attributes:
     - thrift_mcast_fdb_entry

    """


    def __init__(self, thrift_mcast_fdb_entry=None,):
        self.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
                    self.thrift_mcast_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_mcast_fdb_entry_attribute_args')
        if self.thrift_mcast_fdb_entry is not None:
            oprot.writeFieldBegin('thrift_mcast_fdb_entry', TType.STRUCT, 1)
            self.thrift_mcast_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_mcast_fdb_entry_attribute_args)
sai_thrift_get_mcast_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_mcast_fdb_entry', [sai_thrift_mcast_fdb_entry_t, None], None, ),  # 1
)


class sai_thrift_get_mcast_fdb_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_mcast_fdb_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_mcast_fdb_entry_attribute_result)
sai_thrift_get_mcast_fdb_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_ipmc_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype815, _size812) = iprot.readListBegin()
                    for _i816 in range(_size812):
                        _elem817 = sai_thrift_attribute_t()
                        _elem817.read(iprot)
                        self.thrift_attr_list.append(_elem817)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter818 in self.thrift_attr_list:
                iter818.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_group_args)
sai_thrift_create_ipmc_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_ipmc_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_group_result)
sai_thrift_create_ipmc_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_ipmc_group_args(object):
    """
    Attributes:
     - grp_id

    """


    def __init__(self, grp_id=None,):
        self.grp_id = grp_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.grp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_group_args')
        if self.grp_id is not None:
            oprot.writeFieldBegin('grp_id', TType.I64, 1)
            oprot.writeI64(self.grp_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_group_args)
sai_thrift_remove_ipmc_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'grp_id', None, None, ),  # 1
)


class sai_thrift_remove_ipmc_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_group_result)
sai_thrift_remove_ipmc_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_ipmc_group_attribute_args(object):
    """
    Attributes:
     - grp_id

    """


    def __init__(self, grp_id=None,):
        self.grp_id = grp_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.grp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_group_attribute_args')
        if self.grp_id is not None:
            oprot.writeFieldBegin('grp_id', TType.I64, 1)
            oprot.writeI64(self.grp_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_group_attribute_args)
sai_thrift_get_ipmc_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'grp_id', None, None, ),  # 1
)


class sai_thrift_get_ipmc_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_group_attribute_result)
sai_thrift_get_ipmc_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_ipmc_group_member_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype822, _size819) = iprot.readListBegin()
                    for _i823 in range(_size819):
                        _elem824 = sai_thrift_attribute_t()
                        _elem824.read(iprot)
                        self.thrift_attr_list.append(_elem824)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_group_member_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter825 in self.thrift_attr_list:
                iter825.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_group_member_args)
sai_thrift_create_ipmc_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_ipmc_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_group_member_result)
sai_thrift_create_ipmc_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_ipmc_group_member_args(object):
    """
    Attributes:
     - member_id

    """


    def __init__(self, member_id=None,):
        self.member_id = member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_group_member_args')
        if self.member_id is not None:
            oprot.writeFieldBegin('member_id', TType.I64, 1)
            oprot.writeI64(self.member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_group_member_args)
sai_thrift_remove_ipmc_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_id', None, None, ),  # 1
)


class sai_thrift_remove_ipmc_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_group_member_result)
sai_thrift_remove_ipmc_group_member_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_ipmc_group_member_attribute_args(object):
    """
    Attributes:
     - member_id
     - thrift_attr

    """


    def __init__(self, member_id=None, thrift_attr=None,):
        self.member_id = member_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_group_member_attribute_args')
        if self.member_id is not None:
            oprot.writeFieldBegin('member_id', TType.I64, 1)
            oprot.writeI64(self.member_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_group_member_attribute_args)
sai_thrift_set_ipmc_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ipmc_group_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_group_member_attribute_result)
sai_thrift_set_ipmc_group_member_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_ipmc_group_member_attribute_args(object):
    """
    Attributes:
     - member_id

    """


    def __init__(self, member_id=None,):
        self.member_id = member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_group_member_attribute_args')
        if self.member_id is not None:
            oprot.writeFieldBegin('member_id', TType.I64, 1)
            oprot.writeI64(self.member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_group_member_attribute_args)
sai_thrift_get_ipmc_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_id', None, None, ),  # 1
)


class sai_thrift_get_ipmc_group_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_group_member_attribute_result)
sai_thrift_get_ipmc_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_rpf_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype829, _size826) = iprot.readListBegin()
                    for _i830 in range(_size826):
                        _elem831 = sai_thrift_attribute_t()
                        _elem831.read(iprot)
                        self.thrift_attr_list.append(_elem831)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_rpf_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter832 in self.thrift_attr_list:
                iter832.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_rpf_group_args)
sai_thrift_create_rpf_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_rpf_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_rpf_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_rpf_group_result)
sai_thrift_create_rpf_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_rpf_group_args(object):
    """
    Attributes:
     - grp_id

    """


    def __init__(self, grp_id=None,):
        self.grp_id = grp_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.grp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_rpf_group_args')
        if self.grp_id is not None:
            oprot.writeFieldBegin('grp_id', TType.I64, 1)
            oprot.writeI64(self.grp_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_rpf_group_args)
sai_thrift_remove_rpf_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'grp_id', None, None, ),  # 1
)


class sai_thrift_remove_rpf_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_rpf_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_rpf_group_result)
sai_thrift_remove_rpf_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_rpf_group_attribute_args(object):
    """
    Attributes:
     - grp_id

    """


    def __init__(self, grp_id=None,):
        self.grp_id = grp_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.grp_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_rpf_group_attribute_args')
        if self.grp_id is not None:
            oprot.writeFieldBegin('grp_id', TType.I64, 1)
            oprot.writeI64(self.grp_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_rpf_group_attribute_args)
sai_thrift_get_rpf_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'grp_id', None, None, ),  # 1
)


class sai_thrift_get_rpf_group_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_rpf_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_rpf_group_attribute_result)
sai_thrift_get_rpf_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_rpf_group_member_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype836, _size833) = iprot.readListBegin()
                    for _i837 in range(_size833):
                        _elem838 = sai_thrift_attribute_t()
                        _elem838.read(iprot)
                        self.thrift_attr_list.append(_elem838)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_rpf_group_member_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter839 in self.thrift_attr_list:
                iter839.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_rpf_group_member_args)
sai_thrift_create_rpf_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_rpf_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_rpf_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_rpf_group_member_result)
sai_thrift_create_rpf_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_rpf_group_member_args(object):
    """
    Attributes:
     - member_id

    """


    def __init__(self, member_id=None,):
        self.member_id = member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_rpf_group_member_args')
        if self.member_id is not None:
            oprot.writeFieldBegin('member_id', TType.I64, 1)
            oprot.writeI64(self.member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_rpf_group_member_args)
sai_thrift_remove_rpf_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_id', None, None, ),  # 1
)


class sai_thrift_remove_rpf_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_rpf_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_rpf_group_member_result)
sai_thrift_remove_rpf_group_member_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_rpf_group_member_attribute_args(object):
    """
    Attributes:
     - member_id
     - thrift_attr

    """


    def __init__(self, member_id=None, thrift_attr=None,):
        self.member_id = member_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_rpf_group_member_attribute_args')
        if self.member_id is not None:
            oprot.writeFieldBegin('member_id', TType.I64, 1)
            oprot.writeI64(self.member_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_rpf_group_member_attribute_args)
sai_thrift_set_rpf_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_rpf_group_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_rpf_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_rpf_group_member_attribute_result)
sai_thrift_set_rpf_group_member_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_rpf_group_member_attribute_args(object):
    """
    Attributes:
     - member_id

    """


    def __init__(self, member_id=None,):
        self.member_id = member_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_rpf_group_member_attribute_args')
        if self.member_id is not None:
            oprot.writeFieldBegin('member_id', TType.I64, 1)
            oprot.writeI64(self.member_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_rpf_group_member_attribute_args)
sai_thrift_get_rpf_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_id', None, None, ),  # 1
)


class sai_thrift_get_rpf_group_member_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_rpf_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_rpf_group_member_attribute_result)
sai_thrift_get_rpf_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_ipmc_entry_args(object):
    """
    Attributes:
     - thrift_ipmc_entry
     - thrift_attr_list

    """


    def __init__(self, thrift_ipmc_entry=None, thrift_attr_list=None,):
        self.thrift_ipmc_entry = thrift_ipmc_entry
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_ipmc_entry = sai_thrift_ipmc_entry_t()
                    self.thrift_ipmc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype843, _size840) = iprot.readListBegin()
                    for _i844 in range(_size840):
                        _elem845 = sai_thrift_attribute_t()
                        _elem845.read(iprot)
                        self.thrift_attr_list.append(_elem845)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_entry_args')
        if self.thrift_ipmc_entry is not None:
            oprot.writeFieldBegin('thrift_ipmc_entry', TType.STRUCT, 1)
            self.thrift_ipmc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter846 in self.thrift_attr_list:
                iter846.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_entry_args)
sai_thrift_create_ipmc_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_ipmc_entry', [sai_thrift_ipmc_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_ipmc_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_entry_result)
sai_thrift_create_ipmc_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_remove_ipmc_entry_args(object):
    """
    Attributes:
     - thrift_ipmc_entry

    """


    def __init__(self, thrift_ipmc_entry=None,):
        self.thrift_ipmc_entry = thrift_ipmc_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_ipmc_entry = sai_thrift_ipmc_entry_t()
                    self.thrift_ipmc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_entry_args')
        if self.thrift_ipmc_entry is not None:
            oprot.writeFieldBegin('thrift_ipmc_entry', TType.STRUCT, 1)
            self.thrift_ipmc_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_entry_args)
sai_thrift_remove_ipmc_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_ipmc_entry', [sai_thrift_ipmc_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_ipmc_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_entry_result)
sai_thrift_remove_ipmc_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_ipmc_entry_attribute_args(object):
    """
    Attributes:
     - thrift_ipmc_entry
     - thrift_attr

    """


    def __init__(self, thrift_ipmc_entry=None, thrift_attr=None,):
        self.thrift_ipmc_entry = thrift_ipmc_entry
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_ipmc_entry = sai_thrift_ipmc_entry_t()
                    self.thrift_ipmc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_entry_attribute_args')
        if self.thrift_ipmc_entry is not None:
            oprot.writeFieldBegin('thrift_ipmc_entry', TType.STRUCT, 1)
            self.thrift_ipmc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_entry_attribute_args)
sai_thrift_set_ipmc_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_ipmc_entry', [sai_thrift_ipmc_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ipmc_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_entry_attribute_result)
sai_thrift_set_ipmc_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_ipmc_entry_attribute_args(object):
    """
    Attributes:
     - thrift_ipmc_entry

    """


    def __init__(self, thrift_ipmc_entry=None,):
        self.thrift_ipmc_entry = thrift_ipmc_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_ipmc_entry = sai_thrift_ipmc_entry_t()
                    self.thrift_ipmc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_entry_attribute_args')
        if self.thrift_ipmc_entry is not None:
            oprot.writeFieldBegin('thrift_ipmc_entry', TType.STRUCT, 1)
            self.thrift_ipmc_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_entry_attribute_args)
sai_thrift_get_ipmc_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_ipmc_entry', [sai_thrift_ipmc_entry_t, None], None, ),  # 1
)


class sai_thrift_get_ipmc_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_entry_attribute_result)
sai_thrift_get_ipmc_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_samplepacket_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype850, _size847) = iprot.readListBegin()
                    for _i851 in range(_size847):
                        _elem852 = sai_thrift_attribute_t()
                        _elem852.read(iprot)
                        self.thrift_attr_list.append(_elem852)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_samplepacket_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter853 in self.thrift_attr_list:
                iter853.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_samplepacket_args)
sai_thrift_create_samplepacket_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_samplepacket_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_samplepacket_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_samplepacket_result)
sai_thrift_create_samplepacket_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_samplepacket_args(object):
    """
    Attributes:
     - samplepacket_id

    """


    def __init__(self, samplepacket_id=None,):
        self.samplepacket_id = samplepacket_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.samplepacket_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_samplepacket_args')
        if self.samplepacket_id is not None:
            oprot.writeFieldBegin('samplepacket_id', TType.I64, 1)
            oprot.writeI64(self.samplepacket_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_samplepacket_args)
sai_thrift_remove_samplepacket_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'samplepacket_id', None, None, ),  # 1
)


class sai_thrift_remove_samplepacket_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_samplepacket_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_samplepacket_result)
sai_thrift_remove_samplepacket_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_samplepacket_attribute_args(object):
    """
    Attributes:
     - samplepacket_id

    """


    def __init__(self, samplepacket_id=None,):
        self.samplepacket_id = samplepacket_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.samplepacket_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_samplepacket_attribute_args')
        if self.samplepacket_id is not None:
            oprot.writeFieldBegin('samplepacket_id', TType.I64, 1)
            oprot.writeI64(self.samplepacket_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_samplepacket_attribute_args)
sai_thrift_get_samplepacket_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'samplepacket_id', None, None, ),  # 1
)


class sai_thrift_get_samplepacket_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_samplepacket_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_samplepacket_attribute_result)
sai_thrift_get_samplepacket_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_samplepacket_attribute_args(object):
    """
    Attributes:
     - samplepacket_id
     - thrift_attr

    """


    def __init__(self, samplepacket_id=None, thrift_attr=None,):
        self.samplepacket_id = samplepacket_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.samplepacket_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_samplepacket_attribute_args')
        if self.samplepacket_id is not None:
            oprot.writeFieldBegin('samplepacket_id', TType.I64, 1)
            oprot.writeI64(self.samplepacket_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_samplepacket_attribute_args)
sai_thrift_set_samplepacket_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'samplepacket_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_samplepacket_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_samplepacket_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_samplepacket_attribute_result)
sai_thrift_set_samplepacket_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_tunnel_map_entry_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype857, _size854) = iprot.readListBegin()
                    for _i858 in range(_size854):
                        _elem859 = sai_thrift_attribute_t()
                        _elem859.read(iprot)
                        self.thrift_attr_list.append(_elem859)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_map_entry_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter860 in self.thrift_attr_list:
                iter860.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_map_entry_args)
sai_thrift_create_tunnel_map_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tunnel_map_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_map_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_map_entry_result)
sai_thrift_create_tunnel_map_entry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_tunnel_map_entry_args(object):
    """
    Attributes:
     - tunnel_map_entry_id

    """


    def __init__(self, tunnel_map_entry_id=None,):
        self.tunnel_map_entry_id = tunnel_map_entry_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_map_entry_args')
        if self.tunnel_map_entry_id is not None:
            oprot.writeFieldBegin('tunnel_map_entry_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_entry_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_map_entry_args)
sai_thrift_remove_tunnel_map_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_entry_id', None, None, ),  # 1
)


class sai_thrift_remove_tunnel_map_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_map_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_map_entry_result)
sai_thrift_remove_tunnel_map_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_tunnel_map_entry_attribute_args(object):
    """
    Attributes:
     - tunnel_map_entry_id

    """


    def __init__(self, tunnel_map_entry_id=None,):
        self.tunnel_map_entry_id = tunnel_map_entry_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_map_entry_attribute_args')
        if self.tunnel_map_entry_id is not None:
            oprot.writeFieldBegin('tunnel_map_entry_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_entry_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_map_entry_attribute_args)
sai_thrift_get_tunnel_map_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_entry_id', None, None, ),  # 1
)


class sai_thrift_get_tunnel_map_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_map_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_map_entry_attribute_result)
sai_thrift_get_tunnel_map_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_tunnel_map_entry_attribute_args(object):
    """
    Attributes:
     - tunnel_map_entry_id
     - thrift_attr

    """


    def __init__(self, tunnel_map_entry_id=None, thrift_attr=None,):
        self.tunnel_map_entry_id = tunnel_map_entry_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_map_entry_attribute_args')
        if self.tunnel_map_entry_id is not None:
            oprot.writeFieldBegin('tunnel_map_entry_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_entry_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_map_entry_attribute_args)
sai_thrift_set_tunnel_map_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_entry_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tunnel_map_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_map_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_map_entry_attribute_result)
sai_thrift_set_tunnel_map_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_tunnel_map_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype864, _size861) = iprot.readListBegin()
                    for _i865 in range(_size861):
                        _elem866 = sai_thrift_attribute_t()
                        _elem866.read(iprot)
                        self.thrift_attr_list.append(_elem866)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_map_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter867 in self.thrift_attr_list:
                iter867.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_map_args)
sai_thrift_create_tunnel_map_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tunnel_map_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_map_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_map_result)
sai_thrift_create_tunnel_map_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_tunnel_map_args(object):
    """
    Attributes:
     - tunnel_map_id

    """


    def __init__(self, tunnel_map_id=None,):
        self.tunnel_map_id = tunnel_map_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_map_args')
        if self.tunnel_map_id is not None:
            oprot.writeFieldBegin('tunnel_map_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_map_args)
sai_thrift_remove_tunnel_map_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_id', None, None, ),  # 1
)


class sai_thrift_remove_tunnel_map_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_map_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_map_result)
sai_thrift_remove_tunnel_map_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_tunnel_map_attribute_args(object):
    """
    Attributes:
     - tunnel_map_id

    """


    def __init__(self, tunnel_map_id=None,):
        self.tunnel_map_id = tunnel_map_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_map_attribute_args')
        if self.tunnel_map_id is not None:
            oprot.writeFieldBegin('tunnel_map_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_map_attribute_args)
sai_thrift_get_tunnel_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_id', None, None, ),  # 1
)


class sai_thrift_get_tunnel_map_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_map_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_map_attribute_result)
sai_thrift_get_tunnel_map_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_tunnel_map_attribute_args(object):
    """
    Attributes:
     - tunnel_map_id
     - thrift_attr

    """


    def __init__(self, tunnel_map_id=None, thrift_attr=None,):
        self.tunnel_map_id = tunnel_map_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_map_attribute_args')
        if self.tunnel_map_id is not None:
            oprot.writeFieldBegin('tunnel_map_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_map_attribute_args)
sai_thrift_set_tunnel_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tunnel_map_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_map_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_map_attribute_result)
sai_thrift_set_tunnel_map_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_tunnel_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype871, _size868) = iprot.readListBegin()
                    for _i872 in range(_size868):
                        _elem873 = sai_thrift_attribute_t()
                        _elem873.read(iprot)
                        self.thrift_attr_list.append(_elem873)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter874 in self.thrift_attr_list:
                iter874.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_args)
sai_thrift_create_tunnel_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tunnel_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_result)
sai_thrift_create_tunnel_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_tunnel_args(object):
    """
    Attributes:
     - tunnel_id

    """


    def __init__(self, tunnel_id=None,):
        self.tunnel_id = tunnel_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_args')
        if self.tunnel_id is not None:
            oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_args)
sai_thrift_remove_tunnel_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_id', None, None, ),  # 1
)


class sai_thrift_remove_tunnel_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_result)
sai_thrift_remove_tunnel_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_tunnel_attribute_args(object):
    """
    Attributes:
     - tunnel_id
     - thrift_attr_ids

    """


    def __init__(self, tunnel_id=None, thrift_attr_ids=None,):
        self.tunnel_id = tunnel_id
        self.thrift_attr_ids = thrift_attr_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_ids = []
                    (_etype878, _size875) = iprot.readListBegin()
                    for _i879 in range(_size875):
                        _elem880 = iprot.readI32()
                        self.thrift_attr_ids.append(_elem880)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_attribute_args')
        if self.tunnel_id is not None:
            oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_id)
            oprot.writeFieldEnd()
        if self.thrift_attr_ids is not None:
            oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
            for iter881 in self.thrift_attr_ids:
                oprot.writeI32(iter881)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_attribute_args)
sai_thrift_get_tunnel_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_tunnel_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_attribute_result)
sai_thrift_get_tunnel_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_tunnel_attribute_args(object):
    """
    Attributes:
     - tunnel_id
     - thrift_attr

    """


    def __init__(self, tunnel_id=None, thrift_attr=None,):
        self.tunnel_id = tunnel_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_attribute_args')
        if self.tunnel_id is not None:
            oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_attribute_args)
sai_thrift_set_tunnel_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tunnel_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_attribute_result)
sai_thrift_set_tunnel_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_tunnel_stats_args(object):
    """
    Attributes:
     - tunnel_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, tunnel_id=None, counter_ids=None, number_of_counters=None,):
        self.tunnel_id = tunnel_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype885, _size882) = iprot.readListBegin()
                    for _i886 in range(_size882):
                        _elem887 = iprot.readI32()
                        self.counter_ids.append(_elem887)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_stats_args')
        if self.tunnel_id is not None:
            oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter888 in self.counter_ids:
                oprot.writeI32(iter888)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_stats_args)
sai_thrift_get_tunnel_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_get_tunnel_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype892, _size889) = iprot.readListBegin()
                    for _i893 in range(_size889):
                        _elem894 = iprot.readI64()
                        self.success.append(_elem894)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter895 in self.success:
                oprot.writeI64(iter895)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_stats_result)
sai_thrift_get_tunnel_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_clear_tunnel_stats_args(object):
    """
    Attributes:
     - tunnel_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, tunnel_id=None, counter_ids=None, number_of_counters=None,):
        self.tunnel_id = tunnel_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype899, _size896) = iprot.readListBegin()
                    for _i900 in range(_size896):
                        _elem901 = iprot.readI32()
                        self.counter_ids.append(_elem901)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_tunnel_stats_args')
        if self.tunnel_id is not None:
            oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter902 in self.counter_ids:
                oprot.writeI32(iter902)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_tunnel_stats_args)
sai_thrift_clear_tunnel_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_clear_tunnel_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_tunnel_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_tunnel_stats_result)
sai_thrift_clear_tunnel_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_tunnel_term_table_entry_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype906, _size903) = iprot.readListBegin()
                    for _i907 in range(_size903):
                        _elem908 = sai_thrift_attribute_t()
                        _elem908.read(iprot)
                        self.thrift_attr_list.append(_elem908)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_term_table_entry_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter909 in self.thrift_attr_list:
                iter909.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_term_table_entry_args)
sai_thrift_create_tunnel_term_table_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tunnel_term_table_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_term_table_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_term_table_entry_result)
sai_thrift_create_tunnel_term_table_entry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_tunnel_term_table_entry_args(object):
    """
    Attributes:
     - tunnel_term_table_entry_id

    """


    def __init__(self, tunnel_term_table_entry_id=None,):
        self.tunnel_term_table_entry_id = tunnel_term_table_entry_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_term_table_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_term_table_entry_args')
        if self.tunnel_term_table_entry_id is not None:
            oprot.writeFieldBegin('tunnel_term_table_entry_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_term_table_entry_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_term_table_entry_args)
sai_thrift_remove_tunnel_term_table_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_term_table_entry_id', None, None, ),  # 1
)


class sai_thrift_remove_tunnel_term_table_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_term_table_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_term_table_entry_result)
sai_thrift_remove_tunnel_term_table_entry_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_tunnel_term_table_entry_attribute_args(object):
    """
    Attributes:
     - tunnel_term_table_entry_id
     - thrift_attr_ids

    """


    def __init__(self, tunnel_term_table_entry_id=None, thrift_attr_ids=None,):
        self.tunnel_term_table_entry_id = tunnel_term_table_entry_id
        self.thrift_attr_ids = thrift_attr_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_term_table_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_ids = []
                    (_etype913, _size910) = iprot.readListBegin()
                    for _i914 in range(_size910):
                        _elem915 = iprot.readI32()
                        self.thrift_attr_ids.append(_elem915)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_term_table_entry_attribute_args')
        if self.tunnel_term_table_entry_id is not None:
            oprot.writeFieldBegin('tunnel_term_table_entry_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_term_table_entry_id)
            oprot.writeFieldEnd()
        if self.thrift_attr_ids is not None:
            oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
            for iter916 in self.thrift_attr_ids:
                oprot.writeI32(iter916)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_term_table_entry_attribute_args)
sai_thrift_get_tunnel_term_table_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_term_table_entry_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_tunnel_term_table_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_term_table_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_term_table_entry_attribute_result)
sai_thrift_get_tunnel_term_table_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_set_tunnel_term_table_entry_attribute_args(object):
    """
    Attributes:
     - tunnel_term_table_entry_id
     - thrift_attr

    """


    def __init__(self, tunnel_term_table_entry_id=None, thrift_attr=None,):
        self.tunnel_term_table_entry_id = tunnel_term_table_entry_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_term_table_entry_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_term_table_entry_attribute_args')
        if self.tunnel_term_table_entry_id is not None:
            oprot.writeFieldBegin('tunnel_term_table_entry_id', TType.I64, 1)
            oprot.writeI64(self.tunnel_term_table_entry_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_term_table_entry_attribute_args)
sai_thrift_set_tunnel_term_table_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_term_table_entry_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tunnel_term_table_entry_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_term_table_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_term_table_entry_attribute_result)
sai_thrift_set_tunnel_term_table_entry_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_cpu_packet_attribute_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_cpu_packet_attribute_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_cpu_packet_attribute_args)
sai_thrift_get_cpu_packet_attribute_args.thrift_spec = (
)


class sai_thrift_get_cpu_packet_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_cpu_packet_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_cpu_packet_attribute_result)
sai_thrift_get_cpu_packet_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_cpu_packet_count_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_cpu_packet_count_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_cpu_packet_count_args)
sai_thrift_get_cpu_packet_count_args.thrift_spec = (
)


class sai_thrift_get_cpu_packet_count_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_result_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_cpu_packet_count_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_cpu_packet_count_result)
sai_thrift_get_cpu_packet_count_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_result_t, None], None, ),  # 0
)


class sai_thrift_clear_cpu_packet_info_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_cpu_packet_info_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_cpu_packet_info_args)
sai_thrift_clear_cpu_packet_info_args.thrift_spec = (
)


class sai_thrift_clear_cpu_packet_info_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_result_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_cpu_packet_info_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_cpu_packet_info_result)
sai_thrift_clear_cpu_packet_info_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_result_t, None], None, ),  # 0
)


class sai_thrift_log_set_args(object):
    """
    Attributes:
     - sai_api_id
     - log_level

    """


    def __init__(self, sai_api_id=None, log_level=None,):
        self.sai_api_id = sai_api_id
        self.log_level = log_level

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sai_api_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.log_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_log_set_args')
        if self.sai_api_id is not None:
            oprot.writeFieldBegin('sai_api_id', TType.I32, 1)
            oprot.writeI32(self.sai_api_id)
            oprot.writeFieldEnd()
        if self.log_level is not None:
            oprot.writeFieldBegin('log_level', TType.I32, 2)
            oprot.writeI32(self.log_level)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_log_set_args)
sai_thrift_log_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sai_api_id', None, None, ),  # 1
    (2, TType.I32, 'log_level', None, None, ),  # 2
)


class sai_thrift_log_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_log_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_log_set_result)
sai_thrift_log_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_isolation_group_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype920, _size917) = iprot.readListBegin()
                    for _i921 in range(_size917):
                        _elem922 = sai_thrift_attribute_t()
                        _elem922.read(iprot)
                        self.thrift_attr_list.append(_elem922)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_isolation_group_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter923 in self.thrift_attr_list:
                iter923.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_isolation_group_args)
sai_thrift_create_isolation_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_isolation_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_isolation_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_isolation_group_result)
sai_thrift_create_isolation_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_isolation_group_args(object):
    """
    Attributes:
     - iso_group_oid

    """


    def __init__(self, iso_group_oid=None,):
        self.iso_group_oid = iso_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.iso_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_isolation_group_args')
        if self.iso_group_oid is not None:
            oprot.writeFieldBegin('iso_group_oid', TType.I64, 1)
            oprot.writeI64(self.iso_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_isolation_group_args)
sai_thrift_remove_isolation_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'iso_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_isolation_group_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_isolation_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_isolation_group_result)
sai_thrift_remove_isolation_group_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_isolation_group_member_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype927, _size924) = iprot.readListBegin()
                    for _i928 in range(_size924):
                        _elem929 = sai_thrift_attribute_t()
                        _elem929.read(iprot)
                        self.thrift_attr_list.append(_elem929)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_isolation_group_member_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter930 in self.thrift_attr_list:
                iter930.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_isolation_group_member_args)
sai_thrift_create_isolation_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_isolation_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_isolation_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_isolation_group_member_result)
sai_thrift_create_isolation_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_isolation_group_member_args(object):
    """
    Attributes:
     - member_oid

    """


    def __init__(self, member_oid=None,):
        self.member_oid = member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_isolation_group_member_args')
        if self.member_oid is not None:
            oprot.writeFieldBegin('member_oid', TType.I64, 1)
            oprot.writeI64(self.member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_isolation_group_member_args)
sai_thrift_remove_isolation_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_oid', None, None, ),  # 1
)


class sai_thrift_remove_isolation_group_member_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_isolation_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_isolation_group_member_result)
sai_thrift_remove_isolation_group_member_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_isolation_group_attributes_args(object):
    """
    Attributes:
     - iso_group_oid

    """


    def __init__(self, iso_group_oid=None,):
        self.iso_group_oid = iso_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.iso_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_isolation_group_attributes_args')
        if self.iso_group_oid is not None:
            oprot.writeFieldBegin('iso_group_oid', TType.I64, 1)
            oprot.writeI64(self.iso_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_isolation_group_attributes_args)
sai_thrift_get_isolation_group_attributes_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'iso_group_oid', None, None, ),  # 1
)


class sai_thrift_get_isolation_group_attributes_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_isolation_group_attributes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_isolation_group_attributes_result)
sai_thrift_get_isolation_group_attributes_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_isolation_group_member_attributes_args(object):
    """
    Attributes:
     - member_oid

    """


    def __init__(self, member_oid=None,):
        self.member_oid = member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_isolation_group_member_attributes_args')
        if self.member_oid is not None:
            oprot.writeFieldBegin('member_oid', TType.I64, 1)
            oprot.writeI64(self.member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_isolation_group_member_attributes_args)
sai_thrift_get_isolation_group_member_attributes_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'member_oid', None, None, ),  # 1
)


class sai_thrift_get_isolation_group_member_attributes_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_isolation_group_member_attributes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_isolation_group_member_attributes_result)
sai_thrift_get_isolation_group_member_attributes_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_counter_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype934, _size931) = iprot.readListBegin()
                    for _i935 in range(_size931):
                        _elem936 = sai_thrift_attribute_t()
                        _elem936.read(iprot)
                        self.thrift_attr_list.append(_elem936)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_counter_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter937 in self.thrift_attr_list:
                iter937.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_counter_args)
sai_thrift_create_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_counter_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_counter_result)
sai_thrift_create_counter_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_counter_args(object):
    """
    Attributes:
     - counter_oid

    """


    def __init__(self, counter_oid=None,):
        self.counter_oid = counter_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_counter_args')
        if self.counter_oid is not None:
            oprot.writeFieldBegin('counter_oid', TType.I64, 1)
            oprot.writeI64(self.counter_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_counter_args)
sai_thrift_remove_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_oid', None, None, ),  # 1
)


class sai_thrift_remove_counter_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_counter_result)
sai_thrift_remove_counter_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_counter_attribute_args(object):
    """
    Attributes:
     - thrift_counter_id
     - thrift_attr

    """


    def __init__(self, thrift_counter_id=None, thrift_attr=None,):
        self.thrift_counter_id = thrift_counter_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_counter_attribute_args')
        if self.thrift_counter_id is not None:
            oprot.writeFieldBegin('thrift_counter_id', TType.I64, 1)
            oprot.writeI64(self.thrift_counter_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_counter_attribute_args)
sai_thrift_set_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_counter_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_counter_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_counter_attribute_result)
sai_thrift_set_counter_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_counter_attribute_args(object):
    """
    Attributes:
     - thrift_counter_id

    """


    def __init__(self, thrift_counter_id=None,):
        self.thrift_counter_id = thrift_counter_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_attribute_args')
        if self.thrift_counter_id is not None:
            oprot.writeFieldBegin('thrift_counter_id', TType.I64, 1)
            oprot.writeI64(self.thrift_counter_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_attribute_args)
sai_thrift_get_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_counter_id', None, None, ),  # 1
)


class sai_thrift_get_counter_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_attribute_result)
sai_thrift_get_counter_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_counter_stats_args(object):
    """
    Attributes:
     - counter_id
     - counter_ids
     - number_of_counters

    """


    def __init__(self, counter_id=None, counter_ids=None, number_of_counters=None,):
        self.counter_id = counter_id
        self.counter_ids = counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype941, _size938) = iprot.readListBegin()
                    for _i942 in range(_size938):
                        _elem943 = iprot.readI32()
                        self.counter_ids.append(_elem943)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_stats_args')
        if self.counter_id is not None:
            oprot.writeFieldBegin('counter_id', TType.I64, 1)
            oprot.writeI64(self.counter_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter944 in self.counter_ids:
                oprot.writeI32(iter944)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_stats_args)
sai_thrift_get_counter_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_get_counter_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype948, _size945) = iprot.readListBegin()
                    for _i949 in range(_size945):
                        _elem950 = iprot.readI64()
                        self.success.append(_elem950)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter951 in self.success:
                oprot.writeI64(iter951)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_stats_result)
sai_thrift_get_counter_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_get_counter_stats_ext_args(object):
    """
    Attributes:
     - counter_id
     - counter_ids
     - mode
     - number_of_counters

    """


    def __init__(self, counter_id=None, counter_ids=None, mode=None, number_of_counters=None,):
        self.counter_id = counter_id
        self.counter_ids = counter_ids
        self.mode = mode
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype955, _size952) = iprot.readListBegin()
                    for _i956 in range(_size952):
                        _elem957 = iprot.readI32()
                        self.counter_ids.append(_elem957)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_stats_ext_args')
        if self.counter_id is not None:
            oprot.writeFieldBegin('counter_id', TType.I64, 1)
            oprot.writeI64(self.counter_id)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter958 in self.counter_ids:
                oprot.writeI32(iter958)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 4)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_stats_ext_args)
sai_thrift_get_counter_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_id', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
    (4, TType.I32, 'number_of_counters', None, None, ),  # 4
)


class sai_thrift_get_counter_stats_ext_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype962, _size959) = iprot.readListBegin()
                    for _i963 in range(_size959):
                        _elem964 = iprot.readI64()
                        self.success.append(_elem964)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter965 in self.success:
                oprot.writeI64(iter965)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_stats_ext_result)
sai_thrift_get_counter_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_clear_counter_stats_args(object):
    """
    Attributes:
     - counter_id
     - thrift_counter_ids
     - number_of_counters

    """


    def __init__(self, counter_id=None, thrift_counter_ids=None, number_of_counters=None,):
        self.counter_id = counter_id
        self.thrift_counter_ids = thrift_counter_ids
        self.number_of_counters = number_of_counters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_counter_ids = []
                    (_etype969, _size966) = iprot.readListBegin()
                    for _i970 in range(_size966):
                        _elem971 = iprot.readI32()
                        self.thrift_counter_ids.append(_elem971)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_counters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_counter_stats_args')
        if self.counter_id is not None:
            oprot.writeFieldBegin('counter_id', TType.I64, 1)
            oprot.writeI64(self.counter_id)
            oprot.writeFieldEnd()
        if self.thrift_counter_ids is not None:
            oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
            for iter972 in self.thrift_counter_ids:
                oprot.writeI32(iter972)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_counters is not None:
            oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
            oprot.writeI32(self.number_of_counters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_counter_stats_args)
sai_thrift_clear_counter_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_id', None, None, ),  # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_counters', None, None, ),  # 3
)


class sai_thrift_clear_counter_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_counter_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_counter_stats_result)
sai_thrift_clear_counter_stats_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_debug_counter_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype976, _size973) = iprot.readListBegin()
                    for _i977 in range(_size973):
                        _elem978 = sai_thrift_attribute_t()
                        _elem978.read(iprot)
                        self.thrift_attr_list.append(_elem978)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_debug_counter_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter979 in self.thrift_attr_list:
                iter979.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_debug_counter_args)
sai_thrift_create_debug_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_debug_counter_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_debug_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_debug_counter_result)
sai_thrift_create_debug_counter_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_debug_counter_args(object):
    """
    Attributes:
     - debug_counter_oid

    """


    def __init__(self, debug_counter_oid=None,):
        self.debug_counter_oid = debug_counter_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.debug_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_debug_counter_args')
        if self.debug_counter_oid is not None:
            oprot.writeFieldBegin('debug_counter_oid', TType.I64, 1)
            oprot.writeI64(self.debug_counter_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_debug_counter_args)
sai_thrift_remove_debug_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'debug_counter_oid', None, None, ),  # 1
)


class sai_thrift_remove_debug_counter_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_debug_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_debug_counter_result)
sai_thrift_remove_debug_counter_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_debug_counter_attribute_args(object):
    """
    Attributes:
     - thrift_debug_counter_id
     - thrift_attr

    """


    def __init__(self, thrift_debug_counter_id=None, thrift_attr=None,):
        self.thrift_debug_counter_id = thrift_debug_counter_id
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_debug_counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_debug_counter_attribute_args')
        if self.thrift_debug_counter_id is not None:
            oprot.writeFieldBegin('thrift_debug_counter_id', TType.I64, 1)
            oprot.writeI64(self.thrift_debug_counter_id)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_debug_counter_attribute_args)
sai_thrift_set_debug_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_debug_counter_id', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_debug_counter_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_debug_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_debug_counter_attribute_result)
sai_thrift_set_debug_counter_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_debug_counter_attribute_args(object):
    """
    Attributes:
     - thrift_debug_counter_id

    """


    def __init__(self, thrift_debug_counter_id=None,):
        self.thrift_debug_counter_id = thrift_debug_counter_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.thrift_debug_counter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_debug_counter_attribute_args')
        if self.thrift_debug_counter_id is not None:
            oprot.writeFieldBegin('thrift_debug_counter_id', TType.I64, 1)
            oprot.writeI64(self.thrift_debug_counter_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_debug_counter_attribute_args)
sai_thrift_get_debug_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'thrift_debug_counter_id', None, None, ),  # 1
)


class sai_thrift_get_debug_counter_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_debug_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_debug_counter_attribute_result)
sai_thrift_get_debug_counter_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_nat_args(object):
    """
    Attributes:
     - thrift_nat_entry
     - thrift_attr_list

    """


    def __init__(self, thrift_nat_entry=None, thrift_attr_list=None,):
        self.thrift_nat_entry = thrift_nat_entry
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_nat_entry = sai_thrift_nat_entry_t()
                    self.thrift_nat_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype983, _size980) = iprot.readListBegin()
                    for _i984 in range(_size980):
                        _elem985 = sai_thrift_attribute_t()
                        _elem985.read(iprot)
                        self.thrift_attr_list.append(_elem985)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_nat_args')
        if self.thrift_nat_entry is not None:
            oprot.writeFieldBegin('thrift_nat_entry', TType.STRUCT, 1)
            self.thrift_nat_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter986 in self.thrift_attr_list:
                iter986.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_nat_args)
sai_thrift_create_nat_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_nat_entry', [sai_thrift_nat_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_nat_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_nat_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_nat_result)
sai_thrift_create_nat_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_remove_nat_args(object):
    """
    Attributes:
     - thrift_nat_entry

    """


    def __init__(self, thrift_nat_entry=None,):
        self.thrift_nat_entry = thrift_nat_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_nat_entry = sai_thrift_nat_entry_t()
                    self.thrift_nat_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_nat_args')
        if self.thrift_nat_entry is not None:
            oprot.writeFieldBegin('thrift_nat_entry', TType.STRUCT, 1)
            self.thrift_nat_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_nat_args)
sai_thrift_remove_nat_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_nat_entry', [sai_thrift_nat_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_nat_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_nat_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_nat_result)
sai_thrift_remove_nat_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_nat_attribute_args(object):
    """
    Attributes:
     - thrift_nat_entry
     - thrift_attr

    """


    def __init__(self, thrift_nat_entry=None, thrift_attr=None,):
        self.thrift_nat_entry = thrift_nat_entry
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_nat_entry = sai_thrift_nat_entry_t()
                    self.thrift_nat_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_nat_attribute_args')
        if self.thrift_nat_entry is not None:
            oprot.writeFieldBegin('thrift_nat_entry', TType.STRUCT, 1)
            self.thrift_nat_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_nat_attribute_args)
sai_thrift_set_nat_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_nat_entry', [sai_thrift_nat_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_nat_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_nat_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_nat_attribute_result)
sai_thrift_set_nat_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_nat_attribute_args(object):
    """
    Attributes:
     - thrift_nat_entry

    """


    def __init__(self, thrift_nat_entry=None,):
        self.thrift_nat_entry = thrift_nat_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.thrift_nat_entry = sai_thrift_nat_entry_t()
                    self.thrift_nat_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_nat_attribute_args')
        if self.thrift_nat_entry is not None:
            oprot.writeFieldBegin('thrift_nat_entry', TType.STRUCT, 1)
            self.thrift_nat_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_nat_attribute_args)
sai_thrift_get_nat_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'thrift_nat_entry', [sai_thrift_nat_entry_t, None], None, ),  # 1
)


class sai_thrift_get_nat_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_nat_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_nat_attribute_result)
sai_thrift_get_nat_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_bfd_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype990, _size987) = iprot.readListBegin()
                    for _i991 in range(_size987):
                        _elem992 = sai_thrift_attribute_t()
                        _elem992.read(iprot)
                        self.thrift_attr_list.append(_elem992)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bfd_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter993 in self.thrift_attr_list:
                iter993.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bfd_args)
sai_thrift_create_bfd_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_bfd_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bfd_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bfd_result)
sai_thrift_create_bfd_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_bfd_args(object):
    """
    Attributes:
     - bfd_oid

    """


    def __init__(self, bfd_oid=None,):
        self.bfd_oid = bfd_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bfd_args')
        if self.bfd_oid is not None:
            oprot.writeFieldBegin('bfd_oid', TType.I64, 1)
            oprot.writeI64(self.bfd_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bfd_args)
sai_thrift_remove_bfd_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_oid', None, None, ),  # 1
)


class sai_thrift_remove_bfd_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bfd_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bfd_result)
sai_thrift_remove_bfd_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_bfd_attribute_args(object):
    """
    Attributes:
     - bfd_oid
     - thrift_attr

    """


    def __init__(self, bfd_oid=None, thrift_attr=None,):
        self.bfd_oid = bfd_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bfd_attribute_args')
        if self.bfd_oid is not None:
            oprot.writeFieldBegin('bfd_oid', TType.I64, 1)
            oprot.writeI64(self.bfd_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bfd_attribute_args)
sai_thrift_set_bfd_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_bfd_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bfd_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bfd_attribute_result)
sai_thrift_set_bfd_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_bfd_attribute_args(object):
    """
    Attributes:
     - bfd_oid

    """


    def __init__(self, bfd_oid=None,):
        self.bfd_oid = bfd_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bfd_attribute_args')
        if self.bfd_oid is not None:
            oprot.writeFieldBegin('bfd_oid', TType.I64, 1)
            oprot.writeI64(self.bfd_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bfd_attribute_args)
sai_thrift_get_bfd_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_oid', None, None, ),  # 1
)


class sai_thrift_get_bfd_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bfd_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bfd_attribute_result)
sai_thrift_get_bfd_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_y1731_meg_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype997, _size994) = iprot.readListBegin()
                    for _i998 in range(_size994):
                        _elem999 = sai_thrift_attribute_t()
                        _elem999.read(iprot)
                        self.thrift_attr_list.append(_elem999)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_y1731_meg_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter1000 in self.thrift_attr_list:
                iter1000.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_y1731_meg_args)
sai_thrift_create_y1731_meg_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_y1731_meg_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_y1731_meg_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_y1731_meg_result)
sai_thrift_create_y1731_meg_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_y1731_meg_args(object):
    """
    Attributes:
     - y1731_meg_oid

    """


    def __init__(self, y1731_meg_oid=None,):
        self.y1731_meg_oid = y1731_meg_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_meg_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_y1731_meg_args')
        if self.y1731_meg_oid is not None:
            oprot.writeFieldBegin('y1731_meg_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_meg_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_y1731_meg_args)
sai_thrift_remove_y1731_meg_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_meg_oid', None, None, ),  # 1
)


class sai_thrift_remove_y1731_meg_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_y1731_meg_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_y1731_meg_result)
sai_thrift_remove_y1731_meg_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_y1731_meg_attribute_args(object):
    """
    Attributes:
     - y1731_meg_oid
     - thrift_attr

    """


    def __init__(self, y1731_meg_oid=None, thrift_attr=None,):
        self.y1731_meg_oid = y1731_meg_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_meg_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_y1731_meg_attribute_args')
        if self.y1731_meg_oid is not None:
            oprot.writeFieldBegin('y1731_meg_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_meg_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_y1731_meg_attribute_args)
sai_thrift_set_y1731_meg_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_meg_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_y1731_meg_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_y1731_meg_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_y1731_meg_attribute_result)
sai_thrift_set_y1731_meg_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_y1731_meg_attribute_args(object):
    """
    Attributes:
     - y1731_meg_oid

    """


    def __init__(self, y1731_meg_oid=None,):
        self.y1731_meg_oid = y1731_meg_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_meg_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_y1731_meg_attribute_args')
        if self.y1731_meg_oid is not None:
            oprot.writeFieldBegin('y1731_meg_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_meg_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_y1731_meg_attribute_args)
sai_thrift_get_y1731_meg_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_meg_oid', None, None, ),  # 1
)


class sai_thrift_get_y1731_meg_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_y1731_meg_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_y1731_meg_attribute_result)
sai_thrift_get_y1731_meg_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_y1731_session_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype1004, _size1001) = iprot.readListBegin()
                    for _i1005 in range(_size1001):
                        _elem1006 = sai_thrift_attribute_t()
                        _elem1006.read(iprot)
                        self.thrift_attr_list.append(_elem1006)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_y1731_session_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter1007 in self.thrift_attr_list:
                iter1007.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_y1731_session_args)
sai_thrift_create_y1731_session_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_y1731_session_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_y1731_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_y1731_session_result)
sai_thrift_create_y1731_session_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_y1731_session_args(object):
    """
    Attributes:
     - y1731_session_oid

    """


    def __init__(self, y1731_session_oid=None,):
        self.y1731_session_oid = y1731_session_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_y1731_session_args')
        if self.y1731_session_oid is not None:
            oprot.writeFieldBegin('y1731_session_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_session_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_y1731_session_args)
sai_thrift_remove_y1731_session_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_session_oid', None, None, ),  # 1
)


class sai_thrift_remove_y1731_session_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_y1731_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_y1731_session_result)
sai_thrift_remove_y1731_session_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_y1731_session_attribute_args(object):
    """
    Attributes:
     - y1731_session_oid
     - thrift_attr

    """


    def __init__(self, y1731_session_oid=None, thrift_attr=None,):
        self.y1731_session_oid = y1731_session_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_y1731_session_attribute_args')
        if self.y1731_session_oid is not None:
            oprot.writeFieldBegin('y1731_session_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_session_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_y1731_session_attribute_args)
sai_thrift_set_y1731_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_session_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_y1731_session_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_y1731_session_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_y1731_session_attribute_result)
sai_thrift_set_y1731_session_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_y1731_session_attribute_args(object):
    """
    Attributes:
     - y1731_session_oid

    """


    def __init__(self, y1731_session_oid=None,):
        self.y1731_session_oid = y1731_session_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_y1731_session_attribute_args')
        if self.y1731_session_oid is not None:
            oprot.writeFieldBegin('y1731_session_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_session_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_y1731_session_attribute_args)
sai_thrift_get_y1731_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_session_oid', None, None, ),  # 1
)


class sai_thrift_get_y1731_session_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_y1731_session_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_y1731_session_attribute_result)
sai_thrift_get_y1731_session_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_y1731_rmep_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype1011, _size1008) = iprot.readListBegin()
                    for _i1012 in range(_size1008):
                        _elem1013 = sai_thrift_attribute_t()
                        _elem1013.read(iprot)
                        self.thrift_attr_list.append(_elem1013)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_y1731_rmep_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter1014 in self.thrift_attr_list:
                iter1014.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_y1731_rmep_args)
sai_thrift_create_y1731_rmep_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_y1731_rmep_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_y1731_rmep_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_y1731_rmep_result)
sai_thrift_create_y1731_rmep_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_y1731_rmep_args(object):
    """
    Attributes:
     - y1731_rmep_oid

    """


    def __init__(self, y1731_rmep_oid=None,):
        self.y1731_rmep_oid = y1731_rmep_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_rmep_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_y1731_rmep_args')
        if self.y1731_rmep_oid is not None:
            oprot.writeFieldBegin('y1731_rmep_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_rmep_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_y1731_rmep_args)
sai_thrift_remove_y1731_rmep_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_rmep_oid', None, None, ),  # 1
)


class sai_thrift_remove_y1731_rmep_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_y1731_rmep_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_y1731_rmep_result)
sai_thrift_remove_y1731_rmep_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_y1731_rmep_attribute_args(object):
    """
    Attributes:
     - y1731_rmep_oid
     - thrift_attr

    """


    def __init__(self, y1731_rmep_oid=None, thrift_attr=None,):
        self.y1731_rmep_oid = y1731_rmep_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_rmep_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_y1731_rmep_attribute_args')
        if self.y1731_rmep_oid is not None:
            oprot.writeFieldBegin('y1731_rmep_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_rmep_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_y1731_rmep_attribute_args)
sai_thrift_set_y1731_rmep_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_rmep_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_y1731_rmep_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_y1731_rmep_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_y1731_rmep_attribute_result)
sai_thrift_set_y1731_rmep_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_y1731_rmep_attribute_args(object):
    """
    Attributes:
     - y1731_rmep_oid

    """


    def __init__(self, y1731_rmep_oid=None,):
        self.y1731_rmep_oid = y1731_rmep_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_rmep_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_y1731_rmep_attribute_args')
        if self.y1731_rmep_oid is not None:
            oprot.writeFieldBegin('y1731_rmep_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_rmep_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_y1731_rmep_attribute_args)
sai_thrift_get_y1731_rmep_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_rmep_oid', None, None, ),  # 1
)


class sai_thrift_get_y1731_rmep_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_y1731_rmep_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_y1731_rmep_attribute_result)
sai_thrift_get_y1731_rmep_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_get_y1731_session_lm_stats_args(object):
    """
    Attributes:
     - y1731_session_oid
     - lm_stats_ids
     - number_of_stats

    """


    def __init__(self, y1731_session_oid=None, lm_stats_ids=None, number_of_stats=None,):
        self.y1731_session_oid = y1731_session_oid
        self.lm_stats_ids = lm_stats_ids
        self.number_of_stats = number_of_stats

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.y1731_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.lm_stats_ids = []
                    (_etype1018, _size1015) = iprot.readListBegin()
                    for _i1019 in range(_size1015):
                        _elem1020 = iprot.readI32()
                        self.lm_stats_ids.append(_elem1020)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.number_of_stats = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_y1731_session_lm_stats_args')
        if self.y1731_session_oid is not None:
            oprot.writeFieldBegin('y1731_session_oid', TType.I64, 1)
            oprot.writeI64(self.y1731_session_oid)
            oprot.writeFieldEnd()
        if self.lm_stats_ids is not None:
            oprot.writeFieldBegin('lm_stats_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.lm_stats_ids))
            for iter1021 in self.lm_stats_ids:
                oprot.writeI32(iter1021)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.number_of_stats is not None:
            oprot.writeFieldBegin('number_of_stats', TType.I32, 3)
            oprot.writeI32(self.number_of_stats)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_y1731_session_lm_stats_args)
sai_thrift_get_y1731_session_lm_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'y1731_session_oid', None, None, ),  # 1
    (2, TType.LIST, 'lm_stats_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'number_of_stats', None, None, ),  # 3
)


class sai_thrift_get_y1731_session_lm_stats_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1025, _size1022) = iprot.readListBegin()
                    for _i1026 in range(_size1022):
                        _elem1027 = iprot.readI64()
                        self.success.append(_elem1027)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_y1731_session_lm_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1028 in self.success:
                oprot.writeI64(iter1028)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_y1731_session_lm_stats_result)
sai_thrift_get_y1731_session_lm_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
)


class sai_thrift_create_port_args(object):
    """
    Attributes:
     - port_name
     - thrift_attr_list

    """


    def __init__(self, port_name=None, thrift_attr_list=None,):
        self.port_name = port_name
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.port_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype1032, _size1029) = iprot.readListBegin()
                    for _i1033 in range(_size1029):
                        _elem1034 = sai_thrift_attribute_t()
                        _elem1034.read(iprot)
                        self.thrift_attr_list.append(_elem1034)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_args')
        if self.port_name is not None:
            oprot.writeFieldBegin('port_name', TType.STRING, 1)
            oprot.writeString(self.port_name.encode('utf-8') if sys.version_info[0] == 2 else self.port_name)
            oprot.writeFieldEnd()
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter1035 in self.thrift_attr_list:
                iter1035.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_args)
sai_thrift_create_port_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'port_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_port_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_result)
sai_thrift_create_port_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_port_args(object):
    """
    Attributes:
     - port_oid

    """


    def __init__(self, port_oid=None,):
        self.port_oid = port_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_args')
        if self.port_oid is not None:
            oprot.writeFieldBegin('port_oid', TType.I64, 1)
            oprot.writeI64(self.port_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_args)
sai_thrift_remove_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_oid', None, None, ),  # 1
)


class sai_thrift_remove_port_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_result)
sai_thrift_remove_port_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_create_ptp_domain_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype1039, _size1036) = iprot.readListBegin()
                    for _i1040 in range(_size1036):
                        _elem1041 = sai_thrift_attribute_t()
                        _elem1041.read(iprot)
                        self.thrift_attr_list.append(_elem1041)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ptp_domain_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter1042 in self.thrift_attr_list:
                iter1042.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ptp_domain_args)
sai_thrift_create_ptp_domain_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_ptp_domain_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ptp_domain_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ptp_domain_result)
sai_thrift_create_ptp_domain_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_ptp_domain_args(object):
    """
    Attributes:
     - ptp_oid

    """


    def __init__(self, ptp_oid=None,):
        self.ptp_oid = ptp_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ptp_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ptp_domain_args')
        if self.ptp_oid is not None:
            oprot.writeFieldBegin('ptp_oid', TType.I64, 1)
            oprot.writeI64(self.ptp_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ptp_domain_args)
sai_thrift_remove_ptp_domain_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ptp_oid', None, None, ),  # 1
)


class sai_thrift_remove_ptp_domain_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ptp_domain_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ptp_domain_result)
sai_thrift_remove_ptp_domain_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_ptp_domain_attribute_args(object):
    """
    Attributes:
     - ptp_oid
     - thrift_attr

    """


    def __init__(self, ptp_oid=None, thrift_attr=None,):
        self.ptp_oid = ptp_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ptp_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ptp_domain_attribute_args')
        if self.ptp_oid is not None:
            oprot.writeFieldBegin('ptp_oid', TType.I64, 1)
            oprot.writeI64(self.ptp_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ptp_domain_attribute_args)
sai_thrift_set_ptp_domain_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ptp_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ptp_domain_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ptp_domain_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ptp_domain_attribute_result)
sai_thrift_set_ptp_domain_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_ptp_domain_attribute_args(object):
    """
    Attributes:
     - ptp_oid

    """


    def __init__(self, ptp_oid=None,):
        self.ptp_oid = ptp_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ptp_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ptp_domain_attribute_args')
        if self.ptp_oid is not None:
            oprot.writeFieldBegin('ptp_oid', TType.I64, 1)
            oprot.writeI64(self.ptp_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ptp_domain_attribute_args)
sai_thrift_get_ptp_domain_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ptp_oid', None, None, ),  # 1
)


class sai_thrift_get_ptp_domain_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ptp_domain_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ptp_domain_attribute_result)
sai_thrift_get_ptp_domain_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_synce_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype1046, _size1043) = iprot.readListBegin()
                    for _i1047 in range(_size1043):
                        _elem1048 = sai_thrift_attribute_t()
                        _elem1048.read(iprot)
                        self.thrift_attr_list.append(_elem1048)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_synce_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter1049 in self.thrift_attr_list:
                iter1049.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_synce_args)
sai_thrift_create_synce_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_synce_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_synce_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_synce_result)
sai_thrift_create_synce_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_synce_args(object):
    """
    Attributes:
     - synce_oid

    """


    def __init__(self, synce_oid=None,):
        self.synce_oid = synce_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.synce_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_synce_args')
        if self.synce_oid is not None:
            oprot.writeFieldBegin('synce_oid', TType.I64, 1)
            oprot.writeI64(self.synce_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_synce_args)
sai_thrift_remove_synce_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'synce_oid', None, None, ),  # 1
)


class sai_thrift_remove_synce_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_synce_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_synce_result)
sai_thrift_remove_synce_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_synce_attribute_args(object):
    """
    Attributes:
     - synce_oid
     - thrift_attr

    """


    def __init__(self, synce_oid=None, thrift_attr=None,):
        self.synce_oid = synce_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.synce_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_synce_attribute_args')
        if self.synce_oid is not None:
            oprot.writeFieldBegin('synce_oid', TType.I64, 1)
            oprot.writeI64(self.synce_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_synce_attribute_args)
sai_thrift_set_synce_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'synce_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_synce_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_synce_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_synce_attribute_result)
sai_thrift_set_synce_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_synce_attribute_args(object):
    """
    Attributes:
     - synce_oid

    """


    def __init__(self, synce_oid=None,):
        self.synce_oid = synce_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.synce_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_synce_attribute_args')
        if self.synce_oid is not None:
            oprot.writeFieldBegin('synce_oid', TType.I64, 1)
            oprot.writeI64(self.synce_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_synce_attribute_args)
sai_thrift_get_synce_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'synce_oid', None, None, ),  # 1
)


class sai_thrift_get_synce_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_synce_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_synce_attribute_result)
sai_thrift_get_synce_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_es_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype1053, _size1050) = iprot.readListBegin()
                    for _i1054 in range(_size1050):
                        _elem1055 = sai_thrift_attribute_t()
                        _elem1055.read(iprot)
                        self.thrift_attr_list.append(_elem1055)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_es_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter1056 in self.thrift_attr_list:
                iter1056.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_es_args)
sai_thrift_create_es_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_es_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_es_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_es_result)
sai_thrift_create_es_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_es_args(object):
    """
    Attributes:
     - es_oid

    """


    def __init__(self, es_oid=None,):
        self.es_oid = es_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.es_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_es_args')
        if self.es_oid is not None:
            oprot.writeFieldBegin('es_oid', TType.I64, 1)
            oprot.writeI64(self.es_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_es_args)
sai_thrift_remove_es_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'es_oid', None, None, ),  # 1
)


class sai_thrift_remove_es_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_es_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_es_result)
sai_thrift_remove_es_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_es_attribute_args(object):
    """
    Attributes:
     - es_oid
     - thrift_attr

    """


    def __init__(self, es_oid=None, thrift_attr=None,):
        self.es_oid = es_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.es_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_es_attribute_args')
        if self.es_oid is not None:
            oprot.writeFieldBegin('es_oid', TType.I64, 1)
            oprot.writeI64(self.es_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_es_attribute_args)
sai_thrift_set_es_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'es_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_es_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_es_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_es_attribute_result)
sai_thrift_set_es_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_es_attribute_args(object):
    """
    Attributes:
     - es_oid

    """


    def __init__(self, es_oid=None,):
        self.es_oid = es_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.es_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_es_attribute_args')
        if self.es_oid is not None:
            oprot.writeFieldBegin('es_oid', TType.I64, 1)
            oprot.writeI64(self.es_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_es_attribute_args)
sai_thrift_get_es_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'es_oid', None, None, ),  # 1
)


class sai_thrift_get_es_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_es_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_es_attribute_result)
sai_thrift_get_es_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_monitor_buffer_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype1060, _size1057) = iprot.readListBegin()
                    for _i1061 in range(_size1057):
                        _elem1062 = sai_thrift_attribute_t()
                        _elem1062.read(iprot)
                        self.thrift_attr_list.append(_elem1062)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_monitor_buffer_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter1063 in self.thrift_attr_list:
                iter1063.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_monitor_buffer_args)
sai_thrift_create_monitor_buffer_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_monitor_buffer_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_monitor_buffer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_monitor_buffer_result)
sai_thrift_create_monitor_buffer_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_monitor_buffer_args(object):
    """
    Attributes:
     - monitor_buffer_oid

    """


    def __init__(self, monitor_buffer_oid=None,):
        self.monitor_buffer_oid = monitor_buffer_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.monitor_buffer_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_monitor_buffer_args')
        if self.monitor_buffer_oid is not None:
            oprot.writeFieldBegin('monitor_buffer_oid', TType.I64, 1)
            oprot.writeI64(self.monitor_buffer_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_monitor_buffer_args)
sai_thrift_remove_monitor_buffer_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'monitor_buffer_oid', None, None, ),  # 1
)


class sai_thrift_remove_monitor_buffer_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_monitor_buffer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_monitor_buffer_result)
sai_thrift_remove_monitor_buffer_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_monitor_buffer_attribute_args(object):
    """
    Attributes:
     - monitor_buffer_oid
     - thrift_attr

    """


    def __init__(self, monitor_buffer_oid=None, thrift_attr=None,):
        self.monitor_buffer_oid = monitor_buffer_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.monitor_buffer_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_monitor_buffer_attribute_args')
        if self.monitor_buffer_oid is not None:
            oprot.writeFieldBegin('monitor_buffer_oid', TType.I64, 1)
            oprot.writeI64(self.monitor_buffer_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_monitor_buffer_attribute_args)
sai_thrift_set_monitor_buffer_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'monitor_buffer_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_monitor_buffer_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_monitor_buffer_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_monitor_buffer_attribute_result)
sai_thrift_set_monitor_buffer_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_monitor_buffer_attribute_args(object):
    """
    Attributes:
     - monitor_buffer_oid

    """


    def __init__(self, monitor_buffer_oid=None,):
        self.monitor_buffer_oid = monitor_buffer_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.monitor_buffer_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_monitor_buffer_attribute_args')
        if self.monitor_buffer_oid is not None:
            oprot.writeFieldBegin('monitor_buffer_oid', TType.I64, 1)
            oprot.writeI64(self.monitor_buffer_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_monitor_buffer_attribute_args)
sai_thrift_get_monitor_buffer_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'monitor_buffer_oid', None, None, ),  # 1
)


class sai_thrift_get_monitor_buffer_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_monitor_buffer_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_monitor_buffer_attribute_result)
sai_thrift_get_monitor_buffer_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)


class sai_thrift_create_monitor_latency_args(object):
    """
    Attributes:
     - thrift_attr_list

    """


    def __init__(self, thrift_attr_list=None,):
        self.thrift_attr_list = thrift_attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thrift_attr_list = []
                    (_etype1067, _size1064) = iprot.readListBegin()
                    for _i1068 in range(_size1064):
                        _elem1069 = sai_thrift_attribute_t()
                        _elem1069.read(iprot)
                        self.thrift_attr_list.append(_elem1069)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_monitor_latency_args')
        if self.thrift_attr_list is not None:
            oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
            for iter1070 in self.thrift_attr_list:
                iter1070.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_monitor_latency_args)
sai_thrift_create_monitor_latency_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_monitor_latency_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_monitor_latency_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_monitor_latency_result)
sai_thrift_create_monitor_latency_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_remove_monitor_latency_args(object):
    """
    Attributes:
     - monitor_latency_oid

    """


    def __init__(self, monitor_latency_oid=None,):
        self.monitor_latency_oid = monitor_latency_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.monitor_latency_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_monitor_latency_args')
        if self.monitor_latency_oid is not None:
            oprot.writeFieldBegin('monitor_latency_oid', TType.I64, 1)
            oprot.writeI64(self.monitor_latency_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_monitor_latency_args)
sai_thrift_remove_monitor_latency_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'monitor_latency_oid', None, None, ),  # 1
)


class sai_thrift_remove_monitor_latency_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_monitor_latency_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_monitor_latency_result)
sai_thrift_remove_monitor_latency_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_set_monitor_latency_attribute_args(object):
    """
    Attributes:
     - monitor_latency_oid
     - thrift_attr

    """


    def __init__(self, monitor_latency_oid=None, thrift_attr=None,):
        self.monitor_latency_oid = monitor_latency_oid
        self.thrift_attr = thrift_attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.monitor_latency_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thrift_attr = sai_thrift_attribute_t()
                    self.thrift_attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_monitor_latency_attribute_args')
        if self.monitor_latency_oid is not None:
            oprot.writeFieldBegin('monitor_latency_oid', TType.I64, 1)
            oprot.writeI64(self.monitor_latency_oid)
            oprot.writeFieldEnd()
        if self.thrift_attr is not None:
            oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
            self.thrift_attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_monitor_latency_attribute_args)
sai_thrift_set_monitor_latency_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'monitor_latency_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'thrift_attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_monitor_latency_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_monitor_latency_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_monitor_latency_attribute_result)
sai_thrift_set_monitor_latency_attribute_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_get_monitor_latency_attribute_args(object):
    """
    Attributes:
     - monitor_latency_oid

    """


    def __init__(self, monitor_latency_oid=None,):
        self.monitor_latency_oid = monitor_latency_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.monitor_latency_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_monitor_latency_attribute_args')
        if self.monitor_latency_oid is not None:
            oprot.writeFieldBegin('monitor_latency_oid', TType.I64, 1)
            oprot.writeI64(self.monitor_latency_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_monitor_latency_attribute_args)
sai_thrift_get_monitor_latency_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'monitor_latency_oid', None, None, ),  # 1
)


class sai_thrift_get_monitor_latency_attribute_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_monitor_latency_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_monitor_latency_attribute_result)
sai_thrift_get_monitor_latency_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs

