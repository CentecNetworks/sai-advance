#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class sai_thrift_fdb_entry_t(object):
    """
    Attributes:
     - mac_address
     - bv_id

    """


    def __init__(self, mac_address=None, bv_id=None,):
        self.mac_address = mac_address
        self.bv_id = bv_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mac_address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.bv_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_fdb_entry_t')
        if self.mac_address is not None:
            oprot.writeFieldBegin('mac_address', TType.STRING, 1)
            oprot.writeString(self.mac_address.encode('utf-8') if sys.version_info[0] == 2 else self.mac_address)
            oprot.writeFieldEnd()
        if self.bv_id is not None:
            oprot.writeFieldBegin('bv_id', TType.I64, 2)
            oprot.writeI64(self.bv_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_vlan_port_t(object):
    """
    Attributes:
     - port_id
     - tagging_mode

    """


    def __init__(self, port_id=None, tagging_mode=None,):
        self.port_id = port_id
        self.tagging_mode = tagging_mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.tagging_mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_vlan_port_t')
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 1)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        if self.tagging_mode is not None:
            oprot.writeFieldBegin('tagging_mode', TType.BYTE, 2)
            oprot.writeByte(self.tagging_mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ip_t(object):
    """
    Attributes:
     - ip4
     - ip6

    """


    def __init__(self, ip4=None, ip6=None,):
        self.ip4 = ip4
        self.ip6 = ip6

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ip_t')
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 1)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 2)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ip_address_t(object):
    """
    Attributes:
     - addr_family
     - addr

    """


    def __init__(self, addr_family=None, addr=None,):
        self.addr_family = addr_family
        self.addr = addr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.addr_family = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.addr = sai_thrift_ip_t()
                    self.addr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ip_address_t')
        if self.addr_family is not None:
            oprot.writeFieldBegin('addr_family', TType.BYTE, 1)
            oprot.writeByte(self.addr_family)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRUCT, 2)
            self.addr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ip_prefix_t(object):
    """
    Attributes:
     - addr_family
     - addr
     - mask

    """


    def __init__(self, addr_family=None, addr=None, mask=None,):
        self.addr_family = addr_family
        self.addr = addr
        self.mask = mask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.addr_family = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.addr = sai_thrift_ip_t()
                    self.addr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mask = sai_thrift_ip_t()
                    self.mask.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ip_prefix_t')
        if self.addr_family is not None:
            oprot.writeFieldBegin('addr_family', TType.BYTE, 1)
            oprot.writeByte(self.addr_family)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRUCT, 2)
            self.addr.write(oprot)
            oprot.writeFieldEnd()
        if self.mask is not None:
            oprot.writeFieldBegin('mask', TType.STRUCT, 3)
            self.mask.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_object_list_t(object):
    """
    Attributes:
     - count
     - object_id_list

    """


    def __init__(self, count=None, object_id_list=None,):
        self.count = count
        self.object_id_list = object_id_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.object_id_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI64()
                        self.object_id_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.object_id_list is not None:
            oprot.writeFieldBegin('object_id_list', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.object_id_list))
            for iter6 in self.object_id_list:
                oprot.writeI64(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_vlan_list_t(object):
    """
    Attributes:
     - vlan_count
     - vlan_list

    """


    def __init__(self, vlan_count=None, vlan_list=None,):
        self.vlan_count = vlan_count
        self.vlan_list = vlan_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.vlan_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vlan_list = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI16()
                        self.vlan_list.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_vlan_list_t')
        if self.vlan_count is not None:
            oprot.writeFieldBegin('vlan_count', TType.I32, 1)
            oprot.writeI32(self.vlan_count)
            oprot.writeFieldEnd()
        if self.vlan_list is not None:
            oprot.writeFieldBegin('vlan_list', TType.LIST, 2)
            oprot.writeListBegin(TType.I16, len(self.vlan_list))
            for iter13 in self.vlan_list:
                oprot.writeI16(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_s32_list_t(object):
    """
    Attributes:
     - count
     - s32list

    """


    def __init__(self, count=None, s32list=None,):
        self.count = count
        self.s32list = s32list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.s32list = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI32()
                        self.s32list.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_s32_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.s32list is not None:
            oprot.writeFieldBegin('s32list', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.s32list))
            for iter20 in self.s32list:
                oprot.writeI32(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_status_list_t(object):
    """
    Attributes:
     - count
     - status_list

    """


    def __init__(self, count=None, status_list=None,):
        self.count = count
        self.status_list = status_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.status_list = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readI32()
                        self.status_list.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_status_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.status_list is not None:
            oprot.writeFieldBegin('status_list', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.status_list))
            for iter27 in self.status_list:
                oprot.writeI32(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_route_entry_list_t(object):
    """
    Attributes:
     - count
     - thrift_route_entry_list

    """


    def __init__(self, count=None, thrift_route_entry_list=None,):
        self.count = count
        self.thrift_route_entry_list = thrift_route_entry_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thrift_route_entry_list = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = sai_thrift_route_entry_t()
                        _elem33.read(iprot)
                        self.thrift_route_entry_list.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_route_entry_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.thrift_route_entry_list is not None:
            oprot.writeFieldBegin('thrift_route_entry_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thrift_route_entry_list))
            for iter34 in self.thrift_route_entry_list:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_u8_list_t(object):
    """
    Attributes:
     - count
     - u8list

    """


    def __init__(self, count=None, u8list=None,):
        self.count = count
        self.u8list = u8list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.u8list = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readByte()
                        self.u8list.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_u8_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.u8list is not None:
            oprot.writeFieldBegin('u8list', TType.LIST, 2)
            oprot.writeListBegin(TType.BYTE, len(self.u8list))
            for iter41 in self.u8list:
                oprot.writeByte(iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_s8_list_t(object):
    """
    Attributes:
     - count
     - s8list

    """


    def __init__(self, count=None, s8list=None,):
        self.count = count
        self.s8list = s8list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.s8list = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readByte()
                        self.s8list.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_s8_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.s8list is not None:
            oprot.writeFieldBegin('s8list', TType.LIST, 2)
            oprot.writeListBegin(TType.BYTE, len(self.s8list))
            for iter48 in self.s8list:
                oprot.writeByte(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_u32_list_t(object):
    """
    Attributes:
     - count
     - u32list

    """


    def __init__(self, count=None, u32list=None,):
        self.count = count
        self.u32list = u32list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.u32list = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readI32()
                        self.u32list.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_u32_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.u32list is not None:
            oprot.writeFieldBegin('u32list', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.u32list))
            for iter55 in self.u32list:
                oprot.writeI32(iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_mask_t(object):
    """
    Attributes:
     - u8
     - s8
     - u16
     - s16
     - u32
     - s32
     - mac
     - ip4
     - ip6
     - u8list

    """


    def __init__(self, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, mac=None, ip4=None, ip6=None, u8list=None,):
        self.u8 = u8
        self.s8 = s8
        self.u16 = u16
        self.s16 = s16
        self.u32 = u32
        self.s32 = s32
        self.mac = mac
        self.ip4 = ip4
        self.ip6 = ip6
        self.u8list = u8list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.u8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.s8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.u16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.s16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.u32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.s32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.u8list = sai_thrift_u8_list_t()
                    self.u8list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_mask_t')
        if self.u8 is not None:
            oprot.writeFieldBegin('u8', TType.BYTE, 1)
            oprot.writeByte(self.u8)
            oprot.writeFieldEnd()
        if self.s8 is not None:
            oprot.writeFieldBegin('s8', TType.BYTE, 2)
            oprot.writeByte(self.s8)
            oprot.writeFieldEnd()
        if self.u16 is not None:
            oprot.writeFieldBegin('u16', TType.I16, 3)
            oprot.writeI16(self.u16)
            oprot.writeFieldEnd()
        if self.s16 is not None:
            oprot.writeFieldBegin('s16', TType.I16, 4)
            oprot.writeI16(self.s16)
            oprot.writeFieldEnd()
        if self.u32 is not None:
            oprot.writeFieldBegin('u32', TType.I32, 5)
            oprot.writeI32(self.u32)
            oprot.writeFieldEnd()
        if self.s32 is not None:
            oprot.writeFieldBegin('s32', TType.I32, 6)
            oprot.writeI32(self.s32)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 7)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 8)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 9)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        if self.u8list is not None:
            oprot.writeFieldBegin('u8list', TType.STRUCT, 10)
            self.u8list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_data_t(object):
    """
    Attributes:
     - u8
     - s8
     - u16
     - s16
     - u32
     - s32
     - mac
     - ip4
     - ip6
     - oid
     - objlist
     - u8list

    """


    def __init__(self, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, mac=None, ip4=None, ip6=None, oid=None, objlist=None, u8list=None,):
        self.u8 = u8
        self.s8 = s8
        self.u16 = u16
        self.s16 = s16
        self.u32 = u32
        self.s32 = s32
        self.mac = mac
        self.ip4 = ip4
        self.ip6 = ip6
        self.oid = oid
        self.objlist = objlist
        self.u8list = u8list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.u8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.s8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.u16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.s16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.u32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.s32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.objlist = sai_thrift_object_list_t()
                    self.objlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.u8list = sai_thrift_u8_list_t()
                    self.u8list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_data_t')
        if self.u8 is not None:
            oprot.writeFieldBegin('u8', TType.BYTE, 1)
            oprot.writeByte(self.u8)
            oprot.writeFieldEnd()
        if self.s8 is not None:
            oprot.writeFieldBegin('s8', TType.BYTE, 2)
            oprot.writeByte(self.s8)
            oprot.writeFieldEnd()
        if self.u16 is not None:
            oprot.writeFieldBegin('u16', TType.I16, 3)
            oprot.writeI16(self.u16)
            oprot.writeFieldEnd()
        if self.s16 is not None:
            oprot.writeFieldBegin('s16', TType.I16, 4)
            oprot.writeI16(self.s16)
            oprot.writeFieldEnd()
        if self.u32 is not None:
            oprot.writeFieldBegin('u32', TType.I32, 5)
            oprot.writeI32(self.u32)
            oprot.writeFieldEnd()
        if self.s32 is not None:
            oprot.writeFieldBegin('s32', TType.I32, 6)
            oprot.writeI32(self.s32)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 7)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 8)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 9)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.I64, 10)
            oprot.writeI64(self.oid)
            oprot.writeFieldEnd()
        if self.objlist is not None:
            oprot.writeFieldBegin('objlist', TType.STRUCT, 11)
            self.objlist.write(oprot)
            oprot.writeFieldEnd()
        if self.u8list is not None:
            oprot.writeFieldBegin('u8list', TType.STRUCT, 12)
            self.u8list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_field_data_t(object):
    """
    Attributes:
     - enable
     - mask
     - data

    """


    def __init__(self, enable=None, mask=None, data=None,):
        self.enable = enable
        self.mask = mask
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.mask = sai_thrift_acl_mask_t()
                    self.mask.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.data = sai_thrift_acl_data_t()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_field_data_t')
        if self.enable is not None:
            oprot.writeFieldBegin('enable', TType.BOOL, 1)
            oprot.writeBool(self.enable)
            oprot.writeFieldEnd()
        if self.mask is not None:
            oprot.writeFieldBegin('mask', TType.STRUCT, 2)
            self.mask.write(oprot)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 3)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_parameter_t(object):
    """
    Attributes:
     - u8
     - s8
     - u16
     - s16
     - u32
     - s32
     - mac
     - ip4
     - ip6
     - oid
     - objlist

    """


    def __init__(self, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, mac=None, ip4=None, ip6=None, oid=None, objlist=None,):
        self.u8 = u8
        self.s8 = s8
        self.u16 = u16
        self.s16 = s16
        self.u32 = u32
        self.s32 = s32
        self.mac = mac
        self.ip4 = ip4
        self.ip6 = ip6
        self.oid = oid
        self.objlist = objlist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.u8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.s8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.u16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.s16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.u32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.s32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.objlist = sai_thrift_object_list_t()
                    self.objlist.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_parameter_t')
        if self.u8 is not None:
            oprot.writeFieldBegin('u8', TType.BYTE, 1)
            oprot.writeByte(self.u8)
            oprot.writeFieldEnd()
        if self.s8 is not None:
            oprot.writeFieldBegin('s8', TType.BYTE, 2)
            oprot.writeByte(self.s8)
            oprot.writeFieldEnd()
        if self.u16 is not None:
            oprot.writeFieldBegin('u16', TType.I16, 3)
            oprot.writeI16(self.u16)
            oprot.writeFieldEnd()
        if self.s16 is not None:
            oprot.writeFieldBegin('s16', TType.I16, 4)
            oprot.writeI16(self.s16)
            oprot.writeFieldEnd()
        if self.u32 is not None:
            oprot.writeFieldBegin('u32', TType.I32, 5)
            oprot.writeI32(self.u32)
            oprot.writeFieldEnd()
        if self.s32 is not None:
            oprot.writeFieldBegin('s32', TType.I32, 6)
            oprot.writeI32(self.s32)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 7)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 8)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 9)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.I64, 10)
            oprot.writeI64(self.oid)
            oprot.writeFieldEnd()
        if self.objlist is not None:
            oprot.writeFieldBegin('objlist', TType.STRUCT, 11)
            self.objlist.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_action_data_t(object):
    """
    Attributes:
     - enable
     - parameter

    """


    def __init__(self, enable=None, parameter=None,):
        self.enable = enable
        self.parameter = parameter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.parameter = sai_thrift_acl_parameter_t()
                    self.parameter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_action_data_t')
        if self.enable is not None:
            oprot.writeFieldBegin('enable', TType.BOOL, 1)
            oprot.writeBool(self.enable)
            oprot.writeFieldEnd()
        if self.parameter is not None:
            oprot.writeFieldBegin('parameter', TType.STRUCT, 2)
            self.parameter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_qos_map_params_t(object):
    """
    Attributes:
     - tc
     - dscp
     - dot1p
     - prio
     - pg
     - queue_index
     - color
     - mpls_exp

    """


    def __init__(self, tc=None, dscp=None, dot1p=None, prio=None, pg=None, queue_index=None, color=None, mpls_exp=None,):
        self.tc = tc
        self.dscp = dscp
        self.dot1p = dot1p
        self.prio = prio
        self.pg = pg
        self.queue_index = queue_index
        self.color = color
        self.mpls_exp = mpls_exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.tc = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.dscp = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.dot1p = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.prio = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.pg = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.queue_index = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BYTE:
                    self.color = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BYTE:
                    self.mpls_exp = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_qos_map_params_t')
        if self.tc is not None:
            oprot.writeFieldBegin('tc', TType.BYTE, 1)
            oprot.writeByte(self.tc)
            oprot.writeFieldEnd()
        if self.dscp is not None:
            oprot.writeFieldBegin('dscp', TType.BYTE, 2)
            oprot.writeByte(self.dscp)
            oprot.writeFieldEnd()
        if self.dot1p is not None:
            oprot.writeFieldBegin('dot1p', TType.BYTE, 3)
            oprot.writeByte(self.dot1p)
            oprot.writeFieldEnd()
        if self.prio is not None:
            oprot.writeFieldBegin('prio', TType.BYTE, 4)
            oprot.writeByte(self.prio)
            oprot.writeFieldEnd()
        if self.pg is not None:
            oprot.writeFieldBegin('pg', TType.BYTE, 5)
            oprot.writeByte(self.pg)
            oprot.writeFieldEnd()
        if self.queue_index is not None:
            oprot.writeFieldBegin('queue_index', TType.BYTE, 6)
            oprot.writeByte(self.queue_index)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.BYTE, 7)
            oprot.writeByte(self.color)
            oprot.writeFieldEnd()
        if self.mpls_exp is not None:
            oprot.writeFieldBegin('mpls_exp', TType.BYTE, 8)
            oprot.writeByte(self.mpls_exp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_qos_map_t(object):
    """
    Attributes:
     - key
     - value

    """


    def __init__(self, key=None, value=None,):
        self.key = key
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.key = sai_thrift_qos_map_params_t()
                    self.key.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = sai_thrift_qos_map_params_t()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_qos_map_t')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRUCT, 1)
            self.key.write(oprot)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_qos_map_list_t(object):
    """
    Attributes:
     - count
     - map_list

    """


    def __init__(self, count=None, map_list=None,):
        self.count = count
        self.map_list = map_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.map_list = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = sai_thrift_qos_map_t()
                        _elem61.read(iprot)
                        self.map_list.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_qos_map_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.map_list is not None:
            oprot.writeFieldBegin('map_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.map_list))
            for iter62 in self.map_list:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_u32_range_t(object):
    """
    Attributes:
     - min
     - max

    """


    def __init__(self, min=None, max=None,):
        self.min = min
        self.max = max

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.min = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_u32_range_t')
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.I32, 1)
            oprot.writeI32(self.min)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.I32, 2)
            oprot.writeI32(self.max)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_timeoffset_t(object):
    """
    Attributes:
     - flag
     - value

    """


    def __init__(self, flag=None, value=None,):
        self.flag = flag
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.flag = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_timeoffset_t')
        if self.flag is not None:
            oprot.writeFieldBegin('flag', TType.BYTE, 1)
            oprot.writeByte(self.flag)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I32, 2)
            oprot.writeI32(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_timespec_t(object):
    """
    Attributes:
     - tv_sec
     - tv_nsec

    """


    def __init__(self, tv_sec=None, tv_nsec=None,):
        self.tv_sec = tv_sec
        self.tv_nsec = tv_nsec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tv_sec = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tv_nsec = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_timespec_t')
        if self.tv_sec is not None:
            oprot.writeFieldBegin('tv_sec', TType.I64, 1)
            oprot.writeI64(self.tv_sec)
            oprot.writeFieldEnd()
        if self.tv_nsec is not None:
            oprot.writeFieldBegin('tv_nsec', TType.I32, 2)
            oprot.writeI32(self.tv_nsec)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_captured_timespec_t(object):
    """
    Attributes:
     - timestamp
     - secquence_id
     - port_id

    """


    def __init__(self, timestamp=None, secquence_id=None, port_id=None,):
        self.timestamp = timestamp
        self.secquence_id = secquence_id
        self.port_id = port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.timestamp = sai_thrift_timespec_t()
                    self.timestamp.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.secquence_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_captured_timespec_t')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.STRUCT, 1)
            self.timestamp.write(oprot)
            oprot.writeFieldEnd()
        if self.secquence_id is not None:
            oprot.writeFieldBegin('secquence_id', TType.I16, 2)
            oprot.writeI16(self.secquence_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 3)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attribute_value_t(object):
    """
    Attributes:
     - booldata
     - chardata
     - u8
     - s8
     - u16
     - s16
     - u32
     - s32
     - u64
     - s64
     - mac
     - oid
     - ip4
     - ip6
     - ipaddr
     - objlist
     - vlanlist
     - aclfield
     - aclaction
     - u8list
     - s8list
     - u32list
     - s32list
     - qosmap
     - u32range
     - timeoffset
     - timespec
     - captured_timespec

    """


    def __init__(self, booldata=None, chardata=None, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, u64=None, s64=None, mac=None, oid=None, ip4=None, ip6=None, ipaddr=None, objlist=None, vlanlist=None, aclfield=None, aclaction=None, u8list=None, s8list=None, u32list=None, s32list=None, qosmap=None, u32range=None, timeoffset=None, timespec=None, captured_timespec=None,):
        self.booldata = booldata
        self.chardata = chardata
        self.u8 = u8
        self.s8 = s8
        self.u16 = u16
        self.s16 = s16
        self.u32 = u32
        self.s32 = s32
        self.u64 = u64
        self.s64 = s64
        self.mac = mac
        self.oid = oid
        self.ip4 = ip4
        self.ip6 = ip6
        self.ipaddr = ipaddr
        self.objlist = objlist
        self.vlanlist = vlanlist
        self.aclfield = aclfield
        self.aclaction = aclaction
        self.u8list = u8list
        self.s8list = s8list
        self.u32list = u32list
        self.s32list = s32list
        self.qosmap = qosmap
        self.u32range = u32range
        self.timeoffset = timeoffset
        self.timespec = timespec
        self.captured_timespec = captured_timespec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.booldata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chardata = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.u8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.s8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.u16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.s16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.u32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.s32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.u64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.s64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.ipaddr = sai_thrift_ip_address_t()
                    self.ipaddr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.objlist = sai_thrift_object_list_t()
                    self.objlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.vlanlist = sai_thrift_vlan_list_t()
                    self.vlanlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.aclfield = sai_thrift_acl_field_data_t()
                    self.aclfield.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRUCT:
                    self.aclaction = sai_thrift_acl_action_data_t()
                    self.aclaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.u8list = sai_thrift_u8_list_t()
                    self.u8list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRUCT:
                    self.s8list = sai_thrift_s8_list_t()
                    self.s8list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.u32list = sai_thrift_u32_list_t()
                    self.u32list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRUCT:
                    self.s32list = sai_thrift_s32_list_t()
                    self.s32list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRUCT:
                    self.qosmap = sai_thrift_qos_map_list_t()
                    self.qosmap.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRUCT:
                    self.u32range = sai_thrift_u32_range_t()
                    self.u32range.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRUCT:
                    self.timeoffset = sai_thrift_timeoffset_t()
                    self.timeoffset.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRUCT:
                    self.timespec = sai_thrift_timespec_t()
                    self.timespec.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRUCT:
                    self.captured_timespec = sai_thrift_captured_timespec_t()
                    self.captured_timespec.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attribute_value_t')
        if self.booldata is not None:
            oprot.writeFieldBegin('booldata', TType.BOOL, 1)
            oprot.writeBool(self.booldata)
            oprot.writeFieldEnd()
        if self.chardata is not None:
            oprot.writeFieldBegin('chardata', TType.STRING, 2)
            oprot.writeString(self.chardata.encode('utf-8') if sys.version_info[0] == 2 else self.chardata)
            oprot.writeFieldEnd()
        if self.u8 is not None:
            oprot.writeFieldBegin('u8', TType.BYTE, 3)
            oprot.writeByte(self.u8)
            oprot.writeFieldEnd()
        if self.s8 is not None:
            oprot.writeFieldBegin('s8', TType.BYTE, 4)
            oprot.writeByte(self.s8)
            oprot.writeFieldEnd()
        if self.u16 is not None:
            oprot.writeFieldBegin('u16', TType.I16, 5)
            oprot.writeI16(self.u16)
            oprot.writeFieldEnd()
        if self.s16 is not None:
            oprot.writeFieldBegin('s16', TType.I16, 6)
            oprot.writeI16(self.s16)
            oprot.writeFieldEnd()
        if self.u32 is not None:
            oprot.writeFieldBegin('u32', TType.I32, 7)
            oprot.writeI32(self.u32)
            oprot.writeFieldEnd()
        if self.s32 is not None:
            oprot.writeFieldBegin('s32', TType.I32, 8)
            oprot.writeI32(self.s32)
            oprot.writeFieldEnd()
        if self.u64 is not None:
            oprot.writeFieldBegin('u64', TType.I64, 9)
            oprot.writeI64(self.u64)
            oprot.writeFieldEnd()
        if self.s64 is not None:
            oprot.writeFieldBegin('s64', TType.I64, 10)
            oprot.writeI64(self.s64)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 11)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.I64, 12)
            oprot.writeI64(self.oid)
            oprot.writeFieldEnd()
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 13)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 14)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        if self.ipaddr is not None:
            oprot.writeFieldBegin('ipaddr', TType.STRUCT, 15)
            self.ipaddr.write(oprot)
            oprot.writeFieldEnd()
        if self.objlist is not None:
            oprot.writeFieldBegin('objlist', TType.STRUCT, 16)
            self.objlist.write(oprot)
            oprot.writeFieldEnd()
        if self.vlanlist is not None:
            oprot.writeFieldBegin('vlanlist', TType.STRUCT, 17)
            self.vlanlist.write(oprot)
            oprot.writeFieldEnd()
        if self.aclfield is not None:
            oprot.writeFieldBegin('aclfield', TType.STRUCT, 18)
            self.aclfield.write(oprot)
            oprot.writeFieldEnd()
        if self.aclaction is not None:
            oprot.writeFieldBegin('aclaction', TType.STRUCT, 19)
            self.aclaction.write(oprot)
            oprot.writeFieldEnd()
        if self.u8list is not None:
            oprot.writeFieldBegin('u8list', TType.STRUCT, 20)
            self.u8list.write(oprot)
            oprot.writeFieldEnd()
        if self.s8list is not None:
            oprot.writeFieldBegin('s8list', TType.STRUCT, 21)
            self.s8list.write(oprot)
            oprot.writeFieldEnd()
        if self.u32list is not None:
            oprot.writeFieldBegin('u32list', TType.STRUCT, 22)
            self.u32list.write(oprot)
            oprot.writeFieldEnd()
        if self.s32list is not None:
            oprot.writeFieldBegin('s32list', TType.STRUCT, 23)
            self.s32list.write(oprot)
            oprot.writeFieldEnd()
        if self.qosmap is not None:
            oprot.writeFieldBegin('qosmap', TType.STRUCT, 24)
            self.qosmap.write(oprot)
            oprot.writeFieldEnd()
        if self.u32range is not None:
            oprot.writeFieldBegin('u32range', TType.STRUCT, 25)
            self.u32range.write(oprot)
            oprot.writeFieldEnd()
        if self.timeoffset is not None:
            oprot.writeFieldBegin('timeoffset', TType.STRUCT, 26)
            self.timeoffset.write(oprot)
            oprot.writeFieldEnd()
        if self.timespec is not None:
            oprot.writeFieldBegin('timespec', TType.STRUCT, 27)
            self.timespec.write(oprot)
            oprot.writeFieldEnd()
        if self.captured_timespec is not None:
            oprot.writeFieldBegin('captured_timespec', TType.STRUCT, 28)
            self.captured_timespec.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attribute_t(object):
    """
    Attributes:
     - id
     - value

    """


    def __init__(self, id=None, value=None,):
        self.id = id
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = sai_thrift_attribute_value_t()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attribute_t')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_route_entry_t(object):
    """
    Attributes:
     - vr_id
     - destination

    """


    def __init__(self, vr_id=None, destination=None,):
        self.vr_id = vr_id
        self.destination = destination

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.destination = sai_thrift_ip_prefix_t()
                    self.destination.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_route_entry_t')
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 1)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRUCT, 2)
            self.destination.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_neighbor_entry_t(object):
    """
    Attributes:
     - rif_id
     - ip_address

    """


    def __init__(self, rif_id=None, ip_address=None,):
        self.rif_id = rif_id
        self.ip_address = ip_address

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ip_address = sai_thrift_ip_address_t()
                    self.ip_address.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_neighbor_entry_t')
        if self.rif_id is not None:
            oprot.writeFieldBegin('rif_id', TType.I64, 1)
            oprot.writeI64(self.rif_id)
            oprot.writeFieldEnd()
        if self.ip_address is not None:
            oprot.writeFieldBegin('ip_address', TType.STRUCT, 2)
            self.ip_address.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ipmc_entry_t(object):
    """
    Attributes:
     - vr_id
     - type
     - source
     - destination

    """


    def __init__(self, vr_id=None, type=None, source=None, destination=None,):
        self.vr_id = vr_id
        self.type = type
        self.source = source
        self.destination = destination

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.type = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.source = sai_thrift_ip_address_t()
                    self.source.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.destination = sai_thrift_ip_address_t()
                    self.destination.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ipmc_entry_t')
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 1)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.BYTE, 2)
            oprot.writeByte(self.type)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRUCT, 3)
            self.source.write(oprot)
            oprot.writeFieldEnd()
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRUCT, 4)
            self.destination.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_l2mc_entry_t(object):
    """
    Attributes:
     - bv_id
     - type
     - source
     - destination

    """


    def __init__(self, bv_id=None, type=None, source=None, destination=None,):
        self.bv_id = bv_id
        self.type = type
        self.source = source
        self.destination = destination

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bv_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.type = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.source = sai_thrift_ip_address_t()
                    self.source.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.destination = sai_thrift_ip_address_t()
                    self.destination.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_l2mc_entry_t')
        if self.bv_id is not None:
            oprot.writeFieldBegin('bv_id', TType.I64, 1)
            oprot.writeI64(self.bv_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.BYTE, 2)
            oprot.writeByte(self.type)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRUCT, 3)
            self.source.write(oprot)
            oprot.writeFieldEnd()
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRUCT, 4)
            self.destination.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_mcast_fdb_entry_t(object):
    """
    Attributes:
     - mac_address
     - bv_id

    """


    def __init__(self, mac_address=None, bv_id=None,):
        self.mac_address = mac_address
        self.bv_id = bv_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mac_address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.bv_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_mcast_fdb_entry_t')
        if self.mac_address is not None:
            oprot.writeFieldBegin('mac_address', TType.STRING, 1)
            oprot.writeString(self.mac_address.encode('utf-8') if sys.version_info[0] == 2 else self.mac_address)
            oprot.writeFieldEnd()
        if self.bv_id is not None:
            oprot.writeFieldBegin('bv_id', TType.I64, 2)
            oprot.writeI64(self.bv_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_inseg_entry_t(object):
    """
    Attributes:
     - label

    """


    def __init__(self, label=None,):
        self.label = label

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.label = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_inseg_entry_t')
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.I32, 1)
            oprot.writeI32(self.label)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_nat_entry_t(object):
    """
    Attributes:
     - vr_id
     - source
     - destination
     - proto
     - l4_src_port
     - l4_dst_port
     - source_mask
     - destination_mask
     - proto_mask
     - l4_src_port_mask
     - l4_dst_port_mask

    """


    def __init__(self, vr_id=None, source=None, destination=None, proto=None, l4_src_port=None, l4_dst_port=None, source_mask=None, destination_mask=None, proto_mask=None, l4_src_port_mask=None, l4_dst_port_mask=None,):
        self.vr_id = vr_id
        self.source = source
        self.destination = destination
        self.proto = proto
        self.l4_src_port = l4_src_port
        self.l4_dst_port = l4_dst_port
        self.source_mask = source_mask
        self.destination_mask = destination_mask
        self.proto_mask = proto_mask
        self.l4_src_port_mask = l4_src_port_mask
        self.l4_dst_port_mask = l4_dst_port_mask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.source = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.destination = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.proto = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.l4_src_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.l4_dst_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.source_mask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.destination_mask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I16:
                    self.proto_mask = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.l4_src_port_mask = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.l4_dst_port_mask = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_nat_entry_t')
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 1)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 2)
            oprot.writeString(self.source.encode('utf-8') if sys.version_info[0] == 2 else self.source)
            oprot.writeFieldEnd()
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRING, 3)
            oprot.writeString(self.destination.encode('utf-8') if sys.version_info[0] == 2 else self.destination)
            oprot.writeFieldEnd()
        if self.proto is not None:
            oprot.writeFieldBegin('proto', TType.I16, 4)
            oprot.writeI16(self.proto)
            oprot.writeFieldEnd()
        if self.l4_src_port is not None:
            oprot.writeFieldBegin('l4_src_port', TType.I32, 5)
            oprot.writeI32(self.l4_src_port)
            oprot.writeFieldEnd()
        if self.l4_dst_port is not None:
            oprot.writeFieldBegin('l4_dst_port', TType.I32, 6)
            oprot.writeI32(self.l4_dst_port)
            oprot.writeFieldEnd()
        if self.source_mask is not None:
            oprot.writeFieldBegin('source_mask', TType.STRING, 7)
            oprot.writeString(self.source_mask.encode('utf-8') if sys.version_info[0] == 2 else self.source_mask)
            oprot.writeFieldEnd()
        if self.destination_mask is not None:
            oprot.writeFieldBegin('destination_mask', TType.STRING, 8)
            oprot.writeString(self.destination_mask.encode('utf-8') if sys.version_info[0] == 2 else self.destination_mask)
            oprot.writeFieldEnd()
        if self.proto_mask is not None:
            oprot.writeFieldBegin('proto_mask', TType.I16, 9)
            oprot.writeI16(self.proto_mask)
            oprot.writeFieldEnd()
        if self.l4_src_port_mask is not None:
            oprot.writeFieldBegin('l4_src_port_mask', TType.I32, 10)
            oprot.writeI32(self.l4_src_port_mask)
            oprot.writeFieldEnd()
        if self.l4_dst_port_mask is not None:
            oprot.writeFieldBegin('l4_dst_port_mask', TType.I32, 11)
            oprot.writeI32(self.l4_dst_port_mask)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attribute_list_t(object):
    """
    Attributes:
     - attr_list
     - attr_count
     - status

    """


    def __init__(self, attr_list=None, attr_count=None, status=None,):
        self.attr_list = attr_list
        self.attr_count = attr_count
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = sai_thrift_attribute_t()
                        _elem68.read(iprot)
                        self.attr_list.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attr_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attribute_list_t')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter69 in self.attr_list:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.I32, 2)
            oprot.writeI32(self.attr_count)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_result_data_t(object):
    """
    Attributes:
     - objlist
     - oid
     - u16

    """


    def __init__(self, objlist=None, oid=None, u16=None,):
        self.objlist = objlist
        self.oid = oid
        self.u16 = u16

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.objlist = sai_thrift_object_list_t()
                    self.objlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.u16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_result_data_t')
        if self.objlist is not None:
            oprot.writeFieldBegin('objlist', TType.STRUCT, 1)
            self.objlist.write(oprot)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.I64, 2)
            oprot.writeI64(self.oid)
            oprot.writeFieldEnd()
        if self.u16 is not None:
            oprot.writeFieldBegin('u16', TType.I16, 3)
            oprot.writeI16(self.u16)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_result_t(object):
    """
    Attributes:
     - data
     - status

    """


    def __init__(self, data=None, status=None,):
        self.data = data
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.data = sai_thrift_result_data_t()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_result_t')
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 1)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_results_t(object):
    """
    Attributes:
     - objlist
     - statuslist

    """


    def __init__(self, objlist=None, statuslist=None,):
        self.objlist = objlist
        self.statuslist = statuslist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.objlist = sai_thrift_object_list_t()
                    self.objlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.statuslist = sai_thrift_status_list_t()
                    self.statuslist.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_results_t')
        if self.objlist is not None:
            oprot.writeFieldBegin('objlist', TType.STRUCT, 1)
            self.objlist.write(oprot)
            oprot.writeFieldEnd()
        if self.statuslist is not None:
            oprot.writeFieldBegin('statuslist', TType.STRUCT, 2)
            self.statuslist.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_bulk_attributes_t(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = sai_thrift_attribute_t()
                        _elem75.read(iprot)
                        self.attr_list.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_attributes_t')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter76 in self.attr_list:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_fdb_entry_t)
sai_thrift_fdb_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mac_address', 'UTF8', None, ),  # 1
    (2, TType.I64, 'bv_id', None, None, ),  # 2
)
all_structs.append(sai_thrift_vlan_port_t)
sai_thrift_vlan_port_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_id', None, None, ),  # 1
    (2, TType.BYTE, 'tagging_mode', None, None, ),  # 2
)
all_structs.append(sai_thrift_ip_t)
sai_thrift_ip_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip4', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ip6', 'UTF8', None, ),  # 2
)
all_structs.append(sai_thrift_ip_address_t)
sai_thrift_ip_address_t.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'addr_family', None, None, ),  # 1
    (2, TType.STRUCT, 'addr', [sai_thrift_ip_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_ip_prefix_t)
sai_thrift_ip_prefix_t.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'addr_family', None, None, ),  # 1
    (2, TType.STRUCT, 'addr', [sai_thrift_ip_t, None], None, ),  # 2
    (3, TType.STRUCT, 'mask', [sai_thrift_ip_t, None], None, ),  # 3
)
all_structs.append(sai_thrift_object_list_t)
sai_thrift_object_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'object_id_list', (TType.I64, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_vlan_list_t)
sai_thrift_vlan_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'vlan_count', None, None, ),  # 1
    (2, TType.LIST, 'vlan_list', (TType.I16, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_s32_list_t)
sai_thrift_s32_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 's32list', (TType.I32, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_status_list_t)
sai_thrift_status_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'status_list', (TType.I32, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_route_entry_list_t)
sai_thrift_route_entry_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'thrift_route_entry_list', (TType.STRUCT, [sai_thrift_route_entry_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_u8_list_t)
sai_thrift_u8_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'u8list', (TType.BYTE, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_s8_list_t)
sai_thrift_s8_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 's8list', (TType.BYTE, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_u32_list_t)
sai_thrift_u32_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'u32list', (TType.I32, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_acl_mask_t)
sai_thrift_acl_mask_t.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'u8', None, None, ),  # 1
    (2, TType.BYTE, 's8', None, None, ),  # 2
    (3, TType.I16, 'u16', None, None, ),  # 3
    (4, TType.I16, 's16', None, None, ),  # 4
    (5, TType.I32, 'u32', None, None, ),  # 5
    (6, TType.I32, 's32', None, None, ),  # 6
    (7, TType.STRING, 'mac', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'ip4', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'ip6', 'UTF8', None, ),  # 9
    (10, TType.STRUCT, 'u8list', [sai_thrift_u8_list_t, None], None, ),  # 10
)
all_structs.append(sai_thrift_acl_data_t)
sai_thrift_acl_data_t.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'u8', None, None, ),  # 1
    (2, TType.BYTE, 's8', None, None, ),  # 2
    (3, TType.I16, 'u16', None, None, ),  # 3
    (4, TType.I16, 's16', None, None, ),  # 4
    (5, TType.I32, 'u32', None, None, ),  # 5
    (6, TType.I32, 's32', None, None, ),  # 6
    (7, TType.STRING, 'mac', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'ip4', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'ip6', 'UTF8', None, ),  # 9
    (10, TType.I64, 'oid', None, None, ),  # 10
    (11, TType.STRUCT, 'objlist', [sai_thrift_object_list_t, None], None, ),  # 11
    (12, TType.STRUCT, 'u8list', [sai_thrift_u8_list_t, None], None, ),  # 12
)
all_structs.append(sai_thrift_acl_field_data_t)
sai_thrift_acl_field_data_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'enable', None, None, ),  # 1
    (2, TType.STRUCT, 'mask', [sai_thrift_acl_mask_t, None], None, ),  # 2
    (3, TType.STRUCT, 'data', [sai_thrift_acl_data_t, None], None, ),  # 3
)
all_structs.append(sai_thrift_acl_parameter_t)
sai_thrift_acl_parameter_t.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'u8', None, None, ),  # 1
    (2, TType.BYTE, 's8', None, None, ),  # 2
    (3, TType.I16, 'u16', None, None, ),  # 3
    (4, TType.I16, 's16', None, None, ),  # 4
    (5, TType.I32, 'u32', None, None, ),  # 5
    (6, TType.I32, 's32', None, None, ),  # 6
    (7, TType.STRING, 'mac', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'ip4', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'ip6', 'UTF8', None, ),  # 9
    (10, TType.I64, 'oid', None, None, ),  # 10
    (11, TType.STRUCT, 'objlist', [sai_thrift_object_list_t, None], None, ),  # 11
)
all_structs.append(sai_thrift_acl_action_data_t)
sai_thrift_acl_action_data_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'enable', None, None, ),  # 1
    (2, TType.STRUCT, 'parameter', [sai_thrift_acl_parameter_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_qos_map_params_t)
sai_thrift_qos_map_params_t.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'tc', None, None, ),  # 1
    (2, TType.BYTE, 'dscp', None, None, ),  # 2
    (3, TType.BYTE, 'dot1p', None, None, ),  # 3
    (4, TType.BYTE, 'prio', None, None, ),  # 4
    (5, TType.BYTE, 'pg', None, None, ),  # 5
    (6, TType.BYTE, 'queue_index', None, None, ),  # 6
    (7, TType.BYTE, 'color', None, None, ),  # 7
    (8, TType.BYTE, 'mpls_exp', None, None, ),  # 8
)
all_structs.append(sai_thrift_qos_map_t)
sai_thrift_qos_map_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'key', [sai_thrift_qos_map_params_t, None], None, ),  # 1
    (2, TType.STRUCT, 'value', [sai_thrift_qos_map_params_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_qos_map_list_t)
sai_thrift_qos_map_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'map_list', (TType.STRUCT, [sai_thrift_qos_map_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_u32_range_t)
sai_thrift_u32_range_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'min', None, None, ),  # 1
    (2, TType.I32, 'max', None, None, ),  # 2
)
all_structs.append(sai_thrift_timeoffset_t)
sai_thrift_timeoffset_t.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'flag', None, None, ),  # 1
    (2, TType.I32, 'value', None, None, ),  # 2
)
all_structs.append(sai_thrift_timespec_t)
sai_thrift_timespec_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tv_sec', None, None, ),  # 1
    (2, TType.I32, 'tv_nsec', None, None, ),  # 2
)
all_structs.append(sai_thrift_captured_timespec_t)
sai_thrift_captured_timespec_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'timestamp', [sai_thrift_timespec_t, None], None, ),  # 1
    (2, TType.I16, 'secquence_id', None, None, ),  # 2
    (3, TType.I64, 'port_id', None, None, ),  # 3
)
all_structs.append(sai_thrift_attribute_value_t)
sai_thrift_attribute_value_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'booldata', None, None, ),  # 1
    (2, TType.STRING, 'chardata', 'UTF8', None, ),  # 2
    (3, TType.BYTE, 'u8', None, None, ),  # 3
    (4, TType.BYTE, 's8', None, None, ),  # 4
    (5, TType.I16, 'u16', None, None, ),  # 5
    (6, TType.I16, 's16', None, None, ),  # 6
    (7, TType.I32, 'u32', None, None, ),  # 7
    (8, TType.I32, 's32', None, None, ),  # 8
    (9, TType.I64, 'u64', None, None, ),  # 9
    (10, TType.I64, 's64', None, None, ),  # 10
    (11, TType.STRING, 'mac', 'UTF8', None, ),  # 11
    (12, TType.I64, 'oid', None, None, ),  # 12
    (13, TType.STRING, 'ip4', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'ip6', 'UTF8', None, ),  # 14
    (15, TType.STRUCT, 'ipaddr', [sai_thrift_ip_address_t, None], None, ),  # 15
    (16, TType.STRUCT, 'objlist', [sai_thrift_object_list_t, None], None, ),  # 16
    (17, TType.STRUCT, 'vlanlist', [sai_thrift_vlan_list_t, None], None, ),  # 17
    (18, TType.STRUCT, 'aclfield', [sai_thrift_acl_field_data_t, None], None, ),  # 18
    (19, TType.STRUCT, 'aclaction', [sai_thrift_acl_action_data_t, None], None, ),  # 19
    (20, TType.STRUCT, 'u8list', [sai_thrift_u8_list_t, None], None, ),  # 20
    (21, TType.STRUCT, 's8list', [sai_thrift_s8_list_t, None], None, ),  # 21
    (22, TType.STRUCT, 'u32list', [sai_thrift_u32_list_t, None], None, ),  # 22
    (23, TType.STRUCT, 's32list', [sai_thrift_s32_list_t, None], None, ),  # 23
    (24, TType.STRUCT, 'qosmap', [sai_thrift_qos_map_list_t, None], None, ),  # 24
    (25, TType.STRUCT, 'u32range', [sai_thrift_u32_range_t, None], None, ),  # 25
    (26, TType.STRUCT, 'timeoffset', [sai_thrift_timeoffset_t, None], None, ),  # 26
    (27, TType.STRUCT, 'timespec', [sai_thrift_timespec_t, None], None, ),  # 27
    (28, TType.STRUCT, 'captured_timespec', [sai_thrift_captured_timespec_t, None], None, ),  # 28
)
all_structs.append(sai_thrift_attribute_t)
sai_thrift_attribute_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.STRUCT, 'value', [sai_thrift_attribute_value_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_route_entry_t)
sai_thrift_route_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vr_id', None, None, ),  # 1
    (2, TType.STRUCT, 'destination', [sai_thrift_ip_prefix_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_neighbor_entry_t)
sai_thrift_neighbor_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rif_id', None, None, ),  # 1
    (2, TType.STRUCT, 'ip_address', [sai_thrift_ip_address_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_ipmc_entry_t)
sai_thrift_ipmc_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vr_id', None, None, ),  # 1
    (2, TType.BYTE, 'type', None, None, ),  # 2
    (3, TType.STRUCT, 'source', [sai_thrift_ip_address_t, None], None, ),  # 3
    (4, TType.STRUCT, 'destination', [sai_thrift_ip_address_t, None], None, ),  # 4
)
all_structs.append(sai_thrift_l2mc_entry_t)
sai_thrift_l2mc_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bv_id', None, None, ),  # 1
    (2, TType.BYTE, 'type', None, None, ),  # 2
    (3, TType.STRUCT, 'source', [sai_thrift_ip_address_t, None], None, ),  # 3
    (4, TType.STRUCT, 'destination', [sai_thrift_ip_address_t, None], None, ),  # 4
)
all_structs.append(sai_thrift_mcast_fdb_entry_t)
sai_thrift_mcast_fdb_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mac_address', 'UTF8', None, ),  # 1
    (2, TType.I64, 'bv_id', None, None, ),  # 2
)
all_structs.append(sai_thrift_inseg_entry_t)
sai_thrift_inseg_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'label', None, None, ),  # 1
)
all_structs.append(sai_thrift_nat_entry_t)
sai_thrift_nat_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vr_id', None, None, ),  # 1
    (2, TType.STRING, 'source', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'destination', 'UTF8', None, ),  # 3
    (4, TType.I16, 'proto', None, None, ),  # 4
    (5, TType.I32, 'l4_src_port', None, None, ),  # 5
    (6, TType.I32, 'l4_dst_port', None, None, ),  # 6
    (7, TType.STRING, 'source_mask', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'destination_mask', 'UTF8', None, ),  # 8
    (9, TType.I16, 'proto_mask', None, None, ),  # 9
    (10, TType.I32, 'l4_src_port_mask', None, None, ),  # 10
    (11, TType.I32, 'l4_dst_port_mask', None, None, ),  # 11
)
all_structs.append(sai_thrift_attribute_list_t)
sai_thrift_attribute_list_t.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
    (2, TType.I32, 'attr_count', None, None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)
all_structs.append(sai_thrift_result_data_t)
sai_thrift_result_data_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'objlist', [sai_thrift_object_list_t, None], None, ),  # 1
    (2, TType.I64, 'oid', None, None, ),  # 2
    (3, TType.I16, 'u16', None, None, ),  # 3
)
all_structs.append(sai_thrift_result_t)
sai_thrift_result_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'data', [sai_thrift_result_data_t, None], None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(sai_thrift_results_t)
sai_thrift_results_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'objlist', [sai_thrift_object_list_t, None], None, ),  # 1
    (2, TType.STRUCT, 'statuslist', [sai_thrift_status_list_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_bulk_attributes_t)
sai_thrift_bulk_attributes_t.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
